"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.leadingSpacesCount = leadingSpacesCount;
exports.multiline = multiline;
exports.makeFieldTypeName = makeFieldTypeName;
exports.Writer = void 0;

function leadingSpacesCount(s) {
  let count = 0;

  while (count < s.length && (s[count] === ' ' || s[count] === '\t')) {
    count += 1;
  }

  return count;
}

function multiline(s) {
  s = s.replace("\r\n", "\n").replace("\n\r", "\n").replace("\r", "\n");

  if (!s.startsWith("\n")) {
    return s;
  }

  const lines = s.split("\n");

  if (lines.length < 2) {
    return s;
  }

  let leadingSpacesToRemove = Math.min(...lines.filter(l => l.trim() !== '').map(leadingSpacesCount));

  for (let i = 1; i < lines.length; i += 1) {
    const leadingSpaces = leadingSpacesCount(lines[i]);

    if (leadingSpaces === lines[i].length) {
      lines[i] = '';
    } else if (leadingSpaces >= leadingSpacesToRemove) {
      lines[i] = lines[i].substr(leadingSpacesToRemove);
    }
  }

  if (lines[lines.length - 1] === '') {
    lines.splice(lines.length - 1, 1);
  }

  lines.splice(0, 1);
  return lines.join('\n');
}

class Writer {
  constructor() {
    this.parts = [];
  }

  clear() {
    this.parts = [];
  }

  generated() {
    return this.parts.join('');
  }

  write(...strings) {
    this.parts.push(...strings);
  }

  writeLn(...strings) {
    this.write(...strings, '\n');
  }

  writeBlock(text) {
    this.write(multiline(text));
  }

  writeBlockLn(text) {
    this.writeLn(multiline(text));
  }

}

exports.Writer = Writer;

function convertFirstLetterToUpperCase(s) {
  return s !== '' ? `${s.substr(0, 1).toUpperCase()}${s.substr(1)}` : s;
}

function convertFirstLetterToLowerCase(s) {
  return s !== '' ? `${s.substr(0, 1).toLowerCase()}${s.substr(1)}` : s;
}

function toPascalStyle(s) {
  return s.split('_').map(convertFirstLetterToUpperCase).join('');
}

function toCamelStyle(s) {
  return convertFirstLetterToLowerCase(toPascalStyle(s));
}

function makeFieldTypeName(typeName, fieldName) {
  return `${typeName}${toPascalStyle(fieldName)}`;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9tYWludGFuYW5jZS9nZW4tZ3JhcGhxbC9nZW4uanMiXSwibmFtZXMiOlsibGVhZGluZ1NwYWNlc0NvdW50IiwicyIsImNvdW50IiwibGVuZ3RoIiwibXVsdGlsaW5lIiwicmVwbGFjZSIsInN0YXJ0c1dpdGgiLCJsaW5lcyIsInNwbGl0IiwibGVhZGluZ1NwYWNlc1RvUmVtb3ZlIiwiTWF0aCIsIm1pbiIsImZpbHRlciIsImwiLCJ0cmltIiwibWFwIiwiaSIsImxlYWRpbmdTcGFjZXMiLCJzdWJzdHIiLCJzcGxpY2UiLCJqb2luIiwiV3JpdGVyIiwiY29uc3RydWN0b3IiLCJwYXJ0cyIsImNsZWFyIiwiZ2VuZXJhdGVkIiwid3JpdGUiLCJzdHJpbmdzIiwicHVzaCIsIndyaXRlTG4iLCJ3cml0ZUJsb2NrIiwidGV4dCIsIndyaXRlQmxvY2tMbiIsImNvbnZlcnRGaXJzdExldHRlclRvVXBwZXJDYXNlIiwidG9VcHBlckNhc2UiLCJjb252ZXJ0Rmlyc3RMZXR0ZXJUb0xvd2VyQ2FzZSIsInRvTG93ZXJDYXNlIiwidG9QYXNjYWxTdHlsZSIsInRvQ2FtZWxTdHlsZSIsIm1ha2VGaWVsZFR5cGVOYW1lIiwidHlwZU5hbWUiLCJmaWVsZE5hbWUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBTyxTQUFTQSxrQkFBVCxDQUE0QkMsQ0FBNUIsRUFBK0M7QUFDbEQsTUFBSUMsS0FBSyxHQUFHLENBQVo7O0FBQ0EsU0FBT0EsS0FBSyxHQUFHRCxDQUFDLENBQUNFLE1BQVYsS0FBcUJGLENBQUMsQ0FBQ0MsS0FBRCxDQUFELEtBQWEsR0FBYixJQUFvQkQsQ0FBQyxDQUFDQyxLQUFELENBQUQsS0FBYSxJQUF0RCxDQUFQLEVBQW9FO0FBQ2hFQSxJQUFBQSxLQUFLLElBQUksQ0FBVDtBQUNIOztBQUNELFNBQU9BLEtBQVA7QUFDSDs7QUFFTSxTQUFTRSxTQUFULENBQW1CSCxDQUFuQixFQUFzQztBQUN6Q0EsRUFBQUEsQ0FBQyxHQUFHQSxDQUFD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QUFZLENBQVosRUFBZWdCLFdBQWYsRUFBNkIsR0FBRWpDLENBQUMsQ0FBQ2lCLE1BQUYsQ0FBUyxDQUFULENBQVksRUFEN0MsR0FFRGpCLENBRk47QUFHSDs7QUFFRCxTQUFTa0MsNkJBQVQsQ0FBdUNsQyxDQUF2QyxFQUEwRDtBQUN0RCxTQUFPQSxDQUFDLEtBQUssRUFBTixHQUNBLEdBQUVBLENBQUMsQ0FBQ2lCLE1BQUYsQ0FBUyxDQUFULEVBQVksQ0FBWixFQUFla0IsV0FBZixFQUE2QixHQUFFbkMsQ0FBQyxDQUFDaUIsTUFBRixDQUFTLENBQVQsQ0FBWSxFQUQ3QyxHQUVEakIsQ0FGTjtBQUdIOztBQUVELFNBQVNvQyxhQUFULENBQXVCcEMsQ0FBdkIsRUFBMEM7QUFDdEMsU0FBT0EsQ0FBQyxDQUFDTyxLQUFGLENBQVEsR0FBUixFQUFhTyxHQUFiLENBQWlCa0IsNkJBQWpCLEVBQWdEYixJQUFoRCxDQUFxRCxFQUFyRCxDQUFQO0FBQ0g7O0FBRUQsU0FBU2tCLFlBQVQsQ0FBc0JyQyxDQUF0QixFQUF5QztBQUNyQyxTQUFPa0MsNkJBQTZCLENBQUNFLGFBQWEsQ0FBQ3BDLENBQUQsQ0FBZCxDQUFwQztBQUNIOztBQUVNLFNBQVNzQyxpQkFBVCxDQUEyQkMsUUFBM0IsRUFBNkNDLFNBQTdDLEVBQXdFO0FBQzNFLFNBQVEsR0FBRUQsUUFBUyxHQUFFSCxhQUFhLENBQUNJLFNBQUQsQ0FBWSxFQUE5QztBQUNIIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIGxlYWRpbmdTcGFjZXNDb3VudChzOiBzdHJpbmcpOiBudW1iZXIge1xuICAgIGxldCBjb3VudCA9IDA7XG4gICAgd2hpbGUgKGNvdW50IDwgcy5sZW5ndGggJiYgKHNbY291bnRdID09PSAnICcgfHwgc1tjb3VudF0gPT09ICdcXHQnKSkge1xuICAgICAgICBjb3VudCArPSAxO1xuICAgIH1cbiAgICByZXR1cm4gY291bnQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtdWx0aWxpbmUoczogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBzID0gcy5yZXBsYWNlKFwiXFxyXFxuXCIsIFwiXFxuXCIpLnJlcGxhY2UoXCJcXG5cXHJcIiwgXCJcXG5cIikucmVwbGFjZShcIlxcclwiLCBcIlxcblwiKTtcbiAgICBpZiAoIXMuc3RhcnRzV2l0aChcIlxcblwiKSkge1xuICAgICAgICByZXR1cm4gcztcbiAgICB9XG4gICAgY29uc3QgbGluZXM6IHN0cmluZ1tdID0gcy5zcGxpdChcIlxcblwiKTtcbiAgICBpZiAobGluZXMubGVuZ3RoIDwgMikge1xuICAgICAgICByZXR1cm4gcztcbiAgICB9XG4gICAgbGV0IGxlYWRpbmdTcGFjZXNUb1JlbW92ZSA9IE1hdGgubWluKC4uLmxpbmVzLmZpbHRlcihsID0+IGwudHJpbSgpICE9PSAnJykubWFwKGxlYWRpbmdTcGFjZXNDb3VudCkpO1xuICAgIGZvciAobGV0IGkgPSAxOyBpIDwgbGluZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgY29uc3QgbGVhZGluZ1NwYWNlcyA9IGxlYWRpbmdTcGFjZXNDb3VudChsaW5lc1tpXSk7XG4gICAgICAgIGlmIChsZWFkaW5nU3BhY2VzID09PSBsaW5lc1tpXS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGxpbmVzW2ldID0gJyc7XG4gICAgICAgIH0gZWxzZSBpZiAobGVhZGluZ1NwYWNlcyA+PSBsZWFkaW5nU3BhY2VzVG9SZW1vdmUpIHtcbiAgICAgICAgICAgIGxpbmVzW2ldID0gbGluZXNbaV0uc3Vic3RyKGxlYWRpbmdTcGFjZXNUb1JlbW92ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGxpbmVzW2xpbmVzLmxlbmd0aCAtIDFdID09PSAnJykge1xuICAgICAgICBsaW5lcy5zcGxpY2UobGluZXMubGVuZ3RoIC0gMSwgMSk7XG4gICAgfVxuICAgIGxpbmVzLnNwbGljZSgwLCAxKTtcbiAgICByZXR1cm4gbGluZXMuam9pbignXFxuJyk7XG5cbn1cblxuXG5leHBvcnQgY2xhc3MgV3JpdGVyIHtcbiAgICBwYXJ0czogc3RyaW5nW107XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5wYXJ0cyA9IFtdO1xuICAgIH1cblxuICAgIGNsZWFyKCkge1xuICAgICAgICB0aGlzLnBhcnRzID0gW107XG4gICAgfVxuXG4gICAgZ2VuZXJhdGVkKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnRzLmpvaW4oJycpO1xuICAgIH1cblxuICAgIHdyaXRlKC4uLnN0cmluZ3M6IHN0cmluZ1tdKSB7XG4gICAgICAgIHRoaXMucGFydHMucHVzaCguLi5zdHJpbmdzKTtcbiAgICB9XG5cbiAgICB3cml0ZUxuKC4uLnN0cmluZ3M6IHN0cmluZ1tdKSB7XG4gICAgICAgIHRoaXMud3JpdGUoLi4uc3RyaW5ncywgJ1xcbicpO1xuICAgIH1cblxuICAgIHdyaXRlQmxvY2sodGV4dDogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMud3JpdGUobXVsdGlsaW5lKHRleHQpKTtcbiAgICB9XG4gICAgd3JpdGVCbG9ja0xuKHRleHQ6IHN0cmluZykge1xuICAgICAgICB0aGlzLndyaXRlTG4obXVsdGlsaW5lKHRleHQpKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGNvbnZlcnRGaXJzdExldHRlclRvVXBwZXJDYXNlKHM6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHMgIT09ICcnXG4gICAgICAgID8gYCR7cy5zdWJzdHIoMCwgMSkudG9VcHBlckNhc2UoKX0ke3Muc3Vic3RyKDEpfWBcbiAgICAgICAgOiBzO1xufVxuXG5mdW5jdGlvbiBjb252ZXJ0Rmlyc3RMZXR0ZXJUb0xvd2VyQ2FzZShzOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiBzICE9PSAnJ1xuICAgICAgICA/IGAke3Muc3Vic3RyKDAsIDEpLnRvTG93ZXJDYXNlKCl9JHtzLnN1YnN0cigxKX1gXG4gICAgICAgIDogcztcbn1cblxuZnVuY3Rpb24gdG9QYXNjYWxTdHlsZShzOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiBzLnNwbGl0KCdfJykubWFwKGNvbnZlcnRGaXJzdExldHRlclRvVXBwZXJDYXNlKS5qb2luKCcnKTtcbn1cblxuZnVuY3Rpb24gdG9DYW1lbFN0eWxlKHM6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGNvbnZlcnRGaXJzdExldHRlclRvTG93ZXJDYXNlKHRvUGFzY2FsU3R5bGUocykpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbWFrZUZpZWxkVHlwZU5hbWUodHlwZU5hbWU6IHN0cmluZywgZmllbGROYW1lOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiBgJHt0eXBlTmFtZX0ke3RvUGFzY2FsU3R5bGUoZmllbGROYW1lKX1gO1xufVxuIl19