"use strict";

var _config = require("../../server/config");

const captions = ['Option', 'ENV', 'Default', 'Description'];
const widths = [0, 0, 0, 0];
const rows = Object.values(_config.programOptions).map(x => [x.option, x.env, x.def, x.description]);
const MAX_WIDTH = 80;

function adjustWidths(row) {
  for (let i = 0; i < row.length; i += 1) {
    const width = breakWords(row[i], MAX_WIDTH).reduce((w, s) => Math.max(w, s.length), 0);

    if (width > widths[i]) {
      widths[i] = width;
    }
  }
}

function breakWords(s, width) {
  const words = s.split(' ');
  let result = [];
  let line = '';
  words.forEach(w => {
    if (line.length + w.length > width) {
      result.push(line);
      line = '';
    }

    if (line !== '') {
      line += ' ';
    }

    line += w;
  });

  if (line !== '') {
    result.push(line);
  }

  return result;
}

function printLine(columns, row) {
  const line = columns.map(x => row < x.length ? x[row] : '').map((x, i) => x.padEnd(widths[i])).join('  ');

  if (line.trim().length === 0) {
    return false;
  }

  console.log(line.trim());
  return true;
}

function printRow(row) {
  const columns = row.map((x, i) => breakWords(x, widths[i]));
  let i = 0;

  while (printLine(columns, i)) {
    i += 1;
  }
}

adjustWidths(captions);
rows.forEach(adjustWidths);
printRow(captions);
printRow(widths.map(x => '-'.repeat(x)));
rows.forEach(row => {
  printRow(row);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9tYWludGFuYW5jZS9kb2Mtb3B0aW9ucy9pbmRleC5qcyJdLCJuYW1lcyI6WyJjYXB0aW9ucyIsIndpZHRocyIsInJvd3MiLCJPYmplY3QiLCJ2YWx1ZXMiLCJwcm9ncmFtT3B0aW9ucyIsIm1hcCIsIngiLCJvcHRpb24iLCJlbnYiLCJkZWYiLCJkZXNjcmlwdGlvbiIsIk1BWF9XSURUSCIsImFkanVzdFdpZHRocyIsInJvdyIsImkiLCJsZW5ndGgiLCJ3aWR0aCIsImJyZWFrV29yZHMiLCJyZWR1Y2UiLCJ3IiwicyIsIk1hdGgiLCJtYXgiLCJ3b3JkcyIsInNwbGl0IiwicmVzdWx0IiwibGluZSIsImZvckVhY2giLCJwdXNoIiwicHJpbnRMaW5lIiwiY29sdW1ucyIsInBhZEVuZCIsImpvaW4iLCJ0cmltIiwiY29uc29sZSIsImxvZyIsInByaW50Um93IiwicmVwZWF0Il0sIm1hcHBpbmdzIjoiOztBQUFBOztBQUVBLE1BQU1BLFFBQVEsR0FBRyxDQUFDLFFBQUQsRUFBVyxLQUFYLEVBQWtCLFNBQWxCLEVBQTZCLGFBQTdCLENBQWpCO0FBQ0EsTUFBTUMsTUFBTSxHQUFHLENBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxDQUFQLEVBQVUsQ0FBVixDQUFmO0FBQ0EsTUFBTUMsSUFBZ0IsR0FBR0MsTUFBTSxDQUFDQyxNQUFQLENBQWNDLHNCQUFkLEVBQThCQyxHQUE5QixDQUFrQ0MsQ0FBQyxJQUFJLENBQUNBLENBQUMsQ0FBQ0MsTUFBSCxFQUFXRCxDQUFDLENBQUNFLEdBQWIsRUFBa0JGLENBQUMsQ0FBQ0csR0FBcEIsRUFBeUJILENBQUMsQ0FBQ0ksV0FBM0IsQ0FBdkMsQ0FBekI7QUFFQSxNQUFNQyxTQUFTLEdBQUcsRUFBbEI7O0FBRUEsU0FBU0MsWUFBVCxDQUFzQkMsR0FBdEIsRUFBcUM7QUFDakMsT0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHRCxHQUFHLENBQUNFLE1BQXhCLEVBQWdDRCxDQUFD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QUFMLENBQWNkLEdBQUQsSUFBUztBQUNsQnVCLEVBQUFBLFFBQVEsQ0FBQ3ZCLEdBQUQsQ0FBUjtBQUNILENBRkQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBwcm9ncmFtT3B0aW9ucyB9IGZyb20gJy4uLy4uL3NlcnZlci9jb25maWcnO1xuXG5jb25zdCBjYXB0aW9ucyA9IFsnT3B0aW9uJywgJ0VOVicsICdEZWZhdWx0JywgJ0Rlc2NyaXB0aW9uJ107XG5jb25zdCB3aWR0aHMgPSBbMCwgMCwgMCwgMF07XG5jb25zdCByb3dzOiBzdHJpbmdbXVtdID0gT2JqZWN0LnZhbHVlcyhwcm9ncmFtT3B0aW9ucykubWFwKHggPT4gW3gub3B0aW9uLCB4LmVudiwgeC5kZWYsIHguZGVzY3JpcHRpb25dKTtcblxuY29uc3QgTUFYX1dJRFRIID0gODA7XG5cbmZ1bmN0aW9uIGFkanVzdFdpZHRocyhyb3c6IHN0cmluZ1tdKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCByb3cubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgY29uc3Qgd2lkdGggPSBicmVha1dvcmRzKHJvd1tpXSwgTUFYX1dJRFRIKS5yZWR1Y2UoKHcsIHMpID0+IE1hdGgubWF4KHcsIHMubGVuZ3RoKSwgMCk7XG4gICAgICAgIGlmICh3aWR0aCA+IHdpZHRoc1tpXSkge1xuICAgICAgICAgICAgd2lkdGhzW2ldID0gd2lkdGg7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIGJyZWFrV29yZHMoczogc3RyaW5nLCB3aWR0aDogbnVtYmVyKTogc3RyaW5nW10ge1xuICAgIGNvbnN0IHdvcmRzID0gcy5zcGxpdCgnICcpO1xuICAgIGxldCByZXN1bHQgPSBbXTtcbiAgICBsZXQgbGluZSA9ICcnO1xuICAgIHdvcmRzLmZvckVhY2goKHcpID0+IHtcbiAgICAgICAgaWYgKGxpbmUubGVuZ3RoICsgdy5sZW5ndGggPiB3aWR0aCkge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2gobGluZSk7XG4gICAgICAgICAgICBsaW5lID0gJyc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxpbmUgIT09ICcnKSB7XG4gICAgICAgICAgICBsaW5lICs9ICcgJztcbiAgICAgICAgfVxuICAgICAgICBsaW5lICs9IHc7XG4gICAgfSk7XG4gICAgaWYgKGxpbmUgIT09ICcnKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKGxpbmUpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBwcmludExpbmUoY29sdW1uczogc3RyaW5nW11bXSwgcm93OiBudW1iZXIpOiBib29sZWFuIHtcbiAgICBjb25zdCBsaW5lID0gY29sdW1uc1xuICAgICAgICAubWFwKHggPT4gcm93IDwgeC5sZW5ndGggPyB4W3Jvd10gOiAnJylcbiAgICAgICAgLm1hcCgoeCwgaSkgPT4geC5wYWRFbmQod2lkdGhzW2ldKSlcbiAgICAgICAgLmpvaW4oJyAgJyk7XG4gICAgaWYgKGxpbmUudHJpbSgpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNvbnNvbGUubG9nKGxpbmUudHJpbSgpKTtcbiAgICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gcHJpbnRSb3cocm93OiBzdHJpbmdbXSkge1xuICAgIGNvbnN0IGNvbHVtbnM6IHN0cmluZ1tdW10gPSByb3cubWFwKCh4LCBpKSA9PiBicmVha1dvcmRzKHgsIHdpZHRoc1tpXSkpO1xuICAgIGxldCBpID0gMDtcbiAgICB3aGlsZSAocHJpbnRMaW5lKGNvbHVtbnMsIGkpKSB7XG4gICAgICAgIGkgKz0gMTtcbiAgICB9XG59XG5cbmFkanVzdFdpZHRocyhjYXB0aW9ucyk7XG5yb3dzLmZvckVhY2goYWRqdXN0V2lkdGhzKTtcblxucHJpbnRSb3coY2FwdGlvbnMpO1xucHJpbnRSb3cod2lkdGhzLm1hcCh4ID0+ICctJy5yZXBlYXQoeCkpKTtcbnJvd3MuZm9yRWFjaCgocm93KSA9PiB7XG4gICAgcHJpbnRSb3cocm93KTtcbn0pO1xuXG4iXX0=