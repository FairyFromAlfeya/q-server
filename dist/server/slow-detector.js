"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isFastQuery = isFastQuery;

var _dbTypes = require("./db-types");

function isSubSet(subSet, superSet) {
  for (const e of subSet) {
    if (!superSet.has(e)) {
      return false;
    }
  }

  return true;
}

const eqOp = new Set(['==']);
const neOp = new Set(['!=']);
const cmpOp = new Set(['>', '<', '>=', '<=']);

function canUseIndexedRange(ops) {
  return isSubSet(ops, eqOp) || isSubSet(ops, neOp) || isSubSet(ops, cmpOp);
}

function isFastQuery(collection, type, filter, orderBy) {
  const params = new _dbTypes.QParams({
    explain: true
  });
  type.ql(params, '', filter);
  const usedIndexes = collection.indexes.map(x => x.join(','));

  if (params.explanation) {
    const fields = [];

    for (const [field, explanation] of params.explanation.fields) {
      if (field !== 'CURRENT' && canUseIndexedRange(explanation.operations)) {
        fields.push(field.slice(1));
      } else {
        fields.length = 0;
        break;
      }
    }

    console.log('>>>', {
      filter,
      fields,
      usedIndexes
    });
  }

  return true;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NlcnZlci9zbG93LWRldGVjdG9yLmpzIl0sIm5hbWVzIjpbImlzU3ViU2V0Iiwic3ViU2V0Iiwic3VwZXJTZXQiLCJlIiwiaGFzIiwiZXFPcCIsIlNldCIsIm5lT3AiLCJjbXBPcCIsImNhblVzZUluZGV4ZWRSYW5nZSIsIm9wcyIsImlzRmFzdFF1ZXJ5IiwiY29sbGVjdGlvbiIsInR5cGUiLCJmaWx0ZXIiLCJvcmRlckJ5IiwicGFyYW1zIiwiUVBhcmFtcyIsImV4cGxhaW4iLCJxbCIsInVzZWRJbmRleGVzIiwiaW5kZXhlcyIsIm1hcCIsIngiLCJqb2luIiwiZXhwbGFuYXRpb24iLCJmaWVsZHMiLCJmaWVsZCIsIm9wZXJhdGlvbnMiLCJwdXNoIiwic2xpY2UiLCJsZW5ndGgiLCJjb25zb2xlIiwibG9nIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBSUE7O0FBR0EsU0FBU0EsUUFBVCxDQUFxQkMsTUFBckIsRUFBcUNDLFFBQXJDLEVBQWdFO0FBQzVELE9BQUssTUFBTUMsQ0FBWCxJQUFnQkYsTUFBaEIsRUFBd0I7QUFDcEIsUUFBSSxDQUFDQyxRQUFRLENBQUNFLEdBQVQsQ0FBYUQsQ0FBYixDQUFMLEVBQXNCO0FBQ2xCLGFBQU8sS0FBUDtBQUNIO0FBQ0o7O0FBQ0QsU0FBTyxJQUFQO0FBQ0g7O0FBRUQsTUFBTUUsSUFBSSxHQUFHLElBQUlDLEdBQUosQ0FBUSxDQUFDLElBQUQsQ0FBUixDQUFiO0FBQ0EsTUFBTUMsSUFBSSxHQUFHLElBQUlELEdBQUosQ0FBUSxDQUFDLElBQUQsQ0FBUixDQUFiO0FBQ0EsTUFBTUUsS0FBSyxHQUFHLElBQUlGLEdBQUosQ0FBUSxDQUFDLEdBQUQsRUFBTSxHQUFOLEVBQVcsSUFBWCxFQUFpQixJQUFqQixDQUFSLENBQWQ7O0FBRUEsU0FBU0csa0JBQVQsQ0FBNEJDLEdBQTVCLEVBQXVEO0FBQ25ELFNBQU9WLFFBQVEsQ0FBQ1UsR0FBRCxFQUFNTCxJQUFOLENBQVIsSUFDQUwsUUFBUSxDQUFDVSxHQUFELEVBQU1ILElBQU4sQ0FEUixJQUVBUCxRQUFRLENBQUNVLEdBQUQsRUFBTUYsS0FBTixDQUZmO0FBR0g7O0FBRU0sU0FBU0csV0FBVCxDQUFxQkMsVUFBckIsRUFBaURDLElBQWpELEVBQThEQyxNQUE5RCxFQUEyRUMsT0FBM0UsRUFBd0c7QUFDM0csUUFBTUMsTUFBTSxHQUFHLElBQUlDLGdCQUFKLENBQVk7QUFDdkJDLElBQUFBLE9BQU8sRUFBRTtBQURjLEdBQVosQ0FBZjtBQUdBTCxFQUFBQSxJQUFJLENBQUNNLEVBQUwsQ0FBUUgsTUFBUixFQUFnQixFQUFoQixFQUFvQkYsTUFBcEI7QUFDQSxRQUFNTSxXQUFXLEdBQUdSLFVBQVUsQ0FBQ1MsT0FBWCxDQUFtQkMsR0FBbkIsQ0FBdUJDLENBQUMsSUFBSUEsQ0FBQyxDQUFDQyxJQUFGLENBQU8sR0FBUCxDQUE1QixDQUFwQjs7QUFDQSxNQUFJUixNQUFNLENBQUNTLFdBQVgsRUFBd0I7QUFDcEIsVUFBTUMsTUFBTSxHQUFHLEVBQWY7O0FBQ0EsU0FBSyxNQUFNLENBQUNDLEtBQUQsRUFBUUYsV0FBUixDQUFYLElBQW1DVCxNQUFNLENBQUNTLFdBQVAsQ0FBbUJDLE1BQXRELEVBQThEO0FBQzFELFVBQ0lDLEtBQUssS0FBSyxTQUFWLElBQ0dsQixrQkFBa0IsQ0FBQ2dCLFdBQVcsQ0FBQ0csVUFBYixDQUZ6QixFQUdFO0FBQ0VGLFFBQUFBLE1BQU0sQ0FBQ0csSUFBUCxDQUFZRixLQUFLLENBQUNHLEtBQU4sQ0FBWSxDQUFaLENBQVo7QUFDSCxPQUxELE1BS087QUFDSEosUUFBQUEsTUFBTSxDQUFDSyxNQUFQLEdBQWdCLENBQWhCO0FBQ0E7QUFDSDtBQUNKOztBQUNEQyxJQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSxLQUFaLEVBQW1CO0FBQ2ZuQixNQUFBQSxNQURlO0FBRWZZLE1BQUFBLE1BRmU7QUFHZk4sTUFBQUE7QUFIZSxLQUFuQjtBQUtIOztBQUNELFNBQU8sSUFBUDtBQUNIIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQGZsb3dcblxuXG5pbXBvcnQgdHlwZSB7IENvbGxlY3Rpb25JbmZvIH0gZnJvbSBcIi4vY29uZmlnXCI7XG5pbXBvcnQgeyBRUGFyYW1zIH0gZnJvbSBcIi4vZGItdHlwZXNcIjtcbmltcG9ydCB0eXBlIHsgT3JkZXJCeSwgUUZpZWxkRXhwbGFuYXRpb24sIFFUeXBlIH0gZnJvbSBcIi4vZGItdHlwZXNcIjtcblxuZnVuY3Rpb24gaXNTdWJTZXQ8VD4oc3ViU2V0OiBTZXQ8VD4sIHN1cGVyU2V0OiBTZXQ8VD4pOiBib29sZWFuIHtcbiAgICBmb3IgKGNvbnN0IGUgb2Ygc3ViU2V0KSB7XG4gICAgICAgIGlmICghc3VwZXJTZXQuaGFzKGUpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG5cbmNvbnN0IGVxT3AgPSBuZXcgU2V0KFsnPT0nXSk7XG5jb25zdCBuZU9wID0gbmV3IFNldChbJyE9J10pO1xuY29uc3QgY21wT3AgPSBuZXcgU2V0KFsnPicsICc8JywgJz49JywgJzw9J10pO1xuXG5mdW5jdGlvbiBjYW5Vc2VJbmRleGVkUmFuZ2Uob3BzOiBTZXQ8c3RyaW5nPik6IGJvb2xlYW4ge1xuICAgIHJldHVybiBpc1N1YlNldChvcHMsIGVxT3ApXG4gICAgICAgIHx8IGlzU3ViU2V0KG9wcywgbmVPcClcbiAgICAgICAgfHwgaXNTdWJTZXQob3BzLCBjbXBPcCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0Zhc3RRdWVyeShjb2xsZWN0aW9uOiBDb2xsZWN0aW9uSW5mbywgdHlwZTogUVR5cGUsIGZpbHRlcjogYW55LCBvcmRlckJ5OiBPcmRlckJ5W10pOiBib29sZWFuIHtcbiAgICBjb25zdCBwYXJhbXMgPSBuZXcgUVBhcmFtcyh7XG4gICAgICAgIGV4cGxhaW46IHRydWUsXG4gICAgfSk7XG4gICAgdHlwZS5xbChwYXJhbXMsICcnLCBmaWx0ZXIpO1xuICAgIGNvbnN0IHVzZWRJbmRleGVzID0gY29sbGVjdGlvbi5pbmRleGVzLm1hcCh4ID0+IHguam9pbignLCcpKTtcbiAgICBpZiAocGFyYW1zLmV4cGxhbmF0aW9uKSB7XG4gICAgICAgIGNvbnN0IGZpZWxkcyA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IFtmaWVsZCwgZXhwbGFuYXRpb25dIG9mIHBhcmFtcy5leHBsYW5hdGlvbi5maWVsZHMpIHtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICBmaWVsZCAhPT0gJ0NVUlJFTlQnXG4gICAgICAgICAgICAgICAgJiYgY2FuVXNlSW5kZXhlZFJhbmdlKGV4cGxhbmF0aW9uLm9wZXJhdGlvbnMpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBmaWVsZHMucHVzaChmaWVsZC5zbGljZSgxKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGZpZWxkcy5sZW5ndGggPSAwO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnNvbGUubG9nKCc+Pj4nLCB7XG4gICAgICAgICAgICBmaWx0ZXIsXG4gICAgICAgICAgICBmaWVsZHMsXG4gICAgICAgICAgICB1c2VkSW5kZXhlcyxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuIl19