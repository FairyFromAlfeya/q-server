"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.INDEXES = void 0;

var _counterparties = require("../graphql/counterparties");

var _data = _interopRequireDefault(require("./data"));

var _collection = require("./collection");

var _resolversGenerated = require("../graphql/resolvers-generated");

var _dataProvider = require("./data-provider");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
 * Copyright 2018-2020 TON DEV SOLUTIONS LTD.
 *
 * Licensed under the SOFTWARE EVALUATION License (the "License"); you may not use
 * this file except in compliance with the License.  You may obtain a copy of the
 * License at:
 *
 * http://www.ton.dev/licenses
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific TON DEV software governing permissions and
 * limitations under the License.
 */
const INDEXES = {
  blocks: {
    indexes: [(0, _dataProvider.sortedIndex)(['seq_no', 'gen_utime']), (0, _dataProvider.sortedIndex)(['gen_utime']), (0, _dataProvider.sortedIndex)(['workchain_id', 'shard', 'seq_no']), (0, _dataProvider.sortedIndex)(['workchain_id', 'shard', 'gen_utime']), (0, _dataProvider.sortedIndex)(['workchain_id', 'seq_no']), (0, _dataProvider.sortedIndex)(['workchain_id', 'gen_utime']), (0, _dataProvider.sortedIndex)(['master.min_shard_gen_utime']), (0, _dataProvider.sortedIndex)(['prev_ref.root_hash', '_key']), (0, _dataProvider.sortedIndex)(['prev_alt_ref.root_hash', '_key'])]
  },
  accounts: {
    indexes: [(0, _dataProvider.sortedIndex)(['last_trans_lt']), (0, _dataProvider.sortedIndex)(['balance'])]
  },
  messages: {
    indexes: [(0, _dataProvider.sortedIndex)(['block_id']), (0, _dataProvider.sortedIndex)(['value', 'created_at']), (0, _dataProvider.sortedIndex)(['src', 'value', 'created_at']), (0, _dataProvider.sortedIndex)(['dst', 'value', 'created_at']), (0, _dataProvider.sortedIndex)(['src', 'created_at']), (0, _dataProvider.sortedIndex)(['dst', 'created_at']), (0, _dataProvider.sortedIndex)(['created_lt']), (0, _dataProvider.sortedIndex)(['created_at'])]
  },
  transactions: {
    indexes: [(0, _dataProvider.sortedIndex)(['block_id']), (0, _dataProvider.sortedIndex)(['in_msg']), (0, _dataProvider.sortedIndex)(['out_msgs[*]']), (0, _dataProvider.sortedIndex)(['account_addr', 'now']), (0, _dataProvider.sortedIndex)(['now']), (0, _dataProvider.sortedIndex)(['lt']), (0, _dataProvider.sortedIndex)(['account_addr', 'orig_status', 'end_status']), (0, _dataProvider.sortedIndex)(['now', 'account_addr', 'lt'])]
  },
  blocks_signatures: {
    indexes: [(0, _dataProvider.sortedIndex)(['signatures[*].node_id', 'gen_utime'])]
  },
  zerostates: {
    indexes: []
  },
  counterparties: {
    indexes: []
  }
};
exports.INDEXES = INDEXES;
Object.values(INDEXES).forEach(collection => {
  collection.indexes = collection.indexes.concat({
    fields: ['_key']
  });
});

class QBlockchainData extends _data.default {
  constructor(options) {
    super(options);

    const add = (name, type, mutable) => {
      return this.addCollection(name, type, mutable, INDEXES[name].indexes);
    };

    this.accounts = add('accounts', _resolversGenerated.Account, _collection.QDataScope.mutable);
    this.transactions = add('transactions', _resolversGenerated.Transaction, _collection.QDataScope.immutable);
    this.messages = add('messages', _resolversGenerated.Message, _collection.QDataScope.immutable);
    this.blocks = add('blocks', _resolversGenerated.Block, _collection.QDataScope.immutable);
    this.blocks_signatures = add('blocks_signatures', _resolversGenerated.BlockSignatures, _collection.QDataScope.immutable);
    this.zerostates = add('zerostates', _resolversGenerated.Zerostate, _collection.QDataScope.immutable);
    this.counterparties = add('counterparties', _counterparties.Counterparty, _collection.QDataScope.counterparties);
    this.latency = {
      blocks: {
        maxTime: 0,
        nextUpdateTime: 0,
        latency: 0
      },
      messages: {
        maxTime: 0,
        nextUpdateTime: 0,
        latency: 0
      },
      transactions: {
        maxTime: 0,
        nextUpdateTime: 0,
        latency: 0
      },
      nextUpdateTime: 0,
      latency: 0,
      lastBlockTime: 0
    };
    this.blocks.docInsertOrUpdate.on("doc", async block => {
      this.updateLatency(this.latency.blocks, block.gen_utime);
    });
    this.transactions.docInsertOrUpdate.on("doc", async tr => {
      this.updateLatency(this.latency.transactions, tr.now);
    });
    this.messages.docInsertOrUpdate.on("doc", async msg => {
      this.updateLatency(this.latency.messages, msg.created_at);
    });
  }

  updateLatency(latency, timeInSeconds) {
    if (this.updateCollectionLatency(latency, timeInSeconds)) {
      this.updateLatencySummary();
    }
  }

  updateCollectionLatency(latency, timeInSeconds) {
    if (timeInSeconds === undefined || timeInSeconds === null || timeInSeconds === 0) {
      return false;
    }

    const time = timeInSeconds * 1000;
    const now = Date.now();

    if (time > latency.maxTime) {
      latency.maxTime = time;
    }

    latency.nextUpdateTime = now + 30000; // LATENCY_UPDATE_FREQUENCY

    latency.latency = Math.max(0, now - latency.maxTime);
    return true;
  }

  updateLatencySummary() {
    const {
      blocks,
      messages,
      transactions
    } = this.latency;
    this.latency.nextUpdateTime = Math.min(blocks.nextUpdateTime, messages.nextUpdateTime, transactions.nextUpdateTime);
    this.latency.latency = Math.max(blocks.latency, messages.latency, transactions.latency);
    this.latency.lastBlockTime = blocks.maxTime;
  }

  async updateMaxTime(latency, collection, field) {
    if (Date.now() <= latency.nextUpdateTime) {
      return false;
    }

    const result = await collection.provider.query(`FOR d IN ${collection.name} SORT d.${field} DESC LIMIT 1 RETURN { maxTime: d.${field} }`, {}, [{
      path: field,
      direction: "DESC"
    }]);
    const maxTime = result && result.length > 0 && result[0] ? result[0].maxTime || 0 : 0;
    return this.updateCollectionLatency(latency, maxTime);
  }

  async getLatency() {
    const latency = this.latency;

    if (Date.now() > latency.nextUpdateTime) {
      let hasUpdates = await this.updateMaxTime(latency.blocks, this.blocks, "gen_utime");

      if (await this.updateMaxTime(latency.messages, this.messages, "created_at")) {
        hasUpdates = true;
      }

      if (await this.updateMaxTime(latency.transactions, this.transactions, "now")) {
        hasUpdates = true;
      }

      if (hasUpdates) {
        this.updateLatencySummary();
      }
    }

    return latency;
  }

}

exports.default = QBlockchainData;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,