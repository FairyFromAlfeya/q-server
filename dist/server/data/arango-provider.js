"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ArangoProvider = void 0;

var _arangochair = _interopRequireDefault(require("arangochair"));

var _arangojs = require("arangojs");

var _events = _interopRequireDefault(require("events"));

var _config = require("../config");

var _data = require("./data");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const DATA_EVENT = 'data';

class ArangoProvider {
  constructor(log, segment, config) {
    this.log = log;
    this.segment = segment;
    this.config = config;
    this.started = false;
    this.arango = new _arangojs.Database({
      url: `${(0, _config.ensureProtocol)(config.server, 'http')}`,
      agentOptions: {
        maxSockets: config.maxSockets
      }
    });
    this.arango.useDatabase(config.name);

    if (config.auth) {
      const authParts = config.auth.split(':');
      this.arango.useBasicAuth(authParts[0], authParts.slice(1).join(':'));
    }

    this.listener = this.createListener();
    this.listenerSubscribers = new _events.default();
    this.listenerSubscribers.setMaxListeners(0);
    this.listenerStarted = false;
  }

  start() {
    this.checkStartListener();
  }

  getCollectionIndexes(collection) {
    return this.arango.collection(collection).indexes();
  }

  async query(text, vars) {
    const cursor = await this.arango.query(text, vars);
    return cursor.all();
  }

  async subscribe(collection, listener) {
    var _this$listenerSubscri;

    (_this$listenerSubscri = this.listenerSubscribers) === null || _this$listenerSubscri === void 0 ? void 0 : _this$listenerSubscri.on(DATA_EVENT, listener);
    this.checkStartListener();
    return listener;
  }

  unsubscribe(subscription) {
    var _this$listenerSubscri2;

    (_this$listenerSubscri2 = this.listenerSubscribers) === null || _this$listenerSubscri2 === void 0 ? void 0 : _this$listenerSubscri2.removeListener(DATA_EVENT, subscription);
  } // Internals


  checkStartListener() {
    const hasSubscribers = this.listenerSubscribers.listenerCount(DATA_EVENT) > 0;

    if (this.started && !this.listenerStarted && hasSubscribers) {
      this.listenerStarted = true;
      this.listener.start();
    }
  }

  createListener() {
    const {
      server,
      name,
      auth
    } = this.config;
    const listenerUrl = `${(0, _config.ensureProtocol)(server, 'http')}/${name}`;
    const listener = new _arangochair.default(listenerUrl);

    if (this.config.auth) {
      const userPassword = Buffer.from(auth).toString('base64');
      listener.req.opts.headers['Authorization'] = `Basic ${userPassword}`;
    }

    Object.values(_data.dataCollectionInfo).forEach(value => {
      const collectionInfo = value;
      const collectionName = collectionInfo.name;
      listener.subscribe({
        collection: collectionName
      });
      listener.on(name, (docJson, type) => {
        if (type === 'insert/update' || type === 'insert' || type === 'update') {
          this.onDataEvent(type, collectionName, docJson);
        }
      });
    });
    listener.on('error', (err, status, headers, body) => {
      let error = err;

      try {
        error = JSON.parse(body);
      } catch {}

      this.log.error('FAILED', 'LISTEN', `${err}`, error);
      setTimeout(() => listener.start(), this.config.listenerRestartTimeout || 1000);
    });
    return listener;
  }

  onDataEvent(event, collection, doc) {
    var _this$listenerSubscri3;

    (_this$listenerSubscri3 = this.listenerSubscribers) === null || _this$listenerSubscri3 === void 0 ? void 0 : _this$listenerSubscri3.emit(collection, doc, event);
  }

}

exports.ArangoProvider = ArangoProvider;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,