"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ArangoProvider = void 0;

var _arangochair = _interopRequireDefault(require("arangochair"));

var _arangojs = require("arangojs");

var _events = _interopRequireDefault(require("events"));

var _config = require("../config");

var _url = _interopRequireDefault(require("url"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class ArangoProvider {
  constructor(log, config) {
    this.log = log;
    this.config = config;
    this.started = false;
    this.arango = new _arangojs.Database({
      url: `${(0, _config.ensureProtocol)(config.server, 'http')}`,
      agentOptions: {
        maxSockets: config.maxSockets
      }
    });
    this.arango.useDatabase(config.name);

    if (config.auth) {
      const authParts = config.auth.split(':');
      this.arango.useBasicAuth(authParts[0], authParts.slice(1).join(':'));
    }

    this.collectionsForSubscribe = [];
    this.listener = null;
    this.listenerSubscribers = new _events.default();
    this.listenerSubscribers.setMaxListeners(0);
    this.listenerSubscribersCount = 0;
  }

  async start(collectionsForSubscribe) {
    this.started = true;
    this.collectionsForSubscribe = collectionsForSubscribe;
    this.checkStartListener();
    return Promise.resolve();
  }

  getCollectionIndexes(collection) {
    return this.arango.collection(collection).indexes();
  }

  async loadFingerprint() {
    /**
     * Returns object with collection names in keys and collection size in values.
     */
    const collections = (await this.arango.listCollections()).map(descr => descr.name); // TODO: add this when required a new version arangojs v7.x.x
    // await Promise.all(collections.map(col => this.arango.collection(col).recalculateCount()));

    const results = await Promise.all(collections.map(col => this.arango.collection(col).count()));
    return Object.fromEntries(collections.map((_, i) => [collections[i], results[i].count]));
  }

  async hotUpdate() {
    return Promise.resolve();
  }

  async query(text, vars) {
    const cursor = await this.arango.query(text, vars);
    return cursor.all();
  }

  async subscribe(collection, listener) {
    var _this$listenerSubscri;

    (_this$listenerSubscri = this.listenerSubscribers) === null || _this$listenerSubscri === void 0 ? void 0 : _this$listenerSubscri.on(collection, listener);
    this.listenerSubscribersCount += 1;
    this.checkStartListener();
    return {
      collection,
      listener
    };
  }

  unsubscribe(subscription) {
    var _this$listenerSubscri2;

    (_this$listenerSubscri2 = this.listenerSubscribers) === null || _this$listenerSubscri2 === void 0 ? void 0 : _this$listenerSubscri2.removeListener(subscription.collection, subscription.listener);
    this.listenerSubscribersCount = Math.max(this.listenerSubscribersCount - 1, 0);
  } // Internals


  checkStartListener() {
    if (!this.started) {
      return;
    }

    if (this.listener) {
      return;
    }

    if (this.collectionsForSubscribe.length === 0) {
      return;
    }

    if (this.listenerSubscribersCount === 0) {
      return;
    }

    this.listener = this.createAndStartListener();
  }

  createAndStartListener() {
    const {
      server,
      name,
      auth
    } = this.config;
    const dbUrl = (0, _config.ensureProtocol)(server, 'http');
    const listenerUrl = `${dbUrl}/${name}`;
    const listener = new _arangochair.default(listenerUrl);

    const parsedDbUrl = _url.default.parse(dbUrl);

    const pathPrefix = parsedDbUrl.path !== "/" ? parsedDbUrl.path || "" : "";
    listener._loggerStatePath = `${pathPrefix}/_db/${name}/_api/replication/logger-state`;
    listener._loggerFollowPath = `${pathPrefix}/_db/${name}/_api/replication/logger-follow`;

    if (this.config.auth) {
      const userPassword = Buffer.from(auth).toString('base64');
      listener.req.opts.headers['Authorization'] = `Basic ${userPassword}`;
    }

    this.collectionsForSubscribe.forEach(collectionName => {
      listener.subscribe({
        collection: collectionName
      });
      listener.on(collectionName, (docJson, type) => {
        if (type === 'insert/update' || type === 'insert' || type === 'update') {
          this.onDataEvent(type, collectionName, docJson);
        }
      });
    });
    listener.on('error', (err, status, headers, body) => {
      let error = err;

      try {
        error = JSON.parse(body);
      } catch {}

      this.log.error('FAILED', 'LISTEN', `${err}`, error);
      setTimeout(() => listener.start(), this.config.listenerRestartTimeout || 1000);
    });
    listener.start();
    return listener;
  }

  onDataEvent(event, collection, doc) {
    var _this$listenerSubscri3;

    (_this$listenerSubscri3 = this.listenerSubscribers) === null || _this$listenerSubscri3 === void 0 ? void 0 : _this$listenerSubscri3.emit(collection, doc, event);
  }

}

exports.ArangoProvider = ArangoProvider;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,