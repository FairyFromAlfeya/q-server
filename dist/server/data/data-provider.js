"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sortedIndex = sortedIndex;
exports.missingDataCache = exports.QDataPrecachedCombiner = exports.QDataCombiner = exports.dataEvent = void 0;
const dataEvent = {
  UPSERT: 'insert/update',
  INSERT: 'insert',
  UPDATE: 'update'
};
exports.dataEvent = dataEvent;

class QDataCombiner {
  constructor(providers) {
    this.providers = providers;
  }

  start(collectionsForSubscribe) {
    this.providers.forEach((x, i) => x.start(i === 0 ? collectionsForSubscribe : []));
  }

  getCollectionIndexes(collection) {
    return this.providers[0].getCollectionIndexes(collection);
  }

  async query(text, vars, orderBy) {
    const results = await Promise.all(this.providers.map(x => x.query(text, vars, orderBy)));
    return combineResults(results, orderBy);
  }

  subscribe(collection, listener) {
    return this.providers[0].subscribe(collection, listener);
  }

  unsubscribe(subscription) {
    this.providers[0].unsubscribe(subscription);
  }

}

exports.QDataCombiner = QDataCombiner;

class QDataPrecachedCombiner extends QDataCombiner {
  constructor(cache, providers) {
    super(providers);
    this.cache = cache;
  }

  async query(text, vars, orderBy) {
    const key = JSON.stringify({
      text: text,
      vars: vars,
      orderBy: orderBy
    });
    let docs = await this.cache.get(key);

    if (isNullOrUndefined(docs)) {
      docs = await super.query(text, vars, orderBy);
      await this.cache.set(key, docs);
    }

    return docs;
  }

}

exports.QDataPrecachedCombiner = QDataPrecachedCombiner;

function combineResults(results, orderBy) {
  const docs = collectDistinctDocs(results);

  if (orderBy.length > 0) {
    docs.sort((a, b) => compareDocs(a, b, orderBy));
  }

  return docs;
}

function collectDistinctDocs(source) {
  const distinctDocs = [];
  const distinctKeys = new Set();
  source.forEach(docs => {
    docs.forEach(doc => {
      if (!doc._key) {
        distinctDocs.push(doc);
      } else if (!distinctKeys.has(doc._key)) {
        distinctDocs.push(doc);
        distinctKeys.add(doc._key);
      }
    });
  });
  return distinctDocs;
}

function compareDocs(a, b, orderBy) {
  for (let i = 0; i < orderBy.length; i += 1) {
    const field = orderBy[i];
    const path = field.path.split('.');
    const aValue = getValue(a, path, 0);
    const bValue = getValue(b, path, 0);
    let comparison = compareValues(aValue, bValue);

    if (comparison !== 0) {
      return field.direction === 'DESC' ? -comparison : comparison;
    }
  }

  return 0;
}

function getValue(value, path, pathIndex) {
  if (isNullOrUndefined(value) || pathIndex >= path.length) {
    return value;
  }

  const name = path[pathIndex] === 'id' ? '_key' : path[pathIndex];
  return getValue(value[name], path, pathIndex + 1);
}

function compareValues(a, b) {
  const aHasValue = !isNullOrUndefined(a);
  const bHasValue = !isNullOrUndefined(b);

  if (!aHasValue) {
    return bHasValue ? -1 : 0;
  }

  if (!bHasValue) {
    return 1;
  }

  return a === b ? 0 : a < b ? -1 : 0;
}

function isNullOrUndefined(v) {
  return v === null || typeof v === 'undefined';
}

function sortedIndex(fields) {
  return {
    type: 'persistent',
    fields
  };
}

const missingDataCache = {
  get(_key) {
    return Promise.resolve(null);
  },

  set(_key, _value) {
    return Promise.resolve();
  }

};
exports.missingDataCache = missingDataCache;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,