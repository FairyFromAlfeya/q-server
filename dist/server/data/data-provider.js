"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.combineResults = combineResults;
exports.sortedIndex = sortedIndex;
exports.missingDataCache = exports.QDataPrecachedCombiner = exports.QDataCombiner = exports.dataEvent = void 0;

var _utils = require("../utils");

const dataEvent = {
  UPSERT: 'insert/update',
  INSERT: 'insert',
  UPDATE: 'update'
};
exports.dataEvent = dataEvent;

class QDataCombiner {
  constructor(providers) {
    this.providers = providers;
  }

  async start(collectionsForSubscribe) {
    await Promise.all(this.providers.map((x, i) => x.start(i === 0 ? collectionsForSubscribe : [])));
  }

  getCollectionIndexes(collection) {
    return this.providers[0].getCollectionIndexes(collection);
  }

  async loadFingerprint() {
    /** TODO: remove
     * Do not build fingerprint from a `hot` database (index=0).
     * We make fingerprints about the size of collections only on `cold` storages (index>0).
     * The updated fingerprint will change the cache key and the old keys will be removed using by DataCache itself.
     */
    return await Promise.all(this.providers.map(provider => provider.loadFingerprint()));
  }

  async hotUpdate() {
    await Promise.all(this.providers.map(provider => provider.hotUpdate()));
  }

  async query(text, vars, orderBy) {
    const results = await Promise.all(this.providers.map(x => x.query(text, vars, orderBy)));
    return combineResults(results, orderBy);
  }

  subscribe(collection, listener) {
    return this.providers[0].subscribe(collection, listener);
  }

  unsubscribe(subscription) {
    this.providers[0].unsubscribe(subscription);
  }

}

exports.QDataCombiner = QDataCombiner;

class QDataPrecachedCombiner extends QDataCombiner {
  constructor(log, cache, providers, networkName, cacheKeyPrefix) {
    super(providers);
    this.log = log;
    this.cache = cache;
    this.networkName = networkName;
    this.cacheKeyPrefix = cacheKeyPrefix;
    this.configHash = '';
  }

  async hotUpdate() {
    const fingerprint = JSON.stringify(await this.loadFingerprint());
    this.log.debug('FINGERPRINT', fingerprint);
    this.configHash = (0, _utils.hash)(this.networkName, fingerprint);
    await super.hotUpdate();
  }

  cacheKey(aql) {
    return this.cacheKeyPrefix + (0, _utils.hash)(this.configHash, aql);
  }

  async query(text, vars, orderBy) {
    const aql = JSON.stringify({
      text,
      vars,
      orderBy
    });
    const key = this.cacheKey(aql);
    let docs = await this.cache.get(key);

    if (isNullOrUndefined(docs)) {
      docs = await super.query(text, vars, orderBy);
      await this.cache.set(key, docs);
    }

    return docs;
  }

}

exports.QDataPrecachedCombiner = QDataPrecachedCombiner;

function combineResults(results, orderBy) {
  const docs = collectDistinctDocs(results);

  if (orderBy.length > 0) {
    docs.sort((a, b) => compareDocs(a, b, orderBy));
  }

  return docs;
}

function collectDistinctDocs(source) {
  const distinctDocs = [];
  const distinctKeys = new Set();
  source.forEach(docs => {
    docs.forEach(doc => {
      if (!doc._key) {
        distinctDocs.push(doc);
      } else if (!distinctKeys.has(doc._key)) {
        distinctDocs.push(doc);
        distinctKeys.add(doc._key);
      }
    });
  });
  return distinctDocs;
}

function compareDocs(a, b, orderBy) {
  for (let i = 0; i < orderBy.length; i += 1) {
    const field = orderBy[i];
    const path = field.path.split('.');
    const aValue = getValue(a, path, 0);
    const bValue = getValue(b, path, 0);
    let comparison = compareValues(aValue, bValue);

    if (comparison !== 0) {
      return field.direction === 'DESC' ? -comparison : comparison;
    }
  }

  return 0;
}

function getValue(value, path, pathIndex) {
  if (isNullOrUndefined(value) || pathIndex >= path.length) {
    return value;
  }

  const isCollection = pathIndex === 0;
  const name = isCollection && path[pathIndex] === 'id' ? '_key' : path[pathIndex];
  return getValue(value[name], path, pathIndex + 1);
}

function compareValues(a, b) {
  const aHasValue = !isNullOrUndefined(a);
  const bHasValue = !isNullOrUndefined(b);

  if (!aHasValue) {
    return bHasValue ? -1 : 0;
  }

  if (!bHasValue) {
    return 1;
  }

  return a === b ? 0 : a < b ? -1 : 1;
}

function isNullOrUndefined(v) {
  return v === null || typeof v === 'undefined';
}

function sortedIndex(fields) {
  return {
    type: 'persistent',
    fields
  };
}

const missingDataCache = {
  get(_key) {
    return Promise.resolve(null);
  },

  set(_key, _value) {
    return Promise.resolve();
  }

};
exports.missingDataCache = missingDataCache;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zZXJ2ZXIvZGF0YS9kYXRhLXByb3ZpZGVyLmpzIl0sIm5hbWVzIjpbImRhdGFFdmVudCIsIlVQU0VSVCIsIklOU0VSVCIsIlVQREFURSIsIlFEYXRhQ29tYmluZXIiLCJjb25zdHJ1Y3RvciIsInByb3ZpZGVycyIsInN0YXJ0IiwiY29sbGVjdGlvbnNGb3JTdWJzY3JpYmUiLCJQcm9taXNlIiwiYWxsIiwibWFwIiwieCIsImkiLCJnZXRDb2xsZWN0aW9uSW5kZXhlcyIsImNvbGxlY3Rpb24iLCJsb2FkRmluZ2VycHJpbnQiLCJwcm92aWRlciIsImhvdFVwZGF0ZSIsInF1ZXJ5IiwidGV4dCIsInZhcnMiLCJvcmRlckJ5IiwicmVzdWx0cyIsImNvbWJpbmVSZXN1bHRzIiwic3Vic2NyaWJlIiwibGlzdGVuZXIiLCJ1bnN1YnNjcmliZSIsInN1YnNjcmlwdGlvbiIsIlFEYXRhUHJlY2FjaGVkQ29tYmluZXIiLCJsb2ciLCJjYWNoZSIsIm5ldHdvcmtOYW1lIiwiY2FjaGVLZXlQcmVmaXgiLCJjb25maWdIYXNoIiwiZmluZ2VycHJpbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiZGVidWciLCJjYWNoZUtleSIsImFxbCIsImtleSIsImRvY3MiLCJnZXQiLCJpc051bGxPclVuZGVmaW5lZCIsInNldCIsImNvbGxlY3REaXN0aW5jdERvY3MiLCJsZW5ndGgiLCJzb3J0IiwiYSIsImIiLCJjb21wYXJlRG9jcyIsInNvdXJjZSIsImRpc3RpbmN0RG9jcyIsImRpc3RpbmN0S2V5cyIsIlNldCIsImZvckVhY2giLCJkb2MiLCJfa2V5IiwicHVzaCIsImhhcyIsImFkZCIsImZpZWxkIiwicGF0aCIsInNwbGl0IiwiYVZhbHVlIiwiZ2V0VmFsdWUiLCJiVmFsdWUiLCJjb21wYXJpc29uIiwiY29tcGFyZVZhbHVlcyIsImRpcmVjdGlvbiIsInZhbHVlIiwicGF0aEluZGV4IiwiaXNDb2xsZWN0aW9uIiwibmFtZSIsImFIYXNWYWx1ZSIsImJIYXNWYWx1ZSIsInYiLCJzb3J0ZWRJbmRleCIsImZpZWxkcyIsInR5cGUiLCJtaXNzaW5nRGF0YUNhY2hlIiwicmVzb2x2ZSIsIl92YWx1ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBR0E7O0FBZ0JPLE1BQU1BLFNBQVMsR0FBRztBQUNyQkMsRUFBQUEsTUFBTSxFQUFFLGVBRGE7QUFFckJDLEVBQUFBLE1BQU0sRUFBRSxRQUZhO0FBR3JCQyxFQUFBQSxNQUFNLEVBQUU7QUFIYSxDQUFsQjs7O0FBOEJBLE1BQU1DLGFBQU4sQ0FBNkM7QUFHaERDLEVBQUFBLFdBQVcsQ0FBQ0MsU0FBRCxFQUE2QjtBQUNwQyxTQUFLQSxTQUFMLEdBQWlCQSxTQUFqQjtBQUNIOztBQUVVLFFBQUxDLEtBQUssQ0FBQ0MsdUJBQUQsRUFBa0Q7QUFDekQsVUFBTUMsT0FBTyxDQUFDQyxHQUFSLENBQVksS0FBS0osU0FBTCxDQUFlSyxHQUFmLENBQW1CLENBQUNDLENBQUQsRUFBSUMsQ0FBSixLQUFVRCxDQUFDLENBQUNMLEtBQUYsQ0FBUU0sQ0FBQyxLQUFLLENBQU4sR0FBVUwsdUJBQVYsR0FBb0MsRUFBNUMsQ0FBN0IsQ0FBWixDQUFOO0FBQ0g7O0FBRURNLEVBQUFBLG9CQUFvQixDQUFDQyxVQUFELEVBQTRDO0FBQzVELFdBQU8sS0FBS1QsU0FBTCxDQUFlLENBQWYsRUFBa0JRLG9CQUFsQixDQUF1Q0MsVUFBdkMsQ0FBUDtBQUNIOztBQUVvQixRQUFmQyxlQUFlLEdBQWlCO0FBQ2xDO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDUSxXQUFPLE1BQU1QLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLEtBQUtKLFNBQUwsQ0FBZUssR0FBZixDQUFtQk0sUUFBUSxJQUFJQSxRQUFRLENBQUNELGVBQVQsRUFBL0IsQ0FBWixDQUFiO0FBQ0g7O0FBRWMsUUFBVEUsU0FBUyxHQUFpQjtBQUM1QixVQUFNVCxPQUFPLENBQUNDLEdBQVIsQ0FBWSxLQUFLSixTQUFMLENBQWVLLEdBQWYsQ0FBbUJNLFFBQVEsSUFBSUEsUUFBUSxDQUFDQyxTQUFULEVB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U0FBTCxFQUFnQjtBQUNaLFdBQU9DLFNBQVMsR0FBRyxDQUFDLENBQUosR0FBUSxDQUF4QjtBQUNIOztBQUNELE1BQUksQ0FBQ0EsU0FBTCxFQUFnQjtBQUNaLFdBQU8sQ0FBUDtBQUNIOztBQUNELFNBQU8zQixDQUFDLEtBQUtDLENBQU4sR0FBVSxDQUFWLEdBQWVELENBQUMsR0FBR0MsQ0FBSixHQUFRLENBQUMsQ0FBVCxHQUFhLENBQW5DO0FBQ0g7O0FBR0QsU0FBU04saUJBQVQsQ0FBMkJpQyxDQUEzQixFQUE0QztBQUN4QyxTQUFPQSxDQUFDLEtBQUssSUFBTixJQUFjLE9BQU9BLENBQVAsS0FBYSxXQUFsQztBQUNIOztBQUVNLFNBQVNDLFdBQVQsQ0FBcUJDLE1BQXJCLEVBQW1EO0FBQ3RELFNBQU87QUFBRUMsSUFBQUEsSUFBSSxFQUFFLFlBQVI7QUFBc0JELElBQUFBO0FBQXRCLEdBQVA7QUFDSDs7QUFFTSxNQUFNRSxnQkFBNEIsR0FBRztBQUN4Q3RDLEVBQUFBLEdBQUcsQ0FBQ2UsSUFBRCxFQUE2QjtBQUM1QixXQUFPakQsT0FBTyxDQUFDeUUsT0FBUixDQUFnQixJQUFoQixDQUFQO0FBQ0gsR0FIdUM7O0FBS3hDckMsRUFBQUEsR0FBRyxDQUFDYSxJQUFELEVBQWV5QixNQUFmLEVBQTJDO0FBQzFDLFdBQU8xRSxPQUFPLENBQUN5RSxPQUFSLEVBQVA7QUFDSDs7QUFQdUMsQ0FBckMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBAZmxvd1xuXG5pbXBvcnQgdHlwZSB7IE9yZGVyQnkgfSBmcm9tICcuLi9maWx0ZXIvZmlsdGVycyc7XG5pbXBvcnQgeyBoYXNoIH0gZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IHR5cGUgeyBRTG9nIH0gZnJvbSAnLi4vbG9ncyc7XG5cbmV4cG9ydCB0eXBlIFFJbmRleEluZm8gPSB7XG4gICAgZmllbGRzOiBzdHJpbmdbXSxcbiAgICB0eXBlPzogc3RyaW5nLFxufVxuXG5cbmV4cG9ydCB0eXBlIFFEb2MgPSB7XG4gICAgX2tleTogc3RyaW5nO1xuICAgIFtzdHJpbmddOiBhbnk7XG59O1xuXG5cbmV4cG9ydCB0eXBlIFFEYXRhRXZlbnQgPSAnaW5zZXJ0L3VwZGF0ZScgfCAnaW5zZXJ0JyB8ICd1cGRhdGUnO1xuZXhwb3J0IGNvbnN0IGRhdGFFdmVudCA9IHtcbiAgICBVUFNFUlQ6ICdpbnNlcnQvdXBkYXRlJyxcbiAgICBJTlNFUlQ6ICdpbnNlcnQnLFxuICAgIFVQREFURTogJ3VwZGF0ZScsXG59O1xuXG5cbmV4cG9ydCBpbnRlcmZhY2UgUURhdGFQcm92aWRlciB7XG4gICAgc3RhcnQoY29sbGVjdGlvbnNGb3JTdWJzY3JpYmU6IHN0cmluZ1tdKTogUHJvbWlzZTxhbnk+O1xuXG4gICAgZ2V0Q29sbGVjdGlvbkluZGV4ZXMoY29sbGVjdGlvbjogc3RyaW5nKTogUHJvbWlzZTxRSW5kZXhJbmZvW10+O1xuXG4gICAgbG9hZEZpbmdlcnByaW50KCk6IFByb21pc2U8YW55PjtcblxuICAgIGhvdFVwZGF0ZSgpOiBQcm9taXNlPGFueT47XG5cbiAgICBxdWVyeSh0ZXh0OiBzdHJpbmcsIHZhcnM6IHsgW3N0cmluZ106IGFueSB9LCBvcmRlckJ5OiBPcmRlckJ5W10pOiBQcm9taXNlPGFueT47XG5cbiAgICBzdWJzY3JpYmUoY29sbGVjdGlvbjogc3RyaW5nLCBsaXN0ZW5lcjogKGRvYzogYW55LCBldmVudDogUURhdGFFdmVudCkgPT4gdm9pZCk6IGFueTtcblxuICAgIHVuc3Vic2NyaWJlKHN1YnNjcmlwdGlvbjogYW55KTogdm9pZDtcbn1cblxuXG5leHBvcnQgaW50ZXJmYWNlIFFEYXRhQ2FjaGUge1xuICAgIGdldChrZXk6IHN0cmluZyk6IFByb21pc2U8YW55PjtcblxuICAgIHNldChrZXk6IHN0cmluZywgdmFsdWU6IGFueSk6IFByb21pc2U8dm9pZD47XG59XG5cbmV4cG9ydCBjbGFzcyBRRGF0YUNvbWJpbmVyIGltcGxlbWVudHMgUURhdGFQcm92aWRlciB7XG4gICAgcHJvdmlkZXJzOiBRRGF0YVByb3ZpZGVyW107XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm92aWRlcnM6IFFEYXRhUHJvdmlkZXJbXSkge1xuICAgICAgICB0aGlzLnByb3ZpZGVycyA9IHByb3ZpZGVycztcbiAgICB9XG5cbiAgICBhc3luYyBzdGFydChjb2xsZWN0aW9uc0ZvclN1YnNjcmliZTogc3RyaW5nW10pOiBQcm9taXNlPGFueT4ge1xuICAgICAgICBhd2FpdCBQcm9taXNlLmFsbCh0aGlzLnByb3ZpZGVycy5tYXAoKHgsIGkpID0+IHguc3RhcnQoaSA9PT0gMCA/IGNvbGxlY3Rpb25zRm9yU3Vic2NyaWJlIDogW10pKSk7XG4gICAgfVxuXG4gICAgZ2V0Q29sbGVjdGlvbkluZGV4ZXMoY29sbGVjdGlvbjogc3RyaW5nKTogUHJvbWlzZTxRSW5kZXhJbmZvW10+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvdmlkZXJzWzBdLmdldENvbGxlY3Rpb25JbmRleGVzKGNvbGxlY3Rpb24pO1xuICAgIH1cblxuICAgIGFzeW5jIGxvYWRGaW5nZXJwcmludCgpOiBQcm9taXNlPGFueT4ge1xuICAgICAgICAvKiogVE9ETzogcmVtb3ZlXG4gICAgICAgICAqIERvIG5vdCBidWlsZCBmaW5nZXJwcmludCBmcm9tIGEgYGhvdGAgZGF0YWJhc2UgKGluZGV4PTApLlxuICAgICAgICAgKiBXZSBtYWtlIGZpbmdlcnByaW50cyBhYm91dCB0aGUgc2l6ZSBvZiBjb2xsZWN0aW9ucyBvbmx5IG9uIGBjb2xkYCBzdG9yYWdlcyAoaW5kZXg+MCkuXG4gICAgICAgICAqIFRoZSB1cGRhdGVkIGZpbmdlcnByaW50IHdpbGwgY2hhbmdlIHRoZSBjYWNoZSBrZXkgYW5kIHRoZSBvbGQga2V5cyB3aWxsIGJlIHJlbW92ZWQgdXNpbmcgYnkgRGF0YUNhY2hlIGl0c2VsZi5cbiAgICAgICAgICovXG4gICAgICAgIHJldHVybiBhd2FpdCBQcm9taXNlLmFsbCh0aGlzLnByb3ZpZGVycy5tYXAocHJvdmlkZXIgPT4gcHJvdmlkZXIubG9hZEZpbmdlcnByaW50KCkpKTtcbiAgICB9XG5cbiAgICBhc3luYyBob3RVcGRhdGUoKTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgYXdhaXQgUHJvbWlzZS5hbGwodGhpcy5wcm92aWRlcnMubWFwKHByb3ZpZGVyID0+IHByb3ZpZGVyLmhvdFVwZGF0ZSgpKSk7XG4gICAgfVxuXG4gICAgYXN5bmMgcXVlcnkodGV4dDogc3RyaW5nLCB2YXJzOiB7IFtzdHJpbmddOiBhbnkgfSwgb3JkZXJCeTogT3JkZXJCeVtdKTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgY29uc3QgcmVzdWx0cyA9IGF3YWl0IFByb21pc2UuYWxsKHRoaXMucHJvdmlkZXJzLm1hcCh4ID0+IHgucXVlcnkodGV4dCwgdmFycywgb3JkZXJCeSkpKTtcbiAgICAgICAgcmV0dXJuIGNvbWJpbmVSZXN1bHRzKHJlc3VsdHMsIG9yZGVyQnkpO1xuICAgIH1cblxuICAgIHN1YnNjcmliZShjb2xsZWN0aW9uOiBzdHJpbmcsIGxpc3RlbmVyOiAoZG9jOiBhbnksIGV2ZW50OiBRRGF0YUV2ZW50KSA9PiB2b2lkKTogYW55IHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvdmlkZXJzWzBdLnN1YnNjcmliZShjb2xsZWN0aW9uLCBsaXN0ZW5lcik7XG4gICAgfVxuXG4gICAgdW5zdWJzY3JpYmUoc3Vic2NyaXB0aW9uOiBhbnkpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5wcm92aWRlcnNbMF0udW5zdWJzY3JpYmUoc3Vic2NyaXB0aW9uKTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBRRGF0YVByZWNhY2hlZENvbWJpbmVyIGV4dGVuZHMgUURhdGFDb21iaW5lciB7XG4gICAgbG9nOiBRTG9nO1xuICAgIGNhY2hlOiBRRGF0YUNhY2hlO1xuICAgIG5ldHdvcmtOYW1lOiBzdHJpbmc7XG4gICAgY2FjaGVLZXlQcmVmaXg6IHN0cmluZztcbiAgICBjb25maWdIYXNoOiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3Rvcihsb2c6IFFMb2csIGNhY2hlOiBRRGF0YUNhY2hlLCBwcm92aWRlcnM6IFFEYXRhUHJvdmlkZXJbXSwgbmV0d29ya05hbWU6IHN0cmluZywgY2FjaGVLZXlQcmVmaXg6IHN0cmluZykge1xuICAgICAgICBzdXBlcihwcm92aWRlcnMpO1xuICAgICAgICB0aGlzLmxvZyA9IGxvZztcbiAgICAgICAgdGhpcy5jYWNoZSA9IGNhY2hlO1xuICAgICAgICB0aGlzLm5ldHdvcmtOYW1lID0gbmV0d29ya05hbWU7XG4gICAgICAgIHRoaXMuY2FjaGVLZXlQcmVmaXggPSBjYWNoZUtleVByZWZpeDtcbiAgICAgICAgdGhpcy5jb25maWdIYXNoID0gJyc7XG4gICAgfVxuXG4gICAgYXN5bmMgaG90VXBkYXRlKCk6IFByb21pc2U8YW55PiB7XG4gICAgICAgIGNvbnN0IGZpbmdlcnByaW50ID0gSlNPTi5zdHJpbmdpZnkoYXdhaXQgdGhpcy5sb2FkRmluZ2VycHJpbnQoKSk7XG4gICAgICAgIHRoaXMubG9nLmRlYnVnKCdGSU5HRVJQUklOVCcsIGZpbmdlcnByaW50KTtcbiAgICAgICAgdGhpcy5jb25maWdIYXNoID0gaGFzaCh0aGlzLm5ldHdvcmtOYW1lLCBmaW5nZXJwcmludCk7XG4gICAgICAgIGF3YWl0IHN1cGVyLmhvdFVwZGF0ZSgpO1xuICAgIH1cblxuICAgIGNhY2hlS2V5KGFxbDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FjaGVLZXlQcmVmaXggKyBoYXNoKHRoaXMuY29uZmlnSGFzaCwgYXFsKTtcbiAgICB9XG5cbiAgICBhc3luYyBxdWVyeSh0ZXh0OiBzdHJpbmcsIHZhcnM6IHsgW3N0cmluZ106IGFueSB9LCBvcmRlckJ5OiBPcmRlckJ5W10pOiBQcm9taXNlPGFueT4ge1xuICAgICAgICBjb25zdCBhcWwgPSBKU09OLnN0cmluZ2lmeSh7IHRleHQsIHZhcnMsIG9yZGVyQnkgfSk7XG4gICAgICAgIGNvbnN0IGtleSA9IHRoaXMuY2FjaGVLZXkoYXFsKTtcbiAgICAgICAgbGV0IGRvY3MgPSBhd2FpdCB0aGlzLmNhY2hlLmdldChrZXkpO1xuICAgICAgICBpZiAoaXNOdWxsT3JVbmRlZmluZWQoZG9jcykpIHtcbiAgICAgICAgICAgIGRvY3MgPSBhd2FpdCBzdXBlci5xdWVyeSh0ZXh0LCB2YXJzLCBvcmRlckJ5KTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuY2FjaGUuc2V0KGtleSwgZG9jcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRvY3M7XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY29tYmluZVJlc3VsdHMocmVzdWx0czogYW55W11bXSwgb3JkZXJCeTogT3JkZXJCeVtdKTogYW55W10ge1xuICAgIGNvbnN0IGRvY3MgPSBjb2xsZWN0RGlzdGluY3REb2NzKHJlc3VsdHMpO1xuICAgIGlmIChvcmRlckJ5Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgZG9jcy5zb3J0KChhOiBRRG9jLCBiOiBRRG9jKSA9PiBjb21wYXJlRG9jcyhhLCBiLCBvcmRlckJ5KSk7XG4gICAgfVxuICAgIHJldHVybiBkb2NzO1xufVxuXG5cbmZ1bmN0aW9uIGNvbGxlY3REaXN0aW5jdERvY3Moc291cmNlOiBRRG9jW11bXSk6IFFEb2NbXSB7XG4gICAgY29uc3QgZGlzdGluY3REb2NzID0gKFtdOiBRRG9jW10pO1xuICAgIGNvbnN0IGRpc3RpbmN0S2V5cyA9IG5ldyBTZXQoKTtcbiAgICBzb3VyY2UuZm9yRWFjaCgoZG9jcykgPT4ge1xuICAgICAgICBkb2NzLmZvckVhY2goKGRvYykgPT4ge1xuICAgICAgICAgICAgaWYgKCFkb2MuX2tleSkge1xuICAgICAgICAgICAgICAgIGRpc3RpbmN0RG9jcy5wdXNoKGRvYyk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCFkaXN0aW5jdEtleXMuaGFzKGRvYy5fa2V5KSkge1xuICAgICAgICAgICAgICAgIGRpc3RpbmN0RG9jcy5wdXNoKGRvYyk7XG4gICAgICAgICAgICAgICAgZGlzdGluY3RLZXlzLmFkZChkb2MuX2tleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiBkaXN0aW5jdERvY3M7XG59XG5cblxuZnVuY3Rpb24gY29tcGFyZURvY3MoYTogUURvYywgYjogUURvYywgb3JkZXJCeTogT3JkZXJCeVtdKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvcmRlckJ5Lmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGNvbnN0IGZpZWxkID0gb3JkZXJCeVtpXTtcbiAgICAgICAgY29uc3QgcGF0aCA9IGZpZWxkLnBhdGguc3BsaXQoJy4nKTtcbiAgICAgICAgY29uc3QgYVZhbHVlID0gZ2V0VmFsdWUoYSwgcGF0aCwgMCk7XG4gICAgICAgIGNvbnN0IGJWYWx1ZSA9IGdldFZhbHVlKGIsIHBhdGgsIDApO1xuICAgICAgICBsZXQgY29tcGFyaXNvbiA9IGNvbXBhcmVWYWx1ZXMoYVZhbHVlLCBiVmFsdWUpO1xuICAgICAgICBpZiAoY29tcGFyaXNvbiAhPT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIGZpZWxkLmRpcmVjdGlvbiA9PT0gJ0RFU0MnID8gLWNvbXBhcmlzb24gOiBjb21wYXJpc29uO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiAwO1xufVxuXG5cbmZ1bmN0aW9uIGdldFZhbHVlKHZhbHVlOiBhbnksIHBhdGg6IHN0cmluZ1tdLCBwYXRoSW5kZXg6IG51bWJlcik6IGFueSB7XG4gICAgaWYgKGlzTnVsbE9yVW5kZWZpbmVkKHZhbHVlKSB8fCBwYXRoSW5kZXggPj0gcGF0aC5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICBjb25zdCBpc0NvbGxlY3Rpb24gPSBwYXRoSW5kZXggPT09IDA7XG4gICAgY29uc3QgbmFtZSA9IGlzQ29sbGVjdGlvbiAmJiBwYXRoW3BhdGhJbmRleF0gPT09ICdpZCcgPyAnX2tleScgOiBwYXRoW3BhdGhJbmRleF07XG4gICAgcmV0dXJuIGdldFZhbHVlKHZhbHVlW25hbWVdLCBwYXRoLCBwYXRoSW5kZXggKyAxKTtcbn1cblxuXG5mdW5jdGlvbiBjb21wYXJlVmFsdWVzKGE6IGFueSwgYjogYW55KTogbnVtYmVyIHtcbiAgICBjb25zdCBhSGFzVmFsdWUgPSAhaXNOdWxsT3JVbmRlZmluZWQoYSk7XG4gICAgY29uc3QgYkhhc1ZhbHVlID0gIWlzTnVsbE9yVW5kZWZpbmVkKGIpO1xuICAgIGlmICghYUhhc1ZhbHVlKSB7XG4gICAgICAgIHJldHVybiBiSGFzVmFsdWUgPyAtMSA6IDA7XG4gICAgfVxuICAgIGlmICghYkhhc1ZhbHVlKSB7XG4gICAgICAgIHJldHVybiAxO1xuICAgIH1cbiAgICByZXR1cm4gYSA9PT0gYiA/IDAgOiAoYSA8IGIgPyAtMSA6IDEpO1xufVxuXG5cbmZ1bmN0aW9uIGlzTnVsbE9yVW5kZWZpbmVkKHY6IGFueSk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB2ID09PSBudWxsIHx8IHR5cGVvZiB2ID09PSAndW5kZWZpbmVkJztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNvcnRlZEluZGV4KGZpZWxkczogc3RyaW5nW10pOiBRSW5kZXhJbmZvIHtcbiAgICByZXR1cm4geyB0eXBlOiAncGVyc2lzdGVudCcsIGZpZWxkcyB9O1xufVxuXG5leHBvcnQgY29uc3QgbWlzc2luZ0RhdGFDYWNoZTogUURhdGFDYWNoZSA9IHtcbiAgICBnZXQoX2tleTogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShudWxsKTtcbiAgICB9LFxuXG4gICAgc2V0KF9rZXk6IHN0cmluZywgX3ZhbHVlOiBhbnkpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH0sXG59XG4iXX0=