"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.QDataSubscription = exports.QDataListener = void 0;

var _iterall = require("iterall");

var _filters = require("../filter/filters");

class QDataListener {
  constructor(collectionName, docType, accessRights, filter) {
    this.docType = docType;
    this.authFilter = QDataListener.getAuthFilter(collectionName, accessRights);
    this.filter = filter;
  }

  static getAuthFilter(collectionName, accessRights) {
    if (accessRights.restrictToAccounts.length === 0) {
      return null;
    }

    const accounts = new Set(accessRights.restrictToAccounts);

    switch (collectionName) {
      case 'accounts':
        return doc => accounts.has(doc._key);

      case 'transactions':
        return doc => accounts.has(doc.account_addr);

      case 'messages':
        return doc => accounts.has(doc.src) || accounts.has(doc.dst);

      default:
        return _ => false;
    }
  }

  isFiltered(doc) {
    if (this.authFilter && !this.authFilter(doc)) {
      return false;
    }

    return this.docType.test(null, doc, this.filter);
  }

} //$FlowFixMe


exports.QDataListener = QDataListener;

class QDataSubscription extends QDataListener {
  constructor(collectionName, docType, accessRights, filter, selection) {
    super(collectionName, docType, accessRights, filter);
    this.collectionName = collectionName;
    this.selection = selection;
    this.pullQueue = [];
    this.pushQueue = [];
    this.running = true;
    this.onClose = null;
  }

  pushDocument(doc) {
    if (this.isFiltered(doc) && !this.isQueueOverflow()) {
      const reduced = (0, _filters.selectFields)(doc, this.selection);
      this.pushValue({
        [this.collectionName]: reduced
      });
    }
  }

  isQueueOverflow() {
    return this.getQueueSize() >= 10;
  }

  getQueueSize() {
    return this.pushQueue.length + this.pullQueue.length;
  }

  pushValue(value) {
    if (this.pullQueue.length !== 0) {
      this.pullQueue.shift()(this.running ? {
        value,
        done: false
      } : {
        value: undefined,
        done: true
      });
    } else {
      this.pushQueue.push(value);
    }
  }

  async next() {
    return new Promise(resolve => {
      if (this.pushQueue.length !== 0) {
        resolve(this.running ? {
          value: this.pushQueue.shift(),
          done: false
        } : {
          value: undefined,
          done: true
        });
      } else {
        this.pullQueue.push(resolve);
      }
    });
  }

  async return() {
    if (this.onClose) {
      this.onClose();
    }

    await this.emptyQueue();
    return {
      value: undefined,
      done: true
    };
  }

  async throw(error) {
    if (this.onClose) {
      this.onClose();
    }

    await this.emptyQueue();
    return Promise.reject(error);
  } //$FlowFixMe


  [_iterall.$$asyncIterator]() {
    return this;
  }

  async emptyQueue() {
    if (this.running) {
      this.running = false;
      this.pullQueue.forEach(resolve => resolve({
        value: undefined,
        done: true
      }));
      this.pullQueue = [];
      this.pushQueue = [];
    }
  }

}

exports.QDataSubscription = QDataSubscription;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,