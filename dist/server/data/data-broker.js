"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.QDataBroker = void 0;

var _dataProvider = require("./data-provider");

class QDataBroker {
  constructor(options) {
    this.mutable = options.mutable;
    this.immutableHot = options.immutableHot;
    this.immutableCold = options.immutableCold;
    this.immutableColdCache = options.immutableColdCache;
  }

  start() {
    this.mutable.start();
    this.immutableHot.start();
    this.immutableCold.forEach(x => x.start());
  }

  async query(params) {
    if (params.segment === _dataProvider.dataSegment.MUTABLE) {
      return this.mutable.query(params.text, params.vars);
    }

    return combineResults(await Promise.all([this.immutableHot.query(params.text, params.vars), this.queryImmutableCold(params)]), params.orderBy);
  }

  async queryImmutableCold(params) {
    if (this.immutableCold.length === 0) {
      return [];
    }

    const key = JSON.stringify({
      text: params.text,
      vars: params.vars,
      orderBy: params.orderBy
    });
    let docs = await this.immutableColdCache.get(key);

    if (isNullOrUndefined(docs)) {
      const results = await Promise.all(this.immutableCold.map(x => x.query(params.text, params.vars)));
      docs = combineResults(results, params.orderBy);
      await this.immutableColdCache.set(key, docs);
    }

    return docs;
  }

}

exports.QDataBroker = QDataBroker;

function combineResults(results, orderBy) {
  const docs = collectDistinctDocs(results);

  if (orderBy.length > 0) {
    docs.sort((a, b) => compareDocs(a, b, orderBy));
  }

  return docs;
}

function collectDistinctDocs(source) {
  const distinctDocs = [];
  const distinctKeys = new Set();
  source.forEach(docs => {
    docs.forEach(doc => {
      if (!doc._key) {
        distinctDocs.push(doc);
      } else if (!distinctKeys.has(doc._key)) {
        distinctDocs.push(doc);
        distinctKeys.add(doc._key);
      }
    });
  });
  return distinctDocs;
}

function compareDocs(a, b, orderBy) {
  for (let i = 0; i < orderBy.length; i += 1) {
    const field = orderBy[i];
    const path = field.path.split('.');
    const aValue = getValue(a, path, 0);
    const bValue = getValue(a, path, 0);
    let comparison = compareValues(aValue, bValue);

    if (comparison !== 0) {
      return field.direction === 'DESC' ? -comparison : comparison;
    }
  }

  return 0;
}

function getValue(value, path, pathIndex) {
  if (isNullOrUndefined(value) || pathIndex >= path.length) {
    return value;
  }

  return getValue(value[path[pathIndex]], path, pathIndex + 1);
}

function compareValues(a, b) {
  const aHasValue = !isNullOrUndefined(a);
  const bHasValue = !isNullOrUndefined(b);

  if (!aHasValue) {
    return bHasValue ? -1 : 0;
  }

  if (!bHasValue) {
    return 1;
  }

  return a === b ? 0 : a < b ? -1 : 0;
}

function isNullOrUndefined(v) {
  return v === null || typeof v === 'undefined';
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,