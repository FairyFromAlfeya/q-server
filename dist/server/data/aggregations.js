"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AggregationHelperFactory = exports.AggregationFn = void 0;

var _resolversGenerated = require("../graphql/resolvers-generated");

const AggregationFn = {
  COUNT: 'COUNT',
  MIN: 'MIN',
  MAX: 'MAX',
  SUM: 'SUM',
  AVERAGE: 'AVERAGE'
};
exports.AggregationFn = AggregationFn;

// Query Builders

/**
 * Returns query parts in form of:
 * { collect: 'a<i> = <exprs0>', result: 'a<i>'} if exprs.length === 1
 * or
 * { collect: 'a<i> = <exprs0>, b<i> = <exprs1>, ..'., result: '{ a: a<i>, b: b<i>, ... }'}
 * if exprs.length > 1
 *
 * @param exprs
 * @param context
 * @return {{result: string, collects: string}}
 */
function queryParts(context, ...exprs) {
  const n = 'abcdef';

  const v = i => `${n[i]}${context.index}`; // 'a0' | 'b0' | ...


  const collectExpr = (x, i) => `${v(i)} = ${x}`; // 'a0 = expr[0]' | 'b0 = expr[1]' | ...


  const returnExpr = (x, i) => `${n[i]}: ${v(i)}`; // 'a: a0' | 'b: b0' | ...


  return {
    collect: exprs.map(collectExpr).join(', '),
    // 'a0 = expr[0], b0 = expr[1], ...'
    result: exprs.length === 1 ? `${v(0)}` // 'a0'
    : `{ ${exprs.map(returnExpr).join(', ')} }` // '{ a: a0, b: b0, ... }'

  };
}

const countField = {
  type: 'string',
  path: ''
};

function count(context) {
  return queryParts(context, 'COUNT(doc)');
}

function simple(context) {
  const fn = context.fn;
  return queryParts(context, context.isArray ? `${fn}(${fn}(${context.field.path}))` : `${fn}(${context.field.path})`);
}

function bigIntToNum(hex) {
  return `TO_NUMBER(CONCAT("0x", ${hex}))`;
}

function negBigIntToNum(hex) {
  return `-(EXP2(LENGTH(${hex}) * 4) - 1 - ${bigIntToNum(hex)})`;
}

function bigIntHiPart(path, prefix) {
  return `SUBSTRING(${path}, ${prefix}, LENGTH(${path}) - ${prefix + 8})`;
}

function bigIntLoPart(path, prefix) {
  return `RIGHT(SUBSTRING(${path}, ${prefix}), 8)`;
}

function signedBigIntPart(path, prefix, part) {
  return `SUBSTRING(${path}, 0, 1) == "-"
    ? ${negBigIntToNum(part(path, prefix + 1))}
    : ${bigIntToNum(part(path, prefix))}`;
}

function signedBigIntHiPart(path, prefix) {
  return signedBigIntPart(path, prefix, bigIntHiPart);
}

function signedBigIntLoPart(path, prefix) {
  return signedBigIntPart(path, prefix, bigIntLoPart);
}

function bigIntSumExpr(part, context) {
  const path = context.field.path;
  const prefix = context.bigIntPrefix;
  return context.isArray ? `SUM(SUM((${path})[* RETURN ${part('CURRENT', prefix)}]))` : `SUM(${part(path, prefix)})`;
}

function bigIntSum(context) {
  return queryParts(context, bigIntSumExpr(signedBigIntHiPart, context), bigIntSumExpr(signedBigIntLoPart, context));
}

function bigIntAvg(context) {
  return queryParts(context, bigIntSumExpr(signedBigIntHiPart, context), bigIntSumExpr(signedBigIntLoPart, context), context.isArray ? `SUM(COUNT(${context.field.path}))` : `COUNT(doc)`);
} // Converters


function reduce(context, values, fn) {
  let reduced = values[0];

  for (let i = 1; i < values.length; i += 1) {
    const value = values[i];

    if (fn === 'MIN') {
      if (value < reduced) {
        reduced = value;
      }
    } else if (fn === 'MAX') {
      if (value > reduced) {
        reduced = value;
      }
    } else {
      reduced += value;
    }
  }

  if (fn === 'AVERAGE') {
    if (context.bigIntPrefix > 0) {
      reduced = reduced / BigInt(values.length);
    } else {
      reduced = Math.trunc(reduced / values.length);
    }
  }

  return reduced;
}

function reducer(convert, convertBack, fn) {
  return (context, values) => {
    if (values.length === 0) {
      return undefined;
    }

    let reduced = reduce(context, values.map(x => convert(context, x)), fn);
    return convertBack(context, reduced);
  };
}

function noConversion(context, x) {
  return x;
}

function bigIntStringToDecimalString(context, value) {
  if (typeof value === 'number') {
    return value.toString();
  } //$FlowFixMe


  return value.substr(0, 1) === "-" ? BigInt(`-0x${value.substr(context.bigIntPrefix + 1)}`).toString() : BigInt(`0x${value.substr(context.bigIntPrefix)}`).toString();
} //$FlowFixMe


function bigIntPartsToBigInt(context, parts) {
  const h = parts.a >= 0 ? BigInt(`0x${Math.round(parts.a).toString(16)}00000000`) : -BigInt(`0x${Math.round(Math.abs(parts.a)).toString(16)}00000000`);
  const l = BigInt(Math.round(parts.b));
  return h + l;
}

function toString(context, value) {
  return value.toString();
}

function bigIntPartsToBigIntAvg(context, value) {
  const sum = bigIntPartsToBigInt(context, value);
  const count = Number(value.c || 0);
  return count > 0 ? sum / BigInt(Math.round(count)) : sum;
}

class AggregationHelperFactory {
  static create(collection, index, aggregation) {
    const field = _resolversGenerated.scalarFields.get(`${collection}.${aggregation.field || 'id'}`) || countField;
    const fn = aggregation.fn || AggregationFn.COUNT;
    const context = {
      index,
      field,
      fn,
      bigIntPrefix: field.type === 'uint1024' ? 2 : field.type === 'uint64' ? 1 : 0,
      isArray: field.path.includes('[*]')
    }; // Case of count

    if (context.fn === AggregationFn.COUNT) {
      return {
        context,
        buildQuery: count,
        convertResult: (context, values) => reduce(context, values, 'SUM')
      };
    }

    if (context.field.path === '') {
      throw new Error(`[${aggregation.field}] can't be aggregated`);
    } // Case of number fields or min/max fn


    if (field.type === 'number' || fn === AggregationFn.MIN || fn === AggregationFn.MAX) {
      return {
        context,
        buildQuery: simple,
        convertResult: context.bigIntPrefix > 0 // big integers
        ? reducer(noConversion, bigIntStringToDecimalString, fn) // numbers and strings
        : reducer(noConversion, noConversion, fn)
      };
    }

    if (context.bigIntPrefix > 0) {
      return context.fn === AggregationFn.AVERAGE ? {
        // big integer average
        context,
        buildQuery: bigIntAvg,
        convertResult: reducer(bigIntPartsToBigIntAvg, toString, fn)
      } : {
        // big integer sum
        context,
        buildQuery: bigIntSum,
        convertResult: reducer(bigIntPartsToBigInt, toString, fn)
      };
    }

    throw new Error(`[${aggregation.field}] can't be used with [${fn}]`);
  }

  static createQuery(collection, filter, fields) {
    const filterSection = filter ? `FILTER ${filter}` : '';
    const helpers = fields.map((aggregation, i) => {
      return AggregationHelperFactory.create(collection, i, aggregation);
    });
    let text;
    const isSingleCount = fields.length === 1 && fields[0].fn === AggregationFn.COUNT;

    if (isSingleCount) {
      if (filterSection !== '') {
        text = `
                    FOR doc IN ${collection}
                    ${filterSection}
                    COLLECT WITH COUNT INTO a0
                    RETURN [a0]`;
      } else {
        text = `RETURN [LENGTH(${collection})]`;
      }
    } else {
      const queries = helpers.map(x => x.buildQuery(x.context));
      text = `
                FOR doc IN ${collection}
                ${filterSection}
                COLLECT AGGREGATE ${queries.map(x => x.collect).join(', ')}
                RETURN [${queries.map(x => x.result).join(', ')}]`;
    }

    return {
      text,
      helpers
    };
  }

  static convertResults(results, helpers) {
    return helpers.map((helper, i) => {
      const values = results.map(x => x[i]).filter(x => x !== undefined && x !== null);
      return helper.convertResult(helper.context, values);
    });
  }

}

exports.AggregationHelperFactory = AggregationHelperFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,