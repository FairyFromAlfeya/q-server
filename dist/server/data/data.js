"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _collection = require("./collection");

var _auth = require("../auth");

var _config = require("../config");

var _logs = _interopRequireDefault(require("../logs"));

var _opentracing = require("opentracing");

var _tracer = require("../tracer");

var _utils = require("../utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
 * Copyright 2018-2020 TON DEV SOLUTIONS LTD.
 *
 * Licensed under the SOFTWARE EVALUATION License (the "License"); you may not use
 * this file except in compliance with the License.  You may obtain a copy of the
 * License at:
 *
 * http://www.ton.dev/licenses
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific TON DEV software governing permissions and
 * limitations under the License.
 */
class QData {
  // Dependencies
  // Own
  constructor(options) {
    this.providers = options.providers;
    this.slowQueriesProviders = options.slowQueriesProviders || options.providers;
    this.logs = options.logs;
    this.stats = options.stats;
    this.auth = options.auth;
    this.tracer = options.tracer;
    this.isTests = options.isTests;
    this.log = this.logs.create('data');
    this.statPostCount = new _tracer.StatsCounter(this.stats, _config.STATS.post.count, []);
    this.statPostFailed = new _tracer.StatsCounter(this.stats, _config.STATS.post.failed, []);
    this.collections = [];
    this.collectionsByName = new Map();
  }

  addCollection(name, docType, mutable, indexes) {
    const collection = new _collection.QDataCollection({
      name,
      docType,
      mutable,
      indexes,
      provider: mutable ? this.providers.mutable : this.providers.immutable,
      slowQueriesProvider: mutable ? this.providers.mutable : this.slowQueriesProviders.immutable,
      logs: this.logs,
      auth: this.auth,
      tracer: this.tracer,
      stats: this.stats,
      isTests: this.isTests
    });
    this.collections.push(collection);
    this.collectionsByName.set(name, collection);
    return collection;
  }

  start() {
    const mutable = [];
    const immutable = [];
    this.collections.forEach(x => (x.mutable ? mutable : immutable).push(x.name));
    this.providers.mutable.start(mutable);
    this.providers.immutable.start(immutable);
    this.slowQueriesProviders.mutable.start([]);
    this.slowQueriesProviders.immutable.start([]);
  }

  dropCachedDbInfo() {
    this.collections.forEach(x => x.dropCachedDbInfo());
  }

  async query(provider, text, vars, orderBy) {
    return (0, _utils.wrap)(this.log, 'QUERY', {
      text,
      vars
    }, async () => {
      return provider.query(text, vars, orderBy);
    });
  }

  async finishOperations(operationIds) {
    let count = 0;
    this.collections.forEach(x => count += x.finishOperations(operationIds));
    return count;
  }

}

exports.default = QData;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,