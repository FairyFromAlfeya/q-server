"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _arangoProvider = require("./arango-provider");

var _collection = require("./collection");

var _auth = require("../auth");

var _config = require("../config");

var _logs = _interopRequireDefault(require("../logs"));

var _resolversGenerated = require("../graphql/resolvers-generated");

var _opentracing = require("opentracing");

var _tracer = require("../tracer");

var _utils = require("../utils");

var _dataBroker = require("./data-broker");

var _dataProvider = require("./data-provider");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
 * Copyright 2018-2020 TON DEV SOLUTIONS LTD.
 *
 * Licensed under the SOFTWARE EVALUATION License (the "License"); you may not use
 * this file except in compliance with the License.  You may obtain a copy of the
 * License at:
 *
 * http://www.ton.dev/licenses
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific TON DEV software governing permissions and
 * limitations under the License.
 */
function createBroker(brokerName, logs, config) {
  const arangoDb = (dbName, segment, config) => new _arangoProvider.ArangoProvider(logs.create(`${brokerName}_${dbName}`), segment, config);

  return new _dataBroker.QDataBroker({
    mutable: arangoDb('mutable', _dataProvider.dataSegment.MUTABLE, config.mutable),
    immutableHot: arangoDb('hot', _dataProvider.dataSegment.IMMUTABLE, config.immutableHot),
    immutableCold: config.immutableCold.map(x => arangoDb('cold', _dataProvider.dataSegment.IMMUTABLE, x)),
    immutableColdCache: _dataProvider.missingDataCache
  });
}

class QData {
  constructor(config, logs, auth, tracer, stats) {
    this.config = config;
    this.log = logs.create('data');
    this.auth = auth;
    this.tracer = tracer;
    this.statPostCount = new _tracer.StatsCounter(stats, _config.STATS.post.count, []);
    this.statPostFailed = new _tracer.StatsCounter(stats, _config.STATS.post.failed, []);
    this.broker = createBroker('fast', logs, config.data);
    this.slowQueriesBroker = createBroker('slow', logs, config.slowQueriesData);
    this.collections = [];
    this.collectionsByName = new Map();

    const addCollection = (name, docType) => {
      const collection = new _collection.QCollection({
        name,
        docType,
        logs,
        auth,
        tracer,
        stats,
        broker: this.broker,
        slowQueriesBroker: this.slowQueriesBroker,
        isTests: config.isTests || false
      });
      this.collections.push(collection);
      this.collectionsByName.set(name, collection);
      return collection;
    };

    this.transactions = addCollection('transactions', _resolversGenerated.Transaction);
    this.messages = addCollection('messages', _resolversGenerated.Message);
    this.accounts = addCollection('accounts', _resolversGenerated.Account);
    this.blocks = addCollection('blocks', _resolversGenerated.Block);
    this.blocks_signatures = addCollection('blocks_signatures', _resolversGenerated.BlockSignatures);
  }

  start() {
    this.broker.start();
    this.slowQueriesBroker.start();
  }

  dropCachedDbInfo() {
    this.collections.forEach(x => x.dropCachedDbInfo());
  }

  async query(segment, text, vars, orderBy) {
    return (0, _utils.wrap)(this.log, 'QUERY', {
      text,
      vars
    }, async () => {
      return this.broker.query({
        segment,
        text,
        vars,
        orderBy
      });
    });
  }

  async finishOperations(operationIds) {
    let count = 0;
    this.collections.forEach(x => count += x.finishOperations(operationIds));
    return count;
  }

}

exports.default = QData;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,