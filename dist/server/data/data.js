"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dataCollectionInfo = exports.missingDataCache = exports.dataSegment = exports.dataEvent = void 0;
const dataEvent = {
  UPSERT: 'insert/update',
  INSERT: 'insert',
  UPDATE: 'update'
};
exports.dataEvent = dataEvent;
const dataSegment = {
  IMMUTABLE: 'immutable',
  MUTABLE: 'mutable'
};
exports.dataSegment = dataSegment;
const missingDataCache = {
  get(_key) {
    return Promise.resolve(null);
  },

  set(_key, _value) {
    return Promise.resolve();
  }

};
exports.missingDataCache = missingDataCache;
const INDEXES = {
  blocks: {
    indexes: [sortedIndex(['seq_no', 'gen_utime']), sortedIndex(['gen_utime']), sortedIndex(['workchain_id', 'shard', 'seq_no']), sortedIndex(['workchain_id', 'shard', 'gen_utime']), sortedIndex(['workchain_id', 'seq_no']), sortedIndex(['workchain_id', 'gen_utime']), sortedIndex(['master.min_shard_gen_utime']), sortedIndex(['prev_ref.root_hash', '_key']), sortedIndex(['prev_alt_ref.root_hash', '_key'])]
  },
  accounts: {
    indexes: [sortedIndex(['last_trans_lt']), sortedIndex(['balance'])]
  },
  messages: {
    indexes: [sortedIndex(['block_id']), sortedIndex(['value', 'created_at']), sortedIndex(['src', 'value', 'created_at']), sortedIndex(['dst', 'value', 'created_at']), sortedIndex(['src', 'created_at']), sortedIndex(['dst', 'created_at']), sortedIndex(['created_lt']), sortedIndex(['created_at'])]
  },
  transactions: {
    indexes: [sortedIndex(['block_id']), sortedIndex(['in_msg']), sortedIndex(['out_msgs[*]']), sortedIndex(['account_addr', 'now']), sortedIndex(['now']), sortedIndex(['lt']), sortedIndex(['account_addr', 'orig_status', 'end_status']), sortedIndex(['now', 'account_addr', 'lt'])]
  },
  blocks_signatures: {
    indexes: [sortedIndex(['signatures[*].node_id', 'gen_utime'])]
  }
};

const col = (name, segment) => ({
  name,
  segment,
  indexes: INDEXES[name].indexes.concat({
    fields: ['_key']
  })
});

const dataCollectionInfo = {
  accounts: col('accounts', dataSegment.MUTABLE),
  messages: col('messages', dataSegment.IMMUTABLE),
  transactions: col('transactions', dataSegment.IMMUTABLE),
  blocks: col('blocks', dataSegment.IMMUTABLE),
  blocks_signatures: col('blocks_signatures', dataSegment.IMMUTABLE)
};
exports.dataCollectionInfo = dataCollectionInfo;

function sortedIndex(fields) {
  return {
    type: 'persistent',
    fields
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zZXJ2ZXIvZGF0YS9kYXRhLmpzIl0sIm5hbWVzIjpbImRhdGFFdmVudCIsIlVQU0VSVCIsIklOU0VSVCIsIlVQREFURSIsImRhdGFTZWdtZW50IiwiSU1NVVRBQkxFIiwiTVVUQUJMRSIsIm1pc3NpbmdEYXRhQ2FjaGUiLCJnZXQiLCJfa2V5IiwiUHJvbWlzZSIsInJlc29sdmUiLCJzZXQiLCJfdmFsdWUiLCJJTkRFWEVTIiwiYmxvY2tzIiwiaW5kZXhlcyIsInNvcnRlZEluZGV4IiwiYWNjb3VudHMiLCJtZXNzYWdlcyIsInRyYW5zYWN0aW9ucyIsImJsb2Nrc19zaWduYXR1cmVzIiwiY29sIiwibmFtZSIsInNlZ21lbnQiLCJjb25jYXQiLCJmaWVsZHMiLCJkYXRhQ29sbGVjdGlvbkluZm8iLCJ0eXBlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFlTyxNQUFNQSxTQUFTLEdBQUc7QUFDckJDLEVBQUFBLE1BQU0sRUFBRSxlQURhO0FBRXJCQyxFQUFBQSxNQUFNLEVBQUUsUUFGYTtBQUdyQkMsRUFBQUEsTUFBTSxFQUFFO0FBSGEsQ0FBbEI7O0FBUUEsTUFBTUMsV0FBVyxHQUFHO0FBQ3ZCQyxFQUFBQSxTQUFTLEVBQUUsV0FEWTtBQUV2QkMsRUFBQUEsT0FBTyxFQUFFO0FBRmMsQ0FBcEI7O0FBK0JBLE1BQU1DLGdCQUE0QixHQUFHO0FBQ3hDQyxFQUFBQSxHQUFHLENBQUNDLElBQUQsRUFBNkI7QUFDNUIsV0FBT0MsT0FBTyxDQUFDQyxPQUFSLENBQWdCLElBQWhCLENBQVA7QUFDSCxHQUh1Qzs7QUFLeENDLEVBQUFBLEdBQUcsQ0FBQ0gsSUFBRCxFQUFlSSxNQUFmLEVBQTJDO0FBQzFDLFdBQU9ILE9BQU8sQ0FBQ0MsT0FBUixFQUFQO0FBQ0g7O0FBUHVDLENBQXJDOztBQVVQLE1BQU1HLE9BQU8sR0FBRztBQUNaQyxFQUFBQSxNQUFNLEVBQUU7QUFDSkMsSUFBQUEsT0FBTyxFQUFFLENBQ0xDLFdBQVcsQ0FBQyxDQUFDLFFBQUQsRUFBVyxXQUFYLENBQUQsQ0FETixFQUVMQSxXQUFXLENBQUMsQ0FBQyxXQUFELENBQUQsQ0FGTixFQUdMQSxXQUFXLENBQUMsQ0FBQyxjQUFELEVBQWlCLE9BQWpCLEVBQTBCLFFBQTFCLENBQUQsQ0FITixFQUlMQSxXQUFXLENBQUMsQ0FBQyxjQUFELEVBQWlCLE9BQWpCLEVBQTBCLFdBQTFCLENBQUQsQ0FKTixFQUtMQSxXQUFXLENBQUMsQ0FBQyxjQUFELEVBQWlCLFFBQWpCLENBQUQsQ0FMTixFQU1MQSxXQUFXLENBQUMsQ0FBQyxjQUFELEVBQWlCLFdBQWpCLENBQUQsQ0FOTixFQU9MQSxXQUFXLENBQUMsQ0FBQyw0QkFBRCxDQUFELENBUE4sRUFRTEEsV0FBVyxDQUFDLENBQUMsb0JBQUQsRUFBdUIsTUFBdkIsQ0FBRCxDQVJOLEVBU0xBLFdBQVcsQ0FBQyxDQUFDLHdCQUFELEVBQTJCLE1BQTNCLENBQUQsQ0FUTjtBQURMLEdBREk7QUFjWkMsRUFBQUEsUUFBUSxFQUFFO0FBQ05GLElBQUFBLE9BQU8sRUFBRSxDQUNMQyxXQUFXLENBQUMsQ0FBQyxlQUFELENBQUQsQ0FETixFQUVMQSxXQUFXLENBQUMsQ0FBQyxTQUFELENBQUQsQ0FGTjtBQURILEdBZEU7QUFvQlpFLEVBQUFBLFFBQVEsRUFBRTtBQUNOSCxJQUFBQSxPQUFPLEVBQUUsQ0FDTEMsV0FBVyxDQUFDLENBQUMsVUFBRCxDQUFELENBRE4sRUFFTEEsV0FBVyxDQUFDLENBQUMsT0FBRCxFQUFVLFlBQVYsQ0FBRCxDQUZOLEVBR0xBLFdBQVcsQ0FBQyxDQUFDLEtBQUQsRUFBUSxPQUFSLEVBQWlCLFlBQWpCLENBQUQsQ0FITixFQUlMQSxXQUFXLENBQUMsQ0FBQyxLQUFELEVBQVEsT0FBUixFQUFpQixZQUFqQixDQUFELENBSk4sRUFLTEEsV0FBVyxDQUFDLENBQUMsS0FBRCxFQUFRLFlBQVIsQ0FBRCxDQUxOLEVBTUxBLFdBQVcsQ0FBQyxDQUFDLEtBQUQsRUFBUSxZQUFSLENBQUQsQ0FOTixFQU9MQSxXQUFXLENBQUMsQ0FBQyxZQUFELENBQUQsQ0FQTixFQVFMQSxXQUFXLENBQUMsQ0FBQyxZQUFELENBQUQsQ0FSTjtBQURILEdBcEJFO0FBZ0NaRyxFQUFBQSxZQUFZLEVBQUU7QUFDVkosSUFBQUEsT0FBTyxFQUFFLENBQ0xDLFdBQVcsQ0FBQyxDQUFDLFVBQUQsQ0FBRCxDQUROLEVBRUxBLFdBQVcsQ0FBQyxDQUFDLFFBQUQsQ0FBRCxDQUZOLEVBR0xBLFdBQVcsQ0FBQyxDQUFDLGFBQUQsQ0FBRCxDQUhOLEVBSUxBLFdBQVcsQ0FBQyxDQUFDLGNBQUQsRUFBaUIsS0FBakIsQ0FBRCxDQUpOLEVBS0xBLFdBQVcsQ0FBQyxDQUFDLEtBQUQsQ0FBRCxDQUxOLEVBTUxBLFdBQVcsQ0FBQyxDQUFDLElBQUQsQ0FBRCxDQU5OLEVBT0xBLFdBQVcsQ0FBQyxDQUFDLGNBQUQsRUFBaUIsYUFBakIsRUFBZ0MsWUFBaEMsQ0FBRCxDQVBOLEVBUUxBLFdBQVcsQ0FBQyxDQUFDLEtBQUQsRUFBUSxjQUFSLEVBQXdCLElBQXhCLENBQUQsQ0FSTjtBQURDLEdBaENGO0FBNENaSSxFQUFBQSxpQkFBaUIsRUFBRTtBQUNmTCxJQUFBQSxPQUFPLEVBQUUsQ0FDTEMsV0FBVyxDQUFDLENBQUMsdUJBQUQsRUFBMEIsV0FBMUIsQ0FBRCxDQUROO0FBRE07QUE1Q1AsQ0FBaEI7O0FBbURBLE1BQU1LLEdBQUcsR0FBRyxDQUFDQyxJQUFELEVBQU9DLE9BQVAsTUFBb0I7QUFBRUQsRUFBQUEsSUFBRjtBQUFRQyxFQUFBQSxPQUFSO0FBQWlCUixFQUFBQSxPQUFPLEVBQUVGLE9BQU8sQ0FBQ1MsSUFBRCxDQUFQLENBQWNQLE9BQWQsQ0FBc0JTLE1BQXRCLENBQTZCO0FBQUVDLElBQUFBLE1BQU0sRUFBRSxDQUFDLE1BQUQ7QUFBVixHQUE3QjtBQUExQixDQUFwQixDQUFaOztBQUNPLE1BQU1DLGtCQUFpRCxHQUFHO0FBQzdEVCxFQUFBQSxRQUFRLEVBQUVJLEdBQUcsQ0FBQyxVQUFELEVBQWFsQixXQUFXLENBQUNFLE9BQXpCLENBRGdEO0FBRTdEYSxFQUFBQSxRQUFRLEVBQUVHLEdBQUcsQ0FBQyxVQUFELEVBQWFsQixXQUFXLENBQUNDLFNBQXpCLENBRmdEO0FBRzdEZSxFQUFBQSxZQUFZLEVBQUVFLEdBQUcsQ0FBQyxjQUFELEVBQWlCbEIsV0FBVyxDQUFDQyxTQUE3QixDQUg0QztBQUk3RFUsRUFBQUEsTUFBTSxFQUFFTyxHQUFHLENBQUMsUUFBRCxFQUFXbEIsV0FBVyxDQUFDQyxTQUF2QixDQUprRDtBQUs3RGdCLEVBQUFBLGlCQUFpQixFQUFFQyxHQUFHLENBQUMsbUJBQUQsRUFBc0JsQixXQUFXLENBQUNDLFNBQWxDO0FBTHVDLENBQTFEOzs7QUFTUCxTQUFTWSxXQUFULENBQXFCUyxNQUFyQixFQUFtRDtBQUMvQyxTQUFPO0FBQ0hFLElBQUFBLElBQUksRUFBRSxZQURIO0FBRUhGLElBQUFBO0FBRkcsR0FBUDtBQUlIIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQGZsb3dcblxuZXhwb3J0IHR5cGUgUUluZGV4SW5mbyA9IHtcbiAgICBmaWVsZHM6IHN0cmluZ1tdLFxuICAgIHR5cGU/OiBzdHJpbmcsXG59XG5cblxuZXhwb3J0IHR5cGUgUURvYyA9IHtcbiAgICBfa2V5OiBzdHJpbmc7XG4gICAgW3N0cmluZ106IGFueTtcbn07XG5cblxuZXhwb3J0IHR5cGUgUURhdGFFdmVudCA9ICdpbnNlcnQvdXBkYXRlJyB8ICdpbnNlcnQnIHwgJ3VwZGF0ZSc7XG5leHBvcnQgY29uc3QgZGF0YUV2ZW50ID0ge1xuICAgIFVQU0VSVDogJ2luc2VydC91cGRhdGUnLFxuICAgIElOU0VSVDogJ2luc2VydCcsXG4gICAgVVBEQVRFOiAndXBkYXRlJyxcbn07XG5cblxuZXhwb3J0IHR5cGUgUURhdGFTZWdtZW50ID0gJ2ltbXV0YWJsZScgfCAnbXV0YWJsZSc7XG5leHBvcnQgY29uc3QgZGF0YVNlZ21lbnQgPSB7XG4gICAgSU1NVVRBQkxFOiAnaW1tdXRhYmxlJyxcbiAgICBNVVRBQkxFOiAnbXV0YWJsZScsXG59O1xuXG5leHBvcnQgdHlwZSBRQ29sbGVjdGlvbkluZm8gPSB7XG4gICAgbmFtZTogc3RyaW5nLFxuICAgIHNlZ21lbnQ6IFFEYXRhU2VnbWVudCxcbiAgICBpbmRleGVzOiBRSW5kZXhJbmZvW10sXG59O1xuXG5leHBvcnQgaW50ZXJmYWNlIFFEYXRhUHJvdmlkZXIge1xuICAgIHN0YXJ0KCk6IHZvaWQ7XG5cbiAgICBnZXRDb2xsZWN0aW9uSW5kZXhlcyhjb2xsZWN0aW9uOiBzdHJpbmcpOiBQcm9taXNlPFFJbmRleEluZm9bXT47XG5cbiAgICBxdWVyeSh0ZXh0OiBzdHJpbmcsIHZhcnM6IHsgW3N0cmluZ106IGFueSB9KTogUHJvbWlzZTxhbnk+O1xuXG4gICAgc3Vic2NyaWJlKGNvbGxlY3Rpb246IHN0cmluZywgbGlzdGVuZXI6IChkb2M6IGFueSwgZXZlbnQ6IFFEYXRhRXZlbnQpID0+IHZvaWQpOiBhbnk7XG5cbiAgICB1bnN1YnNjcmliZShzdWJzY3JpcHRpb246IGFueSk6IHZvaWQ7XG59XG5cblxuZXhwb3J0IGludGVyZmFjZSBRRGF0YUNhY2hlIHtcbiAgICBnZXQoa2V5OiBzdHJpbmcpOiBQcm9taXNlPGFueT47XG5cbiAgICBzZXQoa2V5OiBzdHJpbmcsIHZhbHVlOiBhbnkpOiBQcm9taXNlPHZvaWQ+O1xufVxuXG5cbmV4cG9ydCBjb25zdCBtaXNzaW5nRGF0YUNhY2hlOiBRRGF0YUNhY2hlID0ge1xuICAgIGdldChfa2V5OiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG51bGwpO1xuICAgIH0sXG5cbiAgICBzZXQoX2tleTogc3RyaW5nLCBfdmFsdWU6IGFueSk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfSxcbn1cblxuY29uc3QgSU5ERVhFUyA9IHtcbiAgICBibG9ja3M6IHtcbiAgICAgICAgaW5kZXhlczogW1xuICAgICAgICAgICAgc29ydGVkSW5kZXgoWydzZXFfbm8nLCAnZ2VuX3V0aW1lJ10pLFxuICAgICAgICAgICAgc29ydGVkSW5kZXgoWydnZW5fdXRpbWUnXSksXG4gICAgICAgICAgICBzb3J0ZWRJbmRleChbJ3dvcmtjaGFpbl9pZCcsICdzaGFyZCcsICdzZXFfbm8nXSksXG4gICAgICAgICAgICBzb3J0ZWRJbmRleChbJ3dvcmtjaGFpbl9pZCcsICdzaGFyZCcsICdnZW5fdXRpbWUnXSksXG4gICAgICAgICAgICBzb3J0ZWRJbmRleChbJ3dvcmtjaGFpbl9pZCcsICdzZXFfbm8nXSksXG4gICAgICAgICAgICBzb3J0ZWRJbmRleChbJ3dvcmtjaGFpbl9pZCcsICdnZW5fdXRpbWUnXSksXG4gICAgICAgICAgICBzb3J0ZWRJbmRleChbJ21hc3Rlci5taW5fc2hhcmRfZ2VuX3V0aW1lJ10pLFxuICAgICAgICAgICAgc29ydGVkSW5kZXgoWydwcmV2X3JlZi5yb290X2hhc2gnLCAnX2tleSddKSxcbiAgICAgICAgICAgIHNvcnRlZEluZGV4KFsncHJldl9hbHRfcmVmLnJvb3RfaGFzaCcsICdfa2V5J10pLFxuICAgICAgICBdLFxuICAgIH0sXG4gICAgYWNjb3VudHM6IHtcbiAgICAgICAgaW5kZXhlczogW1xuICAgICAgICAgICAgc29ydGVkSW5kZXgoWydsYXN0X3RyYW5zX2x0J10pLFxuICAgICAgICAgICAgc29ydGVkSW5kZXgoWydiYWxhbmNlJ10pLFxuICAgICAgICBdLFxuICAgIH0sXG4gICAgbWVzc2FnZXM6IHtcbiAgICAgICAgaW5kZXhlczogW1xuICAgICAgICAgICAgc29ydGVkSW5kZXgoWydibG9ja19pZCddKSxcbiAgICAgICAgICAgIHNvcnRlZEluZGV4KFsndmFsdWUnLCAnY3JlYXRlZF9hdCddKSxcbiAgICAgICAgICAgIHNvcnRlZEluZGV4KFsnc3JjJywgJ3ZhbHVlJywgJ2NyZWF0ZWRfYXQnXSksXG4gICAgICAgICAgICBzb3J0ZWRJbmRleChbJ2RzdCcsICd2YWx1ZScsICdjcmVhdGVkX2F0J10pLFxuICAgICAgICAgICAgc29ydGVkSW5kZXgoWydzcmMnLCAnY3JlYXRlZF9hdCddKSxcbiAgICAgICAgICAgIHNvcnRlZEluZGV4KFsnZHN0JywgJ2NyZWF0ZWRfYXQnXSksXG4gICAgICAgICAgICBzb3J0ZWRJbmRleChbJ2NyZWF0ZWRfbHQnXSksXG4gICAgICAgICAgICBzb3J0ZWRJbmRleChbJ2NyZWF0ZWRfYXQnXSksXG4gICAgICAgIF0sXG4gICAgfSxcbiAgICB0cmFuc2FjdGlvbnM6IHtcbiAgICAgICAgaW5kZXhlczogW1xuICAgICAgICAgICAgc29ydGVkSW5kZXgoWydibG9ja19pZCddKSxcbiAgICAgICAgICAgIHNvcnRlZEluZGV4KFsnaW5fbXNnJ10pLFxuICAgICAgICAgICAgc29ydGVkSW5kZXgoWydvdXRfbXNnc1sqXSddKSxcbiAgICAgICAgICAgIHNvcnRlZEluZGV4KFsnYWNjb3VudF9hZGRyJywgJ25vdyddKSxcbiAgICAgICAgICAgIHNvcnRlZEluZGV4KFsnbm93J10pLFxuICAgICAgICAgICAgc29ydGVkSW5kZXgoWydsdCddKSxcbiAgICAgICAgICAgIHNvcnRlZEluZGV4KFsnYWNjb3VudF9hZGRyJywgJ29yaWdfc3RhdHVzJywgJ2VuZF9zdGF0dXMnXSksXG4gICAgICAgICAgICBzb3J0ZWRJbmRleChbJ25vdycsICdhY2NvdW50X2FkZHInLCAnbHQnXSksXG4gICAgICAgIF0sXG4gICAgfSxcbiAgICBibG9ja3Nfc2lnbmF0dXJlczoge1xuICAgICAgICBpbmRleGVzOiBbXG4gICAgICAgICAgICBzb3J0ZWRJbmRleChbJ3NpZ25hdHVyZXNbKl0ubm9kZV9pZCcsICdnZW5fdXRpbWUnXSksXG4gICAgICAgIF0sXG4gICAgfSxcbn07XG5cbmNvbnN0IGNvbCA9IChuYW1lLCBzZWdtZW50KSA9PiAoeyBuYW1lLCBzZWdtZW50LCBpbmRleGVzOiBJTkRFWEVTW25hbWVdLmluZGV4ZXMuY29uY2F0KHsgZmllbGRzOiBbJ19rZXknXSB9KSB9KTtcbmV4cG9ydCBjb25zdCBkYXRhQ29sbGVjdGlvbkluZm86IHsgW3N0cmluZ106IFFDb2xsZWN0aW9uSW5mbyB9ID0ge1xuICAgIGFjY291bnRzOiBjb2woJ2FjY291bnRzJywgZGF0YVNlZ21lbnQuTVVUQUJMRSksXG4gICAgbWVzc2FnZXM6IGNvbCgnbWVzc2FnZXMnLCBkYXRhU2VnbWVudC5JTU1VVEFCTEUpLFxuICAgIHRyYW5zYWN0aW9uczogY29sKCd0cmFuc2FjdGlvbnMnLCBkYXRhU2VnbWVudC5JTU1VVEFCTEUpLFxuICAgIGJsb2NrczogY29sKCdibG9ja3MnLCBkYXRhU2VnbWVudC5JTU1VVEFCTEUpLFxuICAgIGJsb2Nrc19zaWduYXR1cmVzOiBjb2woJ2Jsb2Nrc19zaWduYXR1cmVzJywgZGF0YVNlZ21lbnQuSU1NVVRBQkxFKSxcbn1cblxuXG5mdW5jdGlvbiBzb3J0ZWRJbmRleChmaWVsZHM6IHN0cmluZ1tdKTogUUluZGV4SW5mbyB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogJ3BlcnNpc3RlbnQnLFxuICAgICAgICBmaWVsZHMsXG4gICAgfTtcbn1cbiJdfQ==