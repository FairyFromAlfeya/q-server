"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.attachCustomResolvers = attachCustomResolvers;

var _fs = _interopRequireDefault(require("fs"));

var _kafkajs = require("kafkajs");

var _opentracing = require("opentracing");

var _arango = _interopRequireDefault(require("./arango"));

var _arangoCollection = require("./arango-collection");

var _auth = require("./auth");

var _config = require("./config");

var _path = _interopRequireDefault(require("path"));

var _nodeFetch = _interopRequireDefault(require("node-fetch"));

var _tracer = require("./tracer");

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function isObject(test) {
  return typeof test === 'object' && test !== null;
}

function overrideObject(original, overrides) {
  Object.entries(overrides).forEach(([name, overrideValue]) => {
    if (name in original && isObject(overrideValue) && isObject(original[name])) {
      overrideObject(original[name], overrideValue);
    } else {
      original[name] = overrideValue;
    }
  });
}

//------------------------------------------------------------- Query
function info() {
  const pkg = JSON.parse(_fs.default.readFileSync(_path.default.resolve(__dirname, '..', '..', 'package.json')));
  return {
    version: pkg.version
  };
}

async function getAccountsCount(_parent, args, context) {
  const tracer = context.db.tracer;
  return _tracer.QTracer.trace(tracer, 'getAccountsCount', async () => {
    await (0, _arangoCollection.requireGrantedAccess)(context, args);
    const result = await context.db.query(`RETURN LENGTH(accounts)`, {});
    const counts = result;
    return counts.length > 0 ? counts[0] : 0;
  }, _tracer.QTracer.getParentSpan(tracer, context));
}

async function getTransactionsCount(_parent, args, context) {
  const tracer = context.db.tracer;
  return _tracer.QTracer.trace(tracer, 'getTransactionsCount', async () => {
    await (0, _arangoCollection.requireGrantedAccess)(context, args);
    const result = await context.db.query(`RETURN LENGTH(transactions)`, {});
    const counts = result;
    return counts.length > 0 ? counts[0] : 0;
  }, _tracer.QTracer.getParentSpan(tracer, context));
}

async function getAccountsTotalBalance(_parent, args, context) {
  const tracer = context.db.tracer;
  return _tracer.QTracer.trace(tracer, 'getAccountsTotalBalance', async () => {
    await (0, _arangoCollection.requireGrantedAccess)(context, args);
    /*
    Because arango can not sum BigInt's we need to sum separately:
    hs = SUM of high bits (from 24-bit and higher)
    ls = SUM of lower 24 bits
    And the total result is (hs << 24) + ls
     */

    const result = await context.db.query(`
            LET d = 16777216
            FOR a in accounts
            LET b = TO_NUMBER(CONCAT("0x", SUBSTRING(a.balance, 2)))
            COLLECT AGGREGATE
                hs = SUM(FLOOR(b / d)),
                ls = SUM(b % (d - 1))
            RETURN { hs, ls }
        `, {});
    const parts = result[0]; //$FlowFixMe

    return (BigInt(parts.hs) * BigInt(0x1000000) + BigInt(parts.ls)).toString();
  }, _tracer.QTracer.getParentSpan(tracer, context));
}

async function getManagementAccessKey(_parent, args, context) {
  return context.auth.getManagementAccessKey();
} //------------------------------------------------------------- Mutation


async function postRequestsUsingRest(requests, context, _span) {
  const config = context.config.requests;
  const url = `${(0, _config.ensureProtocol)(config.server, 'http')}/topics/${config.topic}`;
  const response = await (0, _nodeFetch.default)(url, {
    method: 'POST',
    mode: 'cors',
    cache: 'no-cache',
    credentials: 'same-origin',
    headers: {
      'Content-Type': 'application/json'
    },
    redirect: 'follow',
    referrer: 'no-referrer',
    body: JSON.stringify({
      records: requests.map(request => ({
        key: request.id,
        value: request.body
      }))
    })
  });

  if (response.status !== 200) {
    const message = `Post requests failed: ${await response.text()}`;
    throw new Error(message);
  }
}

async function postRequestsUsingKafka(requests, context, span) {
  const ensureShared = async (name, createValue) => {
    if (context.shared.has(name)) {
      return context.shared.get(name);
    }

    const value = await createValue();
    context.shared.set(name, value);
    return value;
  };

  const config = context.config.requests;
  const producer = await ensureShared('producer', async () => {
    const kafka = await ensureShared('kafka', async () => new _kafkajs.Kafka({
      clientId: 'q-server',
      brokers: [config.server]
    }));
    const newProducer = kafka.producer();
    await newProducer.connect();
    return newProducer;
  });
  const messages = requests.map(request => {
    const traceInfo = {};
    context.db.tracer.inject(span, _opentracing.FORMAT_TEXT_MAP, traceInfo);
    const keyBuffer = Buffer.from(request.id, 'base64');
    const traceBuffer = Object.keys(traceInfo).length > 0 ? Buffer.from(JSON.stringify(traceInfo), 'utf8') : Buffer.from([]);
    const key = Buffer.concat([keyBuffer, traceBuffer]);
    return {
      key,
      value: Buffer.from(request.body, 'base64')
    };
  });
  await producer.send({
    topic: config.topic,
    messages
  });
}

async function checkPostRestrictions(contracts, requests, accessRights) {
  if (accessRights.restrictToAccounts.length === 0) {
    return;
  }

  const accounts = new Set(accessRights.restrictToAccounts);

  for (const request of requests) {
    const message = await contracts.parseMessage({
      bocBase64: request.body
    });

    if (!accounts.has(message.dst)) {
      throw _auth.Auth.unauthorizedError();
    }
  }
}

async function postRequests(_, args, context) {
  const requests = args.requests;

  if (!requests) {
    return [];
  }

  const tracer = context.db.tracer;
  return _tracer.QTracer.trace(tracer, "postRequests", async span => {
    span.setTag('params', requests);
    const accessRights = await (0, _arangoCollection.requireGrantedAccess)(context, args);
    await checkPostRestrictions(context.client.contracts, requests, accessRights);
    const expired = requests.find(x => x.expireAt && Date.now() > x.expireAt);

    if (expired) {
      throw _utils.QError.messageExpired(expired.id, expired.expireAt);
    }

    try {
      if (context.config.requests.mode === 'rest') {
        await postRequestsUsingRest(requests, context, span);
      } else {
        await postRequestsUsingKafka(requests, context, span);
      }

      context.db.statPostCount.increment();
      context.db.log.debug('postRequests', 'POSTED', args, context.remoteAddress);
    } catch (error) {
      context.db.statPostFailed.increment();
      context.db.log.debug('postRequests', 'FAILED', args, context.remoteAddress);
      throw error;
    }

    return requests.map(x => x.id);
  }, context.parentSpan);
} //------------------------------------------------------------- Access Management


async function registerAccessKeys(_, args, context) {
  return context.auth.registerAccessKeys(args.account || '', args.keys || [], args.signedManagementAccessKey || '');
}

async function revokeAccessKeys(_, args, context) {
  return context.auth.revokeAccessKeys(args.account || '', args.keys || [], args.signedManagementAccessKey || '');
}

async function finishOperations(_, args, context) {
  const operationIds = new Set(args.operationIds || []);

  if (operationIds.size === 0) {
    return 0;
  }

  return context.db.finishOperations(operationIds);
}

function attachCustomResolvers(db, original) {
  overrideObject(original, {
    Query: {
      info,
      getAccountsCount,
      getTransactionsCount,
      getAccountsTotalBalance,
      getManagementAccessKey,
      aggregateBlockSignatures: db.blocks_signatures.aggregationResolver(),
      aggregateBlocks: db.blocks.aggregationResolver(),
      aggregateTransactions: db.transactions.aggregationResolver(),
      aggregateMessages: db.messages.aggregationResolver(),
      aggregateAccounts: db.accounts.aggregationResolver()
    },
    Mutation: {
      postRequests,
      registerAccessKeys,
      revokeAccessKeys,
      finishOperations
    }
  });
  return original;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,