"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.requireGrantedAccess = requireGrantedAccess;
exports.mamAccessRequired = mamAccessRequired;
exports.Collection = void 0;

var _arangojs = require("arangojs");

var _opentracing = require("opentracing");

var _arangoListeners = require("./arango-listeners");

var _logs = _interopRequireDefault(require("./logs"));

var _auth = require("./auth");

var _dbTypes = require("./db-types");

var _tracer = require("./tracer");

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
 * Copyright 2018-2020 TON DEV SOLUTIONS LTD.
 *
 * Licensed under the SOFTWARE EVALUATION License (the "License"); you may not use
 * this file except in compliance with the License.  You may obtain a copy of the
 * License at:
 *
 * http://www.ton.dev/licenses
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific TON DEV software governing permissions and
 * limitations under the License.
 */
function checkUsedAccessKey(usedAccessKey, accessKey, context) {
  if (!accessKey) {
    return usedAccessKey;
  }

  if (usedAccessKey && accessKey !== usedAccessKey) {
    context.multipleAccessKeysDetected = true;
    throw (0, _utils.createError)(400, 'Request must use the same access key for all queries and mutations');
  }

  return accessKey;
}

async function requireGrantedAccess(context, args) {
  const accessKey = context.accessKey || args.accessKey;
  context.usedAccessKey = checkUsedAccessKey(context.usedAccessKey, accessKey, context);
  return context.auth.requireGrantedAccess(accessKey);
}

function mamAccessRequired(context, args) {
  const accessKey = args.accessKey;
  context.usedMamAccessKey = checkUsedAccessKey(context.usedMamAccessKey, accessKey, context);

  if (!accessKey || !context.config.mamAccessKeys.has(accessKey)) {
    throw _auth.Auth.unauthorizedError();
  }
}

const accessGranted = {
  granted: true,
  restrictToAccounts: []
};

class Collection {
  constructor(name, docType, logs, auth, tracer, db, slowDb) {
    this.name = name;
    this.docType = docType;
    this.log = logs.create(name);
    this.auth = auth;
    this.tracer = tracer;
    this.db = db;
    this.slowDb = slowDb;
    this.listeners = new _utils.RegistryMap(`${name} listeners`);
    this.queryStats = new Map();
    this.maxQueueSize = 0;
  } // Subscriptions


  onDocumentInsertOrUpdate(doc) {
    for (const listener of this.listeners.values()) {
      if (listener.isFiltered(doc)) {
        listener.onDocumentInsertOrUpdate(doc);
      }
    }
  }

  subscriptionResolver() {
    return {
      subscribe: async (_, args, context, info) => {
        const accessRights = await requireGrantedAccess(context, args);
        return new _arangoListeners.SubscriptionListener(this.name, this.docType, this.listeners, accessRights, args.filter || {}, (0, _utils.parseSelectionSet)(info.operation.selectionSet, this.name));
      }
    };
  } // Queries


  getAdditionalCondition(accessRights, params) {
    const accounts = accessRights.restrictToAccounts;

    if (accounts.length === 0) {
      return '';
    }

    const condition = accounts.length === 1 ? `== @${params.add(accounts[0])}` : `IN [${accounts.map(x => `@${params.add(x)}`).join(',')}]`;

    switch (this.name) {
      case 'accounts':
        return `doc._key ${condition}`;

      case 'transactions':
        return `doc.account_addr ${condition}`;

      case 'messages':
        return `(doc.src ${condition}) OR (doc.dst ${condition})`;

      default:
        return 'false';
    }
  }

  createDatabaseQuery(args, selectionInfo, accessRights) {
    const filter = args.filter || {};
    const params = new _dbTypes.QParams();
    const primaryCondition = Object.keys(filter).length > 0 ? this.docType.ql(params, 'doc', filter) : '';
    const additionalCondition = this.getAdditionalCondition(accessRights, params);

    if (primaryCondition === 'false' || additionalCondition === 'false') {
      return null;
    }

    let condition = primaryCondition && additionalCondition ? `(${primaryCondition}) AND (${additionalCondition})` : primaryCondition || additionalCondition;
    const filterSection = condition ? `FILTER ${condition}` : '';
    const selection = (0, _utils.parseSelectionSet)(selectionInfo, this.name);
    const orderBy = args.orderBy || [];
    const limit = args.limit || 50;
    const timeout = Number(args.timeout) || 0;
    const orderByText = orderBy.map(field => {
      const direction = field.direction && field.direction.toLowerCase() === 'desc' ? ' DESC' : '';
      return `doc.${field.path.replace(/\bid\b/gi, '_key')}${direction}`;
    }).join(', ');
    const sortSection = orderByText !== '' ? `SORT ${orderByText}` : '';
    const limitText = Math.min(limit, 50);
    const limitSection = `LIMIT ${limitText}`;
    const text = `
            FOR doc IN ${this.name}
            ${filterSection}
            ${sortSection}
            ${limitSection}
            RETURN doc`;
    return {
      filter,
      selection,
      orderBy,
      limit,
      timeout,
      text,
      params: params.values,
      accessRights
    };
  }

  async ensureQueryStat(q) {
    const existing = this.queryStats.get(q.text);

    if (existing !== undefined) {
      return existing;
    }

    const plan = (await this.db.explain(q.text, q.params)).plan;
    const stat = {
      estimatedCost: plan.estimatedCost,
      slow: false,
      times: []
    };

    if (plan.nodes.find(node => node.type === 'EnumerateCollectionNode')) {
      stat.slow = true;
    }

    this.queryStats.set(q.text, stat);
    return stat;
  }

  queryResolver() {
    return async (parent, args, context, info) => (0, _utils.wrap)(this.log, 'QUERY', args, async () => {
      const accessRights = await requireGrantedAccess(context, args);
      const q = this.createDatabaseQuery(args, info.operation.selectionSet, accessRights);

      if (!q) {
        this.log.debug('QUERY', args, 0, 'SKIPPED', context.remoteAddress);
        return [];
      }

      const stat = await this.ensureQueryStat(q);
      const start = Date.now();
      const result = q.timeout > 0 ? await this.queryWaitFor(q, stat, context.parentSpan) : await this.query(q, stat, context.parentSpan);
      this.log.debug('QUERY', args, (Date.now() - start) / 1000, stat.slow ? 'SLOW' : 'FAST', context.remoteAddress);
      return result;
    });
  }

  static setQueryTraceParams(q, span) {
    const params = {
      filter: q.filter,
      selection: (0, _utils.selectionToString)(q.selection)
    };

    if (q.orderBy.length > 0) {
      params.orderBy = q.orderBy;
    }

    if (q.limit !== 50) {
      params.limit = q.limit;
    }

    if (q.timeout > 0) {
      params.timeout = q.timeout;
    }

    span.setTag('params', params);
  }

  async query(q, stat, parentSpan) {
    return _tracer.QTracer.trace(this.tracer, `${this.name}.query`, async span => {
      Collection.setQueryTraceParams(q, span);
      return this.queryDatabase(q, stat);
    }, parentSpan);
  }

  async queryDatabase(q, stat) {
    const db = stat && stat.slow ? this.slowDb : this.db;
    const start = Date.now();
    const cursor = await db.query(q.text, q.params);
    const result = await cursor.all();

    if (stat) {
      stat.times.push(Date.now() - start);

      if (stat.times.length > 100) {
        stat.times.shift();
      }
    }

    return result;
  }

  async queryWaitFor(q, stat, parentSpan) {
    return _tracer.QTracer.trace(this.tracer, `${this.name}.waitFor`, async span => {
      Collection.setQueryTraceParams(q, span);
      let waitFor = null;
      let forceTimerId = null;
      let resolvedBy = null;

      try {
        const onQuery = new Promise((resolve, reject) => {
          const check = () => {
            this.queryDatabase(q, stat).then(docs => {
              if (!resolvedBy) {
                if (docs.length > 0) {
                  forceTimerId = null;
                  resolvedBy = 'query';
                  resolve(docs);
                } else {
                  forceTimerId = setTimeout(check, 5000);
                }
              }
            }, reject);
          };

          check();
        });
        const onChangesFeed = new Promise(resolve => {
          waitFor = new _arangoListeners.WaitForListener(this.name, this.docType, this.listeners, q.accessRights, q.filter, q.selection, doc => {
            if (!resolvedBy) {
              resolvedBy = 'listener';
              resolve([doc]);
            }
          });
        });
        const onTimeout = new Promise(resolve => {
          setTimeout(() => {
            if (!resolvedBy) {
              resolvedBy = 'timeout';
              resolve([]);
            }
          }, q.timeout);
        });
        const result = await Promise.race([onQuery, onChangesFeed, onTimeout]);
        span.setTag('resolved', resolvedBy);
        return result;
      } finally {
        if (waitFor !== null && waitFor !== undefined) {
          waitFor.close();
          waitFor = null;
        }

        if (forceTimerId !== null) {
          clearTimeout(forceTimerId);
          forceTimerId = null;
        }
      }
    }, parentSpan);
  }

  dbCollection() {
    return this.db.collection(this.name);
  }

  async waitForDoc(key) {
    if (!key) {
      return Promise.resolve(null);
    }

    const docs = await this.queryWaitFor({
      filter: {
        id: {
          eq: key
        }
      },
      selection: [],
      orderBy: [],
      limit: 1,
      timeout: 40000,
      text: `FOR doc IN ${this.name} FILTER doc._key == @key RETURN doc`,
      params: {
        key
      },
      accessRights: accessGranted
    }, null, null);
    return docs[0];
  }

  async waitForDocs(keys) {
    if (!keys || keys.length === 0) {
      return Promise.resolve([]);
    }

    return Promise.all(keys.map(key => this.waitForDoc(key)));
  }

}

exports.Collection = Collection;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,