"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.resolveBigUInt = resolveBigUInt;
exports.convertBigUInt = convertBigUInt;
exports.struct = struct;
exports.array = array;
exports.join = join;
exports.joinArray = joinArray;
exports.bigUInt2 = exports.bigUInt1 = exports.scalar = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

/*
 * Copyright 2018-2019 TON DEV SOLUTIONS LTD.
 *
 * Licensed under the SOFTWARE EVALUATION License (the "License"); you may not use
 * this file except in compliance with the License.  You may obtain a copy of the
 * License at:
 *
 * http://www.ton.dev/licenses
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific TON DEV software governing permissions and
 * limitations under the License.
 */

/**
 * Abstract interface for objects that acts as a helpers to perform queries over documents
 * using query filters.
 */

/**
 * Generates AQL condition for complex filter.
 *
 * @param {string} path Path to document field.
 * @param {object} filter A filter object specified by user.
 * @param {object} fieldTypes A map of available values for filter fields to helpers.
 * @param {function} qlField Function that generates condition for a concrete field.
 * @return {string} AQL condition
 */
function qlFields(path, filter, fieldTypes, qlField) {
  var conditions = [];
  Object.entries(filter).forEach(function (_ref) {
    var _ref2 = (0, _slicedToArray2["default"])(_ref, 2),
        filterKey = _ref2[0],
        filterValue = _ref2[1];

    var fieldType = fieldTypes[filterKey];

    if (fieldType) {
      conditions.push(qlField(fieldType, path, filterKey, filterValue));
    }
  });
  return qlCombine(conditions, 'AND', 'false');
}
/**
 * Test document value against complex filter.
 *
 * @param {any} value Value of the field in document.
 * @param {object} filter A filter object specified by user.
 * @param {object} fieldTypes A map of available values for filter fields to helpers.
 * @param {function} testField Function that performs test value against a selected field.
 * @return {string} AQL condition
 */


function testFields(value, filter, fieldTypes, testField) {
  var failed = Object.entries(filter).find(function (_ref3) {
    var _ref4 = (0, _slicedToArray2["default"])(_ref3, 2),
        filterKey = _ref4[0],
        filterValue = _ref4[1];

    var fieldType = fieldTypes[filterKey];
    return !!(fieldType && testField(fieldType, value, filterKey, filterValue));
  });
  return !failed;
}

function combine(path, key) {
  return key !== '' ? "".concat(path, ".").concat(key) : path;
}

function qlOp(path, op, filter) {
  return "".concat(path, " ").concat(op, " ").concat(JSON.stringify(filter));
}

function qlCombine(conditions, op, defaultConditions) {
  if (conditions.length === 0) {
    return defaultConditions;
  }

  if (conditions.length === 1) {
    return conditions[0];
  }

  return '(' + conditions.join(") ".concat(op, " (")) + ')';
}

function qlIn(path, filter) {
  var conditions = filter.map(function (value) {
    return qlOp(path, '==', value);
  });
  return qlCombine(conditions, 'OR', 'false');
} // Scalars


var scalarEq = {
  ql: function ql(path, filter) {
    return qlOp(path, '==', filter);
  },
  test: function test(value, filter) {
    return value === filter;
  }
};
var scalarNe = {
  ql: function ql(path, filter) {
    return qlOp(path, '!=', filter);
  },
  test: function test(value, filter) {
    return value !== filter;
  }
};
var scalarLt = {
  ql: function ql(path, filter) {
    return qlOp(path, '<', filter);
  },
  test: function test(value, filter) {
    return value < filter;
  }
};
var scalarLe = {
  ql: function ql(path, filter) {
    return qlOp(path, '<=', filter);
  },
  test: function test(value, filter) {
    return value <= filter;
  }
};
var scalarGt = {
  ql: function ql(path, filter) {
    return qlOp(path, '>', filter);
  },
  test: function test(value, filter) {
    return value > filter;
  }
};
var scalarGe = {
  ql: function ql(path, filter) {
    return qlOp(path, '>=', filter);
  },
  test: function test(value, filter) {
    return value >= filter;
  }
};
var scalarIn = {
  ql: function ql(path, filter) {
    return qlIn(path, filter);
  },
  test: function test(value, filter) {
    return filter.includes(value);
  }
};
var scalarNotIn = {
  ql: function ql(path, filter) {
    return "NOT (".concat(qlIn(path, filter), ")");
  },
  test: function test(value, filter) {
    return !filter.includes(value);
  }
};

function createScalar() {
  var fields = {
    eq: scalarEq,
    ne: scalarNe,
    lt: scalarLt,
    le: scalarLe,
    gt: scalarGt,
    ge: scalarGe,
    "in": scalarIn,
    notIn: scalarNotIn
  };
  return {
    ql: function ql(path, filter) {
      return qlFields(path, filter, fields, function (op, path, filterKey, filterValue) {
        return op.ql(path, filterValue);
      });
    },
    test: function test(value, filter) {
      return testFields(value, filter, fields, function (op, value, filterKey, filterValue) {
        return op.test(value, filterValue);
      });
    }
  };
}

function resolveBigUInt(prefixLength, value) {
  if (value === null || value === undefined) {
    return value;
  }

  if (typeof value === 'number') {
    return "0x".concat(value.toString(16));
  }

  return "0x".concat(value.toString().substr(prefixLength));
}

function convertBigUInt(prefixLength, value) {
  if (value === null || value === undefined) {
    return value;
  }

  var hex;

  if (typeof value === 'number') {
    hex = value.toString(16);
  } else {
    var s = value.toString();
    hex = s.startsWith('0x') || s.startsWith('0X') ? s.substr(2) : s.substr(1);
  }

  var len = hex.length.toString(16);
  var missingZeros = prefixLength - len.length;
  var prefix = missingZeros > 0 ? "".concat('0'.repeat(missingZeros)).concat(len) : len;
  return "".concat(prefix).concat(hex);
}

function createBigUInt(prefixLength) {
  var fields = {
    eq: scalarEq,
    ne: scalarNe,
    lt: scalarLt,
    le: scalarLe,
    gt: scalarGt,
    ge: scalarGe,
    "in": scalarIn,
    notIn: scalarNotIn
  };
  return {
    ql: function ql(path, filter) {
      return qlFields(path, filter, fields, function (op, path, filterKey, filterValue) {
        return op.ql(path, convertBigUInt(prefixLength, filterValue));
      });
    },
    test: function test(value, filter) {
      return testFields(value, filter, fields, function (op, value, filterKey, filterValue) {
        return op.test(value, convertBigUInt(prefixLength, filterValue));
      });
    }
  };
}

var scalar = createScalar();
exports.scalar = scalar;
var bigUInt1 = createBigUInt(1);
exports.bigUInt1 = bigUInt1;
var bigUInt2 = createBigUInt(2); // Structs

exports.bigUInt2 = bigUInt2;

function struct(fields, isCollection) {
  return {
    ql: function ql(path, filter) {
      return qlFields(path, filter, fields, function (fieldType, path, filterKey, filterValue) {
        var fieldName = isCollection && filterKey === 'id' ? '_key' : filterKey;
        return fieldType.ql(combine(path, fieldName), filterValue);
      });
    },
    test: function test(value, filter) {
      if (!value) {
        return false;
      }

      return testFields(value, filter, fields, function (fieldType, value, filterKey, filterValue) {
        var fieldName = isCollection && filterKey === 'id' ? '_key' : filterKey;
        return fieldType.test(value[fieldName], filterValue);
      });
    }
  };
} // Arrays


function array(itemType) {
  var ops = {
    all: {
      ql: function ql(path, filter) {
        var itemQl = itemType.ql('CURRENT', filter);
        return "LENGTH(".concat(path, "[* FILTER ").concat(itemQl, "]) == LENGTH(").concat(path, ")");
      },
      test: function test(value, filter) {
        var failedIndex = value.findIndex(function (x) {
          return !itemType.test(x, filter);
        });
        return failedIndex < 0;
      }
    },
    any: {
      ql: function ql(path, filter) {
        var itemQl = itemType.ql('CURRENT', filter);
        return "LENGTH(".concat(path, "[* FILTER ").concat(itemQl, "]) > 0");
      },
      test: function test(value, filter) {
        var succeededIndex = value.findIndex(function (x) {
          return itemType.test(x, filter);
        });
        return succeededIndex >= 0;
      }
    }
  };
  return {
    ql: function ql(path, filter) {
      return qlFields(path, filter, ops, function (op, path, filterKey, filterValue) {
        return op.ql(path, filterValue);
      });
    },
    test: function test(value, filter) {
      if (!value) {
        return false;
      }

      return testFields(value, filter, ops, function (op, value, filterKey, filterValue) {
        return op.test(value, filterValue);
      });
    }
  };
} // Joins


function join(onField, refCollection, refType) {
  return {
    ql: function ql(path, filter) {
      var on_path = path.split('.').slice(0, -1).concat(onField).join('.');
      var alias = "".concat(on_path.replace('.', '_'));
      var refQl = refType.ql(alias, filter);
      return "\n                LENGTH(\n                    FOR ".concat(alias, " IN ").concat(refCollection, "\n                    FILTER (").concat(alias, "._key == ").concat(on_path, ") AND (").concat(refQl, ")\n                    LIMIT 1\n                    RETURN 1\n                ) > 0");
    },
    test: refType.test
  };
}

function joinArray(onField, refCollection, refType) {
  return {
    ql: function ql(path, filter) {
      var refFilter = filter.all || filter.any;
      var all = !!filter.all;
      var on_path = path.split('.').slice(0, -1).concat(onField).join('.');
      var alias = "".concat(on_path.replace('.', '_'));
      var refQl = refType.ql(alias, refFilter);
      return "\n                (LENGTH(".concat(on_path, ") > 0)\n                AND (LENGTH(\n                    FOR ").concat(alias, " IN ").concat(refCollection, "\n                    FILTER (").concat(alias, "._key IN ").concat(on_path, ") AND (").concat(refQl, ")\n                    ").concat(!all ? 'LIMIT 1' : '', "\n                    RETURN 1\n                ) ").concat(all ? "== LENGTH(".concat(on_path, ")") : '> 0', ")");
    },
    test: refType.test
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NlcnZlci9hcmFuZ28tdHlwZXMuanMiXSwibmFtZXMiOlsicWxGaWVsZHMiLCJwYXRoIiwiZmlsdGVyIiwiZmllbGRUeXBlcyIsInFsRmllbGQiLCJjb25kaXRpb25zIiwiT2JqZWN0IiwiZW50cmllcyIsImZvckVhY2giLCJmaWx0ZXJLZXkiLCJmaWx0ZXJWYWx1ZSIsImZpZWxkVHlwZSIsInB1c2giLCJxbENvbWJpbmUiLCJ0ZXN0RmllbGRzIiwidmFsdWUiLCJ0ZXN0RmllbGQiLCJmYWlsZWQiLCJmaW5kIiwiY29tYmluZSIsImtleSIsInFsT3AiLCJvcCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkZWZhdWx0Q29uZGl0aW9ucyIsImxlbmd0aCIsImpvaW4iLCJxbEluIiwibWFwIiwic2NhbGFyRXEiLCJxbCIsInRlc3QiLCJzY2FsYXJOZSIsInNjYWxhckx0Iiwic2NhbGFyTGUiLCJzY2FsYXJHdCIsInNjYWxhckdlIiwic2NhbGFySW4iLCJpbmNsdWRlcyIsInNjYWxhck5vdEluIiwiY3JlYXRlU2NhbGFyIiwiZmllbGRzIiwiZXEiLCJuZSIsImx0IiwibGUiLCJndCIsImdlIiwibm90SW4iLCJyZXNvbHZlQmlnVUludCIsInByZWZpeExlbmd0aCIsInVuZGVmaW5lZCIsInRvU3RyaW5nIiwic3Vic3RyIiwiY29udmVydEJpZ1VJbnQiLCJoZXgiLCJzIiwic3RhcnRzV2l0aCIsImxlbiIsIm1pc3NpbmdaZXJvcyIsInByZWZpeCIsInJlcGVhdCIsImNyZWF0ZUJpZ1VJbnQiLCJzY2FsYXIiLCJiaWdVSW50MSIsImJpZ1VJbnQyIiwic3RydWN0IiwiaXNDb2xsZWN0aW9uIiwiZmllbGROYW1lIiwiYXJyYXkiLCJpdGVtVHlwZSIsIm9wcyIsImFsbCIsIml0ZW1RbCIsImZhaWxlZEluZGV4IiwiZmluZEluZGV4IiwieCIsImFueSIsInN1Y2NlZWRlZEluZGV4Iiwib25GaWVsZCIsInJlZkNvbGxlY3Rpb24iLCJyZWZUeXBlIiwib25fcGF0aCIsInNwbGl0Iiwic2xpY2UiLCJjb25jYXQiLCJhbGlhcyIsInJlcGxhY2UiLCJyZWZRbCIsImpvaW5BcnJheSIsInJlZkZpbHRlciJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7Ozs7OztBQWdCQTs7Ozs7QUF5QkE7Ozs7Ozs7OztBQVNBLFNBQVNBLFFBQVQsQ0FDSUMsSUFESixFQUVJQyxNQUZKLEVBR0lDLFVBSEosRUFJSUMsT0FKSixFQUtVO0FBQ04sTUFBTUMsVUFBb0IsR0FBRyxFQUE3QjtBQUNBQyxFQUFBQSxNQUFNLENBQUNDLE9BQVAsQ0FBZUwsTUFBZixFQUF1Qk0sT0FBdkIsQ0FBK0IsZ0JBQThCO0FBQUE7QUFBQSxRQUE1QkMsU0FBNEI7QUFBQSxRQUFqQkMsV0FBaUI7O0FBQ3pELFFBQU1DLFNBQVMsR0FBR1IsVUFBVSxDQUFDTSxTQUFELENBQTVCOztBQUNBLFFBQUlFLFNBQUosRUFBZTtBQUNYTixNQUFBQSxVQUFVLENBQUNPLElBQVgsQ0FBZ0JSLE9BQU8sQ0FBQ08sU0FBRCxFQUFZVixJQUFaLEVBQWtCUSxTQUFsQixFQUE2QkMsV0FBN0IsQ0FBdkI7QUFDSDtBQUNKLEdBTEQ7QUFNQSxTQUFPRyxTQUFTLENBQUNSLFVBQUQsRUFBYSxLQUFiLEVBQW9CLE9BQXBCLENBQWhCO0FBQ0g7QUFFRDs7Ozs7Ozs7Ozs7QUFTQSxTQUFTUyxVQUFULENBQ0lDLEtBREosRUFFSWIsTUFGSixFQUdJQyxVQUhKLEVBSUlhLFNBSkosRUFLVztBQUNQLE1BQU1DLE1BQU0sR0FBR1gsTUFBTSxDQUFDQyxPQUFQLENBQWVMLE1BQWYsRUFBdUJnQixJQUF2QixDQUE0QixpQkFBOEI7QUFBQTtBQUFBLFFBQTVCVCxTQUE0QjtBQUFBLFFBQWpCQyxXQUFpQjs7QUFDckUsUUFBTUMsU0FBUyxHQUFHUixVQUFVLENBQUNNLFNBQUQsQ0FBNUI7QUFDQSxXQUFPLENBQUMsRUFBRUUsU0FBUyxJQUFJSyxTQUFTLENBQUNMLFNBQUQsRUFBWUksS0FBWixFQUFtQk4sU0FBbkIs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aEIsU0FBNkIsS0FQeEM7QUFRSCxLQWZFO0FBZ0JIbkQsSUFBQUEsSUFBSSxFQUFFa0QsT0FBTyxDQUFDbEQ7QUFoQlgsR0FBUDtBQWtCSCIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgMjAxOC0yMDE5IFRPTiBERVYgU09MVVRJT05TIExURC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgU09GVFdBUkUgRVZBTFVBVElPTiBMaWNlbnNlICh0aGUgXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2VcbiAqIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZVxuICogTGljZW5zZSBhdDpcbiAqXG4gKiBodHRwOi8vd3d3LnRvbi5kZXYvbGljZW5zZXNcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIFRPTiBERVYgc29mdHdhcmUgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuLyoqXG4gKiBBYnN0cmFjdCBpbnRlcmZhY2UgZm9yIG9iamVjdHMgdGhhdCBhY3RzIGFzIGEgaGVscGVycyB0byBwZXJmb3JtIHF1ZXJpZXMgb3ZlciBkb2N1bWVudHNcbiAqIHVzaW5nIHF1ZXJ5IGZpbHRlcnMuXG4gKi9cbnR5cGUgUVR5cGUgPSB7XG4gICAgLyoqXG4gICAgICogR2VuZXJhdGVzIGFuIEFyYW5nbyBRTCBjb25kaXRpb24gZm9yIHNwZWNpZmllZCBmaWVsZCBiYXNlZCBvbiBzcGVjaWZpZWQgZmlsdGVyLlxuICAgICAqIFRoZSBjb25kaXRpb24gbXVzdCBiZSBhIHN0cmluZyBleHByZXNzaW9uIHRoYXQgZXZhbHVhdGVzIHRvIGJvb2xlYW4uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBQYXRoIGZyb20gZG9jdW1lbnQgcm9vdCB0byBjb25jcmV0ZSBmaWVsZFxuICAgICAqIEBwYXJhbSB7YW55fSBmaWx0ZXIgRmlsdGVyIHRoYXQgd2lsbCBiZSBhcHBsaWVkIHRvIHRoaXMgZmllbGRcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IEFyYW5nbyBRTCBjb25kaXRpb24gdGV4dFxuICAgICAqL1xuICAgIHFsOiAocGF0aDogc3RyaW5nLCBmaWx0ZXI6IGFueSkgPT4gc3RyaW5nLFxuICAgIC8qKlxuICAgICAqIFRlc3RzIHZhbHVlIGluIGRvY3VtZW50IGZyb20gQXJhbmdvIERCIGFnYWluc3Qgc3BlY2lmaWVkIGZpbHRlci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7YW55fSB2YWx1ZSBWYWx1ZSB0aGF0IG11c3QgYmUgdGVzdGVkIGFnYWluc3QgZmlsdGVyXG4gICAgICogQHBhcmFtIHthbnl9IGZpbHRlciBGaWx0ZXIgdXNlZCB0byB0ZXN0IGEgdmFsdWVcbiAgICAgKiBAcmV0dXJuIHRydWUgaWYgdmFsdWUgbWF0Y2hlcyBmaWx0ZXJcbiAgICAgKi9cbiAgICB0ZXN0OiAodmFsdWU6IGFueSwgZmlsdGVyOiBhbnkpID0+IGJvb2xlYW4sXG59XG5cblxuLyoqXG4gKiBHZW5lcmF0ZXMgQVFMIGNvbmRpdGlvbiBmb3IgY29tcGxleCBmaWx0ZXIuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGggUGF0aCB0byBkb2N1bWVudCBmaWVsZC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBmaWx0ZXIgQSBmaWx0ZXIgb2JqZWN0IHNwZWNpZmllZCBieSB1c2VyLlxuICogQHBhcmFtIHtvYmplY3R9IGZpZWxkVHlwZXMgQSBtYXAgb2YgYXZhaWxhYmxlIHZhbHVlcyBmb3IgZmlsdGVyIGZpZWxkcyB0byBoZWxwZXJzLlxuICogQHBhcmFtIHtmdW5jdGlvbn0gcWxGaWVsZCBGdW5jdGlvbiB0aGF0IGdlbmVyYXRlcyBjb25kaXRpb24gZm9yIGEgY29uY3JldGUgZmllbGQuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IEFRTCBjb25kaXRpb25cbiAqL1xuZnVuY3Rpb24gcWxGaWVsZHMoXG4gICAgcGF0aDogc3RyaW5nLFxuICAgIGZpbHRlcjogYW55LFxuICAgIGZpZWxkVHlwZXM6IHsgW3N0cmluZ106IFFUeXBlIH0sXG4gICAgcWxGaWVsZDogKGZpZWxkOiBhbnksIHBhdGg6IHN0cmluZywgZmlsdGVyS2V5OiBzdHJpbmcsIGZpbHRlclZhbHVlOiBhbnkpID0+IHN0cmluZ1xuKTogc3RyaW5nIHtcbiAgICBjb25zdCBjb25kaXRpb25zOiBzdHJpbmdbXSA9IFtdO1xuICAgIE9iamVjdC5lbnRyaWVzKGZpbHRlcikuZm9yRWFjaCgoW2ZpbHRlcktleSwgZmlsdGVyVmFsdWVdKSA9PiB7XG4gICAgICAgIGNvbnN0IGZpZWxkVHlwZSA9IGZpZWxkVHlwZXNbZmlsdGVyS2V5XTtcbiAgICAgICAgaWYgKGZpZWxkVHlwZSkge1xuICAgICAgICAgICAgY29uZGl0aW9ucy5wdXNoKHFsRmllbGQoZmllbGRUeXBlLCBwYXRoLCBmaWx0ZXJLZXksIGZpbHRlclZhbHVlKSlcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBxbENvbWJpbmUoY29uZGl0aW9ucywgJ0FORCcsICdmYWxzZScpO1xufVxuXG4vKipcbiAqIFRlc3QgZG9jdW1lbnQgdmFsdWUgYWdhaW5zdCBjb21wbGV4IGZpbHRlci5cbiAqXG4gKiBAcGFyYW0ge2FueX0gdmFsdWUgVmFsdWUgb2YgdGhlIGZpZWxkIGluIGRvY3VtZW50LlxuICogQHBhcmFtIHtvYmplY3R9IGZpbHRlciBBIGZpbHRlciBvYmplY3Qgc3BlY2lmaWVkIGJ5IHVzZXIuXG4gKiBAcGFyYW0ge29iamVjdH0gZmllbGRUeXBlcyBBIG1hcCBvZiBhdmFpbGFibGUgdmFsdWVzIGZvciBmaWx0ZXIgZmllbGRzIHRvIGhlbHBlcnMuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSB0ZXN0RmllbGQgRnVuY3Rpb24gdGhhdCBwZXJmb3JtcyB0ZXN0IHZhbHVlIGFnYWluc3QgYSBzZWxlY3RlZCBmaWVsZC5cbiAqIEByZXR1cm4ge3N0cmluZ30gQVFMIGNvbmRpdGlvblxuICovXG5mdW5jdGlvbiB0ZXN0RmllbGRzKFxuICAgIHZhbHVlOiBhbnksXG4gICAgZmlsdGVyOiBhbnksXG4gICAgZmllbGRUeXBlczogeyBbc3RyaW5nXTogUVR5cGUgfSxcbiAgICB0ZXN0RmllbGQ6IChmaWVsZFR5cGU6IGFueSwgdmFsdWU6IGFueSwgZmlsdGVyS2V5OiBzdHJpbmcsIGZpbHRlclZhbHVlOiBhbnkpID0+IGJvb2xlYW5cbik6IGJvb2xlYW4ge1xuICAgIGNvbnN0IGZhaWxlZCA9IE9iamVjdC5lbnRyaWVzKGZpbHRlcikuZmluZCgoW2ZpbHRlcktleSwgZmlsdGVyVmFsdWVdKSA9PiB7XG4gICAgICAgIGNvbnN0IGZpZWxkVHlwZSA9IGZpZWxkVHlwZXNbZmlsdGVyS2V5XTtcbiAgICAgICAgcmV0dXJuICEhKGZpZWxkVHlwZSAmJiB0ZXN0RmllbGQoZmllbGRUeXBlLCB2YWx1ZSwgZmlsdGVyS2V5LCBmaWx0ZXJWYWx1ZSkpO1xuICAgIH0pO1xuICAgIHJldHVybiAhZmFpbGVkO1xufVxuXG5cbmZ1bmN0aW9uIGNvbWJpbmUocGF0aDogc3RyaW5nLCBrZXk6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGtleSAhPT0gJycgPyBgJHtwYXRofS4ke2tleX1gIDogcGF0aDtcbn1cblxuZnVuY3Rpb24gcWxPcChwYXRoOiBzdHJpbmcsIG9wOiBzdHJpbmcsIGZpbHRlcjogYW55KTogc3RyaW5nIHtcbiAgICByZXR1cm4gYCR7cGF0aH0gJHtvcH0gJHtKU09OLnN0cmluZ2lmeShmaWx0ZXIpfWA7XG59XG5cbmZ1bmN0aW9uIHFsQ29tYmluZShjb25kaXRpb25zOiBzdHJpbmdbXSwgb3A6IHN0cmluZywgZGVmYXVsdENvbmRpdGlvbnM6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgaWYgKGNvbmRpdGlvbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBkZWZhdWx0Q29uZGl0aW9ucztcbiAgICB9XG4gICAgaWYgKGNvbmRpdGlvbnMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHJldHVybiBjb25kaXRpb25zWzBdO1xuICAgIH1cbiAgICByZXR1cm4gJygnICsgY29uZGl0aW9ucy5qb2luKGApICR7b3B9IChgKSArICcpJztcbn1cblxuZnVuY3Rpb24gcWxJbihwYXRoOiBzdHJpbmcsIGZpbHRlcjogYW55KTogc3RyaW5nIHtcbiAgICBjb25zdCBjb25kaXRpb25zID0gZmlsdGVyLm1hcCh2YWx1ZSA9PiBxbE9wKHBhdGgsICc9PScsIHZhbHVlKSk7XG4gICAgcmV0dXJuIHFsQ29tYmluZShjb25kaXRpb25zLCAnT1InLCAnZmFsc2UnKTtcbn1cblxuLy8gU2NhbGFyc1xuXG5jb25zdCBzY2FsYXJFcTogUVR5cGUgPSB7XG4gICAgcWwocGF0aCwgZmlsdGVyKSB7XG4gICAgICAgIHJldHVybiBxbE9wKHBhdGgsICc9PScsIGZpbHRlcik7XG4gICAgfSxcbiAgICB0ZXN0KHZhbHVlLCBmaWx0ZXIpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID09PSBmaWx0ZXI7XG4gICAgfSxcbn07XG5cbmNvbnN0IHNjYWxhck5lOiBRVHlwZSA9IHtcbiAgICBxbChwYXRoLCBmaWx0ZXIpIHtcbiAgICAgICAgcmV0dXJuIHFsT3AocGF0aCwgJyE9JywgZmlsdGVyKTtcbiAgICB9LFxuICAgIHRlc3QodmFsdWUsIGZpbHRlcikge1xuICAgICAgICByZXR1cm4gdmFsdWUgIT09IGZpbHRlcjtcbiAgICB9LFxufTtcblxuY29uc3Qgc2NhbGFyTHQ6IFFUeXBlID0ge1xuICAgIHFsKHBhdGgsIGZpbHRlcikge1xuICAgICAgICByZXR1cm4gcWxPcChwYXRoLCAnPCcsIGZpbHRlcik7XG4gICAgfSxcbiAgICB0ZXN0KHZhbHVlLCBmaWx0ZXIpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlIDwgZmlsdGVyO1xuICAgIH0sXG59O1xuXG5jb25zdCBzY2FsYXJMZTogUVR5cGUgPSB7XG4gICAgcWwocGF0aCwgZmlsdGVyKSB7XG4gICAgICAgIHJldHVybiBxbE9wKHBhdGgsICc8PScsIGZpbHRlcik7XG4gICAgfSxcbiAgICB0ZXN0KHZhbHVlLCBmaWx0ZXIpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlIDw9IGZpbHRlcjtcbiAgICB9LFxufTtcblxuY29uc3Qgc2NhbGFyR3Q6IFFUeXBlID0ge1xuICAgIHFsKHBhdGgsIGZpbHRlcikge1xuICAgICAgICByZXR1cm4gcWxPcChwYXRoLCAnPicsIGZpbHRlcik7XG4gICAgfSxcbiAgICB0ZXN0KHZhbHVlLCBmaWx0ZXIpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID4gZmlsdGVyO1xuICAgIH0sXG59O1xuXG5jb25zdCBzY2FsYXJHZTogUVR5cGUgPSB7XG4gICAgcWwocGF0aCwgZmlsdGVyKSB7XG4gICAgICAgIHJldHVybiBxbE9wKHBhdGgsICc+PScsIGZpbHRlcik7XG4gICAgfSxcbiAgICB0ZXN0KHZhbHVlLCBmaWx0ZXIpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID49IGZpbHRlcjtcbiAgICB9LFxufTtcblxuY29uc3Qgc2NhbGFySW46IFFUeXBlID0ge1xuICAgIHFsKHBhdGgsIGZpbHRlcikge1xuICAgICAgICByZXR1cm4gcWxJbihwYXRoLCBmaWx0ZXIpO1xuICAgIH0sXG4gICAgdGVzdCh2YWx1ZSwgZmlsdGVyKSB7XG4gICAgICAgIHJldHVybiBmaWx0ZXIuaW5jbHVkZXModmFsdWUpO1xuICAgIH0sXG59O1xuXG5jb25zdCBzY2FsYXJOb3RJbjogUVR5cGUgPSB7XG4gICAgcWwocGF0aCwgZmlsdGVyKSB7XG4gICAgICAgIHJldHVybiBgTk9UICgke3FsSW4ocGF0aCwgZmlsdGVyKX0pYDtcbiAgICB9LFxuICAgIHRlc3QodmFsdWUsIGZpbHRlcikge1xuICAgICAgICByZXR1cm4gIWZpbHRlci5pbmNsdWRlcyh2YWx1ZSk7XG4gICAgfVxufTtcblxuZnVuY3Rpb24gY3JlYXRlU2NhbGFyKCk6IFFUeXBlIHtcbiAgICBjb25zdCBmaWVsZHMgPSB7XG4gICAgICAgIGVxOiBzY2FsYXJFcSxcbiAgICAgICAgbmU6IHNjYWxhck5lLFxuICAgICAgICBsdDogc2NhbGFyTHQsXG4gICAgICAgIGxlOiBzY2FsYXJMZSxcbiAgICAgICAgZ3Q6IHNjYWxhckd0LFxuICAgICAgICBnZTogc2NhbGFyR2UsXG4gICAgICAgIGluOiBzY2FsYXJJbixcbiAgICAgICAgbm90SW46IHNjYWxhck5vdEluLFxuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcWwocGF0aCwgZmlsdGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gcWxGaWVsZHMocGF0aCwgZmlsdGVyLCBmaWVsZHMsIChvcCwgcGF0aCwgZmlsdGVyS2V5LCBmaWx0ZXJWYWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBvcC5xbChwYXRoLCBmaWx0ZXJWYWx1ZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgdGVzdCh2YWx1ZSwgZmlsdGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gdGVzdEZpZWxkcyh2YWx1ZSwgZmlsdGVyLCBmaWVsZHMsIChvcCwgdmFsdWUsIGZpbHRlcktleSwgZmlsdGVyVmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gb3AudGVzdCh2YWx1ZSwgZmlsdGVyVmFsdWUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgfTtcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZUJpZ1VJbnQocHJlZml4TGVuZ3RoOiBudW1iZXIsIHZhbHVlOiBhbnkpOiBzdHJpbmcge1xuICAgIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgcmV0dXJuIGAweCR7dmFsdWUudG9TdHJpbmcoMTYpfWA7XG4gICAgfVxuICAgIHJldHVybiBgMHgke3ZhbHVlLnRvU3RyaW5nKCkuc3Vic3RyKHByZWZpeExlbmd0aCl9YDtcbn1cblxuZnVuY3Rpb24gY29udmVydEJpZ1VJbnQocHJlZml4TGVuZ3RoOiBudW1iZXIsIHZhbHVlOiBhbnkpOiBzdHJpbmcge1xuICAgIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgbGV0IGhleDtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgICAgICBoZXggPSB2YWx1ZS50b1N0cmluZygxNik7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgcyA9IHZhbHVlLnRvU3RyaW5nKCk7XG4gICAgICAgIGhleCA9IChzLnN0YXJ0c1dpdGgoJzB4JykgfHwgcy5zdGFydHNXaXRoKCcwWCcpKSA/IHMuc3Vic3RyKDIpIDogcy5zdWJzdHIoMSk7XG4gICAgfVxuICAgIGNvbnN0IGxlbiA9IGhleC5sZW5ndGgudG9TdHJpbmcoMTYpO1xuICAgIGNvbnN0IG1pc3NpbmdaZXJvcyA9IHByZWZpeExlbmd0aCAtIGxlbi5sZW5ndGg7XG4gICAgY29uc3QgcHJlZml4ID0gbWlzc2luZ1plcm9zID4gMCA/IGAkeycwJy5yZXBlYXQobWlzc2luZ1plcm9zKX0ke2xlbn1gIDogbGVuO1xuICAgIHJldHVybiBgJHtwcmVmaXh9JHtoZXh9YDtcbn1cblxuZnVuY3Rpb24gY3JlYXRlQmlnVUludChwcmVmaXhMZW5ndGg6IG51bWJlcik6IFFUeXBlIHtcbiAgICBjb25zdCBmaWVsZHMgPSB7XG4gICAgICAgIGVxOiBzY2FsYXJFcSxcbiAgICAgICAgbmU6IHNjYWxhck5lLFxuICAgICAgICBsdDogc2NhbGFyTHQsXG4gICAgICAgIGxlOiBzY2FsYXJMZSxcbiAgICAgICAgZ3Q6IHNjYWxhckd0LFxuICAgICAgICBnZTogc2NhbGFyR2UsXG4gICAgICAgIGluOiBzY2FsYXJJbixcbiAgICAgICAgbm90SW46IHNjYWxhck5vdEluLFxuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcWwocGF0aCwgZmlsdGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gcWxGaWVsZHMocGF0aCwgZmlsdGVyLCBmaWVsZHMsIChvcCwgcGF0aCwgZmlsdGVyS2V5LCBmaWx0ZXJWYWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBvcC5xbChwYXRoLCBjb252ZXJ0QmlnVUludChwcmVmaXhMZW5ndGgsIGZpbHRlclZhbHVlKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgdGVzdCh2YWx1ZSwgZmlsdGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gdGVzdEZpZWxkcyh2YWx1ZSwgZmlsdGVyLCBmaWVsZHMsIChvcCwgdmFsdWUsIGZpbHRlcktleSwgZmlsdGVyVmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gb3AudGVzdCh2YWx1ZSwgY29udmVydEJpZ1VJbnQocHJlZml4TGVuZ3RoLCBmaWx0ZXJWYWx1ZSkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgfTtcbn1cblxuY29uc3Qgc2NhbGFyOiBRVHlwZSA9IGNyZWF0ZVNjYWxhcigpO1xuY29uc3QgYmlnVUludDE6IFFUeXBlID0gY3JlYXRlQmlnVUludCgxKTtcbmNvbnN0IGJpZ1VJbnQyOiBRVHlwZSA9IGNyZWF0ZUJpZ1VJbnQoMik7XG5cbi8vIFN0cnVjdHNcblxuZnVuY3Rpb24gc3RydWN0KGZpZWxkczogeyBbc3RyaW5nXTogUVR5cGUgfSwgaXNDb2xsZWN0aW9uPzogYm9vbGVhbik6IFFUeXBlIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBxbChwYXRoLCBmaWx0ZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBxbEZpZWxkcyhwYXRoLCBmaWx0ZXIsIGZpZWxkcywgKGZpZWxkVHlwZSwgcGF0aCwgZmlsdGVyS2V5LCBmaWx0ZXJWYWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGZpZWxkTmFtZSA9IGlzQ29sbGVjdGlvbiAmJiAoZmlsdGVyS2V5ID09PSAnaWQnKSA/ICdfa2V5JyA6IGZpbHRlcktleTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmllbGRUeXBlLnFsKGNvbWJpbmUocGF0aCwgZmllbGROYW1lKSwgZmlsdGVyVmFsdWUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIHRlc3QodmFsdWUsIGZpbHRlcikge1xuICAgICAgICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0ZXN0RmllbGRzKHZhbHVlLCBmaWx0ZXIsIGZpZWxkcywgKGZpZWxkVHlwZSwgdmFsdWUsIGZpbHRlcktleSwgZmlsdGVyVmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBmaWVsZE5hbWUgPSBpc0NvbGxlY3Rpb24gJiYgKGZpbHRlcktleSA9PT0gJ2lkJykgPyAnX2tleScgOiBmaWx0ZXJLZXk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZpZWxkVHlwZS50ZXN0KHZhbHVlW2ZpZWxkTmFtZV0sIGZpbHRlclZhbHVlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vLyBBcnJheXNcblxuZnVuY3Rpb24gYXJyYXkoaXRlbVR5cGU6IFFUeXBlKTogUVR5cGUge1xuICAgIGNvbnN0IG9wcyA9IHtcbiAgICAgICAgYWxsOiB7XG4gICAgICAgICAgICBxbChwYXRoLCBmaWx0ZXIpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBpdGVtUWwgPSBpdGVtVHlwZS5xbCgnQ1VSUkVOVCcsIGZpbHRlcik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGBMRU5HVEgoJHtwYXRofVsqIEZJTFRFUiAke2l0ZW1RbH1dKSA9PSBMRU5HVEgoJHtwYXRofSlgO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRlc3QodmFsdWUsIGZpbHRlcikge1xuICAgICAgICAgICAgICAgIGNvbnN0IGZhaWxlZEluZGV4ID0gdmFsdWUuZmluZEluZGV4KHggPT4gIWl0ZW1UeXBlLnRlc3QoeCwgZmlsdGVyKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhaWxlZEluZGV4IDwgMDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIGFueToge1xuICAgICAgICAgICAgcWwocGF0aCwgZmlsdGVyKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgaXRlbVFsID0gaXRlbVR5cGUucWwoJ0NVUlJFTlQnLCBmaWx0ZXIpO1xuICAgICAgICAgICAgICAgIHJldHVybiBgTEVOR1RIKCR7cGF0aH1bKiBGSUxURVIgJHtpdGVtUWx9XSkgPiAwYDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0ZXN0KHZhbHVlLCBmaWx0ZXIpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzdWNjZWVkZWRJbmRleCA9IHZhbHVlLmZpbmRJbmRleCh4ID0+IGl0ZW1UeXBlLnRlc3QoeCwgZmlsdGVyKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN1Y2NlZWRlZEluZGV4ID49IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgfTtcbiAgICByZXR1cm4ge1xuICAgICAgICBxbChwYXRoLCBmaWx0ZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBxbEZpZWxkcyhwYXRoLCBmaWx0ZXIsIG9wcywgKG9wLCBwYXRoLCBmaWx0ZXJLZXksIGZpbHRlclZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9wLnFsKHBhdGgsIGZpbHRlclZhbHVlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICB0ZXN0KHZhbHVlLCBmaWx0ZXIpIHtcbiAgICAgICAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGVzdEZpZWxkcyh2YWx1ZSwgZmlsdGVyLCBvcHMsIChvcCwgdmFsdWUsIGZpbHRlcktleSwgZmlsdGVyVmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gb3AudGVzdCh2YWx1ZSwgZmlsdGVyVmFsdWUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8vIEpvaW5zXG5cbmZ1bmN0aW9uIGpvaW4ob25GaWVsZDogc3RyaW5nLCByZWZDb2xsZWN0aW9uOiBzdHJpbmcsIHJlZlR5cGU6IFFUeXBlKTogUVR5cGUge1xuICAgIHJldHVybiB7XG4gICAgICAgIHFsKHBhdGgsIGZpbHRlcikge1xuICAgICAgICAgICAgY29uc3Qgb25fcGF0aCA9IHBhdGguc3BsaXQoJy4nKS5zbGljZSgwLCAtMSkuY29uY2F0KG9uRmllbGQpLmpvaW4oJy4nKTtcbiAgICAgICAgICAgIGNvbnN0IGFsaWFzID0gYCR7b25fcGF0aC5yZXBsYWNlKCcuJywgJ18nKX1gO1xuICAgICAgICAgICAgY29uc3QgcmVmUWwgPSByZWZUeXBlLnFsKGFsaWFzLCBmaWx0ZXIpO1xuICAgICAgICAgICAgcmV0dXJuIGBcbiAgICAgICAgICAgICAgICBMRU5HVEgoXG4gICAgICAgICAgICAgICAgICAgIEZPUiAke2FsaWFzfSBJTiAke3JlZkNvbGxlY3Rpb259XG4gICAgICAgICAgICAgICAgICAgIEZJTFRFUiAoJHthbGlhc30uX2tleSA9PSAke29uX3BhdGh9KSBBTkQgKCR7cmVmUWx9KVxuICAgICAgICAgICAgICAgICAgICBMSU1JVCAxXG4gICAgICAgICAgICAgICAgICAgIFJFVFVSTiAxXG4gICAgICAgICAgICAgICAgKSA+IDBgO1xuICAgICAgICB9LFxuICAgICAgICB0ZXN0OiByZWZUeXBlLnRlc3QsXG4gICAgfTtcbn1cblxuZnVuY3Rpb24gam9pbkFycmF5KG9uRmllbGQ6IHN0cmluZywgcmVmQ29sbGVjdGlvbjogc3RyaW5nLCByZWZUeXBlOiBRVHlwZSk6IFFUeXBlIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBxbChwYXRoLCBmaWx0ZXIpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlZkZpbHRlciA9IGZpbHRlci5hbGwgfHwgZmlsdGVyLmFueTtcbiAgICAgICAgICAgIGNvbnN0IGFsbCA9ICEhZmlsdGVyLmFsbDtcbiAgICAgICAgICAgIGNvbnN0IG9uX3BhdGggPSBwYXRoLnNwbGl0KCcuJykuc2xpY2UoMCwgLTEpLmNvbmNhdChvbkZpZWxkKS5qb2luKCcuJyk7XG4gICAgICAgICAgICBjb25zdCBhbGlhcyA9IGAke29uX3BhdGgucmVwbGFjZSgnLicsICdfJyl9YDtcbiAgICAgICAgICAgIGNvbnN0IHJlZlFsID0gcmVmVHlwZS5xbChhbGlhcywgcmVmRmlsdGVyKTtcbiAgICAgICAgICAgIHJldHVybiBgXG4gICAgICAgICAgICAgICAgKExFTkdUSCgke29uX3BhdGh9KSA+IDApXG4gICAgICAgICAgICAgICAgQU5EIChMRU5HVEgoXG4gICAgICAgICAgICAgICAgICAgIEZPUiAke2FsaWFzfSBJTiAke3JlZkNvbGxlY3Rpb259XG4gICAgICAgICAgICAgICAgICAgIEZJTFRFUiAoJHthbGlhc30uX2tleSBJTiAke29uX3BhdGh9KSBBTkQgKCR7cmVmUWx9KVxuICAgICAgICAgICAgICAgICAgICAkeyFhbGwgPyAnTElNSVQgMScgOiAnJ31cbiAgICAgICAgICAgICAgICAgICAgUkVUVVJOIDFcbiAgICAgICAgICAgICAgICApICR7YWxsID8gYD09IExFTkdUSCgke29uX3BhdGh9KWAgOiAnPiAwJ30pYDtcbiAgICAgICAgfSxcbiAgICAgICAgdGVzdDogcmVmVHlwZS50ZXN0LFxuICAgIH07XG59XG5cbmV4cG9ydCB7XG4gICAgc2NhbGFyLFxuICAgIGJpZ1VJbnQxLFxuICAgIGJpZ1VJbnQyLFxuICAgIHJlc29sdmVCaWdVSW50LFxuICAgIGNvbnZlcnRCaWdVSW50LFxuICAgIHN0cnVjdCxcbiAgICBhcnJheSxcbiAgICBqb2luLFxuICAgIGpvaW5BcnJheVxufVxuXG5leHBvcnQgdHlwZSB7XG4gICAgUVR5cGVcbn1cblxuIl19