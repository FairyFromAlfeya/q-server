"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseTypeDef = parseTypeDef;
exports.Def = void 0;

/* eslint-disable no-use-before-define */
// Def
const Def = {
  void_(doc) {
    return {
      _void: {},
      ...(doc ? {
        _doc: doc
      } : {})
    };
  },

  any(doc) {
    return {
      _any: {},
      ...(doc ? {
        _doc: doc
      } : {})
    };
  },

  int(doc) {
    return {
      _int: {},
      ...(doc ? {
        _doc: doc
      } : {})
    };
  },

  float(doc) {
    return {
      _float: {},
      ...(doc ? {
        _doc: doc
      } : {})
    };
  },

  string(doc) {
    return {
      _string: {},
      ...(doc ? {
        _doc: doc
      } : {})
    };
  },

  bool(doc) {
    return {
      _bool: {},
      ...(doc ? {
        _doc: doc
      } : {})
    };
  },

  time(doc) {
    return {
      _time: {},
      ...(doc ? {
        _doc: doc
      } : {})
    };
  },

  arrayOf(item, doc) {
    return {
      _array: item,
      ...(doc ? {
        _doc: doc
      } : {})
    };
  },

  unionOf(members, doc) {
    return {
      _union: members,
      ...(doc ? {
        _doc: doc
      } : {})
    };
  },

  ref(nameOrType, doc) {
    const name = typeof nameOrType === 'string' ? nameOrType : Object.keys(nameOrType)[0];
    return {
      _ref: name,
      ...(doc ? {
        _doc: doc
      } : {})
    };
  },

  value(value, doc) {
    return {
      _value: value,
      ...(doc ? {
        _doc: doc
      } : {})
    };
  }

}; // Schema

exports.Def = Def;

function isReservedKey(key) {
  return key === '_doc' || key === "_";
}

// Parser
function parseTypeDef(def) {
  const parser = new SchemaParser();
  return parser.parseTypeDef(def, '');
} // Internals


function combineName(base, name) {
  return base !== '' ? `${base}.${name}` : name;
}

const UnresolvedType = {
  void: {},
  doc: ''
};

class SchemaParser {
  constructor() {
    this.types = {};
  }

  typeRef(def) {
    const defRef = def._ref || '';
    const existing = this.types[defRef];

    if (existing) {
      if (existing.type !== UnresolvedType) {
        return {
          ref: {
            name: defRef,
            type: existing.type
          }
        };
      }

      const ref = {
        name: defRef,
        type: UnresolvedType
      };
      existing.unresolved.push(ref);
      return {
        ref
      };
    }

    const ref = {
      name: defRef,
      type: UnresolvedType
    };
    this.types[defRef] = {
      type: UnresolvedType,
      unresolved: [ref]
    };
    return {
      ref
    };
  }

  resolveType(name, type) {
    const existing = this.types[name];

    if (existing) {
      existing.unresolved.forEach(x => x.type = type);
    }

    this.types[name] = {
      type,
      unresolved: []
    };
  }

  namedMembersFromUnorderedDefs(defs, mapMember) {
    return Object.keys(defs).map(memberName => {
      const memberDef = defs[memberName];
      return {
        name: memberName,
        ...mapMember(memberName, memberDef)
      };
    });
  }

  namedMembersFromOrderedDefs(defs, mapMember) {
    const members = [];
    defs.forEach(unorderedDefs => {
      this.namedMembersFromUnorderedDefs(unorderedDefs, mapMember).forEach(member => {
        members.push(member);
      });
    });
    return members;
  }

  namedMembers(defs, mapMember) {
    return Array.isArray(defs) ? this.namedMembersFromOrderedDefs(defs, mapMember) : this.namedMembersFromUnorderedDefs(defs, mapMember);
  }

  typedNamedMembers(memberDefs, name) {
    return this.namedMembers(memberDefs, (memberName, memberDef) => {
      return this.parseTypeDef(memberDef, combineName(name, memberName));
    });
  }

  typedNamedOrderedMembers(memberDefs, name) {
    return this.namedMembersFromOrderedDefs(memberDefs, (memberName, memberDef) => {
      return this.parseTypeDef(memberDef, combineName(name, memberName));
    });
  }

  parseTypeDef(def, name) {
    const scalarTypes = ['_void', '_any', '_int', '_float', '_string', '_bool', '_time'];

    if (!def) {
      console.log('>>>', name, def);
    }

    let type = {
      def,
      doc: def._doc || '',
      _: def._ || {}
    };
    const scalarType = scalarTypes.find(t => t in def);

    if (scalarType) {
      Object.assign(type, def);
      type[scalarType.substr(1)] = def[scalarType];
    } else if (def._ref) {
      Object.assign(type, this.typeRef(def));
    } else if (def._array) {
      type.array = this.parseTypeDef(def._array, combineName(name, 'item'));
    } else if (def._struct) {
      type.struct = this.typedNamedMembers(def._struct, name);
    } else if (def._union) {
      type.union = this.namedMembers(def._union, (memberName, memberDef) => {
        return memberDef._value ? memberDef : this.parseTypeDef(memberDef, combineName(name, memberName));
      });
    } else if (def._class) {
      const classDef = def._class;
      type.class = {
        types: classDef.types ? this.typedNamedMembers(classDef.types, name) : [],
        fields: classDef.fields ? this.typedNamedMembers(classDef.fields, name) : [],
        functions: classDef.functions ? this.namedMembers(classDef.functions, (functionName, functionDef) => {
          return {
            def: functionDef,
            doc: functionDef._doc || '',
            args: functionDef.args ? this.typedNamedOrderedMembers(functionDef.args, combineName(name, functionName)) : [],
            result: functionDef.result ? this.parseTypeDef(functionDef.result, combineName(name, 'Result')) : {
              doc: '',
              void: {}
            }
          };
        }) : []
      };
    } else if (Array.isArray(def)) {
      type.struct = this.typedNamedMembers(def, name);
    } else if (typeof def === 'object') {
      const filteredDef = {};
      Object.keys(def).forEach(key => {
        if (!isReservedKey(key)) {
          filteredDef[key] = def[key];
        }
      });
      type.struct = this.typedNamedMembers(filteredDef, name);
    } else {
      console.log('>>>', name);
    }

    this.resolveType(name, type);
    return type;
  }

}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,