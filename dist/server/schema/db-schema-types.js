"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.u8enum = u8enum;
exports.otherCurrencyCollection = exports.OtherCurrency = exports.grams = exports.u64 = exports.u32 = exports.u16 = exports.u8 = exports.i32 = exports.i8 = exports.required = exports.withDoc = exports.join = void 0;

var _schema = require("ton-labs-dev-ops/dist/src/schema");

const {
  ref,
  arrayOf
} = _schema.Def;

const join = (refDef, on, refOn, preCondition) => {
  return { ...ref(refDef),
    _: {
      join: {
        on,
        refOn,
        preCondition: preCondition || ''
      }
    }
  };
};

exports.join = join;

const withDoc = (def, doc) => ({ ...def,
  ...(doc ? {
    _doc: doc
  } : {})
});

exports.withDoc = withDoc;

const required = def => def;

exports.required = required;

const uint = (size, doc) => withDoc({
  _int: {
    unsigned: true,
    size
  }
}, doc);

const int = (size, doc) => withDoc({
  _int: {
    unsigned: false,
    size
  }
}, doc);

const i8 = doc => int(8, doc);

exports.i8 = i8;

const i32 = doc => int(32, doc);

exports.i32 = i32;

const u8 = doc => uint(8, doc);

exports.u8 = u8;

const u16 = doc => uint(16, doc);

exports.u16 = u16;

const u32 = doc => uint(32, doc);

exports.u32 = u32;

const u64 = doc => uint(64, doc);

exports.u64 = u64;

const u128 = doc => uint(128, doc);

const u256 = doc => uint(256, doc);

const grams = u128;
exports.grams = grams;

function u8enum(name, values) {
  return doc => {
    const valuesDoc = Object.entries(values).map(([name, value]) => {
      return `- ${value} â€“ ${name}`;
    }).join('\n');
    const effectiveDoc = `${doc ? `${doc}\n` : ''}${valuesDoc}`;
    return withDoc({
      _int: {
        unsigned: true,
        size: 8
      },
      _: {
        enum: {
          name,
          values
        }
      }
    }, effectiveDoc);
  };
}

const OtherCurrency = {
  currency: u32(),
  value: u256()
};
exports.OtherCurrency = OtherCurrency;

const otherCurrencyCollection = doc => arrayOf(ref({
  OtherCurrency
}), doc);

exports.otherCurrencyCollection = otherCurrencyCollection;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NlcnZlci9zY2hlbWEvZGItc2NoZW1hLXR5cGVzLmpzIl0sIm5hbWVzIjpbInJlZiIsImFycmF5T2YiLCJEZWYiLCJqb2luIiwicmVmRGVmIiwib24iLCJyZWZPbiIsInByZUNvbmRpdGlvbiIsIl8iLCJ3aXRoRG9jIiwiZGVmIiwiZG9jIiwiX2RvYyIsInJlcXVpcmVkIiwidWludCIsInNpemUiLCJfaW50IiwidW5zaWduZWQiLCJpbnQiLCJpOCIsImkzMiIsInU4IiwidTE2IiwidTMyIiwidTY0IiwidTEyOCIsInUyNTYiLCJncmFtcyIsInU4ZW51bSIsIm5hbWUiLCJ2YWx1ZXMiLCJ2YWx1ZXNEb2MiLCJPYmplY3QiLCJlbnRyaWVzIiwibWFwIiwidmFsdWUiLCJlZmZlY3RpdmVEb2MiLCJlbnVtIiwiT3RoZXJDdXJyZW5jeSIsImN1cnJlbmN5Iiwib3RoZXJDdXJyZW5jeUNvbGxlY3Rpb24iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQ0E7O0FBR0EsTUFBTTtBQUFFQSxFQUFBQSxHQUFGO0FBQU9DLEVBQUFBO0FBQVAsSUFBbUJDLFdBQXpCOztBQUVPLE1BQU1DLElBQUksR0FBRyxDQUFDQyxNQUFELEVBQTJDQyxFQUEzQyxFQUF1REMsS0FBdkQsRUFBc0VDLFlBQXRFLEtBQXlHO0FBQ3pILFNBQU8sRUFDSCxHQUFHUCxHQUFHLENBQUNJLE1BQUQsQ0FESDtBQUVISSxJQUFBQSxDQUFDLEVBQUU7QUFDQ0wsTUFBQUEsSUFBSSxFQUFFO0FBQ0ZFLFFBQUFBLEVBREU7QUFFRkMsUUFBQUEsS0FGRTtBQUdGQyxRQUFBQSxZQUFZLEVBQUdBLFlBQVksSUFBSTtBQUg3QjtBQURQO0FBRkEsR0FBUDtBQVVILENBWE07Ozs7QUFhQSxNQUFNRSxPQUFPLEdBQUcsQ0FBQ0MsR0FBRCxFQUFlQyxHQUFmLE1BQWlDLEVBQ3BELEdBQUdELEdBRGlEO0FBRXBELE1BQUlDLEdBQUcsR0FBRztBQUFFQyxJQUFBQSxJQUFJLEVBQUVEO0FBQVIsR0FBSCxHQUFtQixFQUExQjtBQUZvRCxDQUFqQyxDQUFoQjs7OztBQUtBLE1BQU1FLFFBQVEsR0FBSUgsR0FBRCxJQUFrQkEsR0FBbkM7Ozs7QUFFUCxNQUFNSSxJQUFJLEdBQUcsQ0FBQ0MsSUFBRCxFQUFvQkosR0FBcEIsS0FBcUNGLE9BQU8sQ0FBQztBQUN0RE8sRUFBQUEsSUFBSSxFQUFFO0FBQUVDLElBQUFBLFFBQVEsRUFBRSxJQUFaO0FBQWtCRixJQUFBQTtBQUFsQjtBQURnRCxDQUFELEVBRXRESixHQUZzRCxDQUF6RDs7QUFJQSxNQUFNTyxHQUFHLEdBQUcsQ0FBQ0gsSUFBRCxFQUFvQkosR0FBcEIsS0FBcUNGLE9BQU8sQ0FBQztBQUNyRE8sRUFBQUEsSUFBSSxFQUFFO0FBQUVDLElBQUFBLFFBQVEsRUFBRSxLQUFaO0FBQW1CRixJQUFBQTtBQUFuQjtBQUQrQyxDQUFELEVBRXJESixHQUZxRCxDQUF4RDs7QUFJTyxNQUFNUSxFQUFFLEdBQUlSLEdBQUQsSUFBa0JPLEdBQUcsQ0FBQyxDQUFELEVBQUlQLEdBQUosQ0FBaEM7Ozs7QUFDQSxNQUFNUyxHQUFHLEdBQUlULEdBQUQsSUFBa0JPLEdBQUcsQ0FBQyxFQUFELEVBQUtQLEdBQUwsQ0FBakM7Ozs7QUFDQSxNQUFNVSxFQUFFLEdBQUlWLEdBQUQsSUFBa0JHLElBQUksQ0FBQyxDQUFELEVBQUlILEdBQUosQ0FBakM7Ozs7QUFDQSxNQUFNVyxHQUFHLEdBQUlYLEdBQUQsSUFBa0JHLElBQUksQ0FBQyxFQUFELEVBQUtILEdBQUwsQ0FBbEM7Ozs7QUFDQSxNQUFNWSxHQUFHLEdBQUlaLEdBQUQsSUFBa0JHLElBQUksQ0FBQyxFQUFELEVBQUtILEdBQUwsQ0FBbEM7Ozs7QUFDQSxNQUFNYSxHQUFHLEdBQUliLEdBQUQsSUFBa0JHLElBQUksQ0FBQyxFQUFELEVBQUtILEdBQUwsQ0FBbEM7Ozs7QUFDUCxNQUFNYyxJQUFJLEdBQUlkLEdBQUQsSUFBa0JHLElBQUksQ0FBQyxHQUFELEVBQU1ILEdBQU4sQ0FBbkM7O0FBQ0EsTUFBTWUsSUFBSSxHQUFJZixHQUFELElBQWtCRyxJQUFJLENBQUMsR0FBRCxFQUFNSCxHQUFOLENBQW5DOztBQUVPLE1BQU1nQixLQUFLLEdBQUdGLElBQWQ7OztBQU1BLFNBQVNHLE1BQVQsQ0FBZ0JDLElBQWhCLEVBQThCQyxNQUE5QixFQUFxRDtBQUN4RCxTQUFRbkIsR0FBRCxJQUEyQjtBQUM5QixVQUFNb0IsU0FBUyxHQUFHQyxNQUFNLENBQUNDLE9BQVAsQ0FBZUgsTUFBZixFQUF1QkksR0FBdkIsQ0FBMkIsQ0FBQyxDQUFDTCxJQUFELEVBQU9NLEtBQVAsQ0FBRCxLQUFtQjtBQUM1RCxhQUFRLEtBQUtBLEtBQVksTUFBS04sSUFBSyxFQUFuQztBQUNILEtBRmlCLEVBRWYxQixJQUZlLENBRVYsSUFGVSxDQUFsQjtBQUdBLFVBQU1pQyxZQUFZLEdBQUksR0FBRXpCLEdBQUcsR0FBSSxHQUFFQSxHQUFJLElBQVYsR0FBZ0IsRUFBRyxHQUFFb0IsU0FBVSxFQUExRDtBQUNBLFdBQU90QixPQUFPLENBQUM7QUFDWE8sTUFBQUEsSUFBSSxFQUFFO0FBQ0ZDLFFBQUFBLFFBQVEsRUFBRSxJQURSO0FBRUZGLFFBQUFBLElBQUksRUFBRTtBQUZKLE9BREs7QUFLWFAsTUFBQUEsQ0FBQyxFQUFFO0FBQ0M2QixRQUFBQSxJQUFJLEVBQUU7QUFDRlIsVUFBQUEsSUFERTtBQUVGQyxVQUFBQTtBQUZFO0FBRFA7QUFMUSxLQUFELEVBV1hNLFlBWFcsQ0FBZDtBQVlILEdBakJEO0FBa0JIOztBQUVNLE1BQU1FLGFBQXNCLEdBQUc7QUFDbENDLEVBQUFBLFFBQVEsRUFBRWhCLEdBQUcsRUFEcUI7QUFFbENZLEVBQUFBLEtBQUssRUFBRVQsSUFBSTtBQUZ1QixDQUEvQjs7O0FBS0EsTUFBTWMsdUJBQXVCLEdBQUk3QixHQUFELElBQTJCVixPQUFPLENBQUNELEdBQUcsQ0FBQztBQUFFc0MsRUFBQUE7QUFBRixDQUFELENBQUosRUFBeUIzQixHQUF6QixDQUFsRSIsInNvdXJjZXNDb250ZW50IjpbIi8vIEBmbG93XG5pbXBvcnQgeyBEZWYgfSBmcm9tIFwidG9uLWxhYnMtZGV2LW9wcy9kaXN0L3NyYy9zY2hlbWFcIjtcbmltcG9ydCB0eXBlIHsgSW50U2l6ZVR5cGUsIFR5cGVEZWYgfSBmcm9tIFwidG9uLWxhYnMtZGV2LW9wcy9zcmMvc2NoZW1hXCI7XG5cbmNvbnN0IHsgcmVmLCBhcnJheU9mIH0gPSBEZWY7XG5cbmV4cG9ydCBjb25zdCBqb2luID0gKHJlZkRlZjogKHN0cmluZyB8IHsgW3N0cmluZ106IFR5cGVEZWYgfSksIG9uOiBzdHJpbmcsIHJlZk9uOiBzdHJpbmcsIHByZUNvbmRpdGlvbj86IHN0cmluZyk6IFR5cGVEZWYgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICAgIC4uLnJlZihyZWZEZWYpLFxuICAgICAgICBfOiB7XG4gICAgICAgICAgICBqb2luOiB7XG4gICAgICAgICAgICAgICAgb24sXG4gICAgICAgICAgICAgICAgcmVmT24sXG4gICAgICAgICAgICAgICAgcHJlQ29uZGl0aW9uOiAocHJlQ29uZGl0aW9uIHx8ICcnKSxcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn07XG5cbmV4cG9ydCBjb25zdCB3aXRoRG9jID0gKGRlZjogVHlwZURlZiwgZG9jPzogc3RyaW5nKSA9PiAoe1xuICAgIC4uLmRlZixcbiAgICAuLi4oZG9jID8geyBfZG9jOiBkb2MgfSA6IHt9KVxufSk7XG5cbmV4cG9ydCBjb25zdCByZXF1aXJlZCA9IChkZWY6IFR5cGVEZWYpID0+IGRlZjtcblxuY29uc3QgdWludCA9IChzaXplOiBJbnRTaXplVHlwZSwgZG9jPzogc3RyaW5nKSA9PiB3aXRoRG9jKHtcbiAgICBfaW50OiB7IHVuc2lnbmVkOiB0cnVlLCBzaXplIH1cbn0sIGRvYyk7XG5cbmNvbnN0IGludCA9IChzaXplOiBJbnRTaXplVHlwZSwgZG9jPzogc3RyaW5nKSA9PiB3aXRoRG9jKHtcbiAgICBfaW50OiB7IHVuc2lnbmVkOiBmYWxzZSwgc2l6ZSB9XG59LCBkb2MpO1xuXG5leHBvcnQgY29uc3QgaTggPSAoZG9jPzogc3RyaW5nKSA9PiBpbnQoOCwgZG9jKTtcbmV4cG9ydCBjb25zdCBpMzIgPSAoZG9jPzogc3RyaW5nKSA9PiBpbnQoMzIsIGRvYyk7XG5leHBvcnQgY29uc3QgdTggPSAoZG9jPzogc3RyaW5nKSA9PiB1aW50KDgsIGRvYyk7XG5leHBvcnQgY29uc3QgdTE2ID0gKGRvYz86IHN0cmluZykgPT4gdWludCgxNiwgZG9jKTtcbmV4cG9ydCBjb25zdCB1MzIgPSAoZG9jPzogc3RyaW5nKSA9PiB1aW50KDMyLCBkb2MpO1xuZXhwb3J0IGNvbnN0IHU2NCA9IChkb2M/OiBzdHJpbmcpID0+IHVpbnQoNjQsIGRvYyk7XG5jb25zdCB1MTI4ID0gKGRvYz86IHN0cmluZykgPT4gdWludCgxMjgsIGRvYyk7XG5jb25zdCB1MjU2ID0gKGRvYz86IHN0cmluZykgPT4gdWludCgyNTYsIGRvYyk7XG5cbmV4cG9ydCBjb25zdCBncmFtcyA9IHUxMjg7XG5cbnR5cGUgSW50RW51bVZhbHVlcyA9IHtcbiAgICBbc3RyaW5nXTogbnVtYmVyXG59O1xuXG5leHBvcnQgZnVuY3Rpb24gdThlbnVtKG5hbWU6IHN0cmluZywgdmFsdWVzOiBJbnRFbnVtVmFsdWVzKSB7XG4gICAgcmV0dXJuIChkb2M/OiBzdHJpbmcpOiBUeXBlRGVmID0+IHtcbiAgICAgICAgY29uc3QgdmFsdWVzRG9jID0gT2JqZWN0LmVudHJpZXModmFsdWVzKS5tYXAoKFtuYW1lLCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIHJldHVybiBgLSAkeyh2YWx1ZTogYW55KX0g4oCTICR7bmFtZX1gO1xuICAgICAgICB9KS5qb2luKCdcXG4nKTtcbiAgICAgICAgY29uc3QgZWZmZWN0aXZlRG9jID0gYCR7ZG9jID8gYCR7ZG9jfVxcbmAgOiAnJ30ke3ZhbHVlc0RvY31gO1xuICAgICAgICByZXR1cm4gd2l0aERvYyh7XG4gICAgICAgICAgICBfaW50OiB7XG4gICAgICAgICAgICAgICAgdW5zaWduZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgc2l6ZTogOCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfOiB7XG4gICAgICAgICAgICAgICAgZW51bToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZXNcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGVmZmVjdGl2ZURvYyk7XG4gICAgfVxufVxuXG5leHBvcnQgY29uc3QgT3RoZXJDdXJyZW5jeTogVHlwZURlZiA9IHtcbiAgICBjdXJyZW5jeTogdTMyKCksXG4gICAgdmFsdWU6IHUyNTYoKSxcbn07XG5cbmV4cG9ydCBjb25zdCBvdGhlckN1cnJlbmN5Q29sbGVjdGlvbiA9IChkb2M/OiBzdHJpbmcpOiBUeXBlRGVmID0+IGFycmF5T2YocmVmKHsgT3RoZXJDdXJyZW5jeSB9KSwgZG9jKTtcbiJdfQ==