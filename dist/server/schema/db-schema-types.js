"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.u8enum = u8enum;
exports.isBigInt = isBigInt;
exports.unresolvedType = unresolvedType;
exports.toEnumStyle = toEnumStyle;
exports.stringifyEnumValues = stringifyEnumValues;
exports.getDocMD = getDocMD;
exports.parseDbSchema = parseDbSchema;
exports.scalarTypes = exports.DbTypeCategory = exports.otherCurrencyCollection = exports.OtherCurrency = exports.grams = exports.unixSeconds = exports.u32WithFormatter = exports.u128 = exports.u64 = exports.u32 = exports.u16 = exports.u8 = exports.i32 = exports.i8 = exports.required = exports.withDoc = exports.join = void 0;

var _gen = require("../../maintanance/gen-graphql/gen.js");

var _schema = require("./schema.js");

const {
  ref,
  arrayOf
} = _schema.Def;
const ToStringFormatter = {
  unixMillisecondsToString: 'unixMillisecondsToString',
  unixSecondsToString: 'unixSecondsToString'
};

const join = (refDef, on, refOn, preCondition) => {
  return { ...ref(refDef),
    _: {
      join: {
        on,
        refOn,
        preCondition: preCondition || ''
      }
    }
  };
};

exports.join = join;

const withDoc = (def, doc) => ({ ...def,
  ...(doc ? {
    _doc: doc
  } : {})
});

exports.withDoc = withDoc;

const required = def => def;

exports.required = required;

const uint = (size, doc) => withDoc({
  _int: {
    unsigned: true,
    size
  }
}, doc);

const int = (size, doc) => withDoc({
  _int: {
    unsigned: false,
    size
  }
}, doc);

const i8 = doc => int(8, doc);

exports.i8 = i8;

const i32 = doc => int(32, doc);

exports.i32 = i32;

const u8 = doc => uint(8, doc);

exports.u8 = u8;

const u16 = doc => uint(16, doc);

exports.u16 = u16;

const u32 = doc => uint(32, doc);

exports.u32 = u32;

const u64 = doc => uint(64, doc);

exports.u64 = u64;

const u128 = doc => uint(128, doc);

exports.u128 = u128;

const u256 = doc => uint(256, doc);

const u32WithFormatter = (formatter, doc) => withDoc({
  _int: {
    unsigned: true,
    size: 32
  },
  _: {
    formatter
  }
}, doc);

exports.u32WithFormatter = u32WithFormatter;

const unixSeconds = doc => u32WithFormatter(ToStringFormatter.unixSecondsToString, doc);

exports.unixSeconds = unixSeconds;
const grams = u128;
exports.grams = grams;

function u8enum(name, values) {
  return doc => {
    const valuesDoc = Object.entries(values).map(([name, value]) => {
      return `- ${value} â€“ ${name}`;
    }).join('\n');
    const effectiveDoc = `${doc ? `${doc}\n` : ''}${valuesDoc}`;
    return withDoc({
      _int: {
        unsigned: true,
        size: 8
      },
      _: {
        enum: {
          name,
          values
        }
      }
    }, effectiveDoc);
  };
}

const OtherCurrency = {
  currency: u32(),
  value: u256()
};
exports.OtherCurrency = OtherCurrency;

const otherCurrencyCollection = doc => arrayOf(ref({
  OtherCurrency
}), doc);

exports.otherCurrencyCollection = otherCurrencyCollection;
const DbTypeCategory = {
  unresolved: 'unresolved',
  scalar: 'scalar',
  union: 'union',
  struct: 'struct'
};
exports.DbTypeCategory = DbTypeCategory;

function scalarType(name) {
  return {
    name,
    category: DbTypeCategory.scalar,
    fields: [],
    doc: ''
  };
}

const scalarTypes = {
  int: scalarType('Int'),
  uint64: scalarType('String'),
  uint1024: scalarType('String'),
  float: scalarType('Float'),
  boolean: scalarType('Boolean'),
  string: scalarType('String')
};
exports.scalarTypes = scalarTypes;

function isBigInt(type) {
  return type === scalarTypes.uint1024 || type === scalarTypes.uint64;
}

function unresolvedType(name) {
  return {
    name,
    category: DbTypeCategory.unresolved,
    fields: [],
    doc: ''
  };
}

function toEnumStyle(s) {
  return `${s.substr(0, 1).toUpperCase()}${s.substr(1)}`;
}

function stringifyEnumValues(values) {
  const fields = Object.entries(values).map(([name, value]) => {
    return `${toEnumStyle(name)}: ${value}`;
  });
  return `{ ${fields.join(', ')} }`;
}

function getDocMD(schema) {
  const doc = schema.doc;

  if (!doc) {
    return '';
  }

  if (typeof doc === 'string') {
    return doc;
  }

  if (doc.md) {
    return doc.md;
  }

  return '';
}

function parseDbSchema(schemaDef) {
  const dbTypes = [];
  const enumTypes = new Map();

  function parseDbField(typeName, schemaField) {
    let schemaType = schemaField;
    const field = {
      name: schemaField.name,
      arrayDepth: 0,
      type: scalarTypes.string,
      doc: getDocMD(schemaField)
    };

    while (schemaType.array) {
      field.arrayDepth += 1;
      schemaType = schemaType.array;
    }

    const ex = schemaType._;
    const enumDef = ex && ex.enum || null;

    if (enumDef) {
      field.enumDef = enumDef;
      enumTypes.set(enumDef.name, enumDef);
    }

    const join = ex && ex.join;

    if (join) {
      field.join = join;
    }

    if (ex && ex.formatter) {
      field.formatter = ex.formatter;
    }

    if (schemaType.union || schemaType.struct) {
      field.type = unresolvedType((0, _gen.makeFieldTypeName)(typeName, schemaField.name));
    } else if (schemaType.ref) {
      field.type = unresolvedType(schemaType.ref.name);
    } else if (schemaType.bool) {
      field.type = scalarTypes.boolean;
    } else if (schemaType.int) {
      const unsigned = schemaType.int && schemaType.int.unsigned || false;
      const size = schemaType.int && schemaType.int.size || 32;

      if (unsigned) {
        if (size >= 128) {
          field.type = scalarTypes.uint1024;
        } else if (size >= 64) {
          field.type = scalarTypes.uint64;
        } else if (size >= 32) {
          field.type = scalarTypes.float;
        } else {
          field.type = scalarTypes.int;
        }
      } else {
        if (size > 32) {
          throw new Error(`Integer type with size ${size} bit does not supported`);
        } else {
          field.type = scalarTypes.int;
        }
      }
    } else if (schemaType.float) {
      field.type = scalarTypes.float;
    } else if (schemaType.string) {
      field.type = scalarTypes.string;
    } else {
      field.type = scalarTypes.string;
      console.log('Invalid field type: ', JSON.stringify(schemaType));
      process.exit(1);
    }

    return field;
  }

  function unwrapArrays(type) {
    if (type.array) {
      return unwrapArrays(type.array);
    }

    return type;
  }

  function parseDbType(name, schemaType) {
    const struct = schemaType.union || schemaType.struct;

    if (!struct) {
      console.log(`?? ${name}: ${JSON.stringify(schemaType).substr(0, 200)}`);
      return;
    }

    const type = {
      name,
      category: schemaType.union ? DbTypeCategory.union : DbTypeCategory.struct,
      fields: [],
      collection: schemaType._.collection,
      doc: getDocMD(schemaType)
    };

    if (type.collection) {
      type.fields.push({
        name: 'id',
        arrayDepth: 0,
        type: scalarTypes.string,
        doc: ''
      });
    }

    struct.forEach(field => {
      type.fields.push(parseDbField(name, field));
      const unwrapped = unwrapArrays(field);
      const ownType = unwrapped.struct || unwrapped.union ? unwrapped : null;

      if (ownType) {
        parseDbType((0, _gen.makeFieldTypeName)(name, field.name), ownType);
      }
    });
    dbTypes.push(type);
  }

  const schema = (0, _schema.parseTypeDef)(schemaDef);

  if (schema.class) {
    schema.class.types.forEach(type => {
      parseDbType(type.name, type);
    });
  }

  const unresolved = new Map();
  const resolving = new Set();
  const resolved = new Map();
  const orderedResolved = [];
  dbTypes.forEach(t => unresolved.set(t.name, t));

  const resolveType = type => {
    if (resolved.has(type.name)) {
      return;
    }

    if (resolving.has(type.name)) {
      console.log(`WARNING: Circular reference to type ${type.name}`);
      return;
    }

    resolving.add(type.name);
    type.fields.forEach(field => {
      if (field.type.category === DbTypeCategory.unresolved) {
        let type = resolved.get(field.type.name);

        if (!type) {
          type = unresolved.get(field.type.name);

          if (type) {
            resolveType(type);
          } else {
            console.log(`Referenced type not found: ${field.type.name}`);
            process.exit(1);
          }
        }

        if (type) {
          field.type = type;
        }
      }
    });
    resolving.delete(type.name);
    orderedResolved.push(type);
    unresolved.delete(type.name);
    resolved.set(type.name, type);
  };

  dbTypes.forEach(resolveType);
  return {
    types: orderedResolved,
    enumTypes
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,