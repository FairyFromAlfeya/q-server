"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.u8enum = u8enum;
exports.otherCurrencyCollection = exports.OtherCurrency = exports.grams = exports.u64 = exports.u32 = exports.u16 = exports.u8 = exports.i32 = exports.i8 = exports.required = exports.withDoc = exports.join = void 0;

var _schema = require("ton-labs-dev-ops/dist/src/schema");

const {
  ref,
  arrayOf
} = _schema.Def;

const join = (refDef, on, refOn) => {
  return { ...ref(refDef),
    _: {
      join: {
        on,
        refOn
      }
    }
  };
};

exports.join = join;

const withDoc = (def, doc) => ({ ...def,
  ...(doc ? {
    _doc: doc
  } : {})
});

exports.withDoc = withDoc;

const required = def => def;

exports.required = required;

const uint = (size, doc) => withDoc({
  _int: {
    unsigned: true,
    size
  }
}, doc);

const int = (size, doc) => withDoc({
  _int: {
    unsigned: false,
    size
  }
}, doc);

const i8 = doc => int(8, doc);

exports.i8 = i8;

const i32 = doc => int(32, doc);

exports.i32 = i32;

const u8 = doc => uint(8, doc);

exports.u8 = u8;

const u16 = doc => uint(16, doc);

exports.u16 = u16;

const u32 = doc => uint(32, doc);

exports.u32 = u32;

const u64 = doc => uint(64, doc);

exports.u64 = u64;

const u128 = doc => uint(128, doc);

const u256 = doc => uint(256, doc);

const grams = u128;
exports.grams = grams;

function u8enum(name, values) {
  return doc => {
    const valuesDoc = Object.entries(values).map(([name, value]) => {
      return `- ${value} â€“ ${name}`;
    }).join('\n');
    const effectiveDoc = `${doc ? `${doc}\n` : ''}${valuesDoc}`;
    return withDoc({
      _int: {
        unsigned: true,
        size: 8
      },
      _: {
        enum: {
          name,
          values
        }
      }
    }, effectiveDoc);
  };
}

const OtherCurrency = {
  currency: u32(),
  value: u256()
};
exports.OtherCurrency = OtherCurrency;

const otherCurrencyCollection = doc => arrayOf(ref({
  OtherCurrency
}), doc);

exports.otherCurrencyCollection = otherCurrencyCollection;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NlcnZlci9zY2hlbWEvZGItc2NoZW1hLXR5cGVzLmpzIl0sIm5hbWVzIjpbInJlZiIsImFycmF5T2YiLCJEZWYiLCJqb2luIiwicmVmRGVmIiwib24iLCJyZWZPbiIsIl8iLCJ3aXRoRG9jIiwiZGVmIiwiZG9jIiwiX2RvYyIsInJlcXVpcmVkIiwidWludCIsInNpemUiLCJfaW50IiwidW5zaWduZWQiLCJpbnQiLCJpOCIsImkzMiIsInU4IiwidTE2IiwidTMyIiwidTY0IiwidTEyOCIsInUyNTYiLCJncmFtcyIsInU4ZW51bSIsIm5hbWUiLCJ2YWx1ZXMiLCJ2YWx1ZXNEb2MiLCJPYmplY3QiLCJlbnRyaWVzIiwibWFwIiwidmFsdWUiLCJlZmZlY3RpdmVEb2MiLCJlbnVtIiwiT3RoZXJDdXJyZW5jeSIsImN1cnJlbmN5Iiwib3RoZXJDdXJyZW5jeUNvbGxlY3Rpb24iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQ0E7O0FBRUEsTUFBTTtBQUFFQSxFQUFBQSxHQUFGO0FBQU9DLEVBQUFBO0FBQVAsSUFBbUJDLFdBQXpCOztBQUVPLE1BQU1DLElBQUksR0FBRyxDQUFDQyxNQUFELEVBQTJDQyxFQUEzQyxFQUF1REMsS0FBdkQsS0FBa0Y7QUFDbEcsU0FBTyxFQUFFLEdBQUdOLEdBQUcsQ0FBQ0ksTUFBRCxDQUFSO0FBQWtCRyxJQUFBQSxDQUFDLEVBQUU7QUFBRUosTUFBQUEsSUFBSSxFQUFFO0FBQUVFLFFBQUFBLEVBQUY7QUFBTUMsUUFBQUE7QUFBTjtBQUFSO0FBQXJCLEdBQVA7QUFDSCxDQUZNOzs7O0FBSUEsTUFBTUUsT0FBTyxHQUFHLENBQUNDLEdBQUQsRUFBZUMsR0FBZixNQUFpQyxFQUNwRCxHQUFHRCxHQURpRDtBQUVwRCxNQUFJQyxHQUFHLEdBQUc7QUFBRUMsSUFBQUEsSUFBSSxFQUFFRDtBQUFSLEdBQUgsR0FBbUIsRUFBMUI7QUFGb0QsQ0FBakMsQ0FBaEI7Ozs7QUFLQSxNQUFNRSxRQUFRLEdBQUlILEdBQUQsSUFBa0JBLEdBQW5DOzs7O0FBRVAsTUFBTUksSUFBSSxHQUFHLENBQUNDLElBQUQsRUFBb0JKLEdBQXBCLEtBQXFDRixPQUFPLENBQUM7QUFDdERPLEVBQUFBLElBQUksRUFBRTtBQUFFQyxJQUFBQSxRQUFRLEVBQUUsSUFBWjtBQUFrQkYsSUFBQUE7QUFBbEI7QUFEZ0QsQ0FBRCxFQUV0REosR0FGc0QsQ0FBekQ7O0FBSUEsTUFBTU8sR0FBRyxHQUFHLENBQUNILElBQUQsRUFBb0JKLEdBQXBCLEtBQXFDRixPQUFPLENBQUM7QUFDckRPLEVBQUFBLElBQUksRUFBRTtBQUFFQyxJQUFBQSxRQUFRLEVBQUUsS0FBWjtBQUFtQkYsSUFBQUE7QUFBbkI7QUFEK0MsQ0FBRCxFQUVyREosR0FGcUQsQ0FBeEQ7O0FBSU8sTUFBTVEsRUFBRSxHQUFJUixHQUFELElBQWtCTyxHQUFHLENBQUMsQ0FBRCxFQUFJUCxHQUFKLENBQWhDOzs7O0FBQ0EsTUFBTVMsR0FBRyxHQUFJVCxHQUFELElBQWtCTyxHQUFHLENBQUMsRUFBRCxFQUFLUCxHQUFMLENBQWpDOzs7O0FBQ0EsTUFBTVUsRUFBRSxHQUFJVixHQUFELElBQWtCRyxJQUFJLENBQUMsQ0FBRCxFQUFJSCxHQUFKLENBQWpDOzs7O0FBQ0EsTUFBTVcsR0FBRyxHQUFJWCxHQUFELElBQWtCRyxJQUFJLENBQUMsRUFBRCxFQUFLSCxHQUFMLENBQWxDOzs7O0FBQ0EsTUFBTVksR0FBRyxHQUFJWixHQUFELElBQWtCRyxJQUFJLENBQUMsRUFBRCxFQUFLSCxHQUFMLENBQWxDOzs7O0FBQ0EsTUFBTWEsR0FBRyxHQUFJYixHQUFELElBQWtCRyxJQUFJLENBQUMsRUFBRCxFQUFLSCxHQUFMLENBQWxDOzs7O0FBQ1AsTUFBTWMsSUFBSSxHQUFJZCxHQUFELElBQWtCRyxJQUFJLENBQUMsR0FBRCxFQUFNSCxHQUFOLENBQW5DOztBQUNBLE1BQU1lLElBQUksR0FBSWYsR0FBRCxJQUFrQkcsSUFBSSxDQUFDLEdBQUQsRUFBTUgsR0FBTixDQUFuQzs7QUFFTyxNQUFNZ0IsS0FBSyxHQUFHRixJQUFkOzs7QUFNQSxTQUFTRyxNQUFULENBQWdCQyxJQUFoQixFQUE4QkMsTUFBOUIsRUFBcUQ7QUFDeEQsU0FBUW5CLEdBQUQsSUFBMkI7QUFDOUIsVUFBTW9CLFNBQVMsR0FBR0MsTUFBTSxDQUFDQyxPQUFQLENBQWVILE1BQWYsRUFBdUJJLEdBQXZCLENBQTJCLENBQUMsQ0FBQ0wsSUFBRCxFQUFPTSxLQUFQLENBQUQsS0FBbUI7QUFDNUQsYUFBUSxLQUFLQSxLQUFZLE1BQUtOLElBQUssRUFBbkM7QUFDSCxLQUZpQixFQUVmekIsSUFGZSxDQUVWLElBRlUsQ0FBbEI7QUFHQSxVQUFNZ0MsWUFBWSxHQUFJLEdBQUV6QixHQUFHLEdBQUksR0FBRUEsR0FBSSxJQUFWLEdBQWdCLEVBQUcsR0FBRW9CLFNBQVUsRUFBMUQ7QUFDQSxXQUFPdEIsT0FBTyxDQUFDO0FBQ1hPLE1BQUFBLElBQUksRUFBRTtBQUNGQyxRQUFBQSxRQUFRLEVBQUUsSUFEUjtBQUVGRixRQUFBQSxJQUFJLEVBQUU7QUFGSixPQURLO0FBS1hQLE1BQUFBLENBQUMsRUFBRTtBQUNDNkIsUUFBQUEsSUFBSSxFQUFFO0FBQ0ZSLFVBQUFBLElBREU7QUFFRkMsVUFBQUE7QUFGRTtBQURQO0FBTFEsS0FBRCxFQVdYTSxZQVhXLENBQWQ7QUFZSCxHQWpCRDtBQWtCSDs7QUFFTSxNQUFNRSxhQUFzQixHQUFHO0FBQ2xDQyxFQUFBQSxRQUFRLEVBQUVoQixHQUFHLEVBRHFCO0FBRWxDWSxFQUFBQSxLQUFLLEVBQUVULElBQUk7QUFGdUIsQ0FBL0I7OztBQUtBLE1BQU1jLHVCQUF1QixHQUFJN0IsR0FBRCxJQUEyQlQsT0FBTyxDQUFDRCxHQUFHLENBQUM7QUFBRXFDLEVBQUFBO0FBQUYsQ0FBRCxDQUFKLEVBQXlCM0IsR0FBekIsQ0FBbEUiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBAZmxvd1xuaW1wb3J0IHsgRGVmIH0gZnJvbSBcInRvbi1sYWJzLWRldi1vcHMvZGlzdC9zcmMvc2NoZW1hXCI7XG5pbXBvcnQgdHlwZSB7IEludFNpemVUeXBlLCBUeXBlRGVmIH0gZnJvbSBcInRvbi1sYWJzLWRldi1vcHMvc3JjL3NjaGVtYVwiO1xuY29uc3QgeyByZWYsIGFycmF5T2YgfSA9IERlZjtcblxuZXhwb3J0IGNvbnN0IGpvaW4gPSAocmVmRGVmOiAoc3RyaW5nIHwgeyBbc3RyaW5nXTogVHlwZURlZiB9KSwgb246IHN0cmluZywgcmVmT246IHN0cmluZyk6IFR5cGVEZWYgPT4ge1xuICAgIHJldHVybiB7IC4uLnJlZihyZWZEZWYpLCBfOiB7IGpvaW46IHsgb24sIHJlZk9uIH0gfSB9XG59O1xuXG5leHBvcnQgY29uc3Qgd2l0aERvYyA9IChkZWY6IFR5cGVEZWYsIGRvYz86IHN0cmluZykgPT4gKHtcbiAgICAuLi5kZWYsXG4gICAgLi4uKGRvYyA/IHsgX2RvYzogZG9jIH0gOiB7fSlcbn0pO1xuXG5leHBvcnQgY29uc3QgcmVxdWlyZWQgPSAoZGVmOiBUeXBlRGVmKSA9PiBkZWY7XG5cbmNvbnN0IHVpbnQgPSAoc2l6ZTogSW50U2l6ZVR5cGUsIGRvYz86IHN0cmluZykgPT4gd2l0aERvYyh7XG4gICAgX2ludDogeyB1bnNpZ25lZDogdHJ1ZSwgc2l6ZSB9XG59LCBkb2MpO1xuXG5jb25zdCBpbnQgPSAoc2l6ZTogSW50U2l6ZVR5cGUsIGRvYz86IHN0cmluZykgPT4gd2l0aERvYyh7XG4gICAgX2ludDogeyB1bnNpZ25lZDogZmFsc2UsIHNpemUgfVxufSwgZG9jKTtcblxuZXhwb3J0IGNvbnN0IGk4ID0gKGRvYz86IHN0cmluZykgPT4gaW50KDgsIGRvYyk7XG5leHBvcnQgY29uc3QgaTMyID0gKGRvYz86IHN0cmluZykgPT4gaW50KDMyLCBkb2MpO1xuZXhwb3J0IGNvbnN0IHU4ID0gKGRvYz86IHN0cmluZykgPT4gdWludCg4LCBkb2MpO1xuZXhwb3J0IGNvbnN0IHUxNiA9IChkb2M/OiBzdHJpbmcpID0+IHVpbnQoMTYsIGRvYyk7XG5leHBvcnQgY29uc3QgdTMyID0gKGRvYz86IHN0cmluZykgPT4gdWludCgzMiwgZG9jKTtcbmV4cG9ydCBjb25zdCB1NjQgPSAoZG9jPzogc3RyaW5nKSA9PiB1aW50KDY0LCBkb2MpO1xuY29uc3QgdTEyOCA9IChkb2M/OiBzdHJpbmcpID0+IHVpbnQoMTI4LCBkb2MpO1xuY29uc3QgdTI1NiA9IChkb2M/OiBzdHJpbmcpID0+IHVpbnQoMjU2LCBkb2MpO1xuXG5leHBvcnQgY29uc3QgZ3JhbXMgPSB1MTI4O1xuXG50eXBlIEludEVudW1WYWx1ZXMgPSB7XG4gICAgW3N0cmluZ106IG51bWJlclxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIHU4ZW51bShuYW1lOiBzdHJpbmcsIHZhbHVlczogSW50RW51bVZhbHVlcykge1xuICAgIHJldHVybiAoZG9jPzogc3RyaW5nKTogVHlwZURlZiA9PiB7XG4gICAgICAgIGNvbnN0IHZhbHVlc0RvYyA9IE9iamVjdC5lbnRyaWVzKHZhbHVlcykubWFwKChbbmFtZSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gYC0gJHsodmFsdWU6IGFueSl9IOKAkyAke25hbWV9YDtcbiAgICAgICAgfSkuam9pbignXFxuJyk7XG4gICAgICAgIGNvbnN0IGVmZmVjdGl2ZURvYyA9IGAke2RvYyA/IGAke2RvY31cXG5gIDogJyd9JHt2YWx1ZXNEb2N9YDtcbiAgICAgICAgcmV0dXJuIHdpdGhEb2Moe1xuICAgICAgICAgICAgX2ludDoge1xuICAgICAgICAgICAgICAgIHVuc2lnbmVkOiB0cnVlLFxuICAgICAgICAgICAgICAgIHNpemU6IDgsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXzoge1xuICAgICAgICAgICAgICAgIGVudW06IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVzXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LCBlZmZlY3RpdmVEb2MpO1xuICAgIH1cbn1cblxuZXhwb3J0IGNvbnN0IE90aGVyQ3VycmVuY3k6IFR5cGVEZWYgPSB7XG4gICAgY3VycmVuY3k6IHUzMigpLFxuICAgIHZhbHVlOiB1MjU2KCksXG59O1xuXG5leHBvcnQgY29uc3Qgb3RoZXJDdXJyZW5jeUNvbGxlY3Rpb24gPSAoZG9jPzogc3RyaW5nKTogVHlwZURlZiA9PiBhcnJheU9mKHJlZih7IE90aGVyQ3VycmVuY3kgfSksIGRvYyk7XG4iXX0=