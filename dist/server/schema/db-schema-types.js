"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.u8enum = u8enum;
exports.otherCurrencyCollection = exports.OtherCurrency = exports.grams = exports.unixTime = exports.u128 = exports.u64 = exports.u32 = exports.u16 = exports.u8 = exports.i32 = exports.i8 = exports.required = exports.withDoc = exports.join = void 0;

var _schema = require("ton-labs-dev-ops/dist/src/schema");

const {
  ref,
  arrayOf
} = _schema.Def;

const join = (refDef, on, refOn, preCondition) => {
  return { ...ref(refDef),
    _: {
      join: {
        on,
        refOn,
        preCondition: preCondition || ''
      }
    }
  };
};

exports.join = join;

const withDoc = (def, doc) => ({ ...def,
  ...(doc ? {
    _doc: doc
  } : {})
});

exports.withDoc = withDoc;

const required = def => def;

exports.required = required;

const uint = (size, doc) => withDoc({
  _int: {
    unsigned: true,
    size
  }
}, doc);

const int = (size, doc) => withDoc({
  _int: {
    unsigned: false,
    size
  }
}, doc);

const i8 = doc => int(8, doc);

exports.i8 = i8;

const i32 = doc => int(32, doc);

exports.i32 = i32;

const u8 = doc => uint(8, doc);

exports.u8 = u8;

const u16 = doc => uint(16, doc);

exports.u16 = u16;

const u32 = doc => uint(32, doc);

exports.u32 = u32;

const u64 = doc => uint(64, doc);

exports.u64 = u64;

const u128 = doc => uint(128, doc);

exports.u128 = u128;

const u256 = doc => uint(256, doc);

const unixTime = doc => withDoc({
  _int: {
    unsigned: true,
    size: 32
  },
  _: {
    isUnixTime: true
  }
}, doc);

exports.unixTime = unixTime;
const grams = u128;
exports.grams = grams;

function u8enum(name, values) {
  return doc => {
    const valuesDoc = Object.entries(values).map(([name, value]) => {
      return `- ${value} â€“ ${name}`;
    }).join('\n');
    const effectiveDoc = `${doc ? `${doc}\n` : ''}${valuesDoc}`;
    return withDoc({
      _int: {
        unsigned: true,
        size: 8
      },
      _: {
        enum: {
          name,
          values
        }
      }
    }, effectiveDoc);
  };
}

const OtherCurrency = {
  currency: u32(),
  value: u256()
};
exports.OtherCurrency = OtherCurrency;

const otherCurrencyCollection = doc => arrayOf(ref({
  OtherCurrency
}), doc);

exports.otherCurrencyCollection = otherCurrencyCollection;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NlcnZlci9zY2hlbWEvZGItc2NoZW1hLXR5cGVzLmpzIl0sIm5hbWVzIjpbInJlZiIsImFycmF5T2YiLCJEZWYiLCJqb2luIiwicmVmRGVmIiwib24iLCJyZWZPbiIsInByZUNvbmRpdGlvbiIsIl8iLCJ3aXRoRG9jIiwiZGVmIiwiZG9jIiwiX2RvYyIsInJlcXVpcmVkIiwidWludCIsInNpemUiLCJfaW50IiwidW5zaWduZWQiLCJpbnQiLCJpOCIsImkzMiIsInU4IiwidTE2IiwidTMyIiwidTY0IiwidTEyOCIsInUyNTYiLCJ1bml4VGltZSIsImlzVW5peFRpbWUiLCJncmFtcyIsInU4ZW51bSIsIm5hbWUiLCJ2YWx1ZXMiLCJ2YWx1ZXNEb2MiLCJPYmplY3QiLCJlbnRyaWVzIiwibWFwIiwidmFsdWUiLCJlZmZlY3RpdmVEb2MiLCJlbnVtIiwiT3RoZXJDdXJyZW5jeSIsImN1cnJlbmN5Iiwib3RoZXJDdXJyZW5jeUNvbGxlY3Rpb24iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQ0E7O0FBR0EsTUFBTTtBQUFFQSxFQUFBQSxHQUFGO0FBQU9DLEVBQUFBO0FBQVAsSUFBbUJDLFdBQXpCOztBQUVPLE1BQU1DLElBQUksR0FBRyxDQUFDQyxNQUFELEVBQTJDQyxFQUEzQyxFQUF1REMsS0FBdkQsRUFBc0VDLFlBQXRFLEtBQXlHO0FBQ3pILFNBQU8sRUFDSCxHQUFHUCxHQUFHLENBQUNJLE1BQUQsQ0FESDtBQUVISSxJQUFBQSxDQUFDLEVBQUU7QUFDQ0wsTUFBQUEsSUFBSSxFQUFFO0FBQ0ZFLFFBQUFBLEVBREU7QUFFRkMsUUFBQUEsS0FGRTtBQUdGQyxRQUFBQSxZQUFZLEVBQUdBLFlBQVksSUFBSTtBQUg3QjtBQURQO0FBRkEsR0FBUDtBQVVILENBWE07Ozs7QUFhQSxNQUFNRSxPQUFPLEdBQUcsQ0FBQ0MsR0FBRCxFQUFlQyxHQUFmLE1BQWlDLEVBQ3BELEdBQUdELEdBRGlEO0FBRXBELE1BQUlDLEdBQUcsR0FBRztBQUFFQyxJQUFB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RSxhQUFzQixHQUFHO0FBQ2xDQyxFQUFBQSxRQUFRLEVBQUVsQixHQUFHLEVBRHFCO0FBRWxDYyxFQUFBQSxLQUFLLEVBQUVYLElBQUk7QUFGdUIsQ0FBL0I7OztBQUtBLE1BQU1nQix1QkFBdUIsR0FBSS9CLEdBQUQsSUFBMkJWLE9BQU8sQ0FBQ0QsR0FBRyxDQUFDO0FBQUV3QyxFQUFBQTtBQUFGLENBQUQsQ0FBSixFQUF5QjdCLEdBQXpCLENBQWxFIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQGZsb3dcbmltcG9ydCB7IERlZiB9IGZyb20gXCJ0b24tbGFicy1kZXYtb3BzL2Rpc3Qvc3JjL3NjaGVtYVwiO1xuaW1wb3J0IHR5cGUgeyBJbnRTaXplVHlwZSwgVHlwZURlZiB9IGZyb20gXCJ0b24tbGFicy1kZXYtb3BzL3NyYy9zY2hlbWFcIjtcblxuY29uc3QgeyByZWYsIGFycmF5T2YgfSA9IERlZjtcblxuZXhwb3J0IGNvbnN0IGpvaW4gPSAocmVmRGVmOiAoc3RyaW5nIHwgeyBbc3RyaW5nXTogVHlwZURlZiB9KSwgb246IHN0cmluZywgcmVmT246IHN0cmluZywgcHJlQ29uZGl0aW9uPzogc3RyaW5nKTogVHlwZURlZiA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgLi4ucmVmKHJlZkRlZiksXG4gICAgICAgIF86IHtcbiAgICAgICAgICAgIGpvaW46IHtcbiAgICAgICAgICAgICAgICBvbixcbiAgICAgICAgICAgICAgICByZWZPbixcbiAgICAgICAgICAgICAgICBwcmVDb25kaXRpb246IChwcmVDb25kaXRpb24gfHwgJycpLFxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufTtcblxuZXhwb3J0IGNvbnN0IHdpdGhEb2MgPSAoZGVmOiBUeXBlRGVmLCBkb2M/OiBzdHJpbmcpID0+ICh7XG4gICAgLi4uZGVmLFxuICAgIC4uLihkb2MgPyB7IF9kb2M6IGRvYyB9IDoge30pXG59KTtcblxuZXhwb3J0IGNvbnN0IHJlcXVpcmVkID0gKGRlZjogVHlwZURlZikgPT4gZGVmO1xuXG5jb25zdCB1aW50ID0gKHNpemU6IEludFNpemVUeXBlLCBkb2M/OiBzdHJpbmcpID0+IHdpdGhEb2Moe1xuICAgIF9pbnQ6IHsgdW5zaWduZWQ6IHRydWUsIHNpemUgfVxufSwgZG9jKTtcblxuY29uc3QgaW50ID0gKHNpemU6IEludFNpemVUeXBlLCBkb2M/OiBzdHJpbmcpID0+IHdpdGhEb2Moe1xuICAgIF9pbnQ6IHsgdW5zaWduZWQ6IGZhbHNlLCBzaXplIH1cbn0sIGRvYyk7XG5cbmV4cG9ydCBjb25zdCBpOCA9IChkb2M/OiBzdHJpbmcpID0+IGludCg4LCBkb2MpO1xuZXhwb3J0IGNvbnN0IGkzMiA9IChkb2M/OiBzdHJpbmcpID0+IGludCgzMiwgZG9jKTtcbmV4cG9ydCBjb25zdCB1OCA9IChkb2M/OiBzdHJpbmcpID0+IHVpbnQoOCwgZG9jKTtcbmV4cG9ydCBjb25zdCB1MTYgPSAoZG9jPzogc3RyaW5nKSA9PiB1aW50KDE2LCBkb2MpO1xuZXhwb3J0IGNvbnN0IHUzMiA9IChkb2M/OiBzdHJpbmcpID0+IHVpbnQoMzIsIGRvYyk7XG5leHBvcnQgY29uc3QgdTY0ID0gKGRvYz86IHN0cmluZykgPT4gdWludCg2NCwgZG9jKTtcbmV4cG9ydCBjb25zdCB1MTI4ID0gKGRvYz86IHN0cmluZykgPT4gdWludCgxMjgsIGRvYyk7XG5jb25zdCB1MjU2ID0gKGRvYz86IHN0cmluZykgPT4gdWludCgyNTYsIGRvYyk7XG5leHBvcnQgY29uc3QgdW5peFRpbWUgPSAoZG9jPzogc3RyaW5nKSA9PiB3aXRoRG9jKHtcbiAgICBfaW50OiB7IHVuc2lnbmVkOiB0cnVlLCBzaXplOiAzMiB9LFxuICAgIF86IHtcbiAgICAgICAgaXNVbml4VGltZTogdHJ1ZSxcbiAgICB9XG59LCBkb2MpO1xuXG5leHBvcnQgY29uc3QgZ3JhbXMgPSB1MTI4O1xuXG50eXBlIEludEVudW1WYWx1ZXMgPSB7XG4gICAgW3N0cmluZ106IG51bWJlclxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIHU4ZW51bShuYW1lOiBzdHJpbmcsIHZhbHVlczogSW50RW51bVZhbHVlcykge1xuICAgIHJldHVybiAoZG9jPzogc3RyaW5nKTogVHlwZURlZiA9PiB7XG4gICAgICAgIGNvbnN0IHZhbHVlc0RvYyA9IE9iamVjdC5lbnRyaWVzKHZhbHVlcykubWFwKChbbmFtZSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gYC0gJHsodmFsdWU6IGFueSl9IOKAkyAke25hbWV9YDtcbiAgICAgICAgfSkuam9pbignXFxuJyk7XG4gICAgICAgIGNvbnN0IGVmZmVjdGl2ZURvYyA9IGAke2RvYyA/IGAke2RvY31cXG5gIDogJyd9JHt2YWx1ZXNEb2N9YDtcbiAgICAgICAgcmV0dXJuIHdpdGhEb2Moe1xuICAgICAgICAgICAgX2ludDoge1xuICAgICAgICAgICAgICAgIHVuc2lnbmVkOiB0cnVlLFxuICAgICAgICAgICAgICAgIHNpemU6IDgsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXzoge1xuICAgICAgICAgICAgICAgIGVudW06IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVzXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LCBlZmZlY3RpdmVEb2MpO1xuICAgIH1cbn1cblxuZXhwb3J0IGNvbnN0IE90aGVyQ3VycmVuY3k6IFR5cGVEZWYgPSB7XG4gICAgY3VycmVuY3k6IHUzMigpLFxuICAgIHZhbHVlOiB1MjU2KCksXG59O1xuXG5leHBvcnQgY29uc3Qgb3RoZXJDdXJyZW5jeUNvbGxlY3Rpb24gPSAoZG9jPzogc3RyaW5nKTogVHlwZURlZiA9PiBhcnJheU9mKHJlZih7IE90aGVyQ3VycmVuY3kgfSksIGRvYyk7XG4iXX0=