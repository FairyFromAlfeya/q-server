"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.u8enum = u8enum;
exports.otherCurrencyCollection = exports.OtherCurrency = exports.grams = exports.u64 = exports.u32 = exports.u16 = exports.u8 = exports.i32 = exports.i8 = exports.required = exports.withDoc = exports.join = void 0;

var _schema = require("ton-labs-dev-ops/dist/src/schema");

const {
  ref,
  arrayOf
} = _schema.Def;

const join = (refDef, on) => {
  return { ...ref(refDef),
    _: {
      join: {
        on
      }
    }
  };
};

exports.join = join;

const withDoc = (def, doc) => ({ ...def,
  ...(doc ? {
    _doc: doc
  } : {})
});

exports.withDoc = withDoc;

const required = def => def;

exports.required = required;

const uint = (size, doc) => withDoc({
  _int: {
    unsigned: true,
    size
  }
}, doc);

const int = (size, doc) => withDoc({
  _int: {
    unsigned: false,
    size
  }
}, doc);

const i8 = doc => int(8, doc);

exports.i8 = i8;

const i32 = doc => int(32, doc);

exports.i32 = i32;

const u8 = doc => uint(8, doc);

exports.u8 = u8;

const u16 = doc => uint(16, doc);

exports.u16 = u16;

const u32 = doc => uint(32, doc);

exports.u32 = u32;

const u64 = doc => uint(64, doc);

exports.u64 = u64;

const u128 = doc => uint(128, doc);

const u256 = doc => uint(256, doc);

const grams = u128;
exports.grams = grams;

function u8enum(name, values) {
  return doc => {
    const valuesDoc = Object.entries(values).map(([name, value]) => {
      return `- ${value} â€“ ${name}`;
    }).join('\n');
    const effectiveDoc = `${doc ? `${doc}\n` : ''}${valuesDoc}`;
    return withDoc({
      _int: {
        unsigned: true,
        size: 8
      },
      _: {
        enum: {
          name,
          values
        }
      }
    }, effectiveDoc);
  };
}

const OtherCurrency = {
  currency: u32(),
  value: u256()
};
exports.OtherCurrency = OtherCurrency;

const otherCurrencyCollection = doc => arrayOf(ref({
  OtherCurrency
}), doc);

exports.otherCurrencyCollection = otherCurrencyCollection;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NlcnZlci9zY2hlbWEvZGItc2NoZW1hLXR5cGVzLmpzIl0sIm5hbWVzIjpbInJlZiIsImFycmF5T2YiLCJEZWYiLCJqb2luIiwicmVmRGVmIiwib24iLCJfIiwid2l0aERvYyIsImRlZiIsImRvYyIsIl9kb2MiLCJyZXF1aXJlZCIsInVpbnQiLCJzaXplIiwiX2ludCIsInVuc2lnbmVkIiwiaW50IiwiaTgiLCJpMzIiLCJ1OCIsInUxNiIsInUzMiIsInU2NCIsInUxMjgiLCJ1MjU2IiwiZ3JhbXMiLCJ1OGVudW0iLCJuYW1lIiwidmFsdWVzIiwidmFsdWVzRG9jIiwiT2JqZWN0IiwiZW50cmllcyIsIm1hcCIsInZhbHVlIiwiZWZmZWN0aXZlRG9jIiwiZW51bSIsIk90aGVyQ3VycmVuY3kiLCJjdXJyZW5jeSIsIm90aGVyQ3VycmVuY3lDb2xsZWN0aW9uIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUNBOztBQUVBLE1BQU07QUFBRUEsRUFBQUEsR0FBRjtBQUFPQyxFQUFBQTtBQUFQLElBQW1CQyxXQUF6Qjs7QUFFTyxNQUFNQyxJQUFJLEdBQUcsQ0FBQ0MsTUFBRCxFQUFnQ0MsRUFBaEMsS0FBd0Q7QUFDeEUsU0FBTyxFQUFFLEdBQUdMLEdBQUcsQ0FBQ0ksTUFBRCxDQUFSO0FBQWtCRSxJQUFBQSxDQUFDLEVBQUU7QUFBRUgsTUFBQUEsSUFBSSxFQUFFO0FBQUVFLFFBQUFBO0FBQUY7QUFBUjtBQUFyQixHQUFQO0FBQ0gsQ0FGTTs7OztBQUlBLE1BQU1FLE9BQU8sR0FBRyxDQUFDQyxHQUFELEVBQWVDLEdBQWYsTUFBaUMsRUFDcEQsR0FBR0QsR0FEaUQ7QUFFcEQsTUFBSUMsR0FBRyxHQUFHO0FBQUVDLElBQUFBLElBQUksRUFBRUQ7QUFBUixHQUFILEdBQW1CLEVBQTFCO0FBRm9ELENBQWpDLENBQWhCOzs7O0FBS0EsTUFBTUUsUUFBUSxHQUFJSCxHQUFELElBQWtCQSxHQUFuQzs7OztBQUVQLE1BQU1JLElBQUksR0FBRyxDQUFDQyxJQUFELEVBQW9CSixHQUFwQixLQUFxQ0YsT0FBTyxDQUFDO0FBQ3RETyxFQUFBQSxJQUFJLEVBQUU7QUFBRUMsSUFBQUEsUUFBUSxFQUFFLElBQVo7QUFBa0JGLElBQUFBO0FBQWxCO0FBRGdELENBQUQsRUFFdERKLEdBRnNELENBQXpEOztBQUlBLE1BQU1PLEdBQUcsR0FBRyxDQUFDSCxJQUFELEVBQW9CSixHQUFwQixLQUFxQ0YsT0FBTyxDQUFDO0FBQ3JETyxFQUFBQSxJQUFJLEVBQUU7QUFBRUMsSUFBQUEsUUFBUSxFQUFFLEtBQVo7QUFBbUJGLElBQUFBO0FBQW5CO0FBRCtDLENBQUQsRUFFckRKLEdBRnFELENBQXhEOztBQUlPLE1BQU1RLEVBQUUsR0FBSVIsR0FBRCxJQUFrQk8sR0FBRyxDQUFDLENBQUQsRUFBSVAsR0FBSixDQUFoQzs7OztBQUNBLE1BQU1TLEdBQUcsR0FBSVQsR0FBRCxJQUFrQk8sR0FBRyxDQUFDLEVBQUQsRUFBS1AsR0FBTCxDQUFqQzs7OztBQUNBLE1BQU1VLEVBQUUsR0FBSVYsR0FBRCxJQUFrQkcsSUFBSSxDQUFDLENBQUQsRUFBSUgsR0FBSixDQUFqQzs7OztBQUNBLE1BQU1XLEdBQUcsR0FBSVgsR0FBRCxJQUFrQkcsSUFBSSxDQUFDLEVBQUQsRUFBS0gsR0FBTCxDQUFsQzs7OztBQUNBLE1BQU1ZLEdBQUcsR0FBSVosR0FBRCxJQUFrQkcsSUFBSSxDQUFDLEVBQUQsRUFBS0gsR0FBTCxDQUFsQzs7OztBQUNBLE1BQU1hLEdBQUcsR0FBSWIsR0FBRCxJQUFrQkcsSUFBSSxDQUFDLEVBQUQsRUFBS0gsR0FBTCxDQUFsQzs7OztBQUNQLE1BQU1jLElBQUksR0FBSWQsR0FBRCxJQUFrQkcsSUFBSSxDQUFDLEdBQUQsRUFBTUgsR0FBTixDQUFuQzs7QUFDQSxNQUFNZSxJQUFJLEdBQUlmLEdBQUQsSUFBa0JHLElBQUksQ0FBQyxHQUFELEVBQU1ILEdBQU4sQ0FBbkM7O0FBRU8sTUFBTWdCLEtBQUssR0FBR0YsSUFBZDs7O0FBTUEsU0FBU0csTUFBVCxDQUFnQkMsSUFBaEIsRUFBOEJDLE1BQTlCLEVBQXFEO0FBQ3hELFNBQVFuQixHQUFELElBQTJCO0FBQzlCLFVBQU1vQixTQUFTLEdBQUdDLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlSCxNQUFmLEVBQXVCSSxHQUF2QixDQUEyQixDQUFDLENBQUNMLElBQUQsRUFBT00sS0FBUCxDQUFELEtBQW1CO0FBQzVELGFBQVEsS0FBS0EsS0FBWSxNQUFLTixJQUFLLEVBQW5DO0FBQ0gsS0FGaUIsRUFFZnhCLElBRmUsQ0FFVixJQUZVLENBQWxCO0FBR0EsVUFBTStCLFlBQVksR0FBSSxHQUFFekIsR0FBRyxHQUFJLEdBQUVBLEdBQUksSUFBVixHQUFnQixFQUFHLEdBQUVvQixTQUFVLEVBQTFEO0FBQ0EsV0FBT3RCLE9BQU8sQ0FBQztBQUNYTyxNQUFBQSxJQUFJLEVBQUU7QUFDRkMsUUFBQUEsUUFBUSxFQUFFLElBRFI7QUFFRkYsUUFBQUEsSUFBSSxFQUFFO0FBRkosT0FESztBQUtYUCxNQUFBQSxDQUFDLEVBQUU7QUFDQzZCLFFBQUFBLElBQUksRUFBRTtBQUNGUixVQUFBQSxJQURFO0FBRUZDLFVBQUFBO0FBRkU7QUFEUDtBQUxRLEtBQUQsRUFXWE0sWUFYVyxDQUFkO0FBWUgsR0FqQkQ7QUFrQkg7O0FBRU0sTUFBTUUsYUFBc0IsR0FBRztBQUNsQ0MsRUFBQUEsUUFBUSxFQUFFaEIsR0FBRyxFQURxQjtBQUVsQ1ksRUFBQUEsS0FBSyxFQUFFVCxJQUFJO0FBRnVCLENBQS9COzs7QUFLQSxNQUFNYyx1QkFBdUIsR0FBSTdCLEdBQUQsSUFBMkJSLE9BQU8sQ0FBQ0QsR0FBRyxDQUFDO0FBQUVvQyxFQUFBQTtBQUFGLENBQUQsQ0FBSixFQUF5QjNCLEdBQXpCLENBQWxFIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQGZsb3dcbmltcG9ydCB7IERlZiB9IGZyb20gXCJ0b24tbGFicy1kZXYtb3BzL2Rpc3Qvc3JjL3NjaGVtYVwiO1xuaW1wb3J0IHR5cGUgeyBJbnRTaXplVHlwZSwgVHlwZURlZiB9IGZyb20gXCJ0b24tbGFicy1kZXYtb3BzL3NyYy9zY2hlbWFcIjtcbmNvbnN0IHsgcmVmLCBhcnJheU9mIH0gPSBEZWY7XG5cbmV4cG9ydCBjb25zdCBqb2luID0gKHJlZkRlZjogeyBbc3RyaW5nXTogVHlwZURlZiB9LCBvbjogc3RyaW5nKTogVHlwZURlZiA9PiB7XG4gICAgcmV0dXJuIHsgLi4ucmVmKHJlZkRlZiksIF86IHsgam9pbjogeyBvbiB9IH0gfVxufTtcblxuZXhwb3J0IGNvbnN0IHdpdGhEb2MgPSAoZGVmOiBUeXBlRGVmLCBkb2M/OiBzdHJpbmcpID0+ICh7XG4gICAgLi4uZGVmLFxuICAgIC4uLihkb2MgPyB7IF9kb2M6IGRvYyB9IDoge30pXG59KTtcblxuZXhwb3J0IGNvbnN0IHJlcXVpcmVkID0gKGRlZjogVHlwZURlZikgPT4gZGVmO1xuXG5jb25zdCB1aW50ID0gKHNpemU6IEludFNpemVUeXBlLCBkb2M/OiBzdHJpbmcpID0+IHdpdGhEb2Moe1xuICAgIF9pbnQ6IHsgdW5zaWduZWQ6IHRydWUsIHNpemUgfVxufSwgZG9jKTtcblxuY29uc3QgaW50ID0gKHNpemU6IEludFNpemVUeXBlLCBkb2M/OiBzdHJpbmcpID0+IHdpdGhEb2Moe1xuICAgIF9pbnQ6IHsgdW5zaWduZWQ6IGZhbHNlLCBzaXplIH1cbn0sIGRvYyk7XG5cbmV4cG9ydCBjb25zdCBpOCA9IChkb2M/OiBzdHJpbmcpID0+IGludCg4LCBkb2MpO1xuZXhwb3J0IGNvbnN0IGkzMiA9IChkb2M/OiBzdHJpbmcpID0+IGludCgzMiwgZG9jKTtcbmV4cG9ydCBjb25zdCB1OCA9IChkb2M/OiBzdHJpbmcpID0+IHVpbnQoOCwgZG9jKTtcbmV4cG9ydCBjb25zdCB1MTYgPSAoZG9jPzogc3RyaW5nKSA9PiB1aW50KDE2LCBkb2MpO1xuZXhwb3J0IGNvbnN0IHUzMiA9IChkb2M/OiBzdHJpbmcpID0+IHVpbnQoMzIsIGRvYyk7XG5leHBvcnQgY29uc3QgdTY0ID0gKGRvYz86IHN0cmluZykgPT4gdWludCg2NCwgZG9jKTtcbmNvbnN0IHUxMjggPSAoZG9jPzogc3RyaW5nKSA9PiB1aW50KDEyOCwgZG9jKTtcbmNvbnN0IHUyNTYgPSAoZG9jPzogc3RyaW5nKSA9PiB1aW50KDI1NiwgZG9jKTtcblxuZXhwb3J0IGNvbnN0IGdyYW1zID0gdTEyODtcblxudHlwZSBJbnRFbnVtVmFsdWVzID0ge1xuICAgIFtzdHJpbmddOiBudW1iZXJcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiB1OGVudW0obmFtZTogc3RyaW5nLCB2YWx1ZXM6IEludEVudW1WYWx1ZXMpIHtcbiAgICByZXR1cm4gKGRvYz86IHN0cmluZyk6IFR5cGVEZWYgPT4ge1xuICAgICAgICBjb25zdCB2YWx1ZXNEb2MgPSBPYmplY3QuZW50cmllcyh2YWx1ZXMpLm1hcCgoW25hbWUsIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGAtICR7KHZhbHVlOiBhbnkpfSDigJMgJHtuYW1lfWA7XG4gICAgICAgIH0pLmpvaW4oJ1xcbicpO1xuICAgICAgICBjb25zdCBlZmZlY3RpdmVEb2MgPSBgJHtkb2MgPyBgJHtkb2N9XFxuYCA6ICcnfSR7dmFsdWVzRG9jfWA7XG4gICAgICAgIHJldHVybiB3aXRoRG9jKHtcbiAgICAgICAgICAgIF9pbnQ6IHtcbiAgICAgICAgICAgICAgICB1bnNpZ25lZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBzaXplOiA4LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF86IHtcbiAgICAgICAgICAgICAgICBlbnVtOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlc1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgZWZmZWN0aXZlRG9jKTtcbiAgICB9XG59XG5cbmV4cG9ydCBjb25zdCBPdGhlckN1cnJlbmN5OiBUeXBlRGVmID0ge1xuICAgIGN1cnJlbmN5OiB1MzIoKSxcbiAgICB2YWx1ZTogdTI1NigpLFxufTtcblxuZXhwb3J0IGNvbnN0IG90aGVyQ3VycmVuY3lDb2xsZWN0aW9uID0gKGRvYz86IHN0cmluZyk6IFR5cGVEZWYgPT4gYXJyYXlPZihyZWYoeyBPdGhlckN1cnJlbmN5IH0pLCBkb2MpO1xuIl19