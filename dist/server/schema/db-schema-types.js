"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.u8enum = u8enum;
exports.otherCurrencyCollection = exports.OtherCurrency = exports.grams = exports.unixSeconds = exports.unixMilliseconds = exports.u32WithFormatter = exports.u128 = exports.u64 = exports.u32 = exports.u16 = exports.u8 = exports.i32 = exports.i8 = exports.required = exports.withDoc = exports.join = void 0;

var _schema = require("ton-labs-dev-ops/dist/src/schema");

const {
  ref,
  arrayOf
} = _schema.Def;
const ToStringFormatter = {
  unixMillisecondsToString: 'unixMillisecondsToString',
  unixSecondsToString: 'unixSecondsToString'
};

const join = (refDef, on, refOn, preCondition) => {
  return { ...ref(refDef),
    _: {
      join: {
        on,
        refOn,
        preCondition: preCondition || ''
      }
    }
  };
};

exports.join = join;

const withDoc = (def, doc) => ({ ...def,
  ...(doc ? {
    _doc: doc
  } : {})
});

exports.withDoc = withDoc;

const required = def => def;

exports.required = required;

const uint = (size, doc) => withDoc({
  _int: {
    unsigned: true,
    size
  }
}, doc);

const int = (size, doc) => withDoc({
  _int: {
    unsigned: false,
    size
  }
}, doc);

const i8 = doc => int(8, doc);

exports.i8 = i8;

const i32 = doc => int(32, doc);

exports.i32 = i32;

const u8 = doc => uint(8, doc);

exports.u8 = u8;

const u16 = doc => uint(16, doc);

exports.u16 = u16;

const u32 = doc => uint(32, doc);

exports.u32 = u32;

const u64 = doc => uint(64, doc);

exports.u64 = u64;

const u128 = doc => uint(128, doc);

exports.u128 = u128;

const u256 = doc => uint(256, doc);

const u32WithFormatter = (formatter, doc) => withDoc({
  _int: {
    unsigned: true,
    size: 32
  },
  _: {
    formatter
  }
}, doc);

exports.u32WithFormatter = u32WithFormatter;

const unixMilliseconds = doc => u32WithFormatter(ToStringFormatter.unixMillisecondsToString, doc);

exports.unixMilliseconds = unixMilliseconds;

const unixSeconds = doc => u32WithFormatter(ToStringFormatter.unixSecondsToString, doc);

exports.unixSeconds = unixSeconds;
const grams = u128;
exports.grams = grams;

function u8enum(name, values) {
  return doc => {
    const valuesDoc = Object.entries(values).map(([name, value]) => {
      return `- ${value} â€“ ${name}`;
    }).join('\n');
    const effectiveDoc = `${doc ? `${doc}\n` : ''}${valuesDoc}`;
    return withDoc({
      _int: {
        unsigned: true,
        size: 8
      },
      _: {
        enum: {
          name,
          values
        }
      }
    }, effectiveDoc);
  };
}

const OtherCurrency = {
  currency: u32(),
  value: u256()
};
exports.OtherCurrency = OtherCurrency;

const otherCurrencyCollection = doc => arrayOf(ref({
  OtherCurrency
}), doc);

exports.otherCurrencyCollection = otherCurrencyCollection;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,