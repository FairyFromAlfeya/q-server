"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Auth = void 0;

var _nodeFetch = _interopRequireDefault(require("node-fetch"));

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const grantedAccess = Object.freeze({
  granted: true,
  restrictToAccounts: []
});
const deniedAccess = Object.freeze({
  granted: false,
  restrictToAccounts: []
});

class Auth {
  constructor(config) {
    this.config = config;
  }

  static extractAccessKey(req, connection) {
    return req && req.headers && (req.headers.accessKey || req.headers.accesskey) || connection && connection.context && connection.context.accessKey;
  }

  static unauthorizedError() {
    return (0, _utils.createError)(401, 'Unauthorized');
  }

  authServiceRequired() {
    if (!this.config.authorization.endpoint) {
      throw (0, _utils.createError)(500, 'Auth service unavailable');
    }
  }

  async requireGrantedAccess(accessKey) {
    const access = await this.getAccessRights(accessKey);

    if (!access.granted) {
      throw Auth.unauthorizedError();
    }

    return access;
  }

  async getAccessRights(accessKey) {
    if (!this.config.authorization.endpoint) {
      return grantedAccess;
    }

    if ((accessKey || '') === '') {
      return deniedAccess;
    }

    const rights = await this.invokeAuth('getAccessRights', {
      accessKey
    });

    if (!rights.restrictToAccounts) {
      rights.restrictToAccounts = [];
    }

    return rights;
  }

  async getManagementAccessKey() {
    this.authServiceRequired();
    return this.invokeAuth('getManagementAccessKey', {});
  }

  async registerAccessKeys(account, keys, signedManagementAccessKey) {
    this.authServiceRequired();
    return this.invokeAuth('registerAccessKeys', {
      account,
      keys,
      signedManagementAccessKey
    });
  }

  async revokeAccessKeys(account, keys, signedManagementAccessKey) {
    this.authServiceRequired();
    return this.invokeAuth('revokeAccessKeys', {
      account,
      keys,
      signedManagementAccessKey
    });
  }

  async invokeAuth(method, params) {
    const res = await (0, _nodeFetch.default)(this.config.authorization.endpoint, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        jsonrpc: '2.0',
        id: '1',
        method,
        params
      })
    });

    if (res.status !== 200) {
      throw new Error(`Auth service failed: ${await res.text()}`);
    }

    const response = await res.json();

    if (response.error) {
      throw (0, _utils.createError)(response.error.code || 500, response.error.message || response.error.description, response.error.source || 'graphql');
    }

    return response.result;
  }

}

exports.Auth = Auth;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NlcnZlci9hdXRoLmpzIl0sIm5hbWVzIjpbImdyYW50ZWRBY2Nlc3MiLCJPYmplY3QiLCJmcmVlemUiLCJncmFudGVkIiwicmVzdHJpY3RUb0FjY291bnRzIiwiZGVuaWVkQWNjZXNzIiwiQXV0aCIsImNvbnN0cnVjdG9yIiwiY29uZmlnIiwiZXh0cmFjdEFjY2Vzc0tleSIsInJlcSIsImNvbm5lY3Rpb24iLCJoZWFkZXJzIiwiYWNjZXNzS2V5IiwiYWNjZXNza2V5IiwiY29udGV4dCIsInVuYXV0aG9yaXplZEVycm9yIiwiYXV0aFNlcnZpY2VSZXF1aXJlZCIsImF1dGhvcml6YXRpb24iLCJlbmRwb2ludCIsInJlcXVpcmVHcmFudGVkQWNjZXNzIiwiYWNjZXNzIiwiZ2V0QWNjZXNzUmlnaHRzIiwicmlnaHRzIiwiaW52b2tlQXV0aCIsImdldE1hbmFnZW1lbnRBY2Nlc3NLZXkiLCJyZWdpc3RlckFjY2Vzc0tleXMiLCJhY2NvdW50Iiwia2V5cyIsInNpZ25lZE1hbmFnZW1lbnRBY2Nlc3NLZXkiLCJyZXZva2VBY2Nlc3NLZXlzIiwibWV0aG9kIiwicGFyYW1zIiwicmVzIiwiYm9keSIsIkpTT04iLCJzdHJpbmdpZnkiLCJqc29ucnBjIiwiaWQiLCJzdGF0dXMiLCJFcnJvciIsInRleHQiLCJyZXNwb25zZSIsImpzb24iLCJlcnJvciIsImNvZGUiLCJtZXNzYWdlIiwiZGVzY3JpcHRpb24iLCJzb3VyY2UiLCJyZXN1bHQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFHQTs7QUFDQTs7OztBQVlBLE1BQU1BLGFBQTJCLEdBQUdDLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjO0FBQzlDQyxFQUFBQSxPQUFPLEVBQUUsSUFEcUM7QUFFOUNDLEVBQUFBLGtCQUFrQixFQUFFO0FBRjBCLENBQWQsQ0FBcEM7QUFLQSxNQUFNQyxZQUEwQixHQUFHSixNQUFNLENBQUNDLE1BQVAsQ0FBYztBQUM3Q0MsRUFBQUEsT0FBTyxFQUFFLEtBRG9DO0FBRTdDQyxFQUFBQSxr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Z0I7QUFEWCxPQUYrQztBQUt4RHNCLE1BQUFBLElBQUksRUFBRUMsSUFBSSxDQUFDQyxTQUFMLENBQWU7QUFDakJDLFFBQUFBLE9BQU8sRUFBRSxLQURRO0FBRWpCQyxRQUFBQSxFQUFFLEVBQUUsR0FGYTtBQUdqQlAsUUFBQUEsTUFIaUI7QUFJakJDLFFBQUFBO0FBSmlCLE9BQWY7QUFMa0QsS0FBMUMsQ0FBbEI7O0FBYUEsUUFBSUMsR0FBRyxDQUFDTSxNQUFKLEtBQWUsR0FBbkIsRUFBd0I7QUFDcEIsWUFBTSxJQUFJQyxLQUFKLENBQVcsd0JBQXVCLE1BQU1QLEdBQUcsQ0FBQ1EsSUFBSixFQUFXLEVBQW5ELENBQU47QUFDSDs7QUFFRCxVQUFNQyxRQUFRLEdBQUcsTUFBTVQsR0FBRyxDQUFDVSxJQUFKLEVBQXZCOztBQUNBLFFBQUlELFFBQVEsQ0FBQ0UsS0FBYixFQUFvQjtBQUNoQixZQUFNLHdCQUNGRixRQUFRLENBQUNFLEtBQVQsQ0FBZUMsSUFBZixJQUF1QixHQURyQixFQUVGSCxRQUFRLENBQUNFLEtBQVQsQ0FBZUUsT0FBZixJQUEwQkosUUFBUSxDQUFDRSxLQUFULENBQWVHLFdBRnZDLEVBR0ZMLFFBQVEsQ0FBQ0UsS0FBVCxDQUFlSSxNQUFmLElBQXlCLFNBSHZCLENBQU47QUFLSDs7QUFFRCxXQUFPTixRQUFRLENBQUNPLE1BQWhCO0FBQ0g7O0FBekdhIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQGZsb3dcblxuaW1wb3J0IHR5cGUgeyBRQ29uZmlnIH0gZnJvbSBcIi4vY29uZmlnXCI7XG5pbXBvcnQgZmV0Y2ggZnJvbSAnbm9kZS1mZXRjaCc7XG5pbXBvcnQgeyBjcmVhdGVFcnJvciB9IGZyb20gXCIuL3V0aWxzXCI7XG5cbmV4cG9ydCB0eXBlIEFjY2Vzc0tleSA9IHtcbiAgICBrZXk6IHN0cmluZyxcbiAgICByZXN0cmljdFRvQWNjb3VudHM/OiBzdHJpbmdbXSxcbn1cblxuZXhwb3J0IHR5cGUgQWNjZXNzUmlnaHRzID0ge1xuICAgIGdyYW50ZWQ6IGJvb2wsXG4gICAgcmVzdHJpY3RUb0FjY291bnRzOiBzdHJpbmdbXSxcbn1cblxuY29uc3QgZ3JhbnRlZEFjY2VzczogQWNjZXNzUmlnaHRzID0gT2JqZWN0LmZyZWV6ZSh7XG4gICAgZ3JhbnRlZDogdHJ1ZSxcbiAgICByZXN0cmljdFRvQWNjb3VudHM6IFtdLFxufSk7XG5cbmNvbnN0IGRlbmllZEFjY2VzczogQWNjZXNzUmlnaHRzID0gT2JqZWN0LmZyZWV6ZSh7XG4gICAgZ3JhbnRlZDogZmFsc2UsXG4gICAgcmVzdHJpY3RUb0FjY291bnRzOiBbXSxcbn0pO1xuXG5leHBvcnQgY2xhc3MgQXV0aCB7XG4gICAgY29uZmlnOiBRQ29uZmlnO1xuXG4gICAgY29uc3RydWN0b3IoY29uZmlnOiBRQ29uZmlnKSB7XG4gICAgICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xuICAgIH1cblxuICAgIHN0YXRpYyBleHRyYWN0QWNjZXNzS2V5KHJlcTogYW55LCBjb25uZWN0aW9uOiBhbnkpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gKHJlcSAmJiByZXEuaGVhZGVycyAmJiAocmVxLmhlYWRlcnMuYWNjZXNzS2V5IHx8IHJlcS5oZWFkZXJzLmFjY2Vzc2tleSkpXG4gICAgICAgICAgICB8fCAoY29ubmVjdGlvbiAmJiBjb25uZWN0aW9uLmNvbnRleHQgJiYgY29ubmVjdGlvbi5jb250ZXh0LmFjY2Vzc0tleSk7XG4gICAgfVxuXG4gICAgc3RhdGljIHVuYXV0aG9yaXplZEVycm9yKCk6IEVycm9yIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUVycm9yKDQwMSwgJ1VuYXV0aG9yaXplZCcpO1xuICAgIH1cblxuICAgIGF1dGhTZXJ2aWNlUmVxdWlyZWQoKSB7XG4gICAgICAgIGlmICghdGhpcy5jb25maWcuYXV0aG9yaXphdGlvbi5lbmRwb2ludCkge1xuICAgICAgICAgICAgdGhyb3cgY3JlYXRlRXJyb3IoNTAwLCAnQXV0aCBzZXJ2aWNlIHVuYXZhaWxhYmxlJyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhc3luYyByZXF1aXJlR3JhbnRlZEFjY2VzcyhhY2Nlc3NLZXk6IHN0cmluZyB8IHR5cGVvZiB1bmRlZmluZWQpOiBQcm9taXNlPEFjY2Vzc1JpZ2h0cz4ge1xuICAgICAgICBjb25zdCBhY2Nlc3MgPSBhd2FpdCB0aGlzLmdldEFjY2Vzc1JpZ2h0cyhhY2Nlc3NLZXkpO1xuICAgICAgICBpZiAoIWFjY2Vzcy5ncmFudGVkKSB7XG4gICAgICAgICAgICB0aHJvdyBBdXRoLnVuYXV0aG9yaXplZEVycm9yKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFjY2VzcztcbiAgICB9XG5cbiAgICBhc3luYyBnZXRBY2Nlc3NSaWdodHMoYWNjZXNzS2V5OiBzdHJpbmcgfCB0eXBlb2YgdW5kZWZpbmVkKTogUHJvbWlzZTxBY2Nlc3NSaWdodHM+IHtcbiAgICAgICAgaWYgKCF0aGlzLmNvbmZpZy5hdXRob3JpemF0aW9uLmVuZHBvaW50KSB7XG4gICAgICAgICAgICByZXR1cm4gZ3JhbnRlZEFjY2VzcztcbiAgICAgICAgfVxuICAgICAgICBpZiAoKGFjY2Vzc0tleSB8fCAnJykgPT09ICcnKSB7XG4gICAgICAgICAgICByZXR1cm4gZGVuaWVkQWNjZXNzO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJpZ2h0cyA9IGF3YWl0IHRoaXMuaW52b2tlQXV0aCgnZ2V0QWNjZXNzUmlnaHRzJywge1xuICAgICAgICAgICAgYWNjZXNzS2V5LFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKCFyaWdodHMucmVzdHJpY3RUb0FjY291bnRzKSB7XG4gICAgICAgICAgICByaWdodHMucmVzdHJpY3RUb0FjY291bnRzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJpZ2h0cztcbiAgICB9XG5cbiAgICBhc3luYyBnZXRNYW5hZ2VtZW50QWNjZXNzS2V5KCk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgICAgIHRoaXMuYXV0aFNlcnZpY2VSZXF1aXJlZCgpO1xuICAgICAgICByZXR1cm4gdGhpcy5pbnZva2VBdXRoKCdnZXRNYW5hZ2VtZW50QWNjZXNzS2V5Jywge30pO1xuICAgIH1cblxuICAgIGFzeW5jIHJlZ2lzdGVyQWNjZXNzS2V5cyhcbiAgICAgICAgYWNjb3VudDogc3RyaW5nLFxuICAgICAgICBrZXlzOiBBY2Nlc3NLZXlbXSxcbiAgICAgICAgc2lnbmVkTWFuYWdlbWVudEFjY2Vzc0tleTogc3RyaW5nXG4gICAgKTogUHJvbWlzZTxudW1iZXI+IHtcbiAgICAgICAgdGhpcy5hdXRoU2VydmljZVJlcXVpcmVkKCk7XG4gICAgICAgIHJldHVybiB0aGlzLmludm9rZUF1dGgoJ3JlZ2lzdGVyQWNjZXNzS2V5cycsIHtcbiAgICAgICAgICAgIGFjY291bnQsXG4gICAgICAgICAgICBrZXlzLFxuICAgICAgICAgICAgc2lnbmVkTWFuYWdlbWVudEFjY2Vzc0tleVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBhc3luYyByZXZva2VBY2Nlc3NLZXlzKFxuICAgICAgICBhY2NvdW50OiBzdHJpbmcsXG4gICAgICAgIGtleXM6IHN0cmluZ1tdLFxuICAgICAgICBzaWduZWRNYW5hZ2VtZW50QWNjZXNzS2V5OiBzdHJpbmdcbiAgICApOiBQcm9taXNlPG51bWJlcj4ge1xuICAgICAgICB0aGlzLmF1dGhTZXJ2aWNlUmVxdWlyZWQoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW52b2tlQXV0aCgncmV2b2tlQWNjZXNzS2V5cycsIHtcbiAgICAgICAgICAgIGFjY291bnQsXG4gICAgICAgICAgICBrZXlzLFxuICAgICAgICAgICAgc2lnbmVkTWFuYWdlbWVudEFjY2Vzc0tleVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBhc3luYyBpbnZva2VBdXRoKG1ldGhvZDogc3RyaW5nLCBwYXJhbXM6IGFueSk6IFByb21pc2U8YW55PiB7XG4gICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoKHRoaXMuY29uZmlnLmF1dGhvcml6YXRpb24uZW5kcG9pbnQsIHtcbiAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgICAgIGpzb25ycGM6ICcyLjAnLFxuICAgICAgICAgICAgICAgIGlkOiAnMScsXG4gICAgICAgICAgICAgICAgbWV0aG9kLFxuICAgICAgICAgICAgICAgIHBhcmFtc1xuICAgICAgICAgICAgfSksXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChyZXMuc3RhdHVzICE9PSAyMDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQXV0aCBzZXJ2aWNlIGZhaWxlZDogJHthd2FpdCByZXMudGV4dCgpfWApO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXMuanNvbigpO1xuICAgICAgICBpZiAocmVzcG9uc2UuZXJyb3IpIHtcbiAgICAgICAgICAgIHRocm93IGNyZWF0ZUVycm9yKFxuICAgICAgICAgICAgICAgIHJlc3BvbnNlLmVycm9yLmNvZGUgfHwgNTAwLFxuICAgICAgICAgICAgICAgIHJlc3BvbnNlLmVycm9yLm1lc3NhZ2UgfHwgcmVzcG9uc2UuZXJyb3IuZGVzY3JpcHRpb24sXG4gICAgICAgICAgICAgICAgcmVzcG9uc2UuZXJyb3Iuc291cmNlIHx8ICdncmFwaHFsJyxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzcG9uc2UucmVzdWx0O1xuICAgIH1cblxufVxuIl19