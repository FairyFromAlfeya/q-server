"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Auth = void 0;

var _nodeFetch = _interopRequireDefault(require("node-fetch"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const grantedAccess = Object.freeze({
  granted: true,
  restrictToAccounts: []
});
const deniedAccess = Object.freeze({
  granted: false,
  restrictToAccounts: []
});

class Auth {
  constructor(config) {
    this.config = config;
  }

  static extractAccessKey(req, connection) {
    return req && req.headers && (req.headers.accessKey || req.headers.accesskey) || connection && connection.context && connection.context.accessKey;
  }

  static error(code, message) {
    const error = new Error(message);
    error.source = 'graphql';
    error.code = code;
    return error;
  }

  static unauthorizedError() {
    return Auth.error(401, 'Unauthorized');
  }

  authServiceRequired() {
    if (!this.config.authorization.endpoint) {
      throw Auth.error(500, 'Auth service unavailable');
    }
  }

  async requireGrantedAccess(accessKey) {
    const access = await this.getAccessRights(accessKey);

    if (!access.granted) {
      throw Auth.unauthorizedError();
    }

    return access;
  }

  async getAccessRights(accessKey) {
    if (!this.config.authorization.endpoint) {
      return grantedAccess;
    }

    if ((accessKey || '') === '') {
      return deniedAccess;
    }

    const rights = await this.invokeAuth('getAccessRights', {
      accessKey
    });

    if (!rights.restrictToAccounts) {
      rights.restrictToAccounts = [];
    }

    return rights;
  }

  async getManagementAccessKey() {
    this.authServiceRequired();
    return this.invokeAuth('getManagementAccessKey', {});
  }

  async registerAccessKeys(account, keys, signedManagementAccessKey) {
    this.authServiceRequired();
    return this.invokeAuth('registerAccessKeys', {
      account,
      keys,
      signedManagementAccessKey
    });
  }

  async revokeAccessKeys(account, keys, signedManagementAccessKey) {
    this.authServiceRequired();
    return this.invokeAuth('revokeAccessKeys', {
      account,
      keys,
      signedManagementAccessKey
    });
  }

  async invokeAuth(method, params) {
    const res = await (0, _nodeFetch.default)(this.config.authorization.endpoint, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        jsonrpc: '2.0',
        id: '1',
        method,
        params
      })
    });

    if (res.status !== 200) {
      throw new Error(`Auth service failed: ${await res.text()}`);
    }

    const response = await res.json();

    if (response.error) {
      const error = new Error(response.error.message || response.error.description);
      error.source = response.error.source || 'graphql';
      error.code = response.error.code || 500;
      throw error;
    }

    return response.result;
  }

}

exports.Auth = Auth;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,