"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _utils = require("./utils");

/*
 * Copyright 2018-2020 TON DEV SOLUTIONS LTD.
 *
 * Licensed under the SOFTWARE EVALUATION License (the "License"); you may not use
 * this file except in compliance with the License.  You may obtain a copy of the
 * License at:
 *
 * http://www.ton.dev/licenses
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific TON DEV software governing permissions and
 * limitations under the License.
 */
function toJSON(value) {
  try {
    return JSON.stringify((0, _utils.toLog)(value));
  } catch (error) {
    return JSON.stringify(`${value}`);
  }
}

function str(arg) {
  const s = typeof arg === 'string' ? arg : toJSON(arg);
  return s.split('\n').join('\\n').split('\t').join('\\t');
}

function format(name, args) {
  return `${Date.now()}\t${name}\t${args.map(str).join('\t')}`;
}

class QLogs {
  static error(...args) {
    if (QLogs.stopped) {
      return;
    }

    console.error(...args);
  }

  static debug(...args) {
    if (QLogs.stopped) {
      return;
    }

    console.debug(...args);
  }

  create(name) {
    return {
      error(...args) {
        QLogs.error(...args);
      },

      debug(...args) {
        QLogs.debug(format(name, args));
      }

    };
  }

  stop() {
    QLogs.stopped = true;
  }

}

exports.default = QLogs;
QLogs.stopped = false;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zZXJ2ZXIvbG9ncy5qcyJdLCJuYW1lcyI6WyJ0b0pTT04iLCJ2YWx1ZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJlcnJvciIsInN0ciIsImFyZyIsInMiLCJzcGxpdCIsImpvaW4iLCJmb3JtYXQiLCJuYW1lIiwiYXJncyIsIkRhdGUiLCJub3ciLCJtYXAiLCJRTG9ncyIsInN0b3BwZWQiLCJjb25zb2xlIiwiZGVidWciLCJjcmVhdGUiLCJzdG9wIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBa0JBOztBQWxCQTs7Ozs7Ozs7Ozs7Ozs7O0FBeUJBLFNBQVNBLE1BQVQsQ0FBZ0JDLEtBQWhCLEVBQW9DO0FBQ2hDLE1BQUk7QUFDQSxXQUFPQyxJQUFJLENBQUNDLFNBQUwsQ0FBZSxrQkFBTUYsS0FBTixDQUFmLENBQVA7QUFDSCxHQUZELENBRUUsT0FBT0csS0FBUCxFQUFjO0FBQ1osV0FBT0YsSUFBSSxDQUFDQyxTQUFMLENBQWdCLEdBQUVGLEtBQU0sRUFBeEIsQ0FBUDtBQUNIO0FBQ0o7O0FBRUQsU0FBU0ksR0FBVCxDQUFhQyxHQUFiLEVBQStCO0FBQzNCLFFBQU1DLENBQUMsR0FBRyxPQUFPRCxHQUFQLEtBQWUsUUFBZixHQUEwQkEsR0FBMUIsR0FBZ0NOLE1BQU0sQ0FBQ00sR0FBRCxDQUFoRDtBQUNBLFNBQU9DLENBQUMsQ0FBQ0MsS0FBRixDQUFRLElBQVIsRUFBY0MsSUFBZCxDQUFtQixLQUFuQixFQUEwQkQsS0FBMUIsQ0FBZ0MsSUFBaEMsRUFBc0NDLElBQXRDLENBQTJDLEtBQTNDLENBQVA7QUFDSDs7QUFFRCxTQUFTQyxNQUFULENBQWdCQyxJQUFoQixFQUE4QkMsSUFBOUIsRUFBOEM7QUFDMUMsU0FBUSxHQUFFQyxJQUFJLENBQUNDLEdBQUwsRUFBVyxLQUFJSCxJQUFLLEtBQUlDLElBQUksQ0FBQ0csR0FBTCxDQUFTVixHQUFULEVBQWNJLElBQWQsQ0FBbUIsSUFBbkIsQ0FBeUIsRUFBM0Q7QUFDSDs7QUFFYyxNQUFNTyxLQUFOLENBQVk7QUFFdkIsU0FBT1osS0FBUCxDQUFhLEdBQUdRLElBQWhCLEVBQTJCO0FBQ3ZCLFFBQUlJLEtBQUssQ0FBQ0MsT0FBVixFQUFtQjtBQUNmO0FBQ0g7O0FBQ0RDLElBQUFBLE9BQU8sQ0FBQ2QsS0FBUixDQUFjLEdBQUdRLElBQWpCO0FBQ0g7O0FBQ0QsU0FBT08sS0FBUCxDQUFhLEdBQUdQLElBQWhCLEVBQTJCO0FBQ3ZCLFFBQUlJLEtBQUssQ0FBQ0MsT0FBVixFQUFtQjtBQUNmO0FBQ0g7O0FBQ0RDLElBQUFBLE9BQU8sQ0FBQ0MsS0FBUixDQUFjLEdBQUdQLElBQWpCO0FBQ0g7O0FBQ0pRLEVBQUFBLE1BQU0sQ0FBQ1QsSUFBRCxFQUFxQjtBQUN2QixXQUFPO0FBQ1RQLE1BQUFBLEtBQUssQ0FBQyxHQUFHUSxJQUFKLEVBQVU7QUFDZEksUUFBQUEsS0FBSyxDQUFDWixLQUFOLENBQVksR0FBR1EsSUFBZjtBQUNBLE9BSFE7O0FBSVRPLE1BQUFBLEtBQUssQ0FBQyxHQUFHUCxJQUFKLEVBQVU7QUFDZEksUUFBQUEsS0FBSyxDQUFDRyxLQUFOLENBQVlULE1BQU0sQ0FBQ0MsSUFBRCxFQUFPQyxJQUFQLENBQWxCO0FBQ0E7O0FBTlEsS0FBUDtBQVFIOztBQUNEUyxFQUFBQSxJQUFJLEdBQUc7QUFDQUwsSUFBQUEsS0FBSyxDQUFDQyxPQUFOLEdBQWdCLElBQWhCO0FBQ0g7O0FBMUJzQjs7O0FBNkIzQkQsS0FBSyxDQUFDQyxPQUFOLEdBQWdCLEtBQWhCIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAyMDE4LTIwMjAgVE9OIERFViBTT0xVVElPTlMgTFRELlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBTT0ZUV0FSRSBFVkFMVUFUSU9OIExpY2Vuc2UgKHRoZSBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZVxuICogdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlXG4gKiBMaWNlbnNlIGF0OlxuICpcbiAqIGh0dHA6Ly93d3cudG9uLmRldi9saWNlbnNlc1xuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgVE9OIERFViBzb2Z0d2FyZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG4vLyBAZmxvd1xuXG5pbXBvcnQgeyB0b0xvZyB9IGZyb20gXCIuL3V0aWxzXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUUxvZyB7XG4gICAgZXJyb3IoLi4uYXJnczogYW55KTogdm9pZCxcbiAgICBkZWJ1ZyguLi5hcmdzOiBhbnkpOiB2b2lkLFxufVxuXG5mdW5jdGlvbiB0b0pTT04odmFsdWU6IGFueSk6IHN0cmluZyB7XG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHRvTG9nKHZhbHVlKSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGAke3ZhbHVlfWApO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gc3RyKGFyZzogYW55KTogc3RyaW5nIHtcbiAgICBjb25zdCBzID0gdHlwZW9mIGFyZyA9PT0gJ3N0cmluZycgPyBhcmcgOiB0b0pTT04oYXJnKTtcbiAgICByZXR1cm4gcy5zcGxpdCgnXFxuJykuam9pbignXFxcXG4nKS5zcGxpdCgnXFx0Jykuam9pbignXFxcXHQnKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0KG5hbWU6IHN0cmluZywgYXJnczogc3RyaW5nW10pIHtcbiAgICByZXR1cm4gYCR7RGF0ZS5ub3coKX1cXHQke25hbWV9XFx0JHthcmdzLm1hcChzdHIpLmpvaW4oJ1xcdCcpfWA7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFFMb2dzIHtcbiAgICBzdGF0aWMgc3RvcHBlZDogYm9vbGVhbjtcbiAgICBzdGF0aWMgZXJyb3IoLi4uYXJnczogYW55KSB7XG4gICAgICAgIGlmIChRTG9ncy5zdG9wcGVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc29sZS5lcnJvciguLi5hcmdzKTtcbiAgICB9XG4gICAgc3RhdGljIGRlYnVnKC4uLmFyZ3M6IGFueSkge1xuICAgICAgICBpZiAoUUxvZ3Muc3RvcHBlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnNvbGUuZGVidWcoLi4uYXJncyk7XG4gICAgfVxuXHRjcmVhdGUobmFtZTogc3RyaW5nKTogUUxvZyB7XG5cdCAgICByZXR1cm4ge1xuXHRcdFx0ZXJyb3IoLi4uYXJncykge1xuXHRcdFx0XHRRTG9ncy5lcnJvciguLi5hcmdzKTtcblx0XHRcdH0sXG5cdFx0XHRkZWJ1ZyguLi5hcmdzKSB7XG5cdFx0XHRcdFFMb2dzLmRlYnVnKGZvcm1hdChuYW1lLCBhcmdzKSk7XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxuXHRzdG9wKCkge1xuICAgICAgICBRTG9ncy5zdG9wcGVkID0gdHJ1ZTtcbiAgICB9XG59XG5cblFMb2dzLnN0b3BwZWQgPSBmYWxzZTtcbiJdfQ==