"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ensureProtocol = ensureProtocol;
exports.parseArangoConfig = parseArangoConfig;
exports.parseMemCachedConfig = parseMemCachedConfig;
exports.overrideDefs = overrideDefs;
exports.resolveValues = resolveValues;
exports.createConfig = createConfig;
exports.parseDataConfig = parseDataConfig;
exports.STATS = exports.programOptions = exports.requestsMode = void 0;

var _os = _interopRequireDefault(require("os"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
/*
 * Copyright 2018-2020 TON DEV SOLUTIONS LTD.
 *
 * Licensed under the SOFTWARE EVALUATION License (the "License"); you may not use
 * this file except in compliance with the License.  You may obtain a copy of the
 * License at:
 *
 * http://www.ton.dev/licenses
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific TON DEV software governing permissions and
 * limitations under the License.
 */
const DEFAULT_LISTENER_RESTART_TIMEOUT = 1000;
const DEFAULT_ARANGO_MAX_SOCKETS = 100;
const DEFAULT_SLOW_QUERIES_ARANGO_MAX_SOCKETS = 3;
const requestsMode = {
  kafka: 'kafka',
  rest: 'rest'
};
exports.requestsMode = requestsMode;
const programOptions = {};
exports.programOptions = programOptions;

const toPascal = s => `${s[0].toUpperCase()}${s.substr(1).toLowerCase()}`;

const opt = (option, def, description) => {
  const words = option.split('-');
  const name = `${words[0]}${words.slice(1).map(toPascal).join('')}`;
  const env = `Q_${words.map(x => x.toUpperCase()).join('_')}`;
  programOptions[name] = {
    option: `--${option} <value>`,
    env,
    def,
    description: `${description}${def && ` (default: "${def}")`}`
  };
};

const dataOpt = prefix => {
  const o = name => `${prefix.toLowerCase().split(' ').join('-')}-${name}`;

  const d = text => `${toPascal(prefix)} ${text}`;

  opt(o('mut'), 'arangodb', d('mutable db config url'));
  opt(o('hot'), 'arangodb', d('hot db config url'));
  opt(o('cold'), '', d('cold db config urls (comma separated)'));
  opt(o('cache'), '', d('cache config url'));
};

opt('host', getIp(), 'Listening address');
opt('port', '4000', 'Listening port');
opt('keep-alive', '60000', 'GraphQL keep alive ms');
opt('requests-mode', 'kafka', 'Requests mode (kafka | rest)');
opt('requests-server', 'kafka:9092', 'Requests server url');
opt('requests-topic', 'requests', 'Requests topic name');
opt('requests-max-size', '16000', 'Maximum request message size in bytes');
dataOpt('data');
dataOpt('slow queries');
opt('auth-endpoint', '', 'Auth endpoint');
opt('mam-access-keys', '', 'Access keys used to authorize mam endpoint access');
opt('jaeger-endpoint', '', 'Jaeger endpoint');
opt('trace-service', 'Q Server', 'Trace service name');
opt('trace-tags', '', 'Additional trace tags (comma separated name=value pairs)');
opt('statsd-server', '', 'StatsD server (host:port)');
opt('statsd-tags', '', 'Additional StatsD tags (comma separated name=value pairs)');
opt('network-name', 'cinet.tonlabs.io', 'Define the name of the network q-server is working with');
opt('cache-key-prefix', 'Q_', 'Prefix string to identify q-server keys in datacache');
opt('endpoints', '', 'Alternative endpoints of q-server (comma separated addresses)'); // Stats Schema

const STATS = {
  start: 'start',
  prefix: 'qserver.',
  doc: {
    count: 'doc.count'
  },
  post: {
    count: 'post.count',
    failed: 'post.failed'
  },
  query: {
    count: 'query.count',
    time: 'query.time',
    active: 'query.active',
    failed: 'query.failed',
    slow: 'query.slow'
  },
  subscription: {
    count: 'subscription.count',
    active: 'subscription.active'
  },
  waitFor: {
    active: 'waitfor.active'
  }
};
exports.STATS = STATS;

function ensureProtocol(address, defaultProtocol) {
  return /^\w+:\/\//gi.test(address) ? address : `${defaultProtocol}://${address}`;
}

function parseArangoEndpoint(config, defMaxSockets) {
  const lowerCased = config.toLowerCase().trim();
  const hasProtocol = lowerCased.startsWith('http:') || lowerCased.startsWith('https:');
  const url = new URL(hasProtocol ? config : `https://${config}`);
  const protocol = url.protocol || 'https:';
  const host = url.port || protocol.toLowerCase() === 'https:' ? url.host : `${url.host}:8529`;
  const path = url.pathname !== '/' ? url.pathname : '';

  const param = name => url.searchParams.get(name) || '';

  return {
    server: `${protocol}//${host}${path}`,
    auth: url.username && `${url.username}:${url.password}`,
    name: param('name') || 'blockchain',
    maxSockets: Number.parseInt(param('maxSockets')) || defMaxSockets,
    listenerRestartTimeout: Number.parseInt(param('listenerRestartTimeout')) || DEFAULT_LISTENER_RESTART_TIMEOUT
  };
}

function parseArangoEndpointList(config, defMaxSockets) {
  return config.split(",").filter(x => x.trim() !== "").map(x => parseArangoEndpoint(x, defMaxSockets));
}

function parseArangoConfig(config, defMaxSockets) {
  return parseArangoEndpointList(config, defMaxSockets)[0] || parseArangoEndpoint('', defMaxSockets);
}

function parseMemCachedConfig(config) {
  return {
    server: config
  };
}

function overrideDefs(options, defs) {
  const resolved = {};
  Object.entries(options).forEach(([name, value]) => {
    const opt = value;
    resolved[name] = { ...opt,
      def: defs[name] || opt.def
    };
  });
  return resolved;
}

function resolveValues(values, env, def) {
  const resolved = {};
  Object.entries(def).forEach(([name, value]) => {
    const opt = value;
    resolved[name] = values[name] || env[opt.env] || def[name].def;
  });
  return resolved;
}

function createConfig(values, env, def) {
  const resolved = resolveValues(values, env, def);
  const {
    data,
    slowQueriesData,
    networkName,
    cacheKeyPrefix
  } = parseDataConfig(resolved);
  return {
    server: {
      host: resolved.host,
      port: Number.parseInt(resolved.port),
      keepAlive: Number.parseInt(resolved.keepAlive)
    },
    requests: {
      mode: resolved.requestsMode,
      server: resolved.requestsServer,
      topic: resolved.requestsTopic,
      maxSize: Number.parseInt(resolved.requestsMaxSize)
    },
    data,
    slowQueriesData,
    authorization: {
      endpoint: resolved.authEndpoint
    },
    mamAccessKeys: new Set((resolved.mamAccessKeys || '').split(',')),
    jaeger: {
      endpoint: resolved.jaegerEndpoint,
      service: resolved.traceService,
      tags: parseTags(resolved.traceTags)
    },
    statsd: {
      server: resolved.statsdServer,
      tags: (resolved.statsdTags || '').split(',').map(x => x.trim()).filter(x => x)
    },
    networkName,
    cacheKeyPrefix,
    endpoints: (resolved.endpoints || '').split(',').map(x => x.trim()).filter(x => x)
  };
} // Internals


function getIp() {
  const ipv4 = Object.values(_os.default.networkInterfaces()).reduce((acc, x) => acc.concat(x), []).find(x => x.family === 'IPv4' && !x.internal);
  return ipv4 && ipv4.address;
}

function parseTags(s) {
  const tags = {};
  s.split(',').forEach(t => {
    const i = t.indexOf('=');

    if (i >= 0) {
      tags[t.substr(0, i)] = t.substr(i + 1);
    } else {
      tags[t] = '';
    }
  });
  return tags;
}

function parseDataConfig(values) {
  function parse(prefix, defMaxSockets) {
    const opt = suffix => values[`${prefix}${suffix}`] || '';

    return {
      mut: parseArangoConfig(opt('Mut'), defMaxSockets),
      hot: parseArangoConfig(opt('Hot'), defMaxSockets),
      cold: parseArangoEndpointList(opt('Cold'), defMaxSockets),
      cache: parseMemCachedConfig(opt('Cache'))
    };
  }

  const {
    networkName,
    cacheKeyPrefix
  } = values;
  return {
    data: parse('data', DEFAULT_ARANGO_MAX_SOCKETS),
    slowQueriesData: parse('slowQueries', DEFAULT_SLOW_QUERIES_ARANGO_MAX_SOCKETS),
    networkName,
    cacheKeyPrefix
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zZXJ2ZXIvY29uZmlnLmpzIl0sIm5hbWVzIjpbIkRFRkFVTFRfTElTVEVORVJfUkVTVEFSVF9USU1FT1VUIiwiREVGQVVMVF9BUkFOR09fTUFYX1NPQ0tFVFMiLCJERUZBVUxUX1NMT1dfUVVFUklFU19BUkFOR09fTUFYX1NPQ0tFVFMiLCJyZXF1ZXN0c01vZGUiLCJrYWZrYSIsInJlc3QiLCJwcm9ncmFtT3B0aW9ucyIsInRvUGFzY2FsIiwicyIsInRvVXBwZXJDYXNlIiwic3Vic3RyIiwidG9Mb3dlckNhc2UiLCJvcHQiLCJvcHRpb24iLCJkZWYiLCJkZXNjcmlwdGlvbiIsIndvcmRzIiwic3BsaXQiLCJuYW1lIiwic2xpY2UiLCJtYXAiLCJqb2luIiwiZW52IiwieCIsImRhdGFPcHQiLCJwcmVmaXgiLCJvIiwiZCIsInRleHQiLCJnZXRJcCIsIlNUQVRTIiwic3RhcnQiLCJkb2MiLCJjb3VudCIsInBvc3QiLCJmYWlsZWQiLCJxdWVyeSIsInRpbWUiLCJhY3RpdmUiLCJzbG93Iiwic3Vic2NyaXB0aW9uIiwid2FpdEZvciIsImVuc3VyZVByb3RvY29sIiwiYWRkcmVzcyIsImRlZmF1bHRQcm90b2NvbCIsInRlc3QiLCJwYXJzZUFyYW5nb0VuZHBvaW50IiwiY29uZmlnIiwiZGVmTWF4U29ja2V0cyIsImxvd2VyQ2FzZWQiLCJ0cmltIiwiaGFzUHJvdG9jb2wiLCJzdGFydHNXaXRoIiwidXJsIiwiVVJMIiwicHJvdG9jb2wiLCJob3N0IiwicG9ydCIsInBhdGgiLCJwYXRobmFtZSIsInBhcmFtIiwic2VhcmNoUGFyYW1zIiwiZ2V0Iiwic2VydmVyIiwiYXV0aCIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJtYXhTb2NrZXRzIiwiTnVtYmVyIiwicGFyc2VJbnQiLCJsaXN0ZW5lclJlc3RhcnRUaW1lb3V0IiwicGFyc2VBcmFuZ29FbmRwb2ludExpc3QiLCJmaWx0ZXIiLCJwYXJzZUFyYW5nb0NvbmZpZyIsInBhcnNlTWVtQ2FjaGVkQ29uZmlnIiwib3ZlcnJpZGVEZWZzIiwib3B0aW9ucyIsImRlZnMiLCJyZXNvbHZlZCIsIk9iamVjdCIsImVudHJpZXMiLCJmb3JFYWNoIiwidmFsdWUiLCJyZXNvbHZlVmFsdWVzIiwidmFsdWVzIiwiY3JlYXRlQ29uZmlnIiwiZGF0YSIsInNsb3dRdWVyaWVzRGF0YSIsIm5ldHdvcmtOYW1lIiwiY2FjaGVLZXlQcmVmaXgiLCJwYXJzZURhdGFDb25maWciLCJrZWVwQWxpdmUiLCJyZXF1ZXN0cyIsIm1vZGUiLCJyZXF1ZXN0c1NlcnZlciIsInRvcGljIiwicmVxdWVzdHNUb3BpYyIsIm1heFNpemUiLCJyZXF1ZXN0c01heFNpemUiLCJhdXRob3JpemF0aW9uIiwiZW5kcG9pbnQiLCJhdXRoRW5kcG9pbnQiLCJtYW1BY2Nlc3NLZXlzIiwiU2V0IiwiamFlZ2VyIiwiamFlZ2VyRW5kcG9pbnQiLCJzZXJ2aWNlIiwidHJhY2VTZXJ2aWNlIiwidGFncyIsInBhcnNlVGFncyIsInRyYWNlVGFncyIsInN0YXRzZCIsInN0YXRzZFNlcnZlciIsInN0YXRzZFRhZ3MiLCJlbmRwb2ludHMiLCJpcHY0Iiwib3MiLCJuZXR3b3JrSW50ZXJmYWNlcyIsInJlZHVjZSIsImFjYyIsImNvbmNhdCIsImZpbmQiLCJmYW1pbHkiLCJpbnRlcm5hbCIsInQiLCJpIiwiaW5kZXhPZiIsInBhcnNlIiwic3VmZml4IiwibXV0IiwiaG90IiwiY29sZCIsImNhY2hlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQW1CQTs7OztBQW5CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQW9FQSxNQUFNQSxnQ0FBZ0MsR0FBRyxJQUF6QztBQUNBLE1BQU1DLDBCQUEwQixHQUFHLEdBQW5DO0FBQ0EsTUFBTUMsdUNBQXVDLEdBQUcsQ0FBaEQ7QUFFTyxNQUFNQyxZQUFZLEdBQUc7QUFDeEJDLEVBQUFBLEtBQUssRUFBRSxPQURpQjtBQUV4QkMs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QUE7QUFBZixNQUFrQ0wsTUFBeEM7QUFFQSxTQUFPO0FBQ0hFLElBQUFBLElBQUksRUFBRXlDLEtBQUssQ0FBQyxNQUFELEVBQVM5SCwwQkFBVCxDQURSO0FBRUhzRixJQUFBQSxlQUFlLEVBQUV3QyxLQUFLLENBQUMsYUFBRCxFQUFnQjdILHVDQUFoQixDQUZuQjtBQUdIc0YsSUFBQUEsV0FIRztBQUlIQyxJQUFBQTtBQUpHLEdBQVA7QUFNSCIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4vKlxuICogQ29weXJpZ2h0IDIwMTgtMjAyMCBUT04gREVWIFNPTFVUSU9OUyBMVEQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIFNPRlRXQVJFIEVWQUxVQVRJT04gTGljZW5zZSAodGhlIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlXG4gKiB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGVcbiAqIExpY2Vuc2UgYXQ6XG4gKlxuICogaHR0cDovL3d3dy50b24uZGV2L2xpY2Vuc2VzXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBUT04gREVWIHNvZnR3YXJlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbi8vIEBmbG93XG5cbmltcG9ydCBvcyBmcm9tICdvcyc7XG5cbi8vIENvbmZpZyBTY2hlbWFcblxuZXhwb3J0IHR5cGUgUUFyYW5nb0NvbmZpZyA9IHtcbiAgICBzZXJ2ZXI6IHN0cmluZyxcbiAgICBuYW1lOiBzdHJpbmcsXG4gICAgYXV0aDogc3RyaW5nLFxuICAgIG1heFNvY2tldHM6IG51bWJlcixcbiAgICBsaXN0ZW5lclJlc3RhcnRUaW1lb3V0OiBudW1iZXI7XG59O1xuXG5leHBvcnQgdHlwZSBRTWVtQ2FjaGVkQ29uZmlnID0ge1xuICAgIHNlcnZlcjogc3RyaW5nLFxufTtcblxuZXhwb3J0IHR5cGUgUURhdGFQcm92aWRlcnNDb25maWcgPSB7XG4gICAgbXV0OiBRQXJhbmdvQ29uZmlnO1xuICAgIGhvdDogUUFyYW5nb0NvbmZpZztcbiAgICBjb2xkOiBRQXJhbmdvQ29uZmlnW107XG4gICAgY2FjaGU6IFFNZW1DYWNoZWRDb25maWc7XG59O1xuXG5leHBvcnQgdHlwZSBRQ29uZmlnID0ge1xuICAgIHNlcnZlcjoge1xuICAgICAgICBob3N0OiBzdHJpbmcsXG4gICAgICAgIHBvcnQ6IG51bWJlcixcbiAgICAgICAga2VlcEFsaXZlOiBudW1iZXIsXG4gICAgfSxcbiAgICByZXF1ZXN0czoge1xuICAgICAgICBtb2RlOiAna2Fma2EnIHwgJ3Jlc3QnLFxuICAgICAgICBzZXJ2ZXI6IHN0cmluZyxcbiAgICAgICAgdG9waWM6IHN0cmluZyxcbiAgICAgICAgbWF4U2l6ZTogbnVtYmVyLFxuICAgIH0sXG4gICAgZGF0YTogUURhdGFQcm92aWRlcnNDb25maWcsXG4gICAgc2xvd1F1ZXJpZXNEYXRhOiBRRGF0YVByb3ZpZGVyc0NvbmZpZyxcbiAgICBhdXRob3JpemF0aW9uOiB7XG4gICAgICAgIGVuZHBvaW50OiBzdHJpbmcsXG4gICAgfSxcbiAgICBqYWVnZXI6IHtcbiAgICAgICAgZW5kcG9pbnQ6IHN0cmluZyxcbiAgICAgICAgc2VydmljZTogc3RyaW5nLFxuICAgICAgICB0YWdzOiB7IFtzdHJpbmddOiBzdHJpbmcgfVxuICAgIH0sXG4gICAgc3RhdHNkOiB7XG4gICAgICAgIHNlcnZlcjogc3RyaW5nLFxuICAgICAgICB0YWdzOiBzdHJpbmdbXSxcbiAgICB9LFxuICAgIG1hbUFjY2Vzc0tleXM6IFNldDxzdHJpbmc+LFxuICAgIGlzVGVzdHM/OiBib29sZWFuLFxuICAgIG5ldHdvcmtOYW1lOiBzdHJpbmcsXG4gICAgY2FjaGVLZXlQcmVmaXg6IHN0cmluZyxcbiAgICBlbmRwb2ludHM6IHN0cmluZ1tdLFxufVxuXG5leHBvcnQgdHlwZSBQcm9ncmFtT3B0aW9uID0ge1xuICAgIG9wdGlvbjogc3RyaW5nLFxuICAgIGVudjogc3RyaW5nLFxuICAgIGRlZjogc3RyaW5nLFxuICAgIGRlc2NyaXB0aW9uOiBzdHJpbmcsXG59O1xuZXhwb3J0IHR5cGUgUHJvZ3JhbU9wdGlvbnMgPSB7IFtzdHJpbmddOiBQcm9ncmFtT3B0aW9uIH07XG5cbmNvbnN0IERFRkFVTFRfTElTVEVORVJfUkVTVEFSVF9USU1FT1VUID0gMTAwMDtcbmNvbnN0IERFRkFVTFRfQVJBTkdPX01BWF9TT0NLRVRTID0gMTAwO1xuY29uc3QgREVGQVVMVF9TTE9XX1FVRVJJRVNfQVJBTkdPX01BWF9TT0NLRVRTID0gMztcblxuZXhwb3J0IGNvbnN0IHJlcXVlc3RzTW9kZSA9IHtcbiAgICBrYWZrYTogJ2thZmthJyxcbiAgICByZXN0OiAncmVzdCcsXG59O1xuXG5leHBvcnQgY29uc3QgcHJvZ3JhbU9wdGlvbnM6IFByb2dyYW1PcHRpb25zID0ge307XG5cbmNvbnN0IHRvUGFzY2FsID0gcyA9PiBgJHtzWzBdLnRvVXBwZXJDYXNlKCl9JHtzLnN1YnN0cigxKS50b0xvd2VyQ2FzZSgpfWA7XG5cbmNvbnN0IG9wdCA9IChvcHRpb246IHN0cmluZywgZGVmOiBzdHJpbmcsIGRlc2NyaXB0aW9uOiBzdHJpbmcpID0+IHtcbiAgICBjb25zdCB3b3JkcyA9IG9wdGlvbi5zcGxpdCgnLScpO1xuICAgIGNvbnN0IG5hbWUgPSBgJHt3b3Jkc1swXX0ke3dvcmRzLnNsaWNlKDEpLm1hcCh0b1Bhc2NhbCkuam9pbignJyl9YDtcbiAgICBjb25zdCBlbnYgPSBgUV8ke3dvcmRzLm1hcCh4ID0+IHgudG9VcHBlckNhc2UoKSkuam9pbignXycpfWA7XG4gICAgcHJvZ3JhbU9wdGlvbnNbbmFtZV0gPSB7XG4gICAgICAgIG9wdGlvbjogYC0tJHtvcHRpb259IDx2YWx1ZT5gLFxuICAgICAgICBlbnYsXG4gICAgICAgIGRlZixcbiAgICAgICAgZGVzY3JpcHRpb246IGAke2Rlc2NyaXB0aW9ufSR7ZGVmICYmIGAgKGRlZmF1bHQ6IFwiJHtkZWZ9XCIpYH1gLFxuICAgIH1cbn07XG5cbmNvbnN0IGRhdGFPcHQgPSAocHJlZml4OiBzdHJpbmcpID0+IHtcbiAgICBjb25zdCBvID0gbmFtZSA9PiBgJHtwcmVmaXgudG9Mb3dlckNhc2UoKS5zcGxpdCgnICcpLmpvaW4oJy0nKX0tJHtuYW1lfWA7XG4gICAgY29uc3QgZCA9IHRleHQgPT4gYCR7dG9QYXNjYWwocHJlZml4KX0gJHt0ZXh0fWA7XG5cbiAgICBvcHQobygnbXV0JyksICdhcmFuZ29kYicsIGQoJ211dGFibGUgZGIgY29uZmlnIHVybCcpKTtcbiAgICBvcHQobygnaG90JyksICdhcmFuZ29kYicsIGQoJ2hvdCBkYiBjb25maWcgdXJsJykpO1xuICAgIG9wdChvKCdjb2xkJyksICcnLCBkKCdjb2xkIGRiIGNvbmZpZyB1cmxzIChjb21tYSBzZXBhcmF0ZWQpJykpO1xuICAgIG9wdChvKCdjYWNoZScpLCAnJywgZCgnY2FjaGUgY29uZmlnIHVybCcpKTtcbn1cblxub3B0KCdob3N0JywgZ2V0SXAoKSwgJ0xpc3RlbmluZyBhZGRyZXNzJyk7XG5vcHQoJ3BvcnQnLCAnNDAwMCcsICdMaXN0ZW5pbmcgcG9ydCcpO1xub3B0KCdrZWVwLWFsaXZlJywgJzYwMDAwJywgJ0dyYXBoUUwga2VlcCBhbGl2ZSBtcycpO1xuXG5vcHQoJ3JlcXVlc3RzLW1vZGUnLCAna2Fma2EnLCAnUmVxdWVzdHMgbW9kZSAoa2Fma2EgfCByZXN0KScpO1xub3B0KCdyZXF1ZXN0cy1zZXJ2ZXInLCAna2Fma2E6OTA5MicsICdSZXF1ZXN0cyBzZXJ2ZXIgdXJsJyk7XG5vcHQoJ3JlcXVlc3RzLXRvcGljJywgJ3JlcXVlc3RzJywgJ1JlcXVlc3RzIHRvcGljIG5hbWUnKTtcbm9wdCgncmVxdWVzdHMtbWF4LXNpemUnLCAnMTYwMDAnLCAnTWF4aW11bSByZXF1ZXN0IG1lc3NhZ2Ugc2l6ZSBpbiBieXRlcycpO1xuXG5kYXRhT3B0KCdkYXRhJyk7XG5kYXRhT3B0KCdzbG93IHF1ZXJpZXMnKTtcblxub3B0KCdhdXRoLWVuZHBvaW50JywgJycsICdBdXRoIGVuZHBvaW50Jyk7XG5vcHQoJ21hbS1hY2Nlc3Mta2V5cycsICcnLCAnQWNjZXNzIGtleXMgdXNlZCB0byBhdXRob3JpemUgbWFtIGVuZHBvaW50IGFjY2VzcycpO1xuXG5vcHQoJ2phZWdlci1lbmRwb2ludCcsICcnLCAnSmFlZ2VyIGVuZHBvaW50Jyk7XG5vcHQoJ3RyYWNlLXNlcnZpY2UnLCAnUSBTZXJ2ZXInLCAnVHJhY2Ugc2VydmljZSBuYW1lJyk7XG5vcHQoJ3RyYWNlLXRhZ3MnLCAnJywgJ0FkZGl0aW9uYWwgdHJhY2UgdGFncyAoY29tbWEgc2VwYXJhdGVkIG5hbWU9dmFsdWUgcGFpcnMpJyk7XG5cbm9wdCgnc3RhdHNkLXNlcnZlcicsICcnLCAnU3RhdHNEIHNlcnZlciAoaG9zdDpwb3J0KScpO1xub3B0KCdzdGF0c2QtdGFncycsICcnLCAnQWRkaXRpb25hbCBTdGF0c0QgdGFncyAoY29tbWEgc2VwYXJhdGVkIG5hbWU9dmFsdWUgcGFpcnMpJyk7XG5cbm9wdCgnbmV0d29yay1uYW1lJywgJ2NpbmV0LnRvbmxhYnMuaW8nLCAnRGVmaW5lIHRoZSBuYW1lIG9mIHRoZSBuZXR3b3JrIHEtc2VydmVyIGlzIHdvcmtpbmcgd2l0aCcpO1xuXG5vcHQoJ2NhY2hlLWtleS1wcmVmaXgnLCAnUV8nLCAnUHJlZml4IHN0cmluZyB0byBpZGVudGlmeSBxLXNlcnZlciBrZXlzIGluIGRhdGFjYWNoZScpO1xuXG5vcHQoJ2VuZHBvaW50cycsICcnLCAnQWx0ZXJuYXRpdmUgZW5kcG9pbnRzIG9mIHEtc2VydmVyIChjb21tYSBzZXBhcmF0ZWQgYWRkcmVzc2VzKScpO1xuXG4vLyBTdGF0cyBTY2hlbWFcblxuZXhwb3J0IGNvbnN0IFNUQVRTID0ge1xuICAgIHN0YXJ0OiAnc3RhcnQnLFxuICAgIHByZWZpeDogJ3FzZXJ2ZXIuJyxcbiAgICBkb2M6IHtcbiAgICAgICAgY291bnQ6ICdkb2MuY291bnQnLFxuICAgIH0sXG4gICAgcG9zdDoge1xuICAgICAgICBjb3VudDogJ3Bvc3QuY291bnQnLFxuICAgICAgICBmYWlsZWQ6ICdwb3N0LmZhaWxlZCcsXG4gICAgfSxcbiAgICBxdWVyeToge1xuICAgICAgICBjb3VudDogJ3F1ZXJ5LmNvdW50JyxcbiAgICAgICAgdGltZTogJ3F1ZXJ5LnRpbWUnLFxuICAgICAgICBhY3RpdmU6ICdxdWVyeS5hY3RpdmUnLFxuICAgICAgICBmYWlsZWQ6ICdxdWVyeS5mYWlsZWQnLFxuICAgICAgICBzbG93OiAncXVlcnkuc2xvdycsXG4gICAgfSxcbiAgICBzdWJzY3JpcHRpb246IHtcbiAgICAgICAgY291bnQ6ICdzdWJzY3JpcHRpb24uY291bnQnLFxuICAgICAgICBhY3RpdmU6ICdzdWJzY3JpcHRpb24uYWN0aXZlJyxcbiAgICB9LFxuICAgIHdhaXRGb3I6IHtcbiAgICAgICAgYWN0aXZlOiAnd2FpdGZvci5hY3RpdmUnLFxuICAgIH0sXG59O1xuXG5cbmV4cG9ydCBmdW5jdGlvbiBlbnN1cmVQcm90b2NvbChhZGRyZXNzOiBzdHJpbmcsIGRlZmF1bHRQcm90b2NvbDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICByZXR1cm4gL15cXHcrOlxcL1xcLy9naS50ZXN0KGFkZHJlc3MpID8gYWRkcmVzcyA6IGAke2RlZmF1bHRQcm90b2NvbH06Ly8ke2FkZHJlc3N9YDtcbn1cblxuZnVuY3Rpb24gcGFyc2VBcmFuZ29FbmRwb2ludChjb25maWc6IHN0cmluZywgZGVmTWF4U29ja2V0czogbnVtYmVyKTogUUFyYW5nb0NvbmZpZyB7XG4gICAgY29uc3QgbG93ZXJDYXNlZCA9IGNvbmZpZy50b0xvd2VyQ2FzZSgpLnRyaW0oKTtcbiAgICBjb25zdCBoYXNQcm90b2NvbCA9IGxvd2VyQ2FzZWQuc3RhcnRzV2l0aCgnaHR0cDonKSB8fCBsb3dlckNhc2VkLnN0YXJ0c1dpdGgoJ2h0dHBzOicpO1xuICAgIGNvbnN0IHVybCA9IG5ldyBVUkwoaGFzUHJvdG9jb2wgPyBjb25maWcgOiBgaHR0cHM6Ly8ke2NvbmZpZ31gKTtcbiAgICBjb25zdCBwcm90b2NvbCA9IHVybC5wcm90b2NvbCB8fCAnaHR0cHM6JztcbiAgICBjb25zdCBob3N0ID0gKHVybC5wb3J0IHx8IHByb3RvY29sLnRvTG93ZXJDYXNlKCkgPT09ICdodHRwczonKSA/IHVybC5ob3N0IDogYCR7dXJsLmhvc3R9Ojg1MjlgO1xuICAgIGNvbnN0IHBhdGggPSB1cmwucGF0aG5hbWUgIT09ICcvJyA/IHVybC5wYXRobmFtZSA6ICcnO1xuICAgIGNvbnN0IHBhcmFtID0gbmFtZSA9PiB1cmwuc2VhcmNoUGFyYW1zLmdldChuYW1lKSB8fCAnJztcbiAgICByZXR1cm4ge1xuICAgICAgICBzZXJ2ZXI6IGAke3Byb3RvY29sfS8vJHtob3N0fSR7cGF0aH1gLFxuICAgICAgICBhdXRoOiB1cmwudXNlcm5hbWUgJiYgYCR7dXJsLnVzZXJuYW1lfToke3VybC5wYXNzd29yZH1gLFxuICAgICAgICBuYW1lOiBwYXJhbSgnbmFtZScpIHx8ICdibG9ja2NoYWluJyxcbiAgICAgICAgbWF4U29ja2V0czogTnVtYmVyLnBhcnNlSW50KHBhcmFtKCdtYXhTb2NrZXRzJykpIHx8IGRlZk1heFNvY2tldHMsXG4gICAgICAgIGxpc3RlbmVyUmVzdGFydFRpbWVvdXQ6IE51bWJlci5wYXJzZUludChwYXJhbSgnbGlzdGVuZXJSZXN0YXJ0VGltZW91dCcpKSB8fCBERUZBVUxUX0xJU1RFTkVSX1JFU1RBUlRfVElNRU9VVCxcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHBhcnNlQXJhbmdvRW5kcG9pbnRMaXN0KGNvbmZpZzogc3RyaW5nLCBkZWZNYXhTb2NrZXRzOiBudW1iZXIpOiBRQXJhbmdvQ29uZmlnW10ge1xuICAgIHJldHVybiBjb25maWdcbiAgICAgICAgLnNwbGl0KFwiLFwiKVxuICAgICAgICAuZmlsdGVyKHggPT4geC50cmltKCkgIT09IFwiXCIpXG4gICAgICAgIC5tYXAoeCA9PiBwYXJzZUFyYW5nb0VuZHBvaW50KHgsIGRlZk1heFNvY2tldHMpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlQXJhbmdvQ29uZmlnKGNvbmZpZzogc3RyaW5nLCBkZWZNYXhTb2NrZXRzOiBudW1iZXIpOiBRQXJhbmdvQ29uZmlnIHtcbiAgICByZXR1cm4gcGFyc2VBcmFuZ29FbmRwb2ludExpc3QoY29uZmlnLCBkZWZNYXhTb2NrZXRzKVswXVxuICAgICAgICB8fCBwYXJzZUFyYW5nb0VuZHBvaW50KCcnLCBkZWZNYXhTb2NrZXRzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlTWVtQ2FjaGVkQ29uZmlnKGNvbmZpZzogc3RyaW5nKTogUU1lbUNhY2hlZENvbmZpZyB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc2VydmVyOiBjb25maWcsXG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gb3ZlcnJpZGVEZWZzKG9wdGlvbnM6IFByb2dyYW1PcHRpb25zLCBkZWZzOiBhbnkpOiBQcm9ncmFtT3B0aW9ucyB7XG4gICAgY29uc3QgcmVzb2x2ZWQgPSB7fTtcbiAgICBPYmplY3QuZW50cmllcyhvcHRpb25zKS5mb3JFYWNoKChbbmFtZSwgdmFsdWVdKSA9PiB7XG4gICAgICAgIGNvbnN0IG9wdCA9ICgodmFsdWU6IGFueSk6IFByb2dyYW1PcHRpb24pO1xuICAgICAgICByZXNvbHZlZFtuYW1lXSA9IHtcbiAgICAgICAgICAgIC4uLm9wdCxcbiAgICAgICAgICAgIGRlZjogZGVmc1tuYW1lXSB8fCBvcHQuZGVmLFxuICAgICAgICB9O1xuICAgIH0pO1xuICAgIHJldHVybiByZXNvbHZlZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlc29sdmVWYWx1ZXModmFsdWVzOiBhbnksIGVudjogYW55LCBkZWY6IFByb2dyYW1PcHRpb25zKTogYW55IHtcbiAgICBjb25zdCByZXNvbHZlZCA9IHt9O1xuICAgIE9iamVjdC5lbnRyaWVzKGRlZikuZm9yRWFjaCgoW25hbWUsIHZhbHVlXSkgPT4ge1xuICAgICAgICBjb25zdCBvcHQgPSAoKHZhbHVlOiBhbnkpOiBQcm9ncmFtT3B0aW9uKTtcbiAgICAgICAgcmVzb2x2ZWRbbmFtZV0gPSB2YWx1ZXNbbmFtZV0gfHwgZW52W29wdC5lbnZdIHx8IGRlZltuYW1lXS5kZWY7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc29sdmVkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQ29uZmlnKFxuICAgIHZhbHVlczogYW55LFxuICAgIGVudjogYW55LFxuICAgIGRlZjogUHJvZ3JhbU9wdGlvbnMsXG4pOiBRQ29uZmlnIHtcbiAgICBjb25zdCByZXNvbHZlZCA9IHJlc29sdmVWYWx1ZXModmFsdWVzLCBlbnYsIGRlZik7XG4gICAgY29uc3QgeyBkYXRhLCBzbG93UXVlcmllc0RhdGEsIG5ldHdvcmtOYW1lLCBjYWNoZUtleVByZWZpeCB9ID0gcGFyc2VEYXRhQ29uZmlnKHJlc29sdmVkKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBzZXJ2ZXI6IHtcbiAgICAgICAgICAgIGhvc3Q6IHJlc29sdmVkLmhvc3QsXG4gICAgICAgICAgICBwb3J0OiBOdW1iZXIucGFyc2VJbnQocmVzb2x2ZWQucG9ydCksXG4gICAgICAgICAgICBrZWVwQWxpdmU6IE51bWJlci5wYXJzZUludChyZXNvbHZlZC5rZWVwQWxpdmUpLFxuICAgICAgICB9LFxuICAgICAgICByZXF1ZXN0czoge1xuICAgICAgICAgICAgbW9kZTogcmVzb2x2ZWQucmVxdWVzdHNNb2RlLFxuICAgICAgICAgICAgc2VydmVyOiByZXNvbHZlZC5yZXF1ZXN0c1NlcnZlcixcbiAgICAgICAgICAgIHRvcGljOiByZXNvbHZlZC5yZXF1ZXN0c1RvcGljLFxuICAgICAgICAgICAgbWF4U2l6ZTogTnVtYmVyLnBhcnNlSW50KHJlc29sdmVkLnJlcXVlc3RzTWF4U2l6ZSksXG4gICAgICAgIH0sXG4gICAgICAgIGRhdGEsXG4gICAgICAgIHNsb3dRdWVyaWVzRGF0YSxcbiAgICAgICAgYXV0aG9yaXphdGlvbjoge1xuICAgICAgICAgICAgZW5kcG9pbnQ6IHJlc29sdmVkLmF1dGhFbmRwb2ludCxcbiAgICAgICAgfSxcbiAgICAgICAgbWFtQWNjZXNzS2V5czogbmV3IFNldCgocmVzb2x2ZWQubWFtQWNjZXNzS2V5cyB8fCAnJykuc3BsaXQoJywnKSksXG4gICAgICAgIGphZWdlcjoge1xuICAgICAgICAgICAgZW5kcG9pbnQ6IHJlc29sdmVkLmphZWdlckVuZHBvaW50LFxuICAgICAgICAgICAgc2VydmljZTogcmVzb2x2ZWQudHJhY2VTZXJ2aWNlLFxuICAgICAgICAgICAgdGFnczogcGFyc2VUYWdzKHJlc29sdmVkLnRyYWNlVGFncyksXG4gICAgICAgIH0sXG4gICAgICAgIHN0YXRzZDoge1xuICAgICAgICAgICAgc2VydmVyOiByZXNvbHZlZC5zdGF0c2RTZXJ2ZXIsXG4gICAgICAgICAgICB0YWdzOiAocmVzb2x2ZWQuc3RhdHNkVGFncyB8fCAnJykuc3BsaXQoJywnKS5tYXAoeCA9PiB4LnRyaW0oKSkuZmlsdGVyKHggPT4geCksXG4gICAgICAgIH0sXG4gICAgICAgIG5ldHdvcmtOYW1lLFxuICAgICAgICBjYWNoZUtleVByZWZpeCxcbiAgICAgICAgZW5kcG9pbnRzOiAocmVzb2x2ZWQuZW5kcG9pbnRzIHx8ICcnKS5zcGxpdCgnLCcpLm1hcCh4ID0+IHgudHJpbSgpKS5maWx0ZXIoeCA9PiB4KVxuICAgIH07XG59XG5cbi8vIEludGVybmFsc1xuXG5mdW5jdGlvbiBnZXRJcCgpOiBzdHJpbmcge1xuICAgIGNvbnN0IGlwdjQgPSAoT2JqZWN0LnZhbHVlcyhvcy5uZXR3b3JrSW50ZXJmYWNlcygpKTogYW55KVxuICAgICAgICAucmVkdWNlKChhY2MsIHgpID0+IGFjYy5jb25jYXQoeCksIFtdKVxuICAgICAgICAuZmluZCh4ID0+IHguZmFtaWx5ID09PSAnSVB2NCcgJiYgIXguaW50ZXJuYWwpO1xuICAgIHJldHVybiBpcHY0ICYmIGlwdjQuYWRkcmVzcztcbn1cblxuXG5mdW5jdGlvbiBwYXJzZVRhZ3Moczogc3RyaW5nKTogeyBbc3RyaW5nXTogc3RyaW5nIH0ge1xuICAgIGNvbnN0IHRhZ3M6IHsgW3N0cmluZ106IHN0cmluZyB9ID0ge307XG4gICAgcy5zcGxpdCgnLCcpLmZvckVhY2goKHQpID0+IHtcbiAgICAgICAgY29uc3QgaSA9IHQuaW5kZXhPZignPScpO1xuICAgICAgICBpZiAoaSA+PSAwKSB7XG4gICAgICAgICAgICB0YWdzW3Quc3Vic3RyKDAsIGkpXSA9IHQuc3Vic3RyKGkgKyAxKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRhZ3NbdF0gPSAnJztcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiB0YWdzO1xuXG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlRGF0YUNvbmZpZyh2YWx1ZXM6IGFueSk6IHtcbiAgICBkYXRhOiBRRGF0YVByb3ZpZGVyc0NvbmZpZyxcbiAgICBzbG93UXVlcmllc0RhdGE6IFFEYXRhUHJvdmlkZXJzQ29uZmlnLFxuICAgIG5ldHdvcmtOYW1lOiBzdHJpbmcsXG4gICAgY2FjaGVLZXlQcmVmaXg6IHN0cmluZyxcbn0ge1xuICAgIGZ1bmN0aW9uIHBhcnNlKHByZWZpeDogc3RyaW5nLCBkZWZNYXhTb2NrZXRzOiBudW1iZXIpOiBRRGF0YVByb3ZpZGVyc0NvbmZpZyB7XG4gICAgICAgIGNvbnN0IG9wdCA9IChzdWZmaXg6IHN0cmluZyk6IHN0cmluZyA9PiB2YWx1ZXNbYCR7cHJlZml4fSR7c3VmZml4fWBdIHx8ICcnO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbXV0OiBwYXJzZUFyYW5nb0NvbmZpZyhvcHQoJ011dCcpLCBkZWZNYXhTb2NrZXRzKSxcbiAgICAgICAgICAgIGhvdDogcGFyc2VBcmFuZ29Db25maWcob3B0KCdIb3QnKSwgZGVmTWF4U29ja2V0cyksXG4gICAgICAgICAgICBjb2xkOiBwYXJzZUFyYW5nb0VuZHBvaW50TGlzdChvcHQoJ0NvbGQnKSwgZGVmTWF4U29ja2V0cyksXG4gICAgICAgICAgICBjYWNoZTogcGFyc2VNZW1DYWNoZWRDb25maWcob3B0KCdDYWNoZScpKSxcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHsgbmV0d29ya05hbWUsIGNhY2hlS2V5UHJlZml4IH0gPSB2YWx1ZXM7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBkYXRhOiBwYXJzZSgnZGF0YScsIERFRkFVTFRfQVJBTkdPX01BWF9TT0NLRVRTKSxcbiAgICAgICAgc2xvd1F1ZXJpZXNEYXRhOiBwYXJzZSgnc2xvd1F1ZXJpZXMnLCBERUZBVUxUX1NMT1dfUVVFUklFU19BUkFOR09fTUFYX1NPQ0tFVFMpLFxuICAgICAgICBuZXR3b3JrTmFtZSxcbiAgICAgICAgY2FjaGVLZXlQcmVmaXgsXG4gICAgfTtcbn1cbiJdfQ==