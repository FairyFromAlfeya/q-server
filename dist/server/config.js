"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _os = _interopRequireDefault(require("os"));

/*
 * Copyright 2018-2019 TON DEV SOLUTIONS LTD.
 *
 * Licensed under the SOFTWARE EVALUATION License (the "License"); you may not use
 * this file except in compliance with the License.  You may obtain a copy of the
 * License at:
 *
 * http://www.ton.dev/licenses
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific TON DEV software governing permissions and
 * limitations under the License.
 */
function getIp() {
  var ipv4 = Object.values(_os["default"].networkInterfaces()).flatMap(function (x) {
    return x;
  }).find(function (x) {
    return x.family === 'IPv4' && !x.internal;
  });
  return ipv4 && ipv4.address;
}

var MODE = {
  production: 'production',
  development: 'development'
};
var env = {
  mode: process.env.Q_MODE || MODE.production,
  ssl: (process.env.Q_SSL || '') === 'true',
  database_server: process.env.Q_DATABASE_SERVER || 'arangodb:8529',
  database_name: process.env.Q_DATABASE_NAME || 'blockchain',
  server_host: process.env.Q_SERVER_HOST || getIp(),
  server_port: Number(process.env.Q_SERVER_PORT || 4000)
};
var config = {
  MODE: MODE,
  mode: env.mode,
  server: {
    host: env.server_host,
    port: env.server_port,
    ssl: env.ssl ? {
      port: 4001,
      key: 'server/ssl/server.key',
      cert: 'server/ssl/server.crt'
    } : null
  },
  database: {
    server: env.mode === MODE.production ? env.database_server : 'services.tonlabs.io:8529',
    name: env.database_name
  },
  listener: {
    restartTimeout: 1000
  }
};
var _default = config;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NlcnZlci9jb25maWcuanMiXSwibmFtZXMiOlsiZ2V0SXAiLCJpcHY0IiwiT2JqZWN0IiwidmFsdWVzIiwib3MiLCJuZXR3b3JrSW50ZXJmYWNlcyIsImZsYXRNYXAiLCJ4IiwiZmluZCIsImZhbWlseSIsImludGVybmFsIiwiYWRkcmVzcyIsIk1PREUiLCJwcm9kdWN0aW9uIiwiZGV2ZWxvcG1lbnQiLCJlbnYiLCJtb2RlIiwicHJvY2VzcyIsIlFfTU9ERSIsInNzbCIsIlFfU1NMIiwiZGF0YWJhc2Vfc2VydmVyIiwiUV9EQVRBQkFTRV9TRVJWRVIiLCJkYXRhYmFzZV9uYW1lIiwiUV9EQVRBQkFTRV9OQU1FIiwic2VydmVyX2hvc3QiLCJRX1NFUlZFUl9IT1NUIiwic2VydmVyX3BvcnQiLCJOdW1iZXIiLCJRX1NFUlZFUl9QT1JUIiwiY29uZmlnIiwic2VydmVyIiwiaG9zdCIsInBvcnQiLCJrZXkiLCJjZXJ0IiwiZGF0YWJhc2UiLCJuYW1lIiwibGlzdGVuZXIiLCJyZXN0YXJ0VGltZW91dCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBaUJBOztBQWpCQTs7Ozs7Ozs7Ozs7Ozs7O0FBbUJBLFNBQVNBLEtBQVQsR0FBeUI7QUFDckIsTUFBTUMsSUFBSSxHQUFJQyxNQUFNLENBQUNDLE1BQVAsQ0FBY0MsZUFBR0MsaUJBQUgsRUFBZCxDQUFELENBQ1JDLE9BRFEsQ0FDQSxVQUFBQyxDQUFDO0FBQUEsV0FBSUEsQ0FBSjtBQUFBLEdBREQsRUFFUkMsSUFGUSxDQUVILFVBQUFELENBQUM7QUFBQSxXQUFJQSxDQUFDLENBQUNFLE1BQUYsS0FBYSxNQUFiLElBQXVCLENBQUNGLENBQUMsQ0FBQ0csUUFBOUI7QUFBQSxHQUZFLENBQWI7QUFHQSxTQUFPVCxJQUFJLElBQUlBLElBQUksQ0FBQ1UsT0FBcEI7QUFDSDs7QUFFRCxJQUFNQyxJQUFJLEdBQUc7QUFDVEMsRUFBQUEsVUFBVSxFQUFFLFlBREg7QUFFVEMsRUFBQUEsV0FBVyxFQUFFO0FBRkosQ0FBYjtBQUtBLElBQU1DLEdBQUcsR0FBRztBQUNSQyxFQUFBQSxJQUFJLEVBQUVDLE9BQU8sQ0FBQ0YsR0FBUixDQUFZRyxNQUFaLElBQXNCTixJQUFJLENBQUNDLFVBRHpCO0FBRVJNLEVBQUFBLEdBQUcsRUFBRSxDQUFDRixPQUFPLENBQUNGLEdBQVIsQ0FBWUssS0FBWixJQUFxQixFQUF0QixNQUE4QixNQUYzQjtBQUdSQyxFQUFBQSxlQUFlLEVBQUVKLE9BQU8sQ0FBQ0YsR0FBUixDQUFZTyxpQkFBWixJQUFpQyxlQUgxQztBQUlSQyxFQUFBQSxhQUFhLEVBQUVOLE9BQU8sQ0FBQ0YsR0FBUixDQUFZUyxlQUFaLElBQStCLFlBSnRDO0FBS1JDLEVBQUFBLFdBQVcsRUFBRVIsT0FBTyxDQUFDRixHQUFSLENBQVlXLGFBQVosSUFBNkIxQixLQUFLLEVBTHZDO0FBTVIyQixFQUFBQSxXQUFXLEVBQUVDLE1BQU0sQ0FBQ1gsT0FBTyxDQUFDRixHQUFSLENBQVljLGFBQVosSUFBNkIsSUFBOUI7QUFOWCxDQUFaO0FBOEJBLElBQU1DLE1BQWUsR0FBRztBQUNwQmxCLEVBQUFBLElBQUksRUFBSkEsSUFEb0I7QUFFcEJJLEVBQUFBLElBQUksRUFBRUQsR0FBRyxDQUFDQyxJQUZVO0FBR3BCZSxFQUFBQSxNQUFNLEVBQUU7QUFDSkMsSUFBQUEsSUFBSSxFQUFFakIsR0FBRyxDQUFDVSxXQUROO0FBRUpRLElBQUFBLElBQUksRUFBRWxCLEdBQUcsQ0FBQ1ksV0FGTjtBQUdKUixJQUFBQSxHQUFHLEVBQUVKLEdBQUcsQ0FBQ0ksR0FBSixHQUNDO0FBQ0VjLE1BQUFBLElBQUksRUFBRSxJQURSO0FBRUVDLE1BQUFBLEdBQUcsRUFBRSx1QkFGUDtBQUdFQyxNQUFBQSxJQUFJLEVBQUU7QUFIUixLQURELEdBTUM7QUFURixHQUhZO0FBY3BCQyxFQUFBQSxRQUFRLEVBQUU7QUFDTkwsSUFBQUEsTUFBTSxFQUFFaEIsR0FBRyxDQUFDQyxJQUFKLEtBQWFKLElBQUksQ0FBQ0MsVUFBbEIsR0FBK0JFLEdBQUcsQ0FBQ00sZUFBbkMsR0FBcUQsMEJBRHZEO0FBRU5nQixJQUFBQSxJQUFJLEVBQUV0QixHQUFHLENBQUNRO0FBRkosR0FkVTtBQWtCcEJlLEVBQUFBLFFBQVEsRUFBRTtBQUNOQyxJQUFBQSxjQUFjLEVBQUU7QUFEVjtBQWxCVSxDQUF4QjtlQXVCZVQsTSIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgMjAxOC0yMDE5IFRPTiBERVYgU09MVVRJT05TIExURC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgU09GVFdBUkUgRVZBTFVBVElPTiBMaWNlbnNlICh0aGUgXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2VcbiAqIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZVxuICogTGljZW5zZSBhdDpcbiAqXG4gKiBodHRwOi8vd3d3LnRvbi5kZXYvbGljZW5zZXNcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIFRPTiBERVYgc29mdHdhcmUgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuLy8gQGZsb3dcbmltcG9ydCBvcyBmcm9tICdvcyc7XG5cbmZ1bmN0aW9uIGdldElwKCk6IHN0cmluZyB7XG4gICAgY29uc3QgaXB2NCA9IChPYmplY3QudmFsdWVzKG9zLm5ldHdvcmtJbnRlcmZhY2VzKCkpOiBhbnkpXG4gICAgICAgIC5mbGF0TWFwKHggPT4geClcbiAgICAgICAgLmZpbmQoeCA9PiB4LmZhbWlseSA9PT0gJ0lQdjQnICYmICF4LmludGVybmFsKTtcbiAgICByZXR1cm4gaXB2NCAmJiBpcHY0LmFkZHJlc3M7XG59XG5cbmNvbnN0IE1PREUgPSB7XG4gICAgcHJvZHVjdGlvbjogJ3Byb2R1Y3Rpb24nLFxuICAgIGRldmVsb3BtZW50OiAnZGV2ZWxvcG1lbnQnLFxufTtcblxuY29uc3QgZW52ID0ge1xuICAgIG1vZGU6IHByb2Nlc3MuZW52LlFfTU9ERSB8fCBNT0RFLnByb2R1Y3Rpb24sXG4gICAgc3NsOiAocHJvY2Vzcy5lbnYuUV9TU0wgfHwgJycpID09PSAndHJ1ZScsXG4gICAgZGF0YWJhc2Vfc2VydmVyOiBwcm9jZXNzLmVudi5RX0RBVEFCQVNFX1NFUlZFUiB8fCAnYXJhbmdvZGI6ODUyOScsXG4gICAgZGF0YWJhc2VfbmFtZTogcHJvY2Vzcy5lbnYuUV9EQVRBQkFTRV9OQU1FIHx8ICdibG9ja2NoYWluJyxcbiAgICBzZXJ2ZXJfaG9zdDogcHJvY2Vzcy5lbnYuUV9TRVJWRVJfSE9TVCB8fCBnZXRJcCgpLFxuICAgIHNlcnZlcl9wb3J0OiBOdW1iZXIocHJvY2Vzcy5lbnYuUV9TRVJWRVJfUE9SVCB8fCA0MDAwKSxcbn07XG5cbmV4cG9ydCB0eXBlIFFDb25maWcgPSB7XG4gICAgTU9ERTogeyBwcm9kdWN0aW9uOiBzdHJpbmcsIGRldmVsb3BtZW50OiBzdHJpbmcgfSxcbiAgICBtb2RlOiBzdHJpbmcsXG4gICAgc2VydmVyOiB7XG4gICAgICAgIGhvc3Q6IHN0cmluZyxcbiAgICAgICAgcG9ydDogbnVtYmVyLFxuICAgICAgICBzc2w6ID97XG4gICAgICAgICAgICBwb3J0OiBudW1iZXIsXG4gICAgICAgICAgICBrZXk6IHN0cmluZyxcbiAgICAgICAgICAgIGNlcnQ6IHN0cmluZyxcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIGRhdGFiYXNlOiB7XG4gICAgICAgIHNlcnZlcjogc3RyaW5nLFxuICAgICAgICBuYW1lOiBzdHJpbmdcbiAgICB9LFxuICAgIGxpc3RlbmVyOiB7XG4gICAgICAgIHJlc3RhcnRUaW1lb3V0OiBudW1iZXJcbiAgICB9XG59XG5cbmNvbnN0IGNvbmZpZzogUUNvbmZpZyA9IHtcbiAgICBNT0RFLFxuICAgIG1vZGU6IGVudi5tb2RlLFxuICAgIHNlcnZlcjoge1xuICAgICAgICBob3N0OiBlbnYuc2VydmVyX2hvc3QsXG4gICAgICAgIHBvcnQ6IGVudi5zZXJ2ZXJfcG9ydCxcbiAgICAgICAgc3NsOiBlbnYuc3NsXG4gICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICBwb3J0OiA0MDAxLFxuICAgICAgICAgICAgICAgIGtleTogJ3NlcnZlci9zc2wvc2VydmVyLmtleScsXG4gICAgICAgICAgICAgICAgY2VydDogJ3NlcnZlci9zc2wvc2VydmVyLmNydCcsXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICA6IG51bGwsXG4gICAgfSxcbiAgICBkYXRhYmFzZToge1xuICAgICAgICBzZXJ2ZXI6IGVudi5tb2RlID09PSBNT0RFLnByb2R1Y3Rpb24gPyBlbnYuZGF0YWJhc2Vfc2VydmVyIDogJ3NlcnZpY2VzLnRvbmxhYnMuaW86ODUyOScsXG4gICAgICAgIG5hbWU6IGVudi5kYXRhYmFzZV9uYW1lXG4gICAgfSxcbiAgICBsaXN0ZW5lcjoge1xuICAgICAgICByZXN0YXJ0VGltZW91dDogMTAwMFxuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNvbmZpZztcbiJdfQ==