"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ensureProtocol = ensureProtocol;
exports.STATS = exports.BLOCKCHAIN_DB = exports.QRequestsMode = void 0;

var _dbTypes = require("./db-types");

/*
 * Copyright 2018-2020 TON DEV SOLUTIONS LTD.
 *
 * Licensed under the SOFTWARE EVALUATION License (the "License"); you may not use
 * this file except in compliance with the License.  You may obtain a copy of the
 * License at:
 *
 * http://www.ton.dev/licenses
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific TON DEV software governing permissions and
 * limitations under the License.
 */
const QRequestsMode = {
  kafka: 'kafka',
  rest: 'rest,'
};
exports.QRequestsMode = QRequestsMode;

function ensureProtocol(address, defaultProtocol) {
  return /^\w+:\/\//gi.test(address) ? address : `${defaultProtocol}://${address}`;
}

const INDEXES = {
  blocks: ['seq_no, gen_utime', 'gen_utime', 'workchain_id, shard, seq_no', 'workchain_id, seq_no', 'workchain_id, gen_utime', 'master.min_shard_gen_utime'],
  accounts: ['last_trans_lt', 'balance'],
  messages: ['block_id', 'value, created_at', 'src, value, created_at', 'dst, value, created_at', 'src, created_at', 'dst, created_at', 'created_lt', 'created_at'],
  transactions: ['block_id', 'in_msg', 'out_msgs[*]', 'account_addr, now', 'now', 'lt', 'account_addr, orig_status, end_status', 'now, account_addr, lt'],
  blocks_signatures: []
};
const BLOCKCHAIN_DB = {
  name: 'blockchain',
  collections: {}
};
exports.BLOCKCHAIN_DB = BLOCKCHAIN_DB;
Object.entries(INDEXES).forEach(([name, indexes]) => {
  BLOCKCHAIN_DB.collections[name] = {
    name,
    indexes: ['_key', ...indexes].map(_dbTypes.parseIndex)
  };
});
const STATS = {
  prefix: 'qserver.',
  doc: {
    count: 'doc.count'
  },
  query: {
    count: 'query.count',
    time: 'query.time',
    active: 'query.active'
  },
  subscription: {
    active: 'subscription.active'
  },
  waitFor: {
    active: 'waitfor.active'
  }
};
exports.STATS = STATS;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NlcnZlci9jb25maWcuanMiXSwibmFtZXMiOlsiUVJlcXVlc3RzTW9kZSIsImthZmthIiwicmVzdCIsImVuc3VyZVByb3RvY29sIiwiYWRkcmVzcyIsImRlZmF1bHRQcm90b2NvbCIsInRlc3QiLCJJTkRFWEVTIiwiYmxvY2tzIiwiYWNjb3VudHMiLCJtZXNzYWdlcyIsInRyYW5zYWN0aW9ucyIsImJsb2Nrc19zaWduYXR1cmVzIiwiQkxPQ0tDSEFJTl9EQiIsIm5hbWUiLCJjb2xsZWN0aW9ucyIsIk9iamVjdCIsImVudHJpZXMiLCJmb3JFYWNoIiwiaW5kZXhlcyIsIm1hcCIsInBhcnNlSW5kZXgiLCJTVEFUUyIsInByZWZpeCIsImRvYyIsImNvdW50IiwicXVlcnkiLCJ0aW1lIiwiYWN0aXZlIiwic3Vic2NyaXB0aW9uIiwid2FpdEZvciJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFrQkE7O0FBbEJBOzs7Ozs7Ozs7Ozs7Ozs7QUFvQk8sTUFBTUEsYUFBYSxHQUFHO0FBQ3pCQyxFQUFBQSxLQUFLLEVBQUUsT0FEa0I7QUFFekJDLEVBQUFBLElBQUksRUFBRTtBQUZtQixDQUF0Qjs7O0FBMENBLFNBQVNDLGNBQVQsQ0FBd0JDLE9BQXhCLEVBQXlDQyxlQUF6QyxFQUEwRTtBQUM3RSxTQUFPLGNBQWNDLElBQWQsQ0FBbUJGLE9BQW5CLElBQThCQSxPQUE5QixHQUF5QyxHQUFFQyxlQUFnQixNQUFLRCxPQUFRLEVBQS9FO0FBQ0g7O0FBRUQsTUFBTUcsT0FFTCxHQUFHO0FBQ0FDLEVBQUFBLE1BQU0sRUFBRSxDQUNKLG1CQURJLEVBRUosV0FGSSxFQUdKLDZCQUhJLEVBSUosc0JBSkksRUFLSix5QkFMSSxFQU1KLDRCQU5JLENBRFI7QUFTQUMsRUFBQUEsUUFBUSxFQUFFLENBQ04sZUFETSxFQUVOLFNBRk0sQ0FUVjtBQWFBQyxFQUFBQSxRQUFRLEVBQUUsQ0FDTixVQURNLEVBRU4sbUJBRk0sRUFHTix3QkFITSxFQUlOLHdCQUpNLEVBS04saUJBTE0sRUFNTixpQkFOTSxFQU9OLFlBUE0sRUFRTixZQVJNLENBYlY7QUF1QkFDLEVBQUFBLFlBQVksRUFBRSxDQUNWLFVBRFUsRUFFVixRQUZVLEVBR1YsYUFIVSxFQUlWLG1CQUpVLEVBS1YsS0FMVSxFQU1WLElBTlUsRUFPVix1Q0FQVSxFQVFWLHVCQVJVLENBdkJkO0FBaUNBQyxFQUFBQSxpQkFBaUIsRUFBRTtBQWpDbkIsQ0FGSjtBQXNETyxNQUFNQyxhQUFxQixHQUFHO0FBQ2pDQyxFQUFBQSxJQUFJLEVBQUUsWUFEMkI7QUFFakNDLEVBQUFBLFdBQVcsRUFBRTtBQUZvQixDQUE5Qjs7QUFLUEMsTUFBTSxDQUFDQyxPQUFQLENBQWVWLE9BQWYsRUFBd0JXLE9BQXhCLENBQWdDLENBQUMsQ0FBQ0osSUFBRCxFQUFPSyxPQUFQLENBQUQsS0FBcUI7QUFDakROLEVBQUFBLGFBQWEsQ0FBQ0UsV0FBZCxDQUEwQkQsSUFBMUIsSUFBa0M7QUFDOUJBLElBQUFBLElBRDhCO0FBRTlCSyxJQUFBQSxPQUFPLEVBQUUsQ0FBQyxNQUFELEVBQVMsR0FBSUEsT0FBYixFQUE0QkMsR0FBNUIsQ0FBZ0NDLG1CQUFoQztBQUZxQixHQUFsQztBQUlILENBTEQ7QUFPTyxNQUFNQyxLQUFLLEdBQUc7QUFDakJDLEVBQUFBLE1BQU0sRUFBRSxVQURTO0FBRWpCQyxFQUFBQSxHQUFHLEVBQUU7QUFDREMsSUFBQUEsS0FBSyxFQUFFO0FBRE4sR0FGWTtBQUtqQkMsRUFBQUEsS0FBSyxFQUFFO0FBQ0hELElBQUFBLEtBQUssRUFBRSxhQURKO0FBRUhFLElBQUFBLElBQUksRUFBRSxZQUZIO0FBR0hDLElBQUFBLE1BQU0sRUFBRTtBQUhMLEdBTFU7QUFVakJDLEVBQUFBLFlBQVksRUFBRTtBQUNWRCxJQUFBQSxNQUFNLEVBQUU7QUFERSxHQVZHO0FBYWpCRSxFQUFBQSxPQUFPLEVBQUU7QUFDTEYsSUFBQUEsTUFBTSxFQUFFO0FBREg7QUFiUSxDQUFkIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAyMDE4LTIwMjAgVE9OIERFViBTT0xVVElPTlMgTFRELlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBTT0ZUV0FSRSBFVkFMVUFUSU9OIExpY2Vuc2UgKHRoZSBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZVxuICogdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlXG4gKiBMaWNlbnNlIGF0OlxuICpcbiAqIGh0dHA6Ly93d3cudG9uLmRldi9saWNlbnNlc1xuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgVE9OIERFViBzb2Z0d2FyZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG4vLyBAZmxvd1xuXG5pbXBvcnQgeyBwYXJzZUluZGV4IH0gZnJvbSBcIi4vZGItdHlwZXNcIjtcblxuZXhwb3J0IGNvbnN0IFFSZXF1ZXN0c01vZGUgPSB7XG4gICAga2Fma2E6ICdrYWZrYScsXG4gICAgcmVzdDogJ3Jlc3QsJ1xufTtcblxuZXhwb3J0IHR5cGUgUURiQ29uZmlnID0ge1xuICAgIHNlcnZlcjogc3RyaW5nLFxuICAgIG5hbWU6IHN0cmluZyxcbiAgICBhdXRoOiBzdHJpbmcsXG4gICAgbWF4U29ja2V0czogbnVtYmVyLFxufTtcblxuZXhwb3J0IHR5cGUgUUNvbmZpZyA9IHtcbiAgICBzZXJ2ZXI6IHtcbiAgICAgICAgaG9zdDogc3RyaW5nLFxuICAgICAgICBwb3J0OiBudW1iZXIsXG4gICAgICAgIHJwY1BvcnQ6IHN0cmluZyxcbiAgICB9LFxuICAgIHJlcXVlc3RzOiB7XG4gICAgICAgIG1vZGU6ICdrYWZrYScgfCAncmVzdCcsXG4gICAgICAgIHNlcnZlcjogc3RyaW5nLFxuICAgICAgICB0b3BpYzogc3RyaW5nLFxuICAgIH0sXG4gICAgZGF0YWJhc2U6IFFEYkNvbmZpZyxcbiAgICBzbG93RGF0YWJhc2U6IFFEYkNvbmZpZyxcbiAgICBsaXN0ZW5lcjoge1xuICAgICAgICByZXN0YXJ0VGltZW91dDogbnVtYmVyXG4gICAgfSxcbiAgICBhdXRob3JpemF0aW9uOiB7XG4gICAgICAgIGVuZHBvaW50OiBzdHJpbmcsXG4gICAgfSxcbiAgICBqYWVnZXI6IHtcbiAgICAgICAgZW5kcG9pbnQ6IHN0cmluZyxcbiAgICAgICAgc2VydmljZTogc3RyaW5nLFxuICAgICAgICB0YWdzOiB7IFtzdHJpbmddOiBzdHJpbmcgfVxuICAgIH0sXG4gICAgc3RhdHNkOiB7XG4gICAgICAgIHNlcnZlcjogc3RyaW5nLFxuICAgIH0sXG4gICAgbWFtQWNjZXNzS2V5czogU2V0PHN0cmluZz4sXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlbnN1cmVQcm90b2NvbChhZGRyZXNzOiBzdHJpbmcsIGRlZmF1bHRQcm90b2NvbDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICByZXR1cm4gL15cXHcrOlxcL1xcLy9naS50ZXN0KGFkZHJlc3MpID8gYWRkcmVzcyA6IGAke2RlZmF1bHRQcm90b2NvbH06Ly8ke2FkZHJlc3N9YDtcbn1cblxuY29uc3QgSU5ERVhFUzoge1xuICAgIFtzdHJpbmddOiBzdHJpbmdbXSxcbn0gPSB7XG4gICAgYmxvY2tzOiBbXG4gICAgICAgICdzZXFfbm8sIGdlbl91dGltZScsXG4gICAgICAgICdnZW5fdXRpbWUnLFxuICAgICAgICAnd29ya2NoYWluX2lkLCBzaGFyZCwgc2VxX25vJyxcbiAgICAgICAgJ3dvcmtjaGFpbl9pZCwgc2VxX25vJyxcbiAgICAgICAgJ3dvcmtjaGFpbl9pZCwgZ2VuX3V0aW1lJyxcbiAgICAgICAgJ21hc3Rlci5taW5fc2hhcmRfZ2VuX3V0aW1lJyxcbiAgICBdLFxuICAgIGFjY291bnRzOiBbXG4gICAgICAgICdsYXN0X3RyYW5zX2x0JyxcbiAgICAgICAgJ2JhbGFuY2UnLFxuICAgIF0sXG4gICAgbWVzc2FnZXM6IFtcbiAgICAgICAgJ2Jsb2NrX2lkJyxcbiAgICAgICAgJ3ZhbHVlLCBjcmVhdGVkX2F0JyxcbiAgICAgICAgJ3NyYywgdmFsdWUsIGNyZWF0ZWRfYXQnLFxuICAgICAgICAnZHN0LCB2YWx1ZSwgY3JlYXRlZF9hdCcsXG4gICAgICAgICdzcmMsIGNyZWF0ZWRfYXQnLFxuICAgICAgICAnZHN0LCBjcmVhdGVkX2F0JyxcbiAgICAgICAgJ2NyZWF0ZWRfbHQnLFxuICAgICAgICAnY3JlYXRlZF9hdCcsXG4gICAgXSxcbiAgICB0cmFuc2FjdGlvbnM6IFtcbiAgICAgICAgJ2Jsb2NrX2lkJyxcbiAgICAgICAgJ2luX21zZycsXG4gICAgICAgICdvdXRfbXNnc1sqXScsXG4gICAgICAgICdhY2NvdW50X2FkZHIsIG5vdycsXG4gICAgICAgICdub3cnLFxuICAgICAgICAnbHQnLFxuICAgICAgICAnYWNjb3VudF9hZGRyLCBvcmlnX3N0YXR1cywgZW5kX3N0YXR1cycsXG4gICAgICAgICdub3csIGFjY291bnRfYWRkciwgbHQnLFxuICAgIF0sXG4gICAgYmxvY2tzX3NpZ25hdHVyZXM6IFtdLFxufTtcblxuZXhwb3J0IHR5cGUgSW5kZXhJbmZvID0ge1xuICAgIGZpZWxkczogc3RyaW5nW10sXG59XG5cbmV4cG9ydCB0eXBlIENvbGxlY3Rpb25JbmZvID0ge1xuICAgIG5hbWU6IHN0cmluZyxcbiAgICBpbmRleGVzOiBJbmRleEluZm9bXSxcbn07XG5cbmV4cG9ydCB0eXBlIERiSW5mbyA9IHtcbiAgICBuYW1lOiBzdHJpbmcsXG4gICAgY29sbGVjdGlvbnM6IHtcbiAgICAgICAgW3N0cmluZ106IENvbGxlY3Rpb25JbmZvLFxuICAgIH1cbn1cblxuZXhwb3J0IGNvbnN0IEJMT0NLQ0hBSU5fREI6IERiSW5mbyA9IHtcbiAgICBuYW1lOiAnYmxvY2tjaGFpbicsXG4gICAgY29sbGVjdGlvbnM6IHt9XG59O1xuXG5PYmplY3QuZW50cmllcyhJTkRFWEVTKS5mb3JFYWNoKChbbmFtZSwgaW5kZXhlc10pID0+IHtcbiAgICBCTE9DS0NIQUlOX0RCLmNvbGxlY3Rpb25zW25hbWVdID0ge1xuICAgICAgICBuYW1lLFxuICAgICAgICBpbmRleGVzOiBbJ19rZXknLCAuLi4oaW5kZXhlczogYW55KV0ubWFwKHBhcnNlSW5kZXgpLFxuICAgIH1cbn0pO1xuXG5leHBvcnQgY29uc3QgU1RBVFMgPSB7XG4gICAgcHJlZml4OiAncXNlcnZlci4nLFxuICAgIGRvYzoge1xuICAgICAgICBjb3VudDogJ2RvYy5jb3VudCcsXG4gICAgfSxcbiAgICBxdWVyeToge1xuICAgICAgICBjb3VudDogJ3F1ZXJ5LmNvdW50JyxcbiAgICAgICAgdGltZTogJ3F1ZXJ5LnRpbWUnLFxuICAgICAgICBhY3RpdmU6ICdxdWVyeS5hY3RpdmUnLFxuICAgIH0sXG4gICAgc3Vic2NyaXB0aW9uOiB7XG4gICAgICAgIGFjdGl2ZTogJ3N1YnNjcmlwdGlvbi5hY3RpdmUnLFxuICAgIH0sXG4gICAgd2FpdEZvcjoge1xuICAgICAgICBhY3RpdmU6ICd3YWl0Zm9yLmFjdGl2ZScsXG4gICAgfSxcbn07XG5cbiJdfQ==