"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ensureProtocol = ensureProtocol;
exports.STATS = exports.BLOCKCHAIN_DB = exports.QRequestsMode = void 0;

var _dbTypes = require("./db-types");

/*
 * Copyright 2018-2020 TON DEV SOLUTIONS LTD.
 *
 * Licensed under the SOFTWARE EVALUATION License (the "License"); you may not use
 * this file except in compliance with the License.  You may obtain a copy of the
 * License at:
 *
 * http://www.ton.dev/licenses
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific TON DEV software governing permissions and
 * limitations under the License.
 */
const QRequestsMode = {
  kafka: 'kafka',
  rest: 'rest,'
};
exports.QRequestsMode = QRequestsMode;

function ensureProtocol(address, defaultProtocol) {
  return /^\w+:\/\//gi.test(address) ? address : `${defaultProtocol}://${address}`;
}

const INDEXES = {
  blocks: ['seq_no, gen_utime', 'gen_utime', 'workchain_id, shard, seq_no', 'workchain_id, seq_no', 'workchain_id, gen_utime', 'master.min_shard_gen_utime'],
  accounts: ['last_trans_lt', 'balance'],
  messages: ['block_id', 'value, created_at', 'src, value, created_at', 'dst, value, created_at', 'src, created_at', 'dst, created_at', 'src, dst, created_at, _key', 'created_lt', 'created_at'],
  transactions: ['block_id', 'in_msg', 'out_msgs[*]', 'account_addr, now', 'now', 'lt', 'account_addr, orig_status, end_status', 'now, account_addr, lt'],
  blocks_signatures: ['signatures[*].node_id, gen_utime']
};
const BLOCKCHAIN_DB = {
  lastUpdateTime: 0,
  name: 'blockchain',
  collections: {}
};
exports.BLOCKCHAIN_DB = BLOCKCHAIN_DB;
Object.entries(INDEXES).forEach(([name, indexes]) => {
  BLOCKCHAIN_DB.collections[name] = {
    name,
    indexes: ['_key', ...indexes].map(_dbTypes.parseIndex)
  };
});
const STATS = {
  prefix: 'qserver.',
  doc: {
    count: 'doc.count'
  },
  post: {
    count: 'post.count',
    failed: 'post.failed'
  },
  query: {
    count: 'query.count',
    time: 'query.time',
    active: 'query.active',
    failed: 'query.failed',
    slow: 'query.slow'
  },
  subscription: {
    active: 'subscription.active'
  },
  waitFor: {
    active: 'waitfor.active'
  }
};
exports.STATS = STATS;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NlcnZlci9jb25maWcuanMiXSwibmFtZXMiOlsiUVJlcXVlc3RzTW9kZSIsImthZmthIiwicmVzdCIsImVuc3VyZVByb3RvY29sIiwiYWRkcmVzcyIsImRlZmF1bHRQcm90b2NvbCIsInRlc3QiLCJJTkRFWEVTIiwiYmxvY2tzIiwiYWNjb3VudHMiLCJtZXNzYWdlcyIsInRyYW5zYWN0aW9ucyIsImJsb2Nrc19zaWduYXR1cmVzIiwiQkxPQ0tDSEFJTl9EQiIsImxhc3RVcGRhdGVUaW1lIiwibmFtZSIsImNvbGxlY3Rpb25zIiwiT2JqZWN0IiwiZW50cmllcyIsImZvckVhY2giLCJpbmRleGVzIiwibWFwIiwicGFyc2VJbmRleCIsIlNUQVRTIiwicHJlZml4IiwiZG9jIiwiY291bnQiLCJwb3N0IiwiZmFpbGVkIiwicXVlcnkiLCJ0aW1lIiwiYWN0aXZlIiwic2xvdyIsInN1YnNjcmlwdGlvbiIsIndhaXRGb3IiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBa0JBOztBQWxCQTs7Ozs7Ozs7Ozs7Ozs7O0FBb0JPLE1BQU1BLGFBQWEsR0FBRztBQUN6QkMsRUFBQUEsS0FBSyxFQUFFLE9BRGtCO0FBRXpCQyxFQUFBQSxJQUFJLEVBQUU7QUFGbUIsQ0FBdEI7OztBQTZDQSxTQUFTQyxjQUFULENBQXdCQyxPQUF4QixFQUF5Q0MsZUFBekMsRUFBMEU7QUFDN0UsU0FBTyxjQUFjQyxJQUFkLENBQW1CRixPQUFuQixJQUE4QkEsT0FBOUIsR0FBeUMsR0FBRUMsZUFBZ0IsTUFBS0QsT0FBUSxFQUEvRTtBQUNIOztBQUVELE1BQU1HLE9BRUwsR0FBRztBQUNBQyxFQUFBQSxNQUFNLEVBQUUsQ0FDSixtQkFESSxFQUVKLFdBRkksRUFHSiw2QkFISSxFQUlKLHNCQUpJLEVBS0oseUJBTEksRUFNSiw0QkFOSSxDQURSO0FBU0FDLEVBQUFBLFFBQVEsRUFBRSxDQUNOLGVBRE0sRUFFTixTQUZNLENBVFY7QUFhQUMsRUFBQUEsUUFBUSxFQUFFLENBQ04sVUFETSxFQUVOLG1CQUZNLEVBR04sd0JBSE0sRUFJTix3QkFKTSxFQUtOLGlCQUxNLEVBTU4saUJBTk0sRUFPTiw0QkFQTSxFQVFOLFlBUk0sRUFTTixZQVRNLENBYlY7QUF3QkFDLEVBQUFBLFlBQVksRUFBRSxDQUNWLFVBRFUsRUFFVixRQUZVLEVBR1YsYUFIVSxFQUlWLG1CQUpVLEVBS1YsS0FMVSxFQU1WLElBTlUsRUFPVix1Q0FQVSxFQVFWLHVCQVJVLENBeEJkO0FBa0NBQyxFQUFBQSxpQkFBaUIsRUFBRSxDQUNmLGtDQURlO0FBbENuQixDQUZKO0FBeURPLE1BQU1DLGFBQXFCLEdBQUc7QUFDakNDLEVBQUFBLGNBQWMsRUFBRSxDQURpQjtBQUVqQ0MsRUFBQUEsSUFBSSxFQUFFLFlBRjJCO0FBR2pDQyxFQUFBQSxXQUFXLEVBQUU7QUFIb0IsQ0FBOUI7O0FBTVBDLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlWCxPQUFmLEVBQXdCWSxPQUF4QixDQUFnQyxDQUFDLENBQUNKLElBQUQsRUFBT0ssT0FBUCxDQUFELEtBQXFCO0FBQ2pEUCxFQUFBQSxhQUFhLENBQUNHLFdBQWQsQ0FBMEJELElBQTFCLElBQWtDO0FBQzlCQSxJQUFBQSxJQUQ4QjtBQUU5QkssSUFBQUEsT0FBTyxFQUFFLENBQUMsTUFBRCxFQUFTLEdBQUlBLE9BQWIsRUFBNEJDLEdBQTVCLENBQWdDQyxtQkFBaEM7QUFGcUIsR0FBbEM7QUFJSCxDQUxEO0FBT08sTUFBTUMsS0FBSyxHQUFHO0FBQ2pCQyxFQUFBQSxNQUFNLEVBQUUsVUFEUztBQUVqQkMsRUFBQUEsR0FBRyxFQUFFO0FBQ0RDLElBQUFBLEtBQUssRUFBRTtBQUROLEdBRlk7QUFLakJDLEVBQUFBLElBQUksRUFBRTtBQUNGRCxJQUFBQSxLQUFLLEVBQUUsWUFETDtBQUVGRSxJQUFBQSxNQUFNLEVBQUU7QUFGTixHQUxXO0FBU2pCQyxFQUFBQSxLQUFLLEVBQUU7QUFDSEgsSUFBQUEsS0FBSyxFQUFFLGFBREo7QUFFSEksSUFBQUEsSUFBSSxFQUFFLFlBRkg7QUFHSEMsSUFBQUEsTUFBTSxFQUFFLGNBSEw7QUFJSEgsSUFBQUEsTUFBTSxFQUFFLGNBSkw7QUFLSEksSUFBQUEsSUFBSSxFQUFFO0FBTEgsR0FUVTtBQWdCakJDLEVBQUFBLFlBQVksRUFBRTtBQUNWRixJQUFBQSxNQUFNLEVBQUU7QUFERSxHQWhCRztBQW1CakJHLEVBQUFBLE9BQU8sRUFBRTtBQUNMSCxJQUFBQSxNQUFNLEVBQUU7QUFESDtBQW5CUSxDQUFkIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAyMDE4LTIwMjAgVE9OIERFViBTT0xVVElPTlMgTFRELlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBTT0ZUV0FSRSBFVkFMVUFUSU9OIExpY2Vuc2UgKHRoZSBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZVxuICogdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlXG4gKiBMaWNlbnNlIGF0OlxuICpcbiAqIGh0dHA6Ly93d3cudG9uLmRldi9saWNlbnNlc1xuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgVE9OIERFViBzb2Z0d2FyZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG4vLyBAZmxvd1xuXG5pbXBvcnQgeyBwYXJzZUluZGV4IH0gZnJvbSBcIi4vZGItdHlwZXNcIjtcblxuZXhwb3J0IGNvbnN0IFFSZXF1ZXN0c01vZGUgPSB7XG4gICAga2Fma2E6ICdrYWZrYScsXG4gICAgcmVzdDogJ3Jlc3QsJ1xufTtcblxuZXhwb3J0IHR5cGUgUURiQ29uZmlnID0ge1xuICAgIHNlcnZlcjogc3RyaW5nLFxuICAgIG5hbWU6IHN0cmluZyxcbiAgICBhdXRoOiBzdHJpbmcsXG4gICAgbWF4U29ja2V0czogbnVtYmVyLFxufTtcblxuZXhwb3J0IHR5cGUgUUNvbmZpZyA9IHtcbiAgICBzZXJ2ZXI6IHtcbiAgICAgICAgaG9zdDogc3RyaW5nLFxuICAgICAgICBwb3J0OiBudW1iZXIsXG4gICAgICAgIHJwY1BvcnQ6IHN0cmluZyxcbiAgICAgICAga2VlcEFsaXZlOiBudW1iZXIsXG4gICAgfSxcbiAgICByZXF1ZXN0czoge1xuICAgICAgICBtb2RlOiAna2Fma2EnIHwgJ3Jlc3QnLFxuICAgICAgICBzZXJ2ZXI6IHN0cmluZyxcbiAgICAgICAgdG9waWM6IHN0cmluZyxcbiAgICB9LFxuICAgIGRhdGFiYXNlOiBRRGJDb25maWcsXG4gICAgc2xvd0RhdGFiYXNlOiBRRGJDb25maWcsXG4gICAgbGlzdGVuZXI6IHtcbiAgICAgICAgcmVzdGFydFRpbWVvdXQ6IG51bWJlclxuICAgIH0sXG4gICAgYXV0aG9yaXphdGlvbjoge1xuICAgICAgICBlbmRwb2ludDogc3RyaW5nLFxuICAgIH0sXG4gICAgamFlZ2VyOiB7XG4gICAgICAgIGVuZHBvaW50OiBzdHJpbmcsXG4gICAgICAgIHNlcnZpY2U6IHN0cmluZyxcbiAgICAgICAgdGFnczogeyBbc3RyaW5nXTogc3RyaW5nIH1cbiAgICB9LFxuICAgIHN0YXRzZDoge1xuICAgICAgICBzZXJ2ZXI6IHN0cmluZyxcbiAgICAgICAgdGFnczogc3RyaW5nW10sXG4gICAgfSxcbiAgICBtYW1BY2Nlc3NLZXlzOiBTZXQ8c3RyaW5nPixcbiAgICBpc1Rlc3RzPzogYm9vbGVhbixcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGVuc3VyZVByb3RvY29sKGFkZHJlc3M6IHN0cmluZywgZGVmYXVsdFByb3RvY29sOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiAvXlxcdys6XFwvXFwvL2dpLnRlc3QoYWRkcmVzcykgPyBhZGRyZXNzIDogYCR7ZGVmYXVsdFByb3RvY29sfTovLyR7YWRkcmVzc31gO1xufVxuXG5jb25zdCBJTkRFWEVTOiB7XG4gICAgW3N0cmluZ106IHN0cmluZ1tdLFxufSA9IHtcbiAgICBibG9ja3M6IFtcbiAgICAgICAgJ3NlcV9ubywgZ2VuX3V0aW1lJyxcbiAgICAgICAgJ2dlbl91dGltZScsXG4gICAgICAgICd3b3JrY2hhaW5faWQsIHNoYXJkLCBzZXFfbm8nLFxuICAgICAgICAnd29ya2NoYWluX2lkLCBzZXFfbm8nLFxuICAgICAgICAnd29ya2NoYWluX2lkLCBnZW5fdXRpbWUnLFxuICAgICAgICAnbWFzdGVyLm1pbl9zaGFyZF9nZW5fdXRpbWUnLFxuICAgIF0sXG4gICAgYWNjb3VudHM6IFtcbiAgICAgICAgJ2xhc3RfdHJhbnNfbHQnLFxuICAgICAgICAnYmFsYW5jZScsXG4gICAgXSxcbiAgICBtZXNzYWdlczogW1xuICAgICAgICAnYmxvY2tfaWQnLFxuICAgICAgICAndmFsdWUsIGNyZWF0ZWRfYXQnLFxuICAgICAgICAnc3JjLCB2YWx1ZSwgY3JlYXRlZF9hdCcsXG4gICAgICAgICdkc3QsIHZhbHVlLCBjcmVhdGVkX2F0JyxcbiAgICAgICAgJ3NyYywgY3JlYXRlZF9hdCcsXG4gICAgICAgICdkc3QsIGNyZWF0ZWRfYXQnLFxuICAgICAgICAnc3JjLCBkc3QsIGNyZWF0ZWRfYXQsIF9rZXknLFxuICAgICAgICAnY3JlYXRlZF9sdCcsXG4gICAgICAgICdjcmVhdGVkX2F0JyxcbiAgICBdLFxuICAgIHRyYW5zYWN0aW9uczogW1xuICAgICAgICAnYmxvY2tfaWQnLFxuICAgICAgICAnaW5fbXNnJyxcbiAgICAgICAgJ291dF9tc2dzWypdJyxcbiAgICAgICAgJ2FjY291bnRfYWRkciwgbm93JyxcbiAgICAgICAgJ25vdycsXG4gICAgICAgICdsdCcsXG4gICAgICAgICdhY2NvdW50X2FkZHIsIG9yaWdfc3RhdHVzLCBlbmRfc3RhdHVzJyxcbiAgICAgICAgJ25vdywgYWNjb3VudF9hZGRyLCBsdCcsXG4gICAgXSxcbiAgICBibG9ja3Nfc2lnbmF0dXJlczogW1xuICAgICAgICAnc2lnbmF0dXJlc1sqXS5ub2RlX2lkLCBnZW5fdXRpbWUnLFxuICAgIF0sXG59O1xuXG5leHBvcnQgdHlwZSBJbmRleEluZm8gPSB7XG4gICAgZmllbGRzOiBzdHJpbmdbXSxcbn1cblxuZXhwb3J0IHR5cGUgQ29sbGVjdGlvbkluZm8gPSB7XG4gICAgbmFtZTogc3RyaW5nLFxuICAgIGluZGV4ZXM6IEluZGV4SW5mb1tdLFxufTtcblxuZXhwb3J0IHR5cGUgRGJJbmZvID0ge1xuICAgIG5hbWU6IHN0cmluZyxcbiAgICBjb2xsZWN0aW9uczoge1xuICAgICAgICBbc3RyaW5nXTogQ29sbGVjdGlvbkluZm8sXG4gICAgfVxufVxuXG5leHBvcnQgY29uc3QgQkxPQ0tDSEFJTl9EQjogRGJJbmZvID0ge1xuICAgIGxhc3RVcGRhdGVUaW1lOiAwLFxuICAgIG5hbWU6ICdibG9ja2NoYWluJyxcbiAgICBjb2xsZWN0aW9uczoge31cbn07XG5cbk9iamVjdC5lbnRyaWVzKElOREVYRVMpLmZvckVhY2goKFtuYW1lLCBpbmRleGVzXSkgPT4ge1xuICAgIEJMT0NLQ0hBSU5fREIuY29sbGVjdGlvbnNbbmFtZV0gPSB7XG4gICAgICAgIG5hbWUsXG4gICAgICAgIGluZGV4ZXM6IFsnX2tleScsIC4uLihpbmRleGVzOiBhbnkpXS5tYXAocGFyc2VJbmRleCksXG4gICAgfVxufSk7XG5cbmV4cG9ydCBjb25zdCBTVEFUUyA9IHtcbiAgICBwcmVmaXg6ICdxc2VydmVyLicsXG4gICAgZG9jOiB7XG4gICAgICAgIGNvdW50OiAnZG9jLmNvdW50JyxcbiAgICB9LFxuICAgIHBvc3Q6IHtcbiAgICAgICAgY291bnQ6ICdwb3N0LmNvdW50JyxcbiAgICAgICAgZmFpbGVkOiAncG9zdC5mYWlsZWQnLFxuICAgIH0sXG4gICAgcXVlcnk6IHtcbiAgICAgICAgY291bnQ6ICdxdWVyeS5jb3VudCcsXG4gICAgICAgIHRpbWU6ICdxdWVyeS50aW1lJyxcbiAgICAgICAgYWN0aXZlOiAncXVlcnkuYWN0aXZlJyxcbiAgICAgICAgZmFpbGVkOiAncXVlcnkuZmFpbGVkJyxcbiAgICAgICAgc2xvdzogJ3F1ZXJ5LnNsb3cnLFxuICAgIH0sXG4gICAgc3Vic2NyaXB0aW9uOiB7XG4gICAgICAgIGFjdGl2ZTogJ3N1YnNjcmlwdGlvbi5hY3RpdmUnLFxuICAgIH0sXG4gICAgd2FpdEZvcjoge1xuICAgICAgICBhY3RpdmU6ICd3YWl0Zm9yLmFjdGl2ZScsXG4gICAgfSxcbn07XG5cbiJdfQ==