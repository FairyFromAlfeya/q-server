"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ensureProtocol = ensureProtocol;
exports.STATS = exports.BLOCKCHAIN_DB = exports.QRequestsMode = void 0;

var _dbTypes = require("./db-types");

/*
 * Copyright 2018-2020 TON DEV SOLUTIONS LTD.
 *
 * Licensed under the SOFTWARE EVALUATION License (the "License"); you may not use
 * this file except in compliance with the License.  You may obtain a copy of the
 * License at:
 *
 * http://www.ton.dev/licenses
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific TON DEV software governing permissions and
 * limitations under the License.
 */
const QRequestsMode = {
  kafka: 'kafka',
  rest: 'rest,'
};
exports.QRequestsMode = QRequestsMode;

function ensureProtocol(address, defaultProtocol) {
  return /^\w+:\/\//gi.test(address) ? address : `${defaultProtocol}://${address}`;
}

const INDEXES = {
  blocks: ['seq_no, gen_utime', 'gen_utime', 'workchain_id, shard, seq_no', 'workchain_id, seq_no', 'workchain_id, gen_utime', 'master.min_shard_gen_utime'],
  accounts: ['last_trans_lt', 'balance'],
  messages: ['block_id', 'value, created_at', 'src, value, created_at', 'dst, value, created_at', 'src, created_at', 'dst, created_at', 'src, dst, created_at, _key', 'created_lt', 'created_at'],
  transactions: ['block_id', 'in_msg', 'out_msgs[*]', 'account_addr, now', 'now', 'lt', 'account_addr, orig_status, end_status', 'now, account_addr, lt'],
  blocks_signatures: ['signatures[*].node_id, gen_utime']
};
const BLOCKCHAIN_DB = {
  name: 'blockchain',
  collections: {}
};
exports.BLOCKCHAIN_DB = BLOCKCHAIN_DB;
Object.entries(INDEXES).forEach(([name, indexes]) => {
  BLOCKCHAIN_DB.collections[name] = {
    name,
    indexes: ['_key', ...indexes].map(_dbTypes.parseIndex)
  };
});
const STATS = {
  prefix: 'qserver.',
  doc: {
    count: 'doc.count'
  },
  post: {
    count: 'post.count',
    failed: 'post.failed'
  },
  query: {
    count: 'query.count',
    time: 'query.time',
    active: 'query.active',
    failed: 'query.failed',
    slow: 'query.slow'
  },
  subscription: {
    active: 'subscription.active'
  },
  waitFor: {
    active: 'waitfor.active'
  }
};
exports.STATS = STATS;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NlcnZlci9jb25maWcuanMiXSwibmFtZXMiOlsiUVJlcXVlc3RzTW9kZSIsImthZmthIiwicmVzdCIsImVuc3VyZVByb3RvY29sIiwiYWRkcmVzcyIsImRlZmF1bHRQcm90b2NvbCIsInRlc3QiLCJJTkRFWEVTIiwiYmxvY2tzIiwiYWNjb3VudHMiLCJtZXNzYWdlcyIsInRyYW5zYWN0aW9ucyIsImJsb2Nrc19zaWduYXR1cmVzIiwiQkxPQ0tDSEFJTl9EQiIsIm5hbWUiLCJjb2xsZWN0aW9ucyIsIk9iamVjdCIsImVudHJpZXMiLCJmb3JFYWNoIiwiaW5kZXhlcyIsIm1hcCIsInBhcnNlSW5kZXgiLCJTVEFUUyIsInByZWZpeCIsImRvYyIsImNvdW50IiwicG9zdCIsImZhaWxlZCIsInF1ZXJ5IiwidGltZSIsImFjdGl2ZSIsInNsb3ciLCJzdWJzY3JpcHRpb24iLCJ3YWl0Rm9yIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQWtCQTs7QUFsQkE7Ozs7Ozs7Ozs7Ozs7OztBQW9CTyxNQUFNQSxhQUFhLEdBQUc7QUFDekJDLEVBQUFBLEtBQUssRUFBRSxPQURrQjtBQUV6QkMsRUFBQUEsSUFBSSxFQUFFO0FBRm1CLENBQXRCOzs7QUE0Q0EsU0FBU0MsY0FBVCxDQUF3QkMsT0FBeEIsRUFBeUNDLGVBQXpDLEVBQTBFO0FBQzdFLFNBQU8sY0FBY0MsSUFBZCxDQUFtQkYsT0FBbkIsSUFBOEJBLE9BQTlCLEdBQXlDLEdBQUVDLGVBQWdCLE1BQUtELE9BQVEsRUFBL0U7QUFDSDs7QUFFRCxNQUFNRyxPQUVMLEdBQUc7QUFDQUMsRUFBQUEsTUFBTSxFQUFFLENBQ0osbUJBREksRUFFSixXQUZJLEVBR0osNkJBSEksRUFJSixzQkFKSSxFQUtKLHlCQUxJLEVBTUosNEJBTkksQ0FEUjtBQVNBQyxFQUFBQSxRQUFRLEVBQUUsQ0FDTixlQURNLEVBRU4sU0FGTSxDQVRWO0FBYUFDLEVBQUFBLFFBQVEsRUFBRSxDQUNOLFVBRE0sRUFFTixtQkFGTSxFQUdOLHdCQUhNLEVBSU4sd0JBSk0sRUFLTixpQkFMTSxFQU1OLGlCQU5NLEVBT04sNEJBUE0sRUFRTixZQVJNLEVBU04sWUFUTSxDQWJWO0FBd0JBQyxFQUFBQSxZQUFZLEVBQUUsQ0FDVixVQURVLEVBRVYsUUFGVSxFQUdWLGFBSFUsRUFJVixtQkFKVSxFQUtWLEtBTFUsRUFNVixJQU5VLEVBT1YsdUNBUFUsRUFRVix1QkFSVSxDQXhCZDtBQWtDQUMsRUFBQUEsaUJBQWlCLEVBQUUsQ0FDZixrQ0FEZTtBQWxDbkIsQ0FGSjtBQXlETyxNQUFNQyxhQUFxQixHQUFHO0FBQ2pDQyxFQUFBQSxJQUFJLEVBQUUsWUFEMkI7QUFFakNDLEVBQUFBLFdBQVcsRUFBRTtBQUZvQixDQUE5Qjs7QUFLUEMsTUFBTSxDQUFDQyxPQUFQLENBQWVWLE9BQWYsRUFBd0JXLE9BQXhCLENBQWdDLENBQUMsQ0FBQ0osSUFBRCxFQUFPSyxPQUFQLENBQUQsS0FBcUI7QUFDakROLEVBQUFBLGFBQWEsQ0FBQ0UsV0FBZCxDQUEwQkQsSUFBMUIsSUFBa0M7QUFDOUJBLElBQUFBLElBRDhCO0FBRTlCSyxJQUFBQSxPQUFPLEVBQUUsQ0FBQyxNQUFELEVBQVMsR0FBSUEsT0FBYixFQUE0QkMsR0FBNUIsQ0FBZ0NDLG1CQUFoQztBQUZxQixHQUFsQztBQUlILENBTEQ7QUFPTyxNQUFNQyxLQUFLLEdBQUc7QUFDakJDLEVBQUFBLE1BQU0sRUFBRSxVQURTO0FBRWpCQyxFQUFBQSxHQUFHLEVBQUU7QUFDREMsSUFBQUEsS0FBSyxFQUFFO0FBRE4sR0FGWTtBQUtqQkMsRUFBQUEsSUFBSSxFQUFFO0FBQ0ZELElBQUFBLEtBQUssRUFBRSxZQURMO0FBRUZFLElBQUFBLE1BQU0sRUFBRTtBQUZOLEdBTFc7QUFTakJDLEVBQUFBLEtBQUssRUFBRTtBQUNISCxJQUFBQSxLQUFLLEVBQUUsYUFESjtBQUVISSxJQUFBQSxJQUFJLEVBQUUsWUFGSDtBQUdIQyxJQUFBQSxNQUFNLEVBQUUsY0FITDtBQUlISCxJQUFBQSxNQUFNLEVBQUUsY0FKTDtBQUtISSxJQUFBQSxJQUFJLEVBQUU7QUFMSCxHQVRVO0FBZ0JqQkMsRUFBQUEsWUFBWSxFQUFFO0FBQ1ZGLElBQUFBLE1BQU0sRUFBRTtBQURFLEdBaEJHO0FBbUJqQkcsRUFBQUEsT0FBTyxFQUFFO0FBQ0xILElBQUFBLE1BQU0sRUFBRTtBQURIO0FBbkJRLENBQWQiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IDIwMTgtMjAyMCBUT04gREVWIFNPTFVUSU9OUyBMVEQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIFNPRlRXQVJFIEVWQUxVQVRJT04gTGljZW5zZSAodGhlIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlXG4gKiB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGVcbiAqIExpY2Vuc2UgYXQ6XG4gKlxuICogaHR0cDovL3d3dy50b24uZGV2L2xpY2Vuc2VzXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBUT04gREVWIHNvZnR3YXJlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbi8vIEBmbG93XG5cbmltcG9ydCB7IHBhcnNlSW5kZXggfSBmcm9tIFwiLi9kYi10eXBlc1wiO1xuXG5leHBvcnQgY29uc3QgUVJlcXVlc3RzTW9kZSA9IHtcbiAgICBrYWZrYTogJ2thZmthJyxcbiAgICByZXN0OiAncmVzdCwnXG59O1xuXG5leHBvcnQgdHlwZSBRRGJDb25maWcgPSB7XG4gICAgc2VydmVyOiBzdHJpbmcsXG4gICAgbmFtZTogc3RyaW5nLFxuICAgIGF1dGg6IHN0cmluZyxcbiAgICBtYXhTb2NrZXRzOiBudW1iZXIsXG59O1xuXG5leHBvcnQgdHlwZSBRQ29uZmlnID0ge1xuICAgIHNlcnZlcjoge1xuICAgICAgICBob3N0OiBzdHJpbmcsXG4gICAgICAgIHBvcnQ6IG51bWJlcixcbiAgICAgICAgcnBjUG9ydDogc3RyaW5nLFxuICAgICAgICBrZWVwQWxpdmU6IG51bWJlcixcbiAgICB9LFxuICAgIHJlcXVlc3RzOiB7XG4gICAgICAgIG1vZGU6ICdrYWZrYScgfCAncmVzdCcsXG4gICAgICAgIHNlcnZlcjogc3RyaW5nLFxuICAgICAgICB0b3BpYzogc3RyaW5nLFxuICAgIH0sXG4gICAgZGF0YWJhc2U6IFFEYkNvbmZpZyxcbiAgICBzbG93RGF0YWJhc2U6IFFEYkNvbmZpZyxcbiAgICBsaXN0ZW5lcjoge1xuICAgICAgICByZXN0YXJ0VGltZW91dDogbnVtYmVyXG4gICAgfSxcbiAgICBhdXRob3JpemF0aW9uOiB7XG4gICAgICAgIGVuZHBvaW50OiBzdHJpbmcsXG4gICAgfSxcbiAgICBqYWVnZXI6IHtcbiAgICAgICAgZW5kcG9pbnQ6IHN0cmluZyxcbiAgICAgICAgc2VydmljZTogc3RyaW5nLFxuICAgICAgICB0YWdzOiB7IFtzdHJpbmddOiBzdHJpbmcgfVxuICAgIH0sXG4gICAgc3RhdHNkOiB7XG4gICAgICAgIHNlcnZlcjogc3RyaW5nLFxuICAgICAgICB0YWdzOiBzdHJpbmdbXSxcbiAgICB9LFxuICAgIG1hbUFjY2Vzc0tleXM6IFNldDxzdHJpbmc+LFxufVxuXG5leHBvcnQgZnVuY3Rpb24gZW5zdXJlUHJvdG9jb2woYWRkcmVzczogc3RyaW5nLCBkZWZhdWx0UHJvdG9jb2w6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIC9eXFx3KzpcXC9cXC8vZ2kudGVzdChhZGRyZXNzKSA/IGFkZHJlc3MgOiBgJHtkZWZhdWx0UHJvdG9jb2x9Oi8vJHthZGRyZXNzfWA7XG59XG5cbmNvbnN0IElOREVYRVM6IHtcbiAgICBbc3RyaW5nXTogc3RyaW5nW10sXG59ID0ge1xuICAgIGJsb2NrczogW1xuICAgICAgICAnc2VxX25vLCBnZW5fdXRpbWUnLFxuICAgICAgICAnZ2VuX3V0aW1lJyxcbiAgICAgICAgJ3dvcmtjaGFpbl9pZCwgc2hhcmQsIHNlcV9ubycsXG4gICAgICAgICd3b3JrY2hhaW5faWQsIHNlcV9ubycsXG4gICAgICAgICd3b3JrY2hhaW5faWQsIGdlbl91dGltZScsXG4gICAgICAgICdtYXN0ZXIubWluX3NoYXJkX2dlbl91dGltZScsXG4gICAgXSxcbiAgICBhY2NvdW50czogW1xuICAgICAgICAnbGFzdF90cmFuc19sdCcsXG4gICAgICAgICdiYWxhbmNlJyxcbiAgICBdLFxuICAgIG1lc3NhZ2VzOiBbXG4gICAgICAgICdibG9ja19pZCcsXG4gICAgICAgICd2YWx1ZSwgY3JlYXRlZF9hdCcsXG4gICAgICAgICdzcmMsIHZhbHVlLCBjcmVhdGVkX2F0JyxcbiAgICAgICAgJ2RzdCwgdmFsdWUsIGNyZWF0ZWRfYXQnLFxuICAgICAgICAnc3JjLCBjcmVhdGVkX2F0JyxcbiAgICAgICAgJ2RzdCwgY3JlYXRlZF9hdCcsXG4gICAgICAgICdzcmMsIGRzdCwgY3JlYXRlZF9hdCwgX2tleScsXG4gICAgICAgICdjcmVhdGVkX2x0JyxcbiAgICAgICAgJ2NyZWF0ZWRfYXQnLFxuICAgIF0sXG4gICAgdHJhbnNhY3Rpb25zOiBbXG4gICAgICAgICdibG9ja19pZCcsXG4gICAgICAgICdpbl9tc2cnLFxuICAgICAgICAnb3V0X21zZ3NbKl0nLFxuICAgICAgICAnYWNjb3VudF9hZGRyLCBub3cnLFxuICAgICAgICAnbm93JyxcbiAgICAgICAgJ2x0JyxcbiAgICAgICAgJ2FjY291bnRfYWRkciwgb3JpZ19zdGF0dXMsIGVuZF9zdGF0dXMnLFxuICAgICAgICAnbm93LCBhY2NvdW50X2FkZHIsIGx0JyxcbiAgICBdLFxuICAgIGJsb2Nrc19zaWduYXR1cmVzOiBbXG4gICAgICAgICdzaWduYXR1cmVzWypdLm5vZGVfaWQsIGdlbl91dGltZScsXG4gICAgXSxcbn07XG5cbmV4cG9ydCB0eXBlIEluZGV4SW5mbyA9IHtcbiAgICBmaWVsZHM6IHN0cmluZ1tdLFxufVxuXG5leHBvcnQgdHlwZSBDb2xsZWN0aW9uSW5mbyA9IHtcbiAgICBuYW1lOiBzdHJpbmcsXG4gICAgaW5kZXhlczogSW5kZXhJbmZvW10sXG59O1xuXG5leHBvcnQgdHlwZSBEYkluZm8gPSB7XG4gICAgbmFtZTogc3RyaW5nLFxuICAgIGNvbGxlY3Rpb25zOiB7XG4gICAgICAgIFtzdHJpbmddOiBDb2xsZWN0aW9uSW5mbyxcbiAgICB9XG59XG5cbmV4cG9ydCBjb25zdCBCTE9DS0NIQUlOX0RCOiBEYkluZm8gPSB7XG4gICAgbmFtZTogJ2Jsb2NrY2hhaW4nLFxuICAgIGNvbGxlY3Rpb25zOiB7fVxufTtcblxuT2JqZWN0LmVudHJpZXMoSU5ERVhFUykuZm9yRWFjaCgoW25hbWUsIGluZGV4ZXNdKSA9PiB7XG4gICAgQkxPQ0tDSEFJTl9EQi5jb2xsZWN0aW9uc1tuYW1lXSA9IHtcbiAgICAgICAgbmFtZSxcbiAgICAgICAgaW5kZXhlczogWydfa2V5JywgLi4uKGluZGV4ZXM6IGFueSldLm1hcChwYXJzZUluZGV4KSxcbiAgICB9XG59KTtcblxuZXhwb3J0IGNvbnN0IFNUQVRTID0ge1xuICAgIHByZWZpeDogJ3FzZXJ2ZXIuJyxcbiAgICBkb2M6IHtcbiAgICAgICAgY291bnQ6ICdkb2MuY291bnQnLFxuICAgIH0sXG4gICAgcG9zdDoge1xuICAgICAgICBjb3VudDogJ3Bvc3QuY291bnQnLFxuICAgICAgICBmYWlsZWQ6ICdwb3N0LmZhaWxlZCcsXG4gICAgfSxcbiAgICBxdWVyeToge1xuICAgICAgICBjb3VudDogJ3F1ZXJ5LmNvdW50JyxcbiAgICAgICAgdGltZTogJ3F1ZXJ5LnRpbWUnLFxuICAgICAgICBhY3RpdmU6ICdxdWVyeS5hY3RpdmUnLFxuICAgICAgICBmYWlsZWQ6ICdxdWVyeS5mYWlsZWQnLFxuICAgICAgICBzbG93OiAncXVlcnkuc2xvdycsXG4gICAgfSxcbiAgICBzdWJzY3JpcHRpb246IHtcbiAgICAgICAgYWN0aXZlOiAnc3Vic2NyaXB0aW9uLmFjdGl2ZScsXG4gICAgfSxcbiAgICB3YWl0Rm9yOiB7XG4gICAgICAgIGFjdGl2ZTogJ3dhaXRmb3IuYWN0aXZlJyxcbiAgICB9LFxufTtcblxuIl19