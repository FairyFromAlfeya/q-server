"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ensureProtocol = ensureProtocol;
exports.BLOCKCHAIN_DB = exports.QRequestsMode = void 0;

/*
 * Copyright 2018-2020 TON DEV SOLUTIONS LTD.
 *
 * Licensed under the SOFTWARE EVALUATION License (the "License"); you may not use
 * this file except in compliance with the License.  You may obtain a copy of the
 * License at:
 *
 * http://www.ton.dev/licenses
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific TON DEV software governing permissions and
 * limitations under the License.
 */
const QRequestsMode = {
  kafka: 'kafka',
  rest: 'rest,'
};
exports.QRequestsMode = QRequestsMode;

function ensureProtocol(address, defaultProtocol) {
  return /^\w+:\/\//gi.test(address) ? address : `${defaultProtocol}://${address}`;
}

function sortedIndex(fields) {
  return fields;
}

const BLOCKCHAIN_DB = {
  name: 'blockchain',
  collections: {
    blocks: {
      indexes: [sortedIndex(['seq_no', 'gen_utime']), sortedIndex(['gen_utime']), sortedIndex(['workchain_id', 'shard', 'seq_no']), sortedIndex(['workchain_id', 'seq_no']), sortedIndex(['workchain_id', 'gen_utime']), sortedIndex(['master.min_shard_gen_utime'])]
    },
    accounts: {
      indexes: [sortedIndex(['last_trans_lt']), sortedIndex(['balance'])]
    },
    messages: {
      indexes: [sortedIndex(['block_id']), sortedIndex(['value', 'created_at']), sortedIndex(['src', 'value', 'created_at']), sortedIndex(['dst', 'value', 'created_at']), sortedIndex(['src', 'created_at']), sortedIndex(['dst', 'created_at']), sortedIndex(['created_lt']), sortedIndex(['created_at'])]
    },
    transactions: {
      indexes: [sortedIndex(['block_id']), sortedIndex(['in_msg']), sortedIndex(['out_msgs[*]']), sortedIndex(['account_addr', 'now']), sortedIndex(['now']), sortedIndex(['lt']), sortedIndex(['account_addr', 'orig_status', 'end_status'])]
    },
    blocks_signatures: {
      indexes: []
    }
  }
};
exports.BLOCKCHAIN_DB = BLOCKCHAIN_DB;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NlcnZlci9jb25maWcuanMiXSwibmFtZXMiOlsiUVJlcXVlc3RzTW9kZSIsImthZmthIiwicmVzdCIsImVuc3VyZVByb3RvY29sIiwiYWRkcmVzcyIsImRlZmF1bHRQcm90b2NvbCIsInRlc3QiLCJzb3J0ZWRJbmRleCIsImZpZWxkcyIsIkJMT0NLQ0hBSU5fREIiLCJuYW1lIiwiY29sbGVjdGlvbnMiLCJibG9ja3MiLCJpbmRleGVzIiwiYWNjb3VudHMiLCJtZXNzYWdlcyIsInRyYW5zYWN0aW9ucyIsImJsb2Nrc19zaWduYXR1cmVzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBOzs7Ozs7Ozs7Ozs7Ozs7QUFrQk8sTUFBTUEsYUFBYSxHQUFHO0FBQ3pCQyxFQUFBQSxLQUFLLEVBQUUsT0FEa0I7QUFFekJDLEVBQUFBLElBQUksRUFBRTtBQUZtQixDQUF0Qjs7O0FBc0NBLFNBQVNDLGNBQVQsQ0FBd0JDLE9BQXhCLEVBQXlDQyxlQUF6QyxFQUEwRTtBQUM3RSxTQUFPLGNBQWNDLElBQWQsQ0FBbUJGLE9BQW5CLElBQThCQSxPQUE5QixHQUF5QyxHQUFFQyxlQUFnQixNQUFLRCxPQUFRLEVBQS9FO0FBQ0g7O0FBRUQsU0FBU0csV0FBVCxDQUFxQkMsTUFBckIsRUFBaUQ7QUFDN0MsU0FBT0EsTUFBUDtBQUNIOztBQWFNLE1BQU1DLGFBQXFCLEdBQUc7QUFDakNDLEVBQUFBLElBQUksRUFBRSxZQUQyQjtBQUVqQ0MsRUFBQUEsV0FBVyxFQUFFO0FBQ1RDLElBQUFBLE1BQU0sRUFBRTtBQUNKQyxNQUFBQSxPQUFPLEVBQUUsQ0FDTE4sV0FBVyxDQUFDLENBQUMsUUFBRCxFQUFXLFdBQVgsQ0FBRCxDQUROLEVBRUxBLFdBQVcsQ0FBQyxDQUFDLFdBQUQsQ0FBRCxDQUZOLEVBR0xBLFdBQVcsQ0FBQyxDQUFDLGNBQUQsRUFBaUIsT0FBakIsRUFBMEIsUUFBMUIsQ0FBRCxDQUhOLEVBSUxBLFdBQVcsQ0FBQyxDQUFDLGNBQUQsRUFBaUIsUUFBakIsQ0FBRCxDQUpOLEVBS0xBLFdBQVcsQ0FBQyxDQUFDLGNBQUQsRUFBaUIsV0FBakIsQ0FBRCxDQUxOLEVBTUxBLFdBQVcsQ0FBQyxDQUFDLDRCQUFELENBQUQsQ0FOTjtBQURMLEtBREM7QUFXVE8sSUFBQUEsUUFBUSxFQUFFO0FBQ05ELE1BQUFBLE9BQU8sRUFBRSxDQUNMTixXQUFXLENBQUMsQ0FBQyxlQUFELENBQUQsQ0FETixFQUVMQSxXQUFXLENBQUMsQ0FBQyxTQUFELENBQUQsQ0FGTjtBQURILEtBWEQ7QUFpQlRRLElBQUFBLFFBQVEsRUFBRTtBQUNORixNQUFBQSxPQUFPLEVBQUUsQ0FDTE4sV0FBVyxDQUFDLENBQUMsVUFBRCxDQUFELENBRE4sRUFFTEEsV0FBVyxDQUFDLENBQUMsT0FBRCxFQUFVLFlBQVYsQ0FBRCxDQUZOLEVBR0xBLFdBQVcsQ0FBQyxDQUFDLEtBQUQsRUFBUSxPQUFSLEVBQWlCLFlBQWpCLENBQUQsQ0FITixFQUlMQSxXQUFXLENBQUMsQ0FBQyxLQUFELEVBQVEsT0FBUixFQUFpQixZQUFqQixDQUFELENBSk4sRUFLTEEsV0FBVyxDQUFDLENBQUMsS0FBRCxFQUFRLFlBQVIsQ0FBRCxDQUxOLEVBTUxBLFdBQVcsQ0FBQyxDQUFDLEtBQUQsRUFBUSxZQUFSLENBQUQsQ0FOTixFQU9MQSxXQUFXLENBQUMsQ0FBQyxZQUFELENBQUQsQ0FQTixFQVFMQSxXQUFXLENBQUMsQ0FBQyxZQUFELENBQUQsQ0FSTjtBQURILEtBakJEO0FBNkJUUyxJQUFBQSxZQUFZLEVBQUU7QUFDVkgsTUFBQUEsT0FBTyxFQUFFLENBQ0xOLFdBQVcsQ0FBQyxDQUFDLFVBQUQsQ0FBRCxDQUROLEVBRUxBLFdBQVcsQ0FBQyxDQUFDLFFBQUQsQ0FBRCxDQUZOLEVBR0xBLFdBQVcsQ0FBQyxDQUFDLGFBQUQsQ0FBRCxDQUhOLEVBSUxBLFdBQVcsQ0FBQyxDQUFDLGNBQUQsRUFBaUIsS0FBakIsQ0FBRCxDQUpOLEVBS0xBLFdBQVcsQ0FBQyxDQUFDLEtBQUQsQ0FBRCxDQUxOLEVBTUxBLFdBQVcsQ0FBQyxDQUFDLElBQUQsQ0FBRCxDQU5OLEVBT0xBLFdBQVcsQ0FBQyxDQUFDLGNBQUQsRUFBaUIsYUFBakIsRUFBZ0MsWUFBaEMsQ0FBRCxDQVBOO0FBREMsS0E3Qkw7QUF3Q1RVLElBQUFBLGlCQUFpQixFQUFFO0FBQ2ZKLE1BQUFBLE9BQU8sRUFBRTtBQURNO0FBeENWO0FBRm9CLENBQTlCIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAyMDE4LTIwMjAgVE9OIERFViBTT0xVVElPTlMgTFRELlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBTT0ZUV0FSRSBFVkFMVUFUSU9OIExpY2Vuc2UgKHRoZSBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZVxuICogdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlXG4gKiBMaWNlbnNlIGF0OlxuICpcbiAqIGh0dHA6Ly93d3cudG9uLmRldi9saWNlbnNlc1xuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgVE9OIERFViBzb2Z0d2FyZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG4vLyBAZmxvd1xuXG5leHBvcnQgY29uc3QgUVJlcXVlc3RzTW9kZSA9IHtcbiAgICBrYWZrYTogJ2thZmthJyxcbiAgICByZXN0OiAncmVzdCwnXG59O1xuXG5leHBvcnQgdHlwZSBRRGJDb25maWcgPSB7XG4gICAgc2VydmVyOiBzdHJpbmcsXG4gICAgbmFtZTogc3RyaW5nLFxuICAgIGF1dGg6IHN0cmluZyxcbiAgICBtYXhTb2NrZXRzOiBudW1iZXIsXG59O1xuXG5leHBvcnQgdHlwZSBRQ29uZmlnID0ge1xuICAgIHNlcnZlcjoge1xuICAgICAgICBob3N0OiBzdHJpbmcsXG4gICAgICAgIHBvcnQ6IG51bWJlcixcbiAgICB9LFxuICAgIHJlcXVlc3RzOiB7XG4gICAgICAgIG1vZGU6ICdrYWZrYScgfCAncmVzdCcsXG4gICAgICAgIHNlcnZlcjogc3RyaW5nLFxuICAgICAgICB0b3BpYzogc3RyaW5nLFxuICAgIH0sXG4gICAgZGF0YWJhc2U6IFFEYkNvbmZpZyxcbiAgICBzbG93RGF0YWJhc2U6IFFEYkNvbmZpZyxcbiAgICBsaXN0ZW5lcjoge1xuICAgICAgICByZXN0YXJ0VGltZW91dDogbnVtYmVyXG4gICAgfSxcbiAgICBhdXRob3JpemF0aW9uOiB7XG4gICAgICAgIGVuZHBvaW50OiBzdHJpbmcsXG4gICAgfSxcbiAgICBqYWVnZXI6IHtcbiAgICAgICAgZW5kcG9pbnQ6IHN0cmluZyxcbiAgICAgICAgc2VydmljZTogc3RyaW5nLFxuICAgICAgICB0YWdzOiB7IFtzdHJpbmddOiBzdHJpbmcgfVxuICAgIH0sXG4gICAgbWFtQWNjZXNzS2V5czogU2V0PHN0cmluZz4sXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlbnN1cmVQcm90b2NvbChhZGRyZXNzOiBzdHJpbmcsIGRlZmF1bHRQcm90b2NvbDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICByZXR1cm4gL15cXHcrOlxcL1xcLy9naS50ZXN0KGFkZHJlc3MpID8gYWRkcmVzcyA6IGAke2RlZmF1bHRQcm90b2NvbH06Ly8ke2FkZHJlc3N9YDtcbn1cblxuZnVuY3Rpb24gc29ydGVkSW5kZXgoZmllbGRzOiBzdHJpbmdbXSk6IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gZmllbGRzO1xufVxuXG5leHBvcnQgdHlwZSBDb2xsZWN0aW9uSW5mbyA9IHtcbiAgICBpbmRleGVzOiBzdHJpbmdbXVtdLFxufTtcblxuZXhwb3J0IHR5cGUgRGJJbmZvID0ge1xuICAgIG5hbWU6IHN0cmluZyxcbiAgICBjb2xsZWN0aW9uczoge1xuICAgICAgICBbc3RyaW5nXTogQ29sbGVjdGlvbkluZm8sXG4gICAgfVxufVxuXG5leHBvcnQgY29uc3QgQkxPQ0tDSEFJTl9EQjogRGJJbmZvID0ge1xuICAgIG5hbWU6ICdibG9ja2NoYWluJyxcbiAgICBjb2xsZWN0aW9uczoge1xuICAgICAgICBibG9ja3M6IHtcbiAgICAgICAgICAgIGluZGV4ZXM6IFtcbiAgICAgICAgICAgICAgICBzb3J0ZWRJbmRleChbJ3NlcV9ubycsICdnZW5fdXRpbWUnXSksXG4gICAgICAgICAgICAgICAgc29ydGVkSW5kZXgoWydnZW5fdXRpbWUnXSksXG4gICAgICAgICAgICAgICAgc29ydGVkSW5kZXgoWyd3b3JrY2hhaW5faWQnLCAnc2hhcmQnLCAnc2VxX25vJ10pLFxuICAgICAgICAgICAgICAgIHNvcnRlZEluZGV4KFsnd29ya2NoYWluX2lkJywgJ3NlcV9ubyddKSxcbiAgICAgICAgICAgICAgICBzb3J0ZWRJbmRleChbJ3dvcmtjaGFpbl9pZCcsICdnZW5fdXRpbWUnXSksXG4gICAgICAgICAgICAgICAgc29ydGVkSW5kZXgoWydtYXN0ZXIubWluX3NoYXJkX2dlbl91dGltZSddKSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICAgIGFjY291bnRzOiB7XG4gICAgICAgICAgICBpbmRleGVzOiBbXG4gICAgICAgICAgICAgICAgc29ydGVkSW5kZXgoWydsYXN0X3RyYW5zX2x0J10pLFxuICAgICAgICAgICAgICAgIHNvcnRlZEluZGV4KFsnYmFsYW5jZSddKSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICAgIG1lc3NhZ2VzOiB7XG4gICAgICAgICAgICBpbmRleGVzOiBbXG4gICAgICAgICAgICAgICAgc29ydGVkSW5kZXgoWydibG9ja19pZCddKSxcbiAgICAgICAgICAgICAgICBzb3J0ZWRJbmRleChbJ3ZhbHVlJywgJ2NyZWF0ZWRfYXQnXSksXG4gICAgICAgICAgICAgICAgc29ydGVkSW5kZXgoWydzcmMnLCAndmFsdWUnLCAnY3JlYXRlZF9hdCddKSxcbiAgICAgICAgICAgICAgICBzb3J0ZWRJbmRleChbJ2RzdCcsICd2YWx1ZScsICdjcmVhdGVkX2F0J10pLFxuICAgICAgICAgICAgICAgIHNvcnRlZEluZGV4KFsnc3JjJywgJ2NyZWF0ZWRfYXQnXSksXG4gICAgICAgICAgICAgICAgc29ydGVkSW5kZXgoWydkc3QnLCAnY3JlYXRlZF9hdCddKSxcbiAgICAgICAgICAgICAgICBzb3J0ZWRJbmRleChbJ2NyZWF0ZWRfbHQnXSksXG4gICAgICAgICAgICAgICAgc29ydGVkSW5kZXgoWydjcmVhdGVkX2F0J10pLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICAgICAgdHJhbnNhY3Rpb25zOiB7XG4gICAgICAgICAgICBpbmRleGVzOiBbXG4gICAgICAgICAgICAgICAgc29ydGVkSW5kZXgoWydibG9ja19pZCddKSxcbiAgICAgICAgICAgICAgICBzb3J0ZWRJbmRleChbJ2luX21zZyddKSxcbiAgICAgICAgICAgICAgICBzb3J0ZWRJbmRleChbJ291dF9tc2dzWypdJ10pLFxuICAgICAgICAgICAgICAgIHNvcnRlZEluZGV4KFsnYWNjb3VudF9hZGRyJywgJ25vdyddKSxcbiAgICAgICAgICAgICAgICBzb3J0ZWRJbmRleChbJ25vdyddKSxcbiAgICAgICAgICAgICAgICBzb3J0ZWRJbmRleChbJ2x0J10pLFxuICAgICAgICAgICAgICAgIHNvcnRlZEluZGV4KFsnYWNjb3VudF9hZGRyJywgJ29yaWdfc3RhdHVzJywgJ2VuZF9zdGF0dXMnXSksXG4gICAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgICBibG9ja3Nfc2lnbmF0dXJlczoge1xuICAgICAgICAgICAgaW5kZXhlczogW10sXG4gICAgICAgIH0sXG4gICAgfVxufTtcbiJdfQ==