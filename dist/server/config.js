"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ensureProtocol = ensureProtocol;
exports.STATS = exports.BLOCKCHAIN_DB = exports.QRequestsMode = void 0;

var _dbTypes = require("./db-types");

/*
 * Copyright 2018-2020 TON DEV SOLUTIONS LTD.
 *
 * Licensed under the SOFTWARE EVALUATION License (the "License"); you may not use
 * this file except in compliance with the License.  You may obtain a copy of the
 * License at:
 *
 * http://www.ton.dev/licenses
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific TON DEV software governing permissions and
 * limitations under the License.
 */
const QRequestsMode = {
  kafka: 'kafka',
  rest: 'rest,'
};
exports.QRequestsMode = QRequestsMode;

function ensureProtocol(address, defaultProtocol) {
  return /^\w+:\/\//gi.test(address) ? address : `${defaultProtocol}://${address}`;
}

const INDEXES = {
  blocks: ['seq_no, gen_utime', 'gen_utime', 'workchain_id, shard, seq_no', 'workchain_id, seq_no', 'workchain_id, gen_utime', 'master.min_shard_gen_utime'],
  accounts: ['last_trans_lt', 'balance'],
  messages: ['block_id', 'value, created_at', 'src, value, created_at', 'dst, value, created_at', 'src, created_at', 'dst, created_at', 'src, dst, created_at, _key', 'created_lt', 'created_at'],
  transactions: ['block_id', 'in_msg', 'out_msgs[*]', 'account_addr, now', 'now', 'lt', 'account_addr, orig_status, end_status', 'now, account_addr, lt'],
  blocks_signatures: ['signatures[*].node_id, gen_utime']
};
const BLOCKCHAIN_DB = {
  name: 'blockchain',
  collections: {}
};
exports.BLOCKCHAIN_DB = BLOCKCHAIN_DB;
Object.entries(INDEXES).forEach(([name, indexes]) => {
  BLOCKCHAIN_DB.collections[name] = {
    name,
    indexes: ['_key', ...indexes].map(_dbTypes.parseIndex)
  };
});
const STATS = {
  prefix: 'qserver.',
  doc: {
    count: 'doc.count'
  },
  post: {
    count: 'post.count',
    failed: 'post.failed'
  },
  query: {
    count: 'query.count',
    time: 'query.time',
    active: 'query.active',
    failed: 'query.failed',
    slow: 'query.slow'
  },
  subscription: {
    active: 'subscription.active'
  },
  waitFor: {
    active: 'waitfor.active'
  }
};
exports.STATS = STATS;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NlcnZlci9jb25maWcuanMiXSwibmFtZXMiOlsiUVJlcXVlc3RzTW9kZSIsImthZmthIiwicmVzdCIsImVuc3VyZVByb3RvY29sIiwiYWRkcmVzcyIsImRlZmF1bHRQcm90b2NvbCIsInRlc3QiLCJJTkRFWEVTIiwiYmxvY2tzIiwiYWNjb3VudHMiLCJtZXNzYWdlcyIsInRyYW5zYWN0aW9ucyIsImJsb2Nrc19zaWduYXR1cmVzIiwiQkxPQ0tDSEFJTl9EQiIsIm5hbWUiLCJjb2xsZWN0aW9ucyIsIk9iamVjdCIsImVudHJpZXMiLCJmb3JFYWNoIiwiaW5kZXhlcyIsIm1hcCIsInBhcnNlSW5kZXgiLCJTVEFUUyIsInByZWZpeCIsImRvYyIsImNvdW50IiwicG9zdCIsImZhaWxlZCIsInF1ZXJ5IiwidGltZSIsImFjdGl2ZSIsInNsb3ciLCJzdWJzY3JpcHRpb24iLCJ3YWl0Rm9yIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQWtCQTs7QUFsQkE7Ozs7Ozs7Ozs7Ozs7OztBQW9CTyxNQUFNQSxhQUFhLEdBQUc7QUFDekJDLEVBQUFBLEtBQUssRUFBRSxPQURrQjtBQUV6QkMsRUFBQUEsSUFBSSxFQUFFO0FBRm1CLENBQXRCOzs7QUEyQ0EsU0FBU0MsY0FBVCxDQUF3QkMsT0FBeEIsRUFBeUNDLGVBQXpDLEVBQTBFO0FBQzdFLFNBQU8sY0FBY0MsSUFBZCxDQUFtQkYsT0FBbkIsSUFBOEJBLE9BQTlCLEdBQXlDLEdBQUVDLGVBQWdCLE1BQUtELE9BQVEsRUFBL0U7QUFDSDs7QUFFRCxNQUFNRyxPQUVMLEdBQUc7QUFDQUMsRUFBQUEsTUFBTSxFQUFFLENBQ0osbUJBREksRUFFSixXQUZJLEVBR0osNkJBSEksRUFJSixzQkFKSSxFQUtKLHlCQUxJLEVBTUosNEJBTkksQ0FEUjtBQVNBQyxFQUFBQSxRQUFRLEVBQUUsQ0FDTixlQURNLEVBRU4sU0FGTSxDQVRWO0FBYUFDLEVBQUFBLFFBQVEsRUFBRSxDQUNOLFVBRE0sRUFFTixtQkFGTSxFQUdOLHdCQUhNLEVBSU4sd0JBSk0sRUFLTixpQkFMTSxFQU1OLGlCQU5NLEVBT04sNEJBUE0sRUFRTixZQVJNLEVBU04sWUFUTSxDQWJWO0FBd0JBQyxFQUFBQSxZQUFZLEVBQUUsQ0FDVixVQURVLEVBRVYsUUFGVSxFQUdWLGFBSFUsRUFJVixtQkFKVSxFQUtWLEtBTFUsRUFNVixJQU5VLEVBT1YsdUNBUFUsRUFRVix1QkFSVSxDQXhCZDtBQWtDQUMsRUFBQUEsaUJBQWlCLEVBQUUsQ0FDZixrQ0FEZTtBQWxDbkIsQ0FGSjtBQXlETyxNQUFNQyxhQUFxQixHQUFHO0FBQ2pDQyxFQUFBQSxJQUFJLEVBQUUsWUFEMkI7QUFFakNDLEVBQUFBLFdBQVcsRUFBRTtBQUZvQixDQUE5Qjs7QUFLUEMsTUFBTSxDQUFDQyxPQUFQLENBQWVWLE9BQWYsRUFBd0JXLE9BQXhCLENBQWdDLENBQUMsQ0FBQ0osSUFBRCxFQUFPSyxPQUFQLENBQUQsS0FBcUI7QUFDakROLEVBQUFBLGFBQWEsQ0FBQ0UsV0FBZCxDQUEwQkQsSUFBMUIsSUFBa0M7QUFDOUJBLElBQUFBLElBRDhCO0FBRTlCSyxJQUFBQSxPQUFPLEVBQUUsQ0FBQyxNQUFELEVBQVMsR0FBSUEsT0FBYixFQUE0QkMsR0FBNUIsQ0FBZ0NDLG1CQUFoQztBQUZxQixHQUFsQztBQUlILENBTEQ7QUFPTyxNQUFNQyxLQUFLLEdBQUc7QUFDakJDLEVBQUFBLE1BQU0sRUFBRSxVQURTO0FBRWpCQyxFQUFBQSxHQUFHLEVBQUU7QUFDREMsSUFBQUEsS0FBSyxFQUFFO0FBRE4sR0FGWTtBQUtqQkMsRUFBQUEsSUFBSSxFQUFFO0FBQ0ZELElBQUFBLEtBQUssRUFBRSxZQURMO0FBRUZFLElBQUFBLE1BQU0sRUFBRTtBQUZOLEdBTFc7QUFTakJDLEVBQUFBLEtBQUssRUFBRTtBQUNISCxJQUFBQSxLQUFLLEVBQUUsYUFESjtBQUVISSxJQUFBQSxJQUFJLEVBQUUsWUFGSDtBQUdIQyxJQUFBQSxNQUFNLEVBQUUsY0FITDtBQUlISCxJQUFBQSxNQUFNLEVBQUUsY0FKTDtBQUtISSxJQUFBQSxJQUFJLEVBQUU7QUFMSCxHQVRVO0FBZ0JqQkMsRUFBQUEsWUFBWSxFQUFFO0FBQ1ZGLElBQUFBLE1BQU0sRUFBRTtBQURFLEdBaEJHO0FBbUJqQkcsRUFBQUEsT0FBTyxFQUFFO0FBQ0xILElBQUFBLE1BQU0sRUFBRTtBQURIO0FBbkJRLENBQWQiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IDIwMTgtMjAyMCBUT04gREVWIFNPTFVUSU9OUyBMVEQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIFNPRlRXQVJFIEVWQUxVQVRJT04gTGljZW5zZSAodGhlIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlXG4gKiB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGVcbiAqIExpY2Vuc2UgYXQ6XG4gKlxuICogaHR0cDovL3d3dy50b24uZGV2L2xpY2Vuc2VzXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBUT04gREVWIHNvZnR3YXJlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbi8vIEBmbG93XG5cbmltcG9ydCB7IHBhcnNlSW5kZXggfSBmcm9tIFwiLi9kYi10eXBlc1wiO1xuXG5leHBvcnQgY29uc3QgUVJlcXVlc3RzTW9kZSA9IHtcbiAgICBrYWZrYTogJ2thZmthJyxcbiAgICByZXN0OiAncmVzdCwnXG59O1xuXG5leHBvcnQgdHlwZSBRRGJDb25maWcgPSB7XG4gICAgc2VydmVyOiBzdHJpbmcsXG4gICAgbmFtZTogc3RyaW5nLFxuICAgIGF1dGg6IHN0cmluZyxcbiAgICBtYXhTb2NrZXRzOiBudW1iZXIsXG59O1xuXG5leHBvcnQgdHlwZSBRQ29uZmlnID0ge1xuICAgIHNlcnZlcjoge1xuICAgICAgICBob3N0OiBzdHJpbmcsXG4gICAgICAgIHBvcnQ6IG51bWJlcixcbiAgICAgICAgcnBjUG9ydDogc3RyaW5nLFxuICAgIH0sXG4gICAgcmVxdWVzdHM6IHtcbiAgICAgICAgbW9kZTogJ2thZmthJyB8ICdyZXN0JyxcbiAgICAgICAgc2VydmVyOiBzdHJpbmcsXG4gICAgICAgIHRvcGljOiBzdHJpbmcsXG4gICAgfSxcbiAgICBkYXRhYmFzZTogUURiQ29uZmlnLFxuICAgIHNsb3dEYXRhYmFzZTogUURiQ29uZmlnLFxuICAgIGxpc3RlbmVyOiB7XG4gICAgICAgIHJlc3RhcnRUaW1lb3V0OiBudW1iZXJcbiAgICB9LFxuICAgIGF1dGhvcml6YXRpb246IHtcbiAgICAgICAgZW5kcG9pbnQ6IHN0cmluZyxcbiAgICB9LFxuICAgIGphZWdlcjoge1xuICAgICAgICBlbmRwb2ludDogc3RyaW5nLFxuICAgICAgICBzZXJ2aWNlOiBzdHJpbmcsXG4gICAgICAgIHRhZ3M6IHsgW3N0cmluZ106IHN0cmluZyB9XG4gICAgfSxcbiAgICBzdGF0c2Q6IHtcbiAgICAgICAgc2VydmVyOiBzdHJpbmcsXG4gICAgICAgIHRhZ3M6IHN0cmluZ1tdLFxuICAgIH0sXG4gICAgbWFtQWNjZXNzS2V5czogU2V0PHN0cmluZz4sXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlbnN1cmVQcm90b2NvbChhZGRyZXNzOiBzdHJpbmcsIGRlZmF1bHRQcm90b2NvbDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICByZXR1cm4gL15cXHcrOlxcL1xcLy9naS50ZXN0KGFkZHJlc3MpID8gYWRkcmVzcyA6IGAke2RlZmF1bHRQcm90b2NvbH06Ly8ke2FkZHJlc3N9YDtcbn1cblxuY29uc3QgSU5ERVhFUzoge1xuICAgIFtzdHJpbmddOiBzdHJpbmdbXSxcbn0gPSB7XG4gICAgYmxvY2tzOiBbXG4gICAgICAgICdzZXFfbm8sIGdlbl91dGltZScsXG4gICAgICAgICdnZW5fdXRpbWUnLFxuICAgICAgICAnd29ya2NoYWluX2lkLCBzaGFyZCwgc2VxX25vJyxcbiAgICAgICAgJ3dvcmtjaGFpbl9pZCwgc2VxX25vJyxcbiAgICAgICAgJ3dvcmtjaGFpbl9pZCwgZ2VuX3V0aW1lJyxcbiAgICAgICAgJ21hc3Rlci5taW5fc2hhcmRfZ2VuX3V0aW1lJyxcbiAgICBdLFxuICAgIGFjY291bnRzOiBbXG4gICAgICAgICdsYXN0X3RyYW5zX2x0JyxcbiAgICAgICAgJ2JhbGFuY2UnLFxuICAgIF0sXG4gICAgbWVzc2FnZXM6IFtcbiAgICAgICAgJ2Jsb2NrX2lkJyxcbiAgICAgICAgJ3ZhbHVlLCBjcmVhdGVkX2F0JyxcbiAgICAgICAgJ3NyYywgdmFsdWUsIGNyZWF0ZWRfYXQnLFxuICAgICAgICAnZHN0LCB2YWx1ZSwgY3JlYXRlZF9hdCcsXG4gICAgICAgICdzcmMsIGNyZWF0ZWRfYXQnLFxuICAgICAgICAnZHN0LCBjcmVhdGVkX2F0JyxcbiAgICAgICAgJ3NyYywgZHN0LCBjcmVhdGVkX2F0LCBfa2V5JyxcbiAgICAgICAgJ2NyZWF0ZWRfbHQnLFxuICAgICAgICAnY3JlYXRlZF9hdCcsXG4gICAgXSxcbiAgICB0cmFuc2FjdGlvbnM6IFtcbiAgICAgICAgJ2Jsb2NrX2lkJyxcbiAgICAgICAgJ2luX21zZycsXG4gICAgICAgICdvdXRfbXNnc1sqXScsXG4gICAgICAgICdhY2NvdW50X2FkZHIsIG5vdycsXG4gICAgICAgICdub3cnLFxuICAgICAgICAnbHQnLFxuICAgICAgICAnYWNjb3VudF9hZGRyLCBvcmlnX3N0YXR1cywgZW5kX3N0YXR1cycsXG4gICAgICAgICdub3csIGFjY291bnRfYWRkciwgbHQnLFxuICAgIF0sXG4gICAgYmxvY2tzX3NpZ25hdHVyZXM6IFtcbiAgICAgICAgJ3NpZ25hdHVyZXNbKl0ubm9kZV9pZCwgZ2VuX3V0aW1lJyxcbiAgICBdLFxufTtcblxuZXhwb3J0IHR5cGUgSW5kZXhJbmZvID0ge1xuICAgIGZpZWxkczogc3RyaW5nW10sXG59XG5cbmV4cG9ydCB0eXBlIENvbGxlY3Rpb25JbmZvID0ge1xuICAgIG5hbWU6IHN0cmluZyxcbiAgICBpbmRleGVzOiBJbmRleEluZm9bXSxcbn07XG5cbmV4cG9ydCB0eXBlIERiSW5mbyA9IHtcbiAgICBuYW1lOiBzdHJpbmcsXG4gICAgY29sbGVjdGlvbnM6IHtcbiAgICAgICAgW3N0cmluZ106IENvbGxlY3Rpb25JbmZvLFxuICAgIH1cbn1cblxuZXhwb3J0IGNvbnN0IEJMT0NLQ0hBSU5fREI6IERiSW5mbyA9IHtcbiAgICBuYW1lOiAnYmxvY2tjaGFpbicsXG4gICAgY29sbGVjdGlvbnM6IHt9XG59O1xuXG5PYmplY3QuZW50cmllcyhJTkRFWEVTKS5mb3JFYWNoKChbbmFtZSwgaW5kZXhlc10pID0+IHtcbiAgICBCTE9DS0NIQUlOX0RCLmNvbGxlY3Rpb25zW25hbWVdID0ge1xuICAgICAgICBuYW1lLFxuICAgICAgICBpbmRleGVzOiBbJ19rZXknLCAuLi4oaW5kZXhlczogYW55KV0ubWFwKHBhcnNlSW5kZXgpLFxuICAgIH1cbn0pO1xuXG5leHBvcnQgY29uc3QgU1RBVFMgPSB7XG4gICAgcHJlZml4OiAncXNlcnZlci4nLFxuICAgIGRvYzoge1xuICAgICAgICBjb3VudDogJ2RvYy5jb3VudCcsXG4gICAgfSxcbiAgICBwb3N0OiB7XG4gICAgICAgIGNvdW50OiAncG9zdC5jb3VudCcsXG4gICAgICAgIGZhaWxlZDogJ3Bvc3QuZmFpbGVkJyxcbiAgICB9LFxuICAgIHF1ZXJ5OiB7XG4gICAgICAgIGNvdW50OiAncXVlcnkuY291bnQnLFxuICAgICAgICB0aW1lOiAncXVlcnkudGltZScsXG4gICAgICAgIGFjdGl2ZTogJ3F1ZXJ5LmFjdGl2ZScsXG4gICAgICAgIGZhaWxlZDogJ3F1ZXJ5LmZhaWxlZCcsXG4gICAgICAgIHNsb3c6ICdxdWVyeS5zbG93JyxcbiAgICB9LFxuICAgIHN1YnNjcmlwdGlvbjoge1xuICAgICAgICBhY3RpdmU6ICdzdWJzY3JpcHRpb24uYWN0aXZlJyxcbiAgICB9LFxuICAgIHdhaXRGb3I6IHtcbiAgICAgICAgYWN0aXZlOiAnd2FpdGZvci5hY3RpdmUnLFxuICAgIH0sXG59O1xuXG4iXX0=