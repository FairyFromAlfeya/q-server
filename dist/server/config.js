"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.QRequestsMode = void 0;

var _os = _interopRequireDefault(require("os"));

/*
 * Copyright 2018-2019 TON DEV SOLUTIONS LTD.
 *
 * Licensed under the SOFTWARE EVALUATION License (the "License"); you may not use
 * this file except in compliance with the License.  You may obtain a copy of the
 * License at:
 *
 * http://www.ton.dev/licenses
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific TON DEV software governing permissions and
 * limitations under the License.
 */
var program = require('commander');

function getIp() {
  var ipv4 = Object.values(_os["default"].networkInterfaces()).flatMap(function (x) {
    return x;
  }).find(function (x) {
    return x.family === 'IPv4' && !x.internal;
  });
  return ipv4 && ipv4.address;
}

program.option('-h, --host <host>', 'listening address', process.env.Q_SERVER_HOST || getIp()).option('-p, --port <port>', 'listening port', process.env.Q_SERVER_PORT || '4000').option('-m, --requests-mode <mode>', 'Requests mode (kafka | rest)', process.env.Q_REQUESTS_MODE || 'kafka').option('-r, --requests-server <url>', 'Requests server url', process.env.Q_REQUESTS_SERVER || 'requests').option('-t, --requests-topic <name>', 'Requests topic name', process.env.Q_REQUESTS_TOPIC || 'requests').option('-d, --db-server <address>', 'database server:port', process.env.Q_DATABASE_SERVER || 'arangodb:8529').option('-n, --db-name <name>', 'database name', process.env.Q_DATABASE_NAME || 'blockchain').option('-n, --db-version <version>', 'database schema version', process.env.Q_DATABASE_VERSION || '2').parse(process.argv);
var options = program;
var QRequestsMode = {
  kafka: 'kafka',
  rest: 'rest,'
};
exports.QRequestsMode = QRequestsMode;
var config = {
  server: {
    host: options.host,
    port: Number.parseInt(options.port)
  },
  requests: {
    mode: options.requestsMode,
    server: options.requestsServer,
    topic: options.requestsTopic
  },
  database: {
    server: options.dbServer,
    name: options.dbName,
    version: options.dbVersion
  },
  listener: {
    restartTimeout: 1000
  }
};
console.log('Using config:', config);
var _default = config;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NlcnZlci9jb25maWcuanMiXSwibmFtZXMiOlsicHJvZ3JhbSIsInJlcXVpcmUiLCJnZXRJcCIsImlwdjQiLCJPYmplY3QiLCJ2YWx1ZXMiLCJvcyIsIm5ldHdvcmtJbnRlcmZhY2VzIiwiZmxhdE1hcCIsIngiLCJmaW5kIiwiZmFtaWx5IiwiaW50ZXJuYWwiLCJhZGRyZXNzIiwib3B0aW9uIiwicHJvY2VzcyIsImVudiIsIlFfU0VSVkVSX0hPU1QiLCJRX1NFUlZFUl9QT1JUIiwiUV9SRVFVRVNUU19NT0RFIiwiUV9SRVFVRVNUU19TRVJWRVIiLCJRX1JFUVVFU1RTX1RPUElDIiwiUV9EQVRBQkFTRV9TRVJWRVIiLCJRX0RBVEFCQVNFX05BTUUiLCJRX0RBVEFCQVNFX1ZFUlNJT04iLCJwYXJzZSIsImFyZ3YiLCJvcHRpb25zIiwiUVJlcXVlc3RzTW9kZSIsImthZmthIiwicmVzdCIsImNvbmZpZyIsInNlcnZlciIsImhvc3QiLCJwb3J0IiwiTnVtYmVyIiwicGFyc2VJbnQiLCJyZXF1ZXN0cyIsIm1vZGUiLCJyZXF1ZXN0c01vZGUiLCJyZXF1ZXN0c1NlcnZlciIsInRvcGljIiwicmVxdWVzdHNUb3BpYyIsImRhdGFiYXNlIiwiZGJTZXJ2ZXIiLCJuYW1lIiwiZGJOYW1lIiwidmVyc2lvbiIsImRiVmVyc2lvbiIsImxpc3RlbmVyIiwicmVzdGFydFRpbWVvdXQiLCJjb25zb2xlIiwibG9nIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFpQkE7O0FBakJBOzs7Ozs7Ozs7Ozs7Ozs7QUFrQkEsSUFBTUEsT0FBTyxHQUFHQyxPQUFPLENBQUMsV0FBRCxDQUF2Qjs7QUFFQSxTQUFTQyxLQUFULEdBQXlCO0FBQ3JCLE1BQU1DLElBQUksR0FBSUMsTUFBTSxDQUFDQyxNQUFQLENBQWNDLGVBQUdDLGlCQUFILEVBQWQsQ0FBRCxDQUNSQyxPQURRLENBQ0EsVUFBQUMsQ0FBQztBQUFBLFdBQUlBLENBQUo7QUFBQSxHQURELEVBRVJDLElBRlEsQ0FFSCxVQUFBRCxDQUFDO0FBQUEsV0FBSUEsQ0FBQyxDQUFDRSxNQUFGLEtBQWEsTUFBYixJQUF1QixDQUFDRixDQUFDLENBQUNHLFFBQTlCO0FBQUEsR0FGRSxDQUFiO0FBR0EsU0FBT1QsSUFBSSxJQUFJQSxJQUFJLENBQUNVLE9BQXBCO0FBQ0g7O0FBY0RiLE9BQU8sQ0FDRmMsTUFETCxDQUNZLG1CQURaLEVBQ2lDLG1CQURqQyxFQUVRQyxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsYUFBWixJQUE2QmYsS0FBSyxFQUYxQyxFQUdLWSxNQUhMLENBR1ksbUJBSFosRUFHaUMsZ0JBSGpDLEVBSVFDLE9BQU8sQ0FBQ0MsR0FBUixDQUFZRSxhQUFaLElBQTZCLE1BSnJDLEVBTUtKLE1BTkwsQ0FNWSw0QkFOWixFQU0wQyw4QkFOMUMsRUFPUUMsT0FBTyxDQUFDQyxHQUFSLENBQVlHLGVBQVosSUFBK0IsT0FQdkMsRUFRS0wsTUFSTCxDQVFZLDZCQVJaLEVBUTJDLHFCQVIzQyxFQVNRQyxPQUFPLENBQUNDLEdBQVIsQ0FBWUksaUJBQVosSUFBaUMsVUFUekMsRUFVS04sTUFWTCxDQVVZLDZCQVZaLEVBVTJDLHFCQVYzQyxFQVdRQyxPQUFPLENBQUNDLEdBQVIsQ0FBWUssZ0JBQVosSUFBZ0MsVUFYeEMsRUFhS1AsTUFiTCxDQWFZLDJCQWJaLEVBYXlDLHNCQWJ6QyxFQWNRQyxPQUFPLENBQUNDLEdBQVIsQ0FBWU0saUJBQVosSUFBaUMsZUFkekMsRUFlS1IsTUFmTCxDQWVZLHNCQWZaLEVBZW9DLGVBZnBDLEVBZ0JRQyxPQUFPLENBQUNDLEdBQVIsQ0FBWU8sZUFBWixJQUErQixZQWhCdkMsRUFpQktULE1BakJMLENBaUJZLDRCQWpCWixFQWlCMEMseUJBakIxQyxFQWtCUUMsT0FBTyxDQUFDQyxHQUFSLENBQVlRLGtCQUFaLElBQWtDLEdBbEIxQyxFQW1CS0MsS0FuQkwsQ0FtQldWLE9BQU8sQ0FBQ1csSUFuQm5CO0FBcUJBLElBQU1DLE9BQXVCLEdBQUczQixPQUFoQztBQUVPLElBQU00QixhQUFhLEdBQUc7QUFDekJDLEVBQUFBLEtBQUssRUFBRSxPQURrQjtBQUV6QkMsRUFBQUEsSUFBSSxFQUFFO0FBRm1CLENBQXRCOztBQXlCUCxJQUFNQyxNQUFlLEdBQUc7QUFDcEJDLEVBQUFBLE1BQU0sRUFBRTtBQUNKQyxJQUFBQSxJQUFJLEVBQUVOLE9BQU8sQ0FBQ00sSUFEVjtBQUVKQyxJQUFBQSxJQUFJLEVBQUVDLE1BQU0sQ0FBQ0MsUUFBUCxDQUFnQlQsT0FBTyxDQUFDTyxJQUF4QjtBQUZGLEdBRFk7QUFLcEJHLEVBQUFBLFFBQVEsRUFBRTtBQUNOQyxJQUFBQSxJQUFJLEVBQUVYLE9BQU8sQ0FBQ1ksWUFEUjtBQUVOUCxJQUFBQSxNQUFNLEVBQUVMLE9BQU8sQ0FBQ2EsY0FGVjtBQUdOQyxJQUFBQSxLQUFLLEVBQUVkLE9BQU8sQ0FBQ2U7QUFIVCxHQUxVO0FBVXBCQyxFQUFBQSxRQUFRLEVBQUU7QUFDTlgsSUFBQUEsTUFBTSxFQUFFTCxPQUFPLENBQUNpQixRQURWO0FBRU5DLElBQUFBLElBQUksRUFBRWxCLE9BQU8sQ0FBQ21CLE1BRlI7QUFHTkMsSUFBQUEsT0FBTyxFQUFFcEIsT0FBTyxDQUFDcUI7QUFIWCxHQVZVO0FBZXBCQyxFQUFBQSxRQUFRLEVBQUU7QUFDTkMsSUFBQUEsY0FBYyxFQUFFO0FBRFY7QUFmVSxDQUF4QjtBQW9CQUMsT0FBTyxDQUFDQyxHQUFSLENBQVksZUFBWixFQUE2QnJCLE1BQTdCO2VBQ2VBLE0iLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IDIwMTgtMjAxOSBUT04gREVWIFNPTFVUSU9OUyBMVEQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIFNPRlRXQVJFIEVWQUxVQVRJT04gTGljZW5zZSAodGhlIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlXG4gKiB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGVcbiAqIExpY2Vuc2UgYXQ6XG4gKlxuICogaHR0cDovL3d3dy50b24uZGV2L2xpY2Vuc2VzXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBUT04gREVWIHNvZnR3YXJlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbi8vIEBmbG93XG5pbXBvcnQgb3MgZnJvbSAnb3MnO1xuY29uc3QgcHJvZ3JhbSA9IHJlcXVpcmUoJ2NvbW1hbmRlcicpO1xuXG5mdW5jdGlvbiBnZXRJcCgpOiBzdHJpbmcge1xuICAgIGNvbnN0IGlwdjQgPSAoT2JqZWN0LnZhbHVlcyhvcy5uZXR3b3JrSW50ZXJmYWNlcygpKTogYW55KVxuICAgICAgICAuZmxhdE1hcCh4ID0+IHgpXG4gICAgICAgIC5maW5kKHggPT4geC5mYW1pbHkgPT09ICdJUHY0JyAmJiAheC5pbnRlcm5hbCk7XG4gICAgcmV0dXJuIGlwdjQgJiYgaXB2NC5hZGRyZXNzO1xufVxuXG50eXBlIFByb2dyYW1PcHRpb25zID0ge1xuICAgIHJlcXVlc3RzTW9kZTogJ2thZmthJyB8ICdyZXN0JyxcbiAgICByZXF1ZXN0c1NlcnZlcjogc3RyaW5nLFxuICAgIHJlcXVlc3RzVG9waWM6IHN0cmluZyxcbiAgICBkYk5hbWU6IHN0cmluZyxcbiAgICBkYlNlcnZlcjogc3RyaW5nLFxuICAgIGRiTmFtZTogc3RyaW5nLFxuICAgIGRiVmVyc2lvbjogc3RyaW5nLFxuICAgIGhvc3Q6IHN0cmluZyxcbiAgICBwb3J0OiBzdHJpbmcsXG59XG5cbnByb2dyYW1cbiAgICAub3B0aW9uKCctaCwgLS1ob3N0IDxob3N0PicsICdsaXN0ZW5pbmcgYWRkcmVzcycsXG4gICAgICAgIHByb2Nlc3MuZW52LlFfU0VSVkVSX0hPU1QgfHwgZ2V0SXAoKSlcbiAgICAub3B0aW9uKCctcCwgLS1wb3J0IDxwb3J0PicsICdsaXN0ZW5pbmcgcG9ydCcsXG4gICAgICAgIHByb2Nlc3MuZW52LlFfU0VSVkVSX1BPUlQgfHwgJzQwMDAnKVxuXG4gICAgLm9wdGlvbignLW0sIC0tcmVxdWVzdHMtbW9kZSA8bW9kZT4nLCAnUmVxdWVzdHMgbW9kZSAoa2Fma2EgfCByZXN0KScsXG4gICAgICAgIHByb2Nlc3MuZW52LlFfUkVRVUVTVFNfTU9ERSB8fCAna2Fma2EnKVxuICAgIC5vcHRpb24oJy1yLCAtLXJlcXVlc3RzLXNlcnZlciA8dXJsPicsICdSZXF1ZXN0cyBzZXJ2ZXIgdXJsJyxcbiAgICAgICAgcHJvY2Vzcy5lbnYuUV9SRVFVRVNUU19TRVJWRVIgfHwgJ3JlcXVlc3RzJylcbiAgICAub3B0aW9uKCctdCwgLS1yZXF1ZXN0cy10b3BpYyA8bmFtZT4nLCAnUmVxdWVzdHMgdG9waWMgbmFtZScsXG4gICAgICAgIHByb2Nlc3MuZW52LlFfUkVRVUVTVFNfVE9QSUMgfHwgJ3JlcXVlc3RzJylcblxuICAgIC5vcHRpb24oJy1kLCAtLWRiLXNlcnZlciA8YWRkcmVzcz4nLCAnZGF0YWJhc2Ugc2VydmVyOnBvcnQnLFxuICAgICAgICBwcm9jZXNzLmVudi5RX0RBVEFCQVNFX1NFUlZFUiB8fCAnYXJhbmdvZGI6ODUyOScpXG4gICAgLm9wdGlvbignLW4sIC0tZGItbmFtZSA8bmFtZT4nLCAnZGF0YWJhc2UgbmFtZScsXG4gICAgICAgIHByb2Nlc3MuZW52LlFfREFUQUJBU0VfTkFNRSB8fCAnYmxvY2tjaGFpbicpXG4gICAgLm9wdGlvbignLW4sIC0tZGItdmVyc2lvbiA8dmVyc2lvbj4nLCAnZGF0YWJhc2Ugc2NoZW1hIHZlcnNpb24nLFxuICAgICAgICBwcm9jZXNzLmVudi5RX0RBVEFCQVNFX1ZFUlNJT04gfHwgJzInKVxuICAgIC5wYXJzZShwcm9jZXNzLmFyZ3YpO1xuXG5jb25zdCBvcHRpb25zOiBQcm9ncmFtT3B0aW9ucyA9IHByb2dyYW07XG5cbmV4cG9ydCBjb25zdCBRUmVxdWVzdHNNb2RlID0ge1xuICAgIGthZmthOiAna2Fma2EnLFxuICAgIHJlc3Q6ICdyZXN0LCdcbn07XG5cbmV4cG9ydCB0eXBlIFFDb25maWcgPSB7XG4gICAgc2VydmVyOiB7XG4gICAgICAgIGhvc3Q6IHN0cmluZyxcbiAgICAgICAgcG9ydDogbnVtYmVyLFxuICAgIH0sXG4gICAgcmVxdWVzdHM6IHtcbiAgICAgICAgbW9kZTogJ2thZmthJyB8ICdyZXN0JyxcbiAgICAgICAgc2VydmVyOiBzdHJpbmcsXG4gICAgICAgIHRvcGljOiBzdHJpbmcsXG4gICAgfSxcbiAgICBkYXRhYmFzZToge1xuICAgICAgICBzZXJ2ZXI6IHN0cmluZyxcbiAgICAgICAgbmFtZTogc3RyaW5nLFxuICAgICAgICB2ZXJzaW9uOiBzdHJpbmcsXG4gICAgfSxcbiAgICBsaXN0ZW5lcjoge1xuICAgICAgICByZXN0YXJ0VGltZW91dDogbnVtYmVyXG4gICAgfVxufVxuXG5jb25zdCBjb25maWc6IFFDb25maWcgPSB7XG4gICAgc2VydmVyOiB7XG4gICAgICAgIGhvc3Q6IG9wdGlvbnMuaG9zdCxcbiAgICAgICAgcG9ydDogTnVtYmVyLnBhcnNlSW50KG9wdGlvbnMucG9ydCksXG4gICAgfSxcbiAgICByZXF1ZXN0czoge1xuICAgICAgICBtb2RlOiBvcHRpb25zLnJlcXVlc3RzTW9kZSxcbiAgICAgICAgc2VydmVyOiBvcHRpb25zLnJlcXVlc3RzU2VydmVyLFxuICAgICAgICB0b3BpYzogb3B0aW9ucy5yZXF1ZXN0c1RvcGljLFxuICAgIH0sXG4gICAgZGF0YWJhc2U6IHtcbiAgICAgICAgc2VydmVyOiBvcHRpb25zLmRiU2VydmVyLFxuICAgICAgICBuYW1lOiBvcHRpb25zLmRiTmFtZSxcbiAgICAgICAgdmVyc2lvbjogb3B0aW9ucy5kYlZlcnNpb24sXG4gICAgfSxcbiAgICBsaXN0ZW5lcjoge1xuICAgICAgICByZXN0YXJ0VGltZW91dDogMTAwMFxuICAgIH1cbn07XG5cbmNvbnNvbGUubG9nKCdVc2luZyBjb25maWc6JywgY29uZmlnKTtcbmV4cG9ydCBkZWZhdWx0IGNvbmZpZztcbiJdfQ==