"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ensureProtocol = ensureProtocol;
exports.STATS = exports.BLOCKCHAIN_DB = exports.QRequestsMode = void 0;

var _dbTypes = require("./db-types");

/*
 * Copyright 2018-2020 TON DEV SOLUTIONS LTD.
 *
 * Licensed under the SOFTWARE EVALUATION License (the "License"); you may not use
 * this file except in compliance with the License.  You may obtain a copy of the
 * License at:
 *
 * http://www.ton.dev/licenses
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific TON DEV software governing permissions and
 * limitations under the License.
 */
const QRequestsMode = {
  kafka: 'kafka',
  rest: 'rest,'
};
exports.QRequestsMode = QRequestsMode;

function ensureProtocol(address, defaultProtocol) {
  return /^\w+:\/\//gi.test(address) ? address : `${defaultProtocol}://${address}`;
}

const INDEXES = {
  blocks: ['seq_no, gen_utime', 'gen_utime', 'workchain_id, shard, seq_no', 'workchain_id, seq_no', 'workchain_id, gen_utime', 'master.min_shard_gen_utime'],
  accounts: ['last_trans_lt', 'balance'],
  messages: ['block_id', 'value, created_at', 'src, value, created_at', 'dst, value, created_at', 'src, created_at', 'dst, created_at', 'src, dst, created_at, _key', 'created_lt', 'created_at'],
  transactions: ['block_id', 'in_msg', 'out_msgs[*]', 'account_addr, now', 'now', 'lt', 'account_addr, orig_status, end_status', 'now, account_addr, lt'],
  blocks_signatures: []
};
const BLOCKCHAIN_DB = {
  name: 'blockchain',
  collections: {}
};
exports.BLOCKCHAIN_DB = BLOCKCHAIN_DB;
Object.entries(INDEXES).forEach(([name, indexes]) => {
  BLOCKCHAIN_DB.collections[name] = {
    name,
    indexes: ['_key', ...indexes].map(_dbTypes.parseIndex)
  };
});
const STATS = {
  prefix: 'qserver.',
  doc: {
    count: 'doc.count'
  },
  query: {
    count: 'query.count',
    time: 'query.time',
    active: 'query.active'
  },
  subscription: {
    active: 'subscription.active'
  },
  waitFor: {
    active: 'waitfor.active'
  }
};
exports.STATS = STATS;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NlcnZlci9jb25maWcuanMiXSwibmFtZXMiOlsiUVJlcXVlc3RzTW9kZSIsImthZmthIiwicmVzdCIsImVuc3VyZVByb3RvY29sIiwiYWRkcmVzcyIsImRlZmF1bHRQcm90b2NvbCIsInRlc3QiLCJJTkRFWEVTIiwiYmxvY2tzIiwiYWNjb3VudHMiLCJtZXNzYWdlcyIsInRyYW5zYWN0aW9ucyIsImJsb2Nrc19zaWduYXR1cmVzIiwiQkxPQ0tDSEFJTl9EQiIsIm5hbWUiLCJjb2xsZWN0aW9ucyIsIk9iamVjdCIsImVudHJpZXMiLCJmb3JFYWNoIiwiaW5kZXhlcyIsIm1hcCIsInBhcnNlSW5kZXgiLCJTVEFUUyIsInByZWZpeCIsImRvYyIsImNvdW50IiwicXVlcnkiLCJ0aW1lIiwiYWN0aXZlIiwic3Vic2NyaXB0aW9uIiwid2FpdEZvciJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFrQkE7O0FBbEJBOzs7Ozs7Ozs7Ozs7Ozs7QUFvQk8sTUFBTUEsYUFBYSxHQUFHO0FBQ3pCQyxFQUFBQSxLQUFLLEVBQUUsT0FEa0I7QUFFekJDLEVBQUFBLElBQUksRUFBRTtBQUZtQixDQUF0Qjs7O0FBMENBLFNBQVNDLGNBQVQsQ0FBd0JDLE9BQXhCLEVBQXlDQyxlQUF6QyxFQUEwRTtBQUM3RSxTQUFPLGNBQWNDLElBQWQsQ0FBbUJGLE9BQW5CLElBQThCQSxPQUE5QixHQUF5QyxHQUFFQyxlQUFnQixNQUFLRCxPQUFRLEVBQS9FO0FBQ0g7O0FBRUQsTUFBTUcsT0FFTCxHQUFHO0FBQ0FDLEVBQUFBLE1BQU0sRUFBRSxDQUNKLG1CQURJLEVBRUosV0FGSSxFQUdKLDZCQUhJLEVBSUosc0JBSkksRUFLSix5QkFMSSxFQU1KLDRCQU5JLENBRFI7QUFTQUMsRUFBQUEsUUFBUSxFQUFFLENBQ04sZUFETSxFQUVOLFNBRk0sQ0FUVjtBQWFBQyxFQUFBQSxRQUFRLEVBQUUsQ0FDTixVQURNLEVBRU4sbUJBRk0sRUFHTix3QkFITSxFQUlOLHdCQUpNLEVBS04saUJBTE0sRUFNTixpQkFOTSxFQU9OLDRCQVBNLEVBUU4sWUFSTSxFQVNOLFlBVE0sQ0FiVjtBQXdCQUMsRUFBQUEsWUFBWSxFQUFFLENBQ1YsVUFEVSxFQUVWLFFBRlUsRUFHVixhQUhVLEVBSVYsbUJBSlUsRUFLVixLQUxVLEVBTVYsSUFOVSxFQU9WLHVDQVBVLEVBUVYsdUJBUlUsQ0F4QmQ7QUFrQ0FDLEVBQUFBLGlCQUFpQixFQUFFO0FBbENuQixDQUZKO0FBdURPLE1BQU1DLGFBQXFCLEdBQUc7QUFDakNDLEVBQUFBLElBQUksRUFBRSxZQUQyQjtBQUVqQ0MsRUFBQUEsV0FBVyxFQUFFO0FBRm9CLENBQTlCOztBQUtQQyxNQUFNLENBQUNDLE9BQVAsQ0FBZVYsT0FBZixFQUF3QlcsT0FBeEIsQ0FBZ0MsQ0FBQyxDQUFDSixJQUFELEVBQU9LLE9BQVAsQ0FBRCxLQUFxQjtBQUNqRE4sRUFBQUEsYUFBYSxDQUFDRSxXQUFkLENBQTBCRCxJQUExQixJQUFrQztBQUM5QkEsSUFBQUEsSUFEOEI7QUFFOUJLLElBQUFBLE9BQU8sRUFBRSxDQUFDLE1BQUQsRUFBUyxHQUFJQSxPQUFiLEVBQTRCQyxHQUE1QixDQUFnQ0MsbUJBQWhDO0FBRnFCLEdBQWxDO0FBSUgsQ0FMRDtBQU9PLE1BQU1DLEtBQUssR0FBRztBQUNqQkMsRUFBQUEsTUFBTSxFQUFFLFVBRFM7QUFFakJDLEVBQUFBLEdBQUcsRUFBRTtBQUNEQyxJQUFBQSxLQUFLLEVBQUU7QUFETixHQUZZO0FBS2pCQyxFQUFBQSxLQUFLLEVBQUU7QUFDSEQsSUFBQUEsS0FBSyxFQUFFLGFBREo7QUFFSEUsSUFBQUEsSUFBSSxFQUFFLFlBRkg7QUFHSEMsSUFBQUEsTUFBTSxFQUFFO0FBSEwsR0FMVTtBQVVqQkMsRUFBQUEsWUFBWSxFQUFFO0FBQ1ZELElBQUFBLE1BQU0sRUFBRTtBQURFLEdBVkc7QUFhakJFLEVBQUFBLE9BQU8sRUFBRTtBQUNMRixJQUFBQSxNQUFNLEVBQUU7QUFESDtBQWJRLENBQWQiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IDIwMTgtMjAyMCBUT04gREVWIFNPTFVUSU9OUyBMVEQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIFNPRlRXQVJFIEVWQUxVQVRJT04gTGljZW5zZSAodGhlIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlXG4gKiB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGVcbiAqIExpY2Vuc2UgYXQ6XG4gKlxuICogaHR0cDovL3d3dy50b24uZGV2L2xpY2Vuc2VzXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBUT04gREVWIHNvZnR3YXJlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbi8vIEBmbG93XG5cbmltcG9ydCB7IHBhcnNlSW5kZXggfSBmcm9tIFwiLi9kYi10eXBlc1wiO1xuXG5leHBvcnQgY29uc3QgUVJlcXVlc3RzTW9kZSA9IHtcbiAgICBrYWZrYTogJ2thZmthJyxcbiAgICByZXN0OiAncmVzdCwnXG59O1xuXG5leHBvcnQgdHlwZSBRRGJDb25maWcgPSB7XG4gICAgc2VydmVyOiBzdHJpbmcsXG4gICAgbmFtZTogc3RyaW5nLFxuICAgIGF1dGg6IHN0cmluZyxcbiAgICBtYXhTb2NrZXRzOiBudW1iZXIsXG59O1xuXG5leHBvcnQgdHlwZSBRQ29uZmlnID0ge1xuICAgIHNlcnZlcjoge1xuICAgICAgICBob3N0OiBzdHJpbmcsXG4gICAgICAgIHBvcnQ6IG51bWJlcixcbiAgICAgICAgcnBjUG9ydDogc3RyaW5nLFxuICAgIH0sXG4gICAgcmVxdWVzdHM6IHtcbiAgICAgICAgbW9kZTogJ2thZmthJyB8ICdyZXN0JyxcbiAgICAgICAgc2VydmVyOiBzdHJpbmcsXG4gICAgICAgIHRvcGljOiBzdHJpbmcsXG4gICAgfSxcbiAgICBkYXRhYmFzZTogUURiQ29uZmlnLFxuICAgIHNsb3dEYXRhYmFzZTogUURiQ29uZmlnLFxuICAgIGxpc3RlbmVyOiB7XG4gICAgICAgIHJlc3RhcnRUaW1lb3V0OiBudW1iZXJcbiAgICB9LFxuICAgIGF1dGhvcml6YXRpb246IHtcbiAgICAgICAgZW5kcG9pbnQ6IHN0cmluZyxcbiAgICB9LFxuICAgIGphZWdlcjoge1xuICAgICAgICBlbmRwb2ludDogc3RyaW5nLFxuICAgICAgICBzZXJ2aWNlOiBzdHJpbmcsXG4gICAgICAgIHRhZ3M6IHsgW3N0cmluZ106IHN0cmluZyB9XG4gICAgfSxcbiAgICBzdGF0c2Q6IHtcbiAgICAgICAgc2VydmVyOiBzdHJpbmcsXG4gICAgfSxcbiAgICBtYW1BY2Nlc3NLZXlzOiBTZXQ8c3RyaW5nPixcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGVuc3VyZVByb3RvY29sKGFkZHJlc3M6IHN0cmluZywgZGVmYXVsdFByb3RvY29sOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiAvXlxcdys6XFwvXFwvL2dpLnRlc3QoYWRkcmVzcykgPyBhZGRyZXNzIDogYCR7ZGVmYXVsdFByb3RvY29sfTovLyR7YWRkcmVzc31gO1xufVxuXG5jb25zdCBJTkRFWEVTOiB7XG4gICAgW3N0cmluZ106IHN0cmluZ1tdLFxufSA9IHtcbiAgICBibG9ja3M6IFtcbiAgICAgICAgJ3NlcV9ubywgZ2VuX3V0aW1lJyxcbiAgICAgICAgJ2dlbl91dGltZScsXG4gICAgICAgICd3b3JrY2hhaW5faWQsIHNoYXJkLCBzZXFfbm8nLFxuICAgICAgICAnd29ya2NoYWluX2lkLCBzZXFfbm8nLFxuICAgICAgICAnd29ya2NoYWluX2lkLCBnZW5fdXRpbWUnLFxuICAgICAgICAnbWFzdGVyLm1pbl9zaGFyZF9nZW5fdXRpbWUnLFxuICAgIF0sXG4gICAgYWNjb3VudHM6IFtcbiAgICAgICAgJ2xhc3RfdHJhbnNfbHQnLFxuICAgICAgICAnYmFsYW5jZScsXG4gICAgXSxcbiAgICBtZXNzYWdlczogW1xuICAgICAgICAnYmxvY2tfaWQnLFxuICAgICAgICAndmFsdWUsIGNyZWF0ZWRfYXQnLFxuICAgICAgICAnc3JjLCB2YWx1ZSwgY3JlYXRlZF9hdCcsXG4gICAgICAgICdkc3QsIHZhbHVlLCBjcmVhdGVkX2F0JyxcbiAgICAgICAgJ3NyYywgY3JlYXRlZF9hdCcsXG4gICAgICAgICdkc3QsIGNyZWF0ZWRfYXQnLFxuICAgICAgICAnc3JjLCBkc3QsIGNyZWF0ZWRfYXQsIF9rZXknLFxuICAgICAgICAnY3JlYXRlZF9sdCcsXG4gICAgICAgICdjcmVhdGVkX2F0JyxcbiAgICBdLFxuICAgIHRyYW5zYWN0aW9uczogW1xuICAgICAgICAnYmxvY2tfaWQnLFxuICAgICAgICAnaW5fbXNnJyxcbiAgICAgICAgJ291dF9tc2dzWypdJyxcbiAgICAgICAgJ2FjY291bnRfYWRkciwgbm93JyxcbiAgICAgICAgJ25vdycsXG4gICAgICAgICdsdCcsXG4gICAgICAgICdhY2NvdW50X2FkZHIsIG9yaWdfc3RhdHVzLCBlbmRfc3RhdHVzJyxcbiAgICAgICAgJ25vdywgYWNjb3VudF9hZGRyLCBsdCcsXG4gICAgXSxcbiAgICBibG9ja3Nfc2lnbmF0dXJlczogW10sXG59O1xuXG5leHBvcnQgdHlwZSBJbmRleEluZm8gPSB7XG4gICAgZmllbGRzOiBzdHJpbmdbXSxcbn1cblxuZXhwb3J0IHR5cGUgQ29sbGVjdGlvbkluZm8gPSB7XG4gICAgbmFtZTogc3RyaW5nLFxuICAgIGluZGV4ZXM6IEluZGV4SW5mb1tdLFxufTtcblxuZXhwb3J0IHR5cGUgRGJJbmZvID0ge1xuICAgIG5hbWU6IHN0cmluZyxcbiAgICBjb2xsZWN0aW9uczoge1xuICAgICAgICBbc3RyaW5nXTogQ29sbGVjdGlvbkluZm8sXG4gICAgfVxufVxuXG5leHBvcnQgY29uc3QgQkxPQ0tDSEFJTl9EQjogRGJJbmZvID0ge1xuICAgIG5hbWU6ICdibG9ja2NoYWluJyxcbiAgICBjb2xsZWN0aW9uczoge31cbn07XG5cbk9iamVjdC5lbnRyaWVzKElOREVYRVMpLmZvckVhY2goKFtuYW1lLCBpbmRleGVzXSkgPT4ge1xuICAgIEJMT0NLQ0hBSU5fREIuY29sbGVjdGlvbnNbbmFtZV0gPSB7XG4gICAgICAgIG5hbWUsXG4gICAgICAgIGluZGV4ZXM6IFsnX2tleScsIC4uLihpbmRleGVzOiBhbnkpXS5tYXAocGFyc2VJbmRleCksXG4gICAgfVxufSk7XG5cbmV4cG9ydCBjb25zdCBTVEFUUyA9IHtcbiAgICBwcmVmaXg6ICdxc2VydmVyLicsXG4gICAgZG9jOiB7XG4gICAgICAgIGNvdW50OiAnZG9jLmNvdW50JyxcbiAgICB9LFxuICAgIHF1ZXJ5OiB7XG4gICAgICAgIGNvdW50OiAncXVlcnkuY291bnQnLFxuICAgICAgICB0aW1lOiAncXVlcnkudGltZScsXG4gICAgICAgIGFjdGl2ZTogJ3F1ZXJ5LmFjdGl2ZScsXG4gICAgfSxcbiAgICBzdWJzY3JpcHRpb246IHtcbiAgICAgICAgYWN0aXZlOiAnc3Vic2NyaXB0aW9uLmFjdGl2ZScsXG4gICAgfSxcbiAgICB3YWl0Rm9yOiB7XG4gICAgICAgIGFjdGl2ZTogJ3dhaXRmb3IuYWN0aXZlJyxcbiAgICB9LFxufTtcblxuIl19