"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AggregationHelperFactory = exports.AggregationFn = void 0;

var _resolversGenerated = require("./resolvers-generated");

const AggregationFn = {
  COUNT: 'COUNT',
  MIN: 'MIN',
  MAX: 'MAX',
  SUM: 'SUM',
  AVERAGE: 'AVERAGE'
};
exports.AggregationFn = AggregationFn;

// Query Builders

/**
 * Returns query parts in form of:
 * { collect: 'a<i> = <exprs0>', result: 'a<i>'} if exprs.length === 1
 * or
 * { collect: 'a<i> = <exprs0>, b<i> = <exprs1>, ..'., result: '{ a: a<i>, b: b<i>, ... }'}
 * if exprs.length > 1
 *
 * @param exprs
 * @param context
 * @return {{result: string, collects: string}}
 */
function queryParts(context, ...exprs) {
  const n = 'abcdef';

  const v = i => `${n[i]}${context.index}`; // 'a0' | 'b0' | ...


  const collectExpr = (x, i) => `${v(i)} = ${x}`; // 'a0 = expr[0]' | 'b0 = expr[1]' | ...


  const returnExpr = (x, i) => `${n[i]}: ${v(i)}`; // 'a: a0' | 'b: b0' | ...


  return {
    collect: exprs.map(collectExpr).join(', '),
    // 'a0 = expr[0], b0 = expr[1], ...'
    result: exprs.length === 1 ? `${v(0)}` // 'a0'
    : `{ ${exprs.map(returnExpr).join(', ')} }` // '{ a: a0, b: b0, ... }'

  };
}

const countField = {
  type: 'string',
  path: ''
};

function count(context) {
  return queryParts(context, 'COUNT(doc)');
}

function simple(context) {
  const fn = context.fn;
  return queryParts(context, context.isArray ? `${fn}(${fn}(${context.field.path}))` : `${fn}(${context.field.path})`);
}

function bigIntToNum(hex) {
  return `TO_NUMBER(CONCAT("0x", ${hex}))`;
}

function bigIntHiPart(path, prefix) {
  return bigIntToNum(`SUBSTRING(${path}, ${prefix}, LENGTH(${path}) - ${prefix + 8})`);
}

function bigIntLoPart(path, prefix) {
  return bigIntToNum(`RIGHT(SUBSTRING(${path}, ${prefix}), 8)`);
}

function bigIntSumExpr(part, context) {
  const path = context.field.path;
  const prefix = context.bigIntPrefix;
  return context.isArray ? `SUM(SUM((${path})[* RETURN ${part('CURRENT', prefix)}]))` : `SUM(${part(path, prefix)})`;
}

function bigIntSum(context) {
  return queryParts(context, bigIntSumExpr(bigIntHiPart, context), bigIntSumExpr(bigIntLoPart, context));
}

function bigIntAvg(context) {
  return queryParts(context, bigIntSumExpr(bigIntHiPart, context), bigIntSumExpr(bigIntLoPart, context), context.isArray ? `SUM(COUNT(${context.field.path}))` : `COUNT(doc)`);
} // Result converters


function convertNone(context, value) {
  return value;
}

function bigIntString(context, value) {
  if (typeof value === 'number') {
    return value.toString();
  } //$FlowFixMe


  return BigInt(`0x${value.substr(context.bigIntPrefix)}`).toString();
} //$FlowFixMe


function bigIntFromParts(parts) {
  const h = BigInt(`0x${Math.round(parts.a).toString(16)}00000000`);
  const l = BigInt(Math.round(parts.b));
  return h + l;
}

function bigIntParts(context, value) {
  return bigIntFromParts(value).toString();
}

function bigIntPartsAvg(context, value) {
  const sum = bigIntFromParts(value);
  const count = Number(value.c || 0);
  const avg = count > 0 ? sum / BigInt(Math.round(count)) : sum;
  return avg.toString();
}

class AggregationHelperFactory {
  static create(collection, index, aggregation) {
    const field = _resolversGenerated.scalarFields.get(`${collection}.${aggregation.field || 'id'}`) || countField;
    const fn = aggregation.fn || AggregationFn.COUNT;
    const context = {
      index,
      field,
      fn,
      bigIntPrefix: field.type === 'uint1024' ? 2 : field.type === 'uint64' ? 1 : 0,
      isArray: field.path.includes('[*]')
    };

    if (context.fn === AggregationFn.COUNT) {
      return {
        context,
        buildQuery: count,
        convertResult: convertNone
      };
    }

    if (context.field.path === '') {
      throw new Error(`[${aggregation.field}] can't be aggregated`);
    }

    if (fn === AggregationFn.MIN || fn === AggregationFn.MAX) {
      return {
        context,
        buildQuery: simple,
        convertResult: context.bigIntPrefix > 0 ? bigIntString : convertNone
      };
    }

    if (field.type === 'number') {
      return {
        context,
        buildQuery: simple,
        convertResult: convertNone
      };
    }

    if (context.bigIntPrefix > 0) {
      return context.fn === AggregationFn.AVERAGE ? {
        context,
        buildQuery: bigIntAvg,
        convertResult: bigIntPartsAvg
      } : {
        context,
        buildQuery: bigIntSum,
        convertResult: bigIntParts
      };
    }

    throw new Error(`[${aggregation.field}] can't be used with [${fn}]`);
  }

  static createQuery(collection, filter, argFields) {
    const filterSection = filter ? `FILTER ${filter}` : '';
    const fields = Array.isArray(argFields) && argFields.length > 0 ? argFields : [{
      field: '',
      fn: AggregationFn.COUNT
    }];
    const helpers = fields.map((aggregation, i) => {
      return AggregationHelperFactory.create(collection, i, aggregation);
    });
    let text;
    const isSingleCount = fields.length === 1 && fields[0].fn === AggregationFn.COUNT;

    if (isSingleCount) {
      if (filterSection !== '') {
        text = `
                    FOR doc IN ${collection}
                    ${filterSection}
                    COLLECT WITH COUNT INTO a0
                    RETURN [a0]`;
      } else {
        text = `RETURN [LENGTH(${collection})]`;
      }
    } else {
      const queries = helpers.map(x => x.buildQuery(x.context));
      text = `
                FOR doc IN ${collection}
                ${filterSection}
                COLLECT AGGREGATE ${queries.map(x => x.collect).join(', ')}
                RETURN [${queries.map(x => x.result).join(', ')}]`;
    }

    return {
      text,
      helpers
    };
  }

  static convertResults(results, helpers) {
    return results.map((x, i) => {
      if (x === undefined || x === null) {
        return x;
      }

      const helper = helpers[i];
      return helper.convertResult(helper.context, x);
    });
  }

}

exports.AggregationHelperFactory = AggregationHelperFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,