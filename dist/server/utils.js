"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cleanError = cleanError;
exports.createError = createError;
exports.wrap = wrap;
exports.parseSelectionSet = parseSelectionSet;
exports.selectionToString = selectionToString;
exports.selectFields = selectFields;
exports.toLog = toLog;
exports.RegistryMap = void 0;

function cleanError(error) {
  if ('ArangoError' in error) {
    return error.ArangoError;
  }

  delete error.request;
  delete error.response;
  error.stack = '...';
  return error;
}

function createError(code, message, source = 'graphql') {
  const error = new Error(message);
  error.source = source;
  error.code = code;
  error.stack = '...';
  return error;
}

function isInternalServerError(error) {
  if ('type' in error && error.type === 'system') {
    return true;
  }

  if ('errno' in error && 'syscall' in error) {
    return true;
  }
}

async function wrap(log, op, args, fetch) {
  try {
    return await fetch();
  } catch (err) {
    let cleaned = cleanError(err);
    log.error('FAILED', op, args, cleaned);

    if (isInternalServerError(cleaned)) {
      cleaned = createError(500, 'Service temporary unavailable');
    }

    throw cleaned;
  }
}

class RegistryMap {
  constructor(name) {
    this.name = name;
    this.lastId = 0;
    this.items = new Map();
  }

  add(item) {
    let id = this.lastId;

    do {
      id = id < Number.MAX_SAFE_INTEGER ? id + 1 : 1;
    } while (this.items.has(id));

    this.lastId = id;
    this.items.set(id, item);
    return id;
  }

  remove(id) {
    if (!this.items.delete(id)) {
      console.error(`Failed to remove ${this.name}: item with id [${id}] does not exists`);
    }
  }

  entries() {
    return [...this.items.entries()];
  }

  values() {
    return [...this.items.values()];
  }

}

exports.RegistryMap = RegistryMap;

function parseSelectionSet(selectionSet, returnFieldSelection) {
  const fields = [];
  const selections = selectionSet && selectionSet.selections;

  if (selections) {
    for (const item of selections) {
      const name = item.name && item.name.value || '';

      if (name) {
        const field = {
          name,
          selection: parseSelectionSet(item.selectionSet, '')
        };

        if (returnFieldSelection !== '' && field.name === returnFieldSelection) {
          return field.selection;
        }

        fields.push(field);
      }
    }
  }

  return fields;
}

function selectionToString(selection) {
  return selection.filter(x => x.name !== '__typename').map(field => {
    const fieldSelection = selectionToString(field.selection);
    return `${field.name}${fieldSelection !== '' ? ` { ${fieldSelection} }` : ''}`;
  }).join(' ');
}

function selectFields(doc, selection) {
  if (selection.length === 0) {
    return doc;
  }

  if (Array.isArray(doc)) {
    return doc.map(x => selectFields(x, selection));
  }

  const selected = {};

  if (doc._key) {
    selected._key = doc._key;
    selected.id = doc._key;
  }

  for (const item of selection) {
    const requiredForJoin = {
      in_message: ['in_msg'],
      out_messages: ['out_msg'],
      signatures: ['id'],
      src_transaction: ['id', 'msg_type'],
      dst_transaction: ['id', 'msg_type']
    }[item.name];

    if (requiredForJoin !== undefined) {
      requiredForJoin.forEach(field => {
        if (doc[field] !== undefined) {
          selected[field] = doc[field];
        }
      });
    }

    const value = doc[item.name];

    if (value !== undefined) {
      selected[item.name] = item.selection.length > 0 ? selectFields(value, item.selection) : value;
    }
  }

  return selected;
}

function toLog(value, objs) {
  const typeOf = typeof value;

  switch (typeOf) {
    case "undefined":
    case "boolean":
    case "number":
    case "bigint":
    case "symbol":
      return value;

    case "string":
      if (value.length > 80) {
        return `${value.substr(0, 50)}â€¦ [${value.length}]`;
      }

      return value;

    case "function":
      return undefined;

    default:
      if (value === null) {
        return value;
      }

      if (objs && objs.includes(value)) {
        return undefined;
      }

      const newObjs = objs ? [...objs, value] : [value];

      if (Array.isArray(value)) {
        return value.map(x => toLog(x, newObjs));
      }

      const valueToLog = {};
      Object.entries(value).forEach(([n, v]) => {
        const propertyValueToLog = toLog(v, newObjs);

        if (propertyValueToLog !== undefined) {
          valueToLog[n] = propertyValueToLog;
        }
      });
      return valueToLog;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NlcnZlci91dGlscy5qcyJdLCJuYW1lcyI6WyJjbGVhbkVycm9yIiwiZXJyb3IiLCJBcmFuZ29FcnJvciIsInJlcXVlc3QiLCJyZXNwb25zZSIsInN0YWNrIiwiY3JlYXRlRXJyb3IiLCJjb2RlIiwibWVzc2FnZSIsInNvdXJjZSIsIkVycm9yIiwiaXNJbnRlcm5hbFNlcnZlckVycm9yIiwidHlwZSIsIndyYXAiLCJsb2ciLCJvcCIsImFyZ3MiLCJmZXRjaCIsImVyciIsImNsZWFuZWQiLCJSZWdpc3RyeU1hcCIsImNvbnN0cnVjdG9yIiwibmFtZSIsImxhc3RJZCIsIml0ZW1zIiwiTWFwIiwiYWRkIiwiaXRlbSIsImlkIiwiTnVtYmVyIiwiTUFYX1NBRkVfSU5URUdFUiIsImhhcyIsInNldCIsInJlbW92ZSIsImRlbGV0ZSIsImNvbnNvbGUiLCJlbnRyaWVzIiwidmFsdWVzIiwicGFyc2VTZWxlY3Rpb25TZXQiLCJzZWxlY3Rpb25TZXQiLCJyZXR1cm5GaWVsZFNlbGVjdGlvbiIsImZpZWxkcyIsInNlbGVjdGlvbnMiLCJ2YWx1ZSIsImZpZWxkIiwic2VsZWN0aW9uIiwicHVzaCIsInNlbGVjdGlvblRvU3RyaW5nIiwiZmlsdGVyIiwieCIsIm1hcCIsImZpZWxkU2VsZWN0aW9uIiwiam9pbiIsInNlbGVjdEZpZWxkcyIsImRvYyIsImxlbmd0aCIsIkFycmF5IiwiaXNBcnJheSIsInNlbGVjdGVkIiwiX2tleSIsInJlcXVpcmVkRm9ySm9pbiIsImluX21lc3NhZ2UiLCJvdXRfbWVzc2FnZXMiLCJzaWduYXR1cmVzIiwic3JjX3RyYW5zYWN0aW9uIiwiZHN0X3RyYW5zYWN0aW9uIiwidW5kZWZpbmVkIiwiZm9yRWFjaCIsInRvTG9nIiwib2JqcyIsInR5cGVPZiIsInN1YnN0ciIsImluY2x1ZGVzIiwibmV3T2JqcyIsInZhbHVlVG9Mb2ciLCJPYmplY3QiLCJuIiwidiIsInByb3BlcnR5VmFsdWVUb0xvZyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7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ZCxFQUFvQjtBQUNoQixlQUFPQSxLQUFQO0FBQ0g7O0FBQ0QsVUFBSTBCLElBQUksSUFBSUEsSUFBSSxDQUFDRyxRQUFMLENBQWM3QixLQUFkLENBQVosRUFBa0M7QUFDOUIsZUFBT3VCLFNBQVA7QUFDSDs7QUFDRCxZQUFNTyxPQUFPLEdBQUdKLElBQUksR0FBRyxDQUFDLEdBQUdBLElBQUosRUFBVTFCLEtBQVYsQ0FBSCxHQUFzQixDQUFDQSxLQUFELENBQTFDOztBQUNBLFVBQUlhLEtBQUssQ0FBQ0MsT0FBTixDQUFjZCxLQUFkLENBQUosRUFBMEI7QUFDdEIsZUFBT0EsS0FBSyxDQUFDTyxHQUFOLENBQVVELENBQUMsSUFBSW1CLEtBQUssQ0FBQ25CLENBQUQsRUFBSXdCLE9BQUosQ0FBcEIsQ0FBUDtBQUNIOztBQUNELFlBQU1DLFVBQTZCLEdBQUcsRUFBdEM7QUFDQUMsTUFBQUEsTUFBTSxDQUFDdkMsT0FBUCxDQUFlTyxLQUFmLEVBQXNCd0IsT0FBdEIsQ0FBOEIsQ0FBQyxDQUFDUyxDQUFELEVBQUlDLENBQUosQ0FBRCxLQUFZO0FBQ3RDLGNBQU1DLGtCQUFrQixHQUFHVixLQUFLLENBQUNTLENBQUQsRUFBSUosT0FBSixDQUFoQzs7QUFDQSxZQUFJSyxrQkFBa0IsS0FBS1osU0FBM0IsRUFBc0M7QUFDbENRLFVBQUFBLFVBQVUsQ0FBQ0UsQ0FBRCxDQUFWLEdBQWdCRSxrQkFBaEI7QUFDSDtBQUNKLE9BTEQ7QUFNQSxhQUFPSixVQUFQO0FBaENKO0FBa0NIIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBRTG9nIH0gZnJvbSAnLi9sb2dzJztcblxuZXhwb3J0IGZ1bmN0aW9uIGNsZWFuRXJyb3IoZXJyb3I6IGFueSk6IGFueSB7XG4gICAgaWYgKCdBcmFuZ29FcnJvcicgaW4gZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIGVycm9yLkFyYW5nb0Vycm9yO1xuICAgIH1cbiAgICBkZWxldGUgZXJyb3IucmVxdWVzdDtcbiAgICBkZWxldGUgZXJyb3IucmVzcG9uc2U7XG4gICAgZXJyb3Iuc3RhY2sgPSAnLi4uJztcbiAgICByZXR1cm4gZXJyb3I7XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUVycm9yKGNvZGU6IG51bWJlciwgbWVzc2FnZTogc3RyaW5nLCBzb3VyY2U6IHN0cmluZyA9ICdncmFwaHFsJyk6IEVycm9yIHtcbiAgICBjb25zdCBlcnJvciA9IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICAoZXJyb3I6IGFueSkuc291cmNlID0gc291cmNlO1xuICAgIChlcnJvcjogYW55KS5jb2RlID0gY29kZTtcbiAgICBlcnJvci5zdGFjayA9ICcuLi4nO1xuICAgIHJldHVybiBlcnJvcjtcbn1cblxuZnVuY3Rpb24gaXNJbnRlcm5hbFNlcnZlckVycm9yKGVycm9yOiBFcnJvcik6IGJvb2xlYW4ge1xuICAgIGlmICgndHlwZScgaW4gZXJyb3IgJiYgZXJyb3IudHlwZSA9PT0gJ3N5c3RlbScpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmICgnZXJybm8nIGluIGVycm9yICYmICdzeXNjYWxsJyBpbiBlcnJvcikge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB3cmFwPFI+KGxvZzogUUxvZywgb3A6IHN0cmluZywgYXJnczogYW55LCBmZXRjaDogKCkgPT4gUHJvbWlzZTxSPikge1xuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBhd2FpdCBmZXRjaCgpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBsZXQgY2xlYW5lZCA9IGNsZWFuRXJyb3IoZXJyKTtcbiAgICAgICAgbG9nLmVycm9yKCdGQUlMRUQnLCBvcCwgYXJncywgY2xlYW5lZCk7XG4gICAgICAgIGlmIChpc0ludGVybmFsU2VydmVyRXJyb3IoY2xlYW5lZCkpIHtcbiAgICAgICAgICAgIGNsZWFuZWQgPSBjcmVhdGVFcnJvcig1MDAsICdTZXJ2aWNlIHRlbXBvcmFyeSB1bmF2YWlsYWJsZScpO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IGNsZWFuZWQ7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgUmVnaXN0cnlNYXA8VD4ge1xuICAgIG5hbWU6IHN0cmluZztcbiAgICBpdGVtczogTWFwPG51bWJlciwgVD47XG4gICAgbGFzdElkOiBudW1iZXI7XG5cbiAgICBjb25zdHJ1Y3RvcihuYW1lOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgdGhpcy5sYXN0SWQgPSAwO1xuICAgICAgICB0aGlzLml0ZW1zID0gbmV3IE1hcCgpO1xuICAgIH1cblxuICAgIGFkZChpdGVtOiBUKTogbnVtYmVyIHtcbiAgICAgICAgbGV0IGlkID0gdGhpcy5sYXN0SWQ7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICAgIGlkID0gaWQgPCBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUiA/IGlkICsgMSA6IDE7XG4gICAgICAgIH0gd2hpbGUgKHRoaXMuaXRlbXMuaGFzKGlkKSk7XG4gICAgICAgIHRoaXMubGFzdElkID0gaWQ7XG4gICAgICAgIHRoaXMuaXRlbXMuc2V0KGlkLCBpdGVtKTtcbiAgICAgICAgcmV0dXJuIGlkO1xuICAgIH1cblxuICAgIHJlbW92ZShpZDogbnVtYmVyKSB7XG4gICAgICAgIGlmICghdGhpcy5pdGVtcy5kZWxldGUoaWQpKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGBGYWlsZWQgdG8gcmVtb3ZlICR7dGhpcy5uYW1lfTogaXRlbSB3aXRoIGlkIFske2lkfV0gZG9lcyBub3QgZXhpc3RzYCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBlbnRyaWVzKCk6IFtudW1iZXIsIFRdW10ge1xuICAgICAgICByZXR1cm4gWy4uLnRoaXMuaXRlbXMuZW50cmllcygpXTtcbiAgICB9XG5cbiAgICB2YWx1ZXMoKTogVFtdIHtcbiAgICAgICAgcmV0dXJuIFsuLi50aGlzLml0ZW1zLnZhbHVlcygpXTtcbiAgICB9XG59XG5cbmV4cG9ydCB0eXBlIEZpZWxkU2VsZWN0aW9uID0ge1xuICAgIG5hbWU6IHN0cmluZyxcbiAgICBzZWxlY3Rpb246IEZpZWxkU2VsZWN0aW9uW10sXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVNlbGVjdGlvblNldChzZWxlY3Rpb25TZXQ6IGFueSwgcmV0dXJuRmllbGRTZWxlY3Rpb246IHN0cmluZyk6IEZpZWxkU2VsZWN0aW9uW10ge1xuICAgIGNvbnN0IGZpZWxkczogRmllbGRTZWxlY3Rpb25bXSA9IFtdO1xuICAgIGNvbnN0IHNlbGVjdGlvbnMgPSBzZWxlY3Rpb25TZXQgJiYgc2VsZWN0aW9uU2V0LnNlbGVjdGlvbnM7XG4gICAgaWYgKHNlbGVjdGlvbnMpIHtcbiAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIHNlbGVjdGlvbnMpIHtcbiAgICAgICAgICAgIGNvbnN0IG5hbWUgPSAoaXRlbS5uYW1lICYmIGl0ZW0ubmFtZS52YWx1ZSkgfHwgJyc7XG4gICAgICAgICAgICBpZiAobmFtZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGZpZWxkOiBGaWVsZFNlbGVjdGlvbiA9IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0aW9uOiBwYXJzZVNlbGVjdGlvblNldChpdGVtLnNlbGVjdGlvblNldCwgJycpLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgaWYgKHJldHVybkZpZWxkU2VsZWN0aW9uICE9PSAnJyAmJiBmaWVsZC5uYW1lID09PSByZXR1cm5GaWVsZFNlbGVjdGlvbikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmllbGQuc2VsZWN0aW9uO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmaWVsZHMucHVzaChmaWVsZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZpZWxkcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNlbGVjdGlvblRvU3RyaW5nKHNlbGVjdGlvbjogRmllbGRTZWxlY3Rpb25bXSk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHNlbGVjdGlvblxuICAgICAgICAuZmlsdGVyKHggPT4geC5uYW1lICE9PSAnX190eXBlbmFtZScpXG4gICAgICAgIC5tYXAoKGZpZWxkOiBGaWVsZFNlbGVjdGlvbikgPT4ge1xuICAgICAgICAgICAgY29uc3QgZmllbGRTZWxlY3Rpb24gPSBzZWxlY3Rpb25Ub1N0cmluZyhmaWVsZC5zZWxlY3Rpb24pO1xuICAgICAgICAgICAgcmV0dXJuIGAke2ZpZWxkLm5hbWV9JHtmaWVsZFNlbGVjdGlvbiAhPT0gJycgPyBgIHsgJHtmaWVsZFNlbGVjdGlvbn0gfWAgOiAnJ31gO1xuICAgICAgICB9KS5qb2luKCcgJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZWxlY3RGaWVsZHMoZG9jOiBhbnksIHNlbGVjdGlvbjogRmllbGRTZWxlY3Rpb25bXSk6IGFueSB7XG4gICAgaWYgKHNlbGVjdGlvbi5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGRvYztcbiAgICB9XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZG9jKSkge1xuICAgICAgICByZXR1cm4gZG9jLm1hcCh4ID0+IHNlbGVjdEZpZWxkcyh4LCBzZWxlY3Rpb24pKTtcbiAgICB9XG4gICAgY29uc3Qgc2VsZWN0ZWQ6IGFueSA9IHt9O1xuICAgIGlmIChkb2MuX2tleSkge1xuICAgICAgICBzZWxlY3RlZC5fa2V5ID0gZG9jLl9rZXk7XG4gICAgICAgIHNlbGVjdGVkLmlkID0gZG9jLl9rZXk7XG4gICAgfVxuICAgIGZvciAoY29uc3QgaXRlbSBvZiBzZWxlY3Rpb24pIHtcbiAgICAgICAgY29uc3QgcmVxdWlyZWRGb3JKb2luID0ge1xuICAgICAgICAgICAgaW5fbWVzc2FnZTogWydpbl9tc2cnXSxcbiAgICAgICAgICAgIG91dF9tZXNzYWdlczogWydvdXRfbXNnJ10sXG4gICAgICAgICAgICBzaWduYXR1cmVzOiBbJ2lkJ10sXG4gICAgICAgICAgICBzcmNfdHJhbnNhY3Rpb246IFsnaWQnLCAnbXNnX3R5cGUnXSxcbiAgICAgICAgICAgIGRzdF90cmFuc2FjdGlvbjogWydpZCcsICdtc2dfdHlwZSddLFxuICAgICAgICB9W2l0ZW0ubmFtZV07XG4gICAgICAgIGlmIChyZXF1aXJlZEZvckpvaW4gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmVxdWlyZWRGb3JKb2luLmZvckVhY2goKGZpZWxkKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGRvY1tmaWVsZF0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZFtmaWVsZF0gPSBkb2NbZmllbGRdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHZhbHVlID0gZG9jW2l0ZW0ubmFtZV07XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBzZWxlY3RlZFtpdGVtLm5hbWVdID0gaXRlbS5zZWxlY3Rpb24ubGVuZ3RoID4gMFxuICAgICAgICAgICAgICAgID8gc2VsZWN0RmllbGRzKHZhbHVlLCBpdGVtLnNlbGVjdGlvbilcbiAgICAgICAgICAgICAgICA6IHZhbHVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzZWxlY3RlZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRvTG9nKHZhbHVlOiBhbnksIG9ianM/OiBPYmplY3RbXSk6IGFueSB7XG4gICAgY29uc3QgdHlwZU9mID0gdHlwZW9mIHZhbHVlO1xuICAgIHN3aXRjaCAodHlwZU9mKSB7XG4gICAgY2FzZSBcInVuZGVmaW5lZFwiOlxuICAgIGNhc2UgXCJib29sZWFuXCI6XG4gICAgY2FzZSBcIm51bWJlclwiOlxuICAgIGNhc2UgXCJiaWdpbnRcIjpcbiAgICBjYXNlIFwic3ltYm9sXCI6XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICBjYXNlIFwic3RyaW5nXCI6XG4gICAgICAgIGlmICh2YWx1ZS5sZW5ndGggPiA4MCkge1xuICAgICAgICAgICAgcmV0dXJuIGAke3ZhbHVlLnN1YnN0cigwLCA1MCl94oCmIFske3ZhbHVlLmxlbmd0aH1dYFxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICBjYXNlIFwiZnVuY3Rpb25cIjpcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICBkZWZhdWx0OlxuICAgICAgICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob2JqcyAmJiBvYmpzLmluY2x1ZGVzKHZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBuZXdPYmpzID0gb2JqcyA/IFsuLi5vYmpzLCB2YWx1ZV0gOiBbdmFsdWVdO1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZS5tYXAoeCA9PiB0b0xvZyh4LCBuZXdPYmpzKSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdmFsdWVUb0xvZzogeyBbc3RyaW5nXTogYW55IH0gPSB7fTtcbiAgICAgICAgT2JqZWN0LmVudHJpZXModmFsdWUpLmZvckVhY2goKFtuLCB2XSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcHJvcGVydHlWYWx1ZVRvTG9nID0gdG9Mb2codiwgbmV3T2Jqcyk7XG4gICAgICAgICAgICBpZiAocHJvcGVydHlWYWx1ZVRvTG9nICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZVRvTG9nW25dID0gcHJvcGVydHlWYWx1ZVRvTG9nO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHZhbHVlVG9Mb2dcbiAgICB9XG59XG4iXX0=