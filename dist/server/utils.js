"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.packageJson = packageJson;
exports.cleanError = cleanError;
exports.wrap = wrap;
exports.toLog = toLog;
exports.hash = hash;
exports.RegistryMap = exports.QError = void 0;

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _crypto = require("crypto");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function packageJson() {
  let testPath = _path.default.resolve(__dirname);

  const packagePath = () => _path.default.resolve(testPath, 'package.json');

  while (testPath && !_fs.default.existsSync(packagePath())) {
    testPath = _path.default.dirname(testPath);
  }

  return JSON.parse(_fs.default.readFileSync(packagePath(), 'utf8'));
}

function cleanError(error) {
  if ('ArangoError' in error) {
    return error.ArangoError;
  }

  delete error.request;
  delete error.response;
  return error;
}

const QErrorCode = {
  MESSAGE_EXPIRED: 10001,
  MULTIPLE_ACCESS_KEYS: 10002,
  UNAUTHORIZED: 10003,
  AUTH_SERVICE_UNAVAILABLE: 10004,
  AUTH_FAILED: 10005,
  QUERY_TERMINATED_ON_TIMEOUT: 10006
};

class QError {
  static messageExpired(id, expiredAt) {
    return QError.create(QErrorCode.MESSAGE_EXPIRED, `Message expired`, {
      id,
      expiredAt,
      now: Date.now()
    });
  }

  static queryTerminatedOnTimeout() {
    return QError.create(QErrorCode.QUERY_TERMINATED_ON_TIMEOUT, `Query terminated on timeout`, {
      now: Date.now()
    });
  }

  static create(code, message, data) {
    const error = new Error(message);
    error.source = 'graphql';
    error.code = code;

    if (data !== undefined) {
      error.data = data;
    }

    return error;
  }

  static multipleAccessKeys() {
    return QError.create(QErrorCode.MULTIPLE_ACCESS_KEYS, 'Request must use the same access key for all queries and mutations');
  }

  static unauthorized() {
    return QError.create(QErrorCode.UNAUTHORIZED, 'Unauthorized');
  }

  static authServiceUnavailable() {
    return QError.create(QErrorCode.AUTH_SERVICE_UNAVAILABLE, 'Auth service unavailable');
  }

  static auth(error) {
    return QError.create(QErrorCode.AUTH_FAILED, error.message || error.description, {
      authErrorCode: error.code
    });
  }

}

exports.QError = QError;

function isInternalServerError(error) {
  if ('type' in error && error.type === 'system') {
    return true;
  }

  if ('errno' in error && 'syscall' in error) {
    return true;
  }
}

async function wrap(log, op, args, fetch) {
  try {
    return await fetch();
  } catch (err) {
    let cleaned = cleanError(err);
    log.error('FAILED', op, args, cleaned);

    if (isInternalServerError(cleaned)) {
      cleaned = QError.create(500, 'Service temporary unavailable');
    }

    throw cleaned;
  }
}

class RegistryMap {
  constructor(name) {
    this.name = name;
    this.lastId = 0;
    this.items = new Map();
  }

  add(item) {
    let id = this.lastId;

    do {
      id = id < Number.MAX_SAFE_INTEGER ? id + 1 : 1;
    } while (this.items.has(id));

    this.lastId = id;
    this.items.set(id, item);
    return id;
  }

  remove(id) {
    if (!this.items.delete(id)) {
      console.error(`Failed to remove ${this.name}: item with id [${id}] does not exists`);
    }
  }

  entries() {
    return [...this.items.entries()];
  }

  values() {
    return [...this.items.values()];
  }

}

exports.RegistryMap = RegistryMap;

function toLog(value, objs) {
  const typeOf = typeof value;

  switch (typeOf) {
    case "undefined":
    case "boolean":
    case "number":
    case "bigint":
    case "symbol":
      return value;

    case "string":
      if (value.length > 80) {
        return `${value.substr(0, 50)}â€¦ [${value.length}]`;
      }

      return value;

    case "function":
      return undefined;

    default:
      if (value === null) {
        return value;
      }

      if (objs && objs.includes(value)) {
        return undefined;
      }

      const newObjs = objs ? [...objs, value] : [value];

      if (Array.isArray(value)) {
        return value.map(x => toLog(x, newObjs));
      }

      const valueToLog = {};
      Object.entries(value).forEach(([n, v]) => {
        const propertyValueToLog = toLog(v, newObjs);

        if (propertyValueToLog !== undefined) {
          valueToLog[n] = propertyValueToLog;
        }
      });
      return valueToLog;
  }
}

function hash(...keys) {
  return (0, _crypto.createHash)('md5').update(keys.join('')).digest("hex");
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,