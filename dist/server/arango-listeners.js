"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SubscriptionListener = exports.WaitForListener = exports.CollectionListener = void 0;

var _iterall = require("iterall");

var _dbTypes = require("./db-types");

var _utils = require("./utils");

class CollectionListener {
  constructor(collectionName, docType, listeners, accessRights, filter, selection, operationId) {
    this.collectionName = collectionName;
    this.docType = docType;
    this.listeners = listeners;
    this.authFilter = CollectionListener.getAuthFilter(collectionName, accessRights);
    this.filter = filter;
    this.selection = selection;
    this.id = listeners.add(this);
    this.startTime = Date.now();
    this.operationId = operationId;
  }

  static getAuthFilter(collectionName, accessRights) {
    if (accessRights.restrictToAccounts.length === 0) {
      return null;
    }

    const accounts = new Set(accessRights.restrictToAccounts);

    switch (collectionName) {
      case 'accounts':
        return doc => accounts.has(doc._key);

      case 'transactions':
        return doc => accounts.has(doc.account_addr);

      case 'messages':
        return doc => accounts.has(doc.src) || accounts.has(doc.dst);

      default:
        return _ => false;
    }
  }

  close() {
    const id = this.id;

    if (id !== null && id !== undefined) {
      this.id = null;
      this.listeners.remove(id);
    }
  }

  isFiltered(doc) {
    if (this.authFilter && !this.authFilter(doc)) {
      return false;
    }

    return this.docType.test(null, doc, this.filter);
  }

  onDocumentInsertOrUpdate(doc) {}

  getEventCount() {
    return 0;
  }

}

exports.CollectionListener = CollectionListener;

class WaitForListener extends CollectionListener {
  constructor(collectionName, docType, listeners, accessRights, filter, selection, operationId, onInsertOrUpdate) {
    super(collectionName, docType, listeners, accessRights, filter, selection, operationId);
    this.onInsertOrUpdate = onInsertOrUpdate;
  }

  onDocumentInsertOrUpdate(doc) {
    this.onInsertOrUpdate(doc);
  }

} //$FlowFixMe


exports.WaitForListener = WaitForListener;

class SubscriptionListener extends CollectionListener {
  constructor(collectionName, docType, listeners, accessRights, filter, selection) {
    super(collectionName, docType, listeners, accessRights, filter, selection, null);
    this.eventCount = 0;
    this.pullQueue = [];
    this.pushQueue = [];
    this.running = true;
  }

  onDocumentInsertOrUpdate(doc) {
    if (!this.isQueueOverflow()) {
      const reduced = (0, _dbTypes.selectFields)(doc, this.selection);
      this.pushValue({
        [this.collectionName]: reduced
      });
    }
  }

  isQueueOverflow() {
    return this.getQueueSize() >= 10;
  }

  getEventCount() {
    return this.eventCount;
  }

  getQueueSize() {
    return this.pushQueue.length + this.pullQueue.length;
  }

  pushValue(value) {
    this.eventCount += 1;

    if (this.pullQueue.length !== 0) {
      this.pullQueue.shift()(this.running ? {
        value,
        done: false
      } : {
        value: undefined,
        done: true
      });
    } else {
      this.pushQueue.push(value);
    }
  }

  async next() {
    return new Promise(resolve => {
      if (this.pushQueue.length !== 0) {
        resolve(this.running ? {
          value: this.pushQueue.shift(),
          done: false
        } : {
          value: undefined,
          done: true
        });
      } else {
        this.pullQueue.push(resolve);
      }
    });
  }

  async return() {
    this.close();
    await this.emptyQueue();
    return {
      value: undefined,
      done: true
    };
  }

  async throw(error) {
    this.close();
    await this.emptyQueue();
    return Promise.reject(error);
  } //$FlowFixMe


  [_iterall.$$asyncIterator]() {
    return this;
  }

  async emptyQueue() {
    if (this.running) {
      this.running = false;
      this.pullQueue.forEach(resolve => resolve({
        value: undefined,
        done: true
      }));
      this.pullQueue = [];
      this.pushQueue = [];
    }
  }

}

exports.SubscriptionListener = SubscriptionListener;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,