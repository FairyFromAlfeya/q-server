"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.totalsResolvers = void 0;

var _collection = require("../data/collection");

var _tracer = require("../tracer");

//------------------------------------------------------------- Query
async function getAccountsCount(_parent, args, context) {
  const tracer = context.tracer;
  return _tracer.QTracer.trace(tracer, 'getAccountsCount', async () => {
    await (0, _collection.requireGrantedAccess)(context, args);
    const result = await context.data.query(context.data.accounts.provider, `RETURN LENGTH(accounts)`, {}, []);
    const counts = result;
    return counts.length > 0 ? counts[0] : 0;
  }, _tracer.QTracer.getParentSpan(tracer, context));
}

async function getTransactionsCount(_parent, args, context) {
  const tracer = context.tracer;
  return _tracer.QTracer.trace(tracer, 'getTransactionsCount', async () => {
    await (0, _collection.requireGrantedAccess)(context, args);
    const result = await context.data.query(context.data.transactions.provider, `RETURN LENGTH(transactions)`, {}, []);
    const counts = result;
    return counts.length > 0 ? counts[0] : 0;
  }, _tracer.QTracer.getParentSpan(tracer, context));
}

async function getAccountsTotalBalance(_parent, args, context) {
  const tracer = context.tracer;
  return _tracer.QTracer.trace(tracer, 'getAccountsTotalBalance', async () => {
    await (0, _collection.requireGrantedAccess)(context, args);
    /*
    Because arango can not sum BigInt's we need to sum separately:
    hs = SUM of high bits (from 24-bit and higher)
    ls = SUM of lower 24 bits
    And the total result is (hs << 24) + ls
     */

    const result = await context.data.query(context.data.accounts.provider, `
            LET d = 16777216
            FOR a in accounts
            LET b = TO_NUMBER(CONCAT("0x", SUBSTRING(a.balance, 2)))
            COLLECT AGGREGATE
                hs = SUM(FLOOR(b / d)),
                ls = SUM(b % (d - 1))
            RETURN { hs, ls }
        `, {}, []);
    const parts = result[0];
    return (BigInt(parts.hs) * BigInt(0x1000000) + BigInt(parts.ls)).toString();
  }, _tracer.QTracer.getParentSpan(tracer, context));
}

const totalsResolvers = {
  Query: {
    getAccountsCount,
    getTransactionsCount,
    getAccountsTotalBalance
  }
};
exports.totalsResolvers = totalsResolvers;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zZXJ2ZXIvZ3JhcGhxbC90b3RhbHMuanMiXSwibmFtZXMiOlsiZ2V0QWNjb3VudHNDb3VudCIsIl9wYXJlbnQiLCJhcmdzIiwiY29udGV4dCIsInRyYWNlciIsIlFUcmFjZXIiLCJ0cmFjZSIsInJlc3VsdCIsImRhdGEiLCJxdWVyeSIsImFjY291bnRzIiwicHJvdmlkZXIiLCJjb3VudHMiLCJsZW5ndGgiLCJnZXRQYXJlbnRTcGFuIiwiZ2V0VHJhbnNhY3Rpb25zQ291bnQiLCJ0cmFuc2FjdGlvbnMiLCJnZXRBY2NvdW50c1RvdGFsQmFsYW5jZSIsInBhcnRzIiwiQmlnSW50IiwiaHMiLCJscyIsInRvU3RyaW5nIiwidG90YWxzUmVzb2x2ZXJzIiwiUXVlcnkiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFFQTs7QUFDQTs7QUFLQTtBQUVBLGVBQWVBLGdCQUFmLENBQWdDQyxPQUFoQyxFQUE4Q0MsSUFBOUMsRUFBeURDLE9BQXpELEVBQTRHO0FBQ3hHLFFBQU1DLE1BQU0sR0FBR0QsT0FBTyxDQUFDQyxNQUF2QjtBQUNBLFNBQU9DLGdCQUFRQyxLQUFSLENBQWNGLE1BQWQsRUFBc0Isa0JBQXRCLEVBQTBDLFlBQVk7QUFDekQsVUFBTSxzQ0FBcUJELE9BQXJCLEVBQThCRCxJQUE5QixDQUFOO0FBQ0EsVUFBTUssTUFBVyxHQUFHLE1BQU1KLE9BQU8sQ0FBQ0ssSUFBUixDQUFhQyxLQUFiLENBQ3RCTixPQUFPLENBQUNLLElBQVIsQ0FBYUUsUUFBYixDQUFzQkMsUUFEQSxFQUVyQix5QkFGcUIsRUFHdEIsRUFIc0IsRUFJdEIsRUFKc0IsQ0FBMUI7QUFNQSxVQUFNQyxNQUFNLEdBQUlMLE1BQWhCO0FBQ0EsV0FBT0ssTUFBTSxDQUFDQyxNQUFQLEdBQWdCLENBQWhCLEdBQW9CRCxNQUFNLENBQUMsQ0FBRCxDQUExQixHQUFnQyxDQUF2QztBQUNILEdBVk0sRUFVSlAsZ0JBQVFTLGFBQVIsQ0FBc0JWLE1BQXRCLEVBQThCRCxPQUE5QixDQVZJLENBQVA7QUFXSDs7QUFFRCxlQUFlWSxvQkFBZixDQUFvQ2QsT0FBcEMsRUFBa0RDLElBQWxELEVBQTZEQyxPQUE3RCxFQUFnSDtBQUM1RyxRQUFNQyxNQUFNLEdBQUdELE9BQU8sQ0FBQ0MsTUFBdkI7QUFDQSxTQUFPQyxnQkFBUUMsS0FBUixDQUFjRixNQUFkLEVBQXNCLHNCQUF0QixFQUE4QyxZQUFZO0FBQzdELFVBQU0sc0NBQXFCRCxPQUFyQixFQUE4QkQsSUFBOUIsQ0FBTjtBQUNBLFVBQU1LLE1BQVcsR0FBRyxNQUFNSixPQUFPLENBQUNLLElBQVIsQ0FBYUMsS0FBYixDQUN0Qk4sT0FBTyxDQUFDSyxJQUFSLENBQWFRLFlBQWIsQ0FBMEJMLFFBREosRUFFckIsNkJBRnFCLEVBR3RCLEVBSHNCLEVBSXRCLEVBSnNCLENBQTFCO0FBTUEsVUFBTUMsTUFBTSxHQUFJTCxNQUFoQjtBQUNBLFdBQU9LLE1BQU0sQ0FBQ0MsTUFBUCxHQUFnQixDQUFoQixHQUFvQkQsTUFBTSxDQUFDLENBQUQsQ0FBMUIsR0FBZ0MsQ0FBdkM7QUFDSCxHQVZNLEVBVUpQLGdCQUFRUyxhQUFSLENBQXNCVixNQUF0QixFQUE4QkQsT0FBOUIsQ0FWSSxDQUFQO0FBV0g7O0FBRUQsZUFBZWMsdUJBQWYsQ0FBdUNoQixPQUF2QyxFQUFxREMsSUFBckQsRUFBZ0VDLE9BQWhFLEVBQW1IO0FBQy9HLFFBQU1DLE1BQU0sR0FBR0QsT0FBTyxDQUFDQyxNQUF2QjtBQUNBLFNBQU9DLGdCQUFRQyxLQUFSLENBQWNGLE1BQWQsRUFBc0IseUJBQXRCLEVBQWlELFlBQVk7QUFDaEUsVUFBTSxzQ0FBcUJELE9BQXJCLEVBQThCRCxJQUE5QixDQUFOO0FBQ0E7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNRLFVBQU1LLE1BQVcsR0FBRyxNQUFNSixPQUFPLENBQUNLLElBQVIsQ0FBYUMsS0FBYixDQUN0Qk4sT0FBTyxDQUFDSyxJQUFSLENBQWFFLFFBQWIsQ0FBc0JDLFFBREEsRUFFckI7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBVmtDLEVBV3RCLEVBWHNCLEVBWXRCLEVBWnNCLENBQTFCO0FBYUEsVUFBTU8sS0FBSyxHQUFJWCxNQUFELENBQXVDLENBQXZDLENBQWQ7QUFDQSxXQUFPLENBQUNZLE1BQU0sQ0FBQ0QsS0FBSyxDQUFDRSxFQUFQLENBQU4sR0FBbUJELE1BQU0sQ0FBQyxTQUFELENBQXpCLEdBQXVDQSxNQUFNLENBQUNELEtBQUssQ0FBQ0csRUFBUCxDQUE5QyxFQUEwREMsUUFBMUQsRUFBUDtBQUNILEdBdkJNLEVBdUJKakIsZ0JBQVFTLGFBQVIsQ0FBc0JWLE1BQXRCLEVBQThCRCxPQUE5QixDQXZCSSxDQUFQO0FBd0JIOztBQUVNLE1BQU1vQixlQUFlLEdBQUc7QUFDM0JDLEVBQUFBLEtBQUssRUFBRTtBQUNIeEIsSUFBQUEsZ0JBREc7QUFFSGUsSUFBQUEsb0JBRkc7QUFHSEUsSUFBQUE7QUFIRztBQURvQixDQUF4QiIsInNvdXJjZXNDb250ZW50IjpbIi8vIEBmbG93XG5cbmltcG9ydCB7IHJlcXVpcmVHcmFudGVkQWNjZXNzIH0gZnJvbSAnLi4vZGF0YS9jb2xsZWN0aW9uJztcbmltcG9ydCB7IFFUcmFjZXIgfSBmcm9tICcuLi90cmFjZXInO1xuaW1wb3J0IHR5cGUgeyBHcmFwaFFMUmVxdWVzdENvbnRleHRFeCB9IGZyb20gXCIuL2NvbnRleHRcIjtcblxuZGVjbGFyZSBmdW5jdGlvbiBCaWdJbnQoYTogYW55KTogYW55O1xuXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gUXVlcnlcblxuYXN5bmMgZnVuY3Rpb24gZ2V0QWNjb3VudHNDb3VudChfcGFyZW50OiBhbnksIGFyZ3M6IGFueSwgY29udGV4dDogR3JhcGhRTFJlcXVlc3RDb250ZXh0RXgpOiBQcm9taXNlPG51bWJlcj4ge1xuICAgIGNvbnN0IHRyYWNlciA9IGNvbnRleHQudHJhY2VyO1xuICAgIHJldHVybiBRVHJhY2VyLnRyYWNlKHRyYWNlciwgJ2dldEFjY291bnRzQ291bnQnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIGF3YWl0IHJlcXVpcmVHcmFudGVkQWNjZXNzKGNvbnRleHQsIGFyZ3MpO1xuICAgICAgICBjb25zdCByZXN1bHQ6IGFueSA9IGF3YWl0IGNvbnRleHQuZGF0YS5xdWVyeShcbiAgICAgICAgICAgIGNvbnRleHQuZGF0YS5hY2NvdW50cy5wcm92aWRlcixcbiAgICAgICAgICAgIGBSRVRVUk4gTEVOR1RIKGFjY291bnRzKWAsXG4gICAgICAgICAgICB7fSxcbiAgICAgICAgICAgIFtdLFxuICAgICAgICApO1xuICAgICAgICBjb25zdCBjb3VudHMgPSAocmVzdWx0OiBudW1iZXJbXSk7XG4gICAgICAgIHJldHVybiBjb3VudHMubGVuZ3RoID4gMCA/IGNvdW50c1swXSA6IDA7XG4gICAgfSwgUVRyYWNlci5nZXRQYXJlbnRTcGFuKHRyYWNlciwgY29udGV4dCkpXG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldFRyYW5zYWN0aW9uc0NvdW50KF9wYXJlbnQ6IGFueSwgYXJnczogYW55LCBjb250ZXh0OiBHcmFwaFFMUmVxdWVzdENvbnRleHRFeCk6IFByb21pc2U8bnVtYmVyPiB7XG4gICAgY29uc3QgdHJhY2VyID0gY29udGV4dC50cmFjZXI7XG4gICAgcmV0dXJuIFFUcmFjZXIudHJhY2UodHJhY2VyLCAnZ2V0VHJhbnNhY3Rpb25zQ291bnQnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIGF3YWl0IHJlcXVpcmVHcmFudGVkQWNjZXNzKGNvbnRleHQsIGFyZ3MpO1xuICAgICAgICBjb25zdCByZXN1bHQ6IGFueSA9IGF3YWl0IGNvbnRleHQuZGF0YS5xdWVyeShcbiAgICAgICAgICAgIGNvbnRleHQuZGF0YS50cmFuc2FjdGlvbnMucHJvdmlkZXIsXG4gICAgICAgICAgICBgUkVUVVJOIExFTkdUSCh0cmFuc2FjdGlvbnMpYCxcbiAgICAgICAgICAgIHt9LFxuICAgICAgICAgICAgW10sXG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IGNvdW50cyA9IChyZXN1bHQ6IG51bWJlcltdKTtcbiAgICAgICAgcmV0dXJuIGNvdW50cy5sZW5ndGggPiAwID8gY291bnRzWzBdIDogMDtcbiAgICB9LCBRVHJhY2VyLmdldFBhcmVudFNwYW4odHJhY2VyLCBjb250ZXh0KSlcbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0QWNjb3VudHNUb3RhbEJhbGFuY2UoX3BhcmVudDogYW55LCBhcmdzOiBhbnksIGNvbnRleHQ6IEdyYXBoUUxSZXF1ZXN0Q29udGV4dEV4KTogUHJvbWlzZTxTdHJpbmc+IHtcbiAgICBjb25zdCB0cmFjZXIgPSBjb250ZXh0LnRyYWNlcjtcbiAgICByZXR1cm4gUVRyYWNlci50cmFjZSh0cmFjZXIsICdnZXRBY2NvdW50c1RvdGFsQmFsYW5jZScsIGFzeW5jICgpID0+IHtcbiAgICAgICAgYXdhaXQgcmVxdWlyZUdyYW50ZWRBY2Nlc3MoY29udGV4dCwgYXJncyk7XG4gICAgICAgIC8qXG4gICAgICAgIEJlY2F1c2UgYXJhbmdvIGNhbiBub3Qgc3VtIEJpZ0ludCdzIHdlIG5lZWQgdG8gc3VtIHNlcGFyYXRlbHk6XG4gICAgICAgIGhzID0gU1VNIG9mIGhpZ2ggYml0cyAoZnJvbSAyNC1iaXQgYW5kIGhpZ2hlcilcbiAgICAgICAgbHMgPSBTVU0gb2YgbG93ZXIgMjQgYml0c1xuICAgICAgICBBbmQgdGhlIHRvdGFsIHJlc3VsdCBpcyAoaHMgPDwgMjQpICsgbHNcbiAgICAgICAgICovXG4gICAgICAgIGNvbnN0IHJlc3VsdDogYW55ID0gYXdhaXQgY29udGV4dC5kYXRhLnF1ZXJ5KFxuICAgICAgICAgICAgY29udGV4dC5kYXRhLmFjY291bnRzLnByb3ZpZGVyLFxuICAgICAgICAgICAgYFxuICAgICAgICAgICAgTEVUIGQgPSAxNjc3NzIxNlxuICAgICAgICAgICAgRk9SIGEgaW4gYWNjb3VudHNcbiAgICAgICAgICAgIExFVCBiID0gVE9fTlVNQkVSKENPTkNBVChcIjB4XCIsIFNVQlNUUklORyhhLmJhbGFuY2UsIDIpKSlcbiAgICAgICAgICAgIENPTExFQ1QgQUdHUkVHQVRFXG4gICAgICAgICAgICAgICAgaHMgPSBTVU0oRkxPT1IoYiAvIGQpKSxcbiAgICAgICAgICAgICAgICBscyA9IFNVTShiICUgKGQgLSAxKSlcbiAgICAgICAgICAgIFJFVFVSTiB7IGhzLCBscyB9XG4gICAgICAgIGAsXG4gICAgICAgICAgICB7fSxcbiAgICAgICAgICAgIFtdKTtcbiAgICAgICAgY29uc3QgcGFydHMgPSAocmVzdWx0OiB7IGhzOiBudW1iZXIsIGxzOiBudW1iZXIgfVtdKVswXTtcbiAgICAgICAgcmV0dXJuIChCaWdJbnQocGFydHMuaHMpICogQmlnSW50KDB4MTAwMDAwMCkgKyBCaWdJbnQocGFydHMubHMpKS50b1N0cmluZygpO1xuICAgIH0sIFFUcmFjZXIuZ2V0UGFyZW50U3Bhbih0cmFjZXIsIGNvbnRleHQpKVxufVxuXG5leHBvcnQgY29uc3QgdG90YWxzUmVzb2x2ZXJzID0ge1xuICAgIFF1ZXJ5OiB7XG4gICAgICAgIGdldEFjY291bnRzQ291bnQsXG4gICAgICAgIGdldFRyYW5zYWN0aW9uc0NvdW50LFxuICAgICAgICBnZXRBY2NvdW50c1RvdGFsQmFsYW5jZSxcbiAgICB9LFxufTtcbiJdfQ==