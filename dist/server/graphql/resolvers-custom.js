"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.customResolvers = customResolvers;

var _core = require("@tonclient/core");

var _kafkajs = require("kafkajs");

var _opentracing = require("opentracing");

var _blockchain = _interopRequireDefault(require("../data/blockchain"));

var _collection = require("../data/collection");

var _auth = require("../auth");

var _config = require("../config");

var _nodeFetch = _interopRequireDefault(require("node-fetch"));

var _tracer = require("../tracer");

var _utils = require("../utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const {
  version
} = (0, _utils.packageJson)();

//------------------------------------------------------------- Query
function info(_parent, _args, context) {
  return {
    version,
    time: Date.now(),
    endpoints: context.config.endpoints
  };
}

async function getAccountsCount(_parent, args, context) {
  const tracer = context.tracer;
  return _tracer.QTracer.trace(tracer, 'getAccountsCount', async () => {
    await (0, _collection.requireGrantedAccess)(context, args);
    const result = await context.data.query(context.data.accounts.provider, `RETURN LENGTH(accounts)`, {}, []);
    const counts = result;
    return counts.length > 0 ? counts[0] : 0;
  }, _tracer.QTracer.getParentSpan(tracer, context));
}

async function getTransactionsCount(_parent, args, context) {
  const tracer = context.tracer;
  return _tracer.QTracer.trace(tracer, 'getTransactionsCount', async () => {
    await (0, _collection.requireGrantedAccess)(context, args);
    const result = await context.data.query(context.data.transactions.provider, `RETURN LENGTH(transactions)`, {}, []);
    const counts = result;
    return counts.length > 0 ? counts[0] : 0;
  }, _tracer.QTracer.getParentSpan(tracer, context));
}

async function getAccountsTotalBalance(_parent, args, context) {
  const tracer = context.tracer;
  return _tracer.QTracer.trace(tracer, 'getAccountsTotalBalance', async () => {
    await (0, _collection.requireGrantedAccess)(context, args);
    /*
    Because arango can not sum BigInt's we need to sum separately:
    hs = SUM of high bits (from 24-bit and higher)
    ls = SUM of lower 24 bits
    And the total result is (hs << 24) + ls
     */

    const result = await context.data.query(context.data.accounts.provider, `
            LET d = 16777216
            FOR a in accounts
            LET b = TO_NUMBER(CONCAT("0x", SUBSTRING(a.balance, 2)))
            COLLECT AGGREGATE
                hs = SUM(FLOOR(b / d)),
                ls = SUM(b % (d - 1))
            RETURN { hs, ls }
        `, {}, []);
    const parts = result[0];
    return (BigInt(parts.hs) * BigInt(0x1000000) + BigInt(parts.ls)).toString();
  }, _tracer.QTracer.getParentSpan(tracer, context));
}

async function getManagementAccessKey(_parent, args, context) {
  return context.auth.getManagementAccessKey();
} //------------------------------------------------------------- Mutation


async function postRequestsUsingRest(requests, context, _span) {
  const config = context.config.requests;
  const url = `${(0, _config.ensureProtocol)(config.server, 'http')}/topics/${config.topic}`;
  const response = await (0, _nodeFetch.default)(url, {
    method: 'POST',
    mode: 'cors',
    cache: 'no-cache',
    credentials: 'same-origin',
    headers: {
      'Content-Type': 'application/json'
    },
    redirect: 'follow',
    referrer: 'no-referrer',
    body: JSON.stringify({
      records: requests.map(request => ({
        key: request.id,
        value: request.body
      }))
    })
  });

  if (response.status !== 200) {
    const message = `Post requests failed: ${await response.text()}`;
    throw new Error(message);
  }
}

async function postRequestsUsingKafka(requests, context, span) {
  const ensureShared = async (name, createValue) => {
    if (context.shared.has(name)) {
      return context.shared.get(name);
    }

    const value = await createValue();
    context.shared.set(name, value);
    return value;
  };

  const config = context.config.requests;
  const producer = await ensureShared('producer', async () => {
    const kafka = await ensureShared('kafka', async () => new _kafkajs.Kafka({
      clientId: 'q-server',
      brokers: [config.server]
    }));
    const newProducer = kafka.producer();
    await newProducer.connect();
    return newProducer;
  });
  const messages = requests.map(request => {
    const traceInfo = {};
    context.data.tracer.inject(span, _opentracing.FORMAT_TEXT_MAP, traceInfo);
    const keyBuffer = Buffer.from(request.id, 'base64');
    const traceBuffer = Object.keys(traceInfo).length > 0 ? Buffer.from(JSON.stringify(traceInfo), 'utf8') : Buffer.from([]);
    const key = Buffer.concat([keyBuffer, traceBuffer]);
    const value = Buffer.from(request.body, 'base64');
    return {
      key,
      value
    };
  });
  await producer.send({
    topic: config.topic,
    messages
  });
}

async function checkPostRestrictions(config, client, requests, accessRights) {
  requests.forEach(request => {
    const size = Math.ceil(request.body.length * 3 / 4);

    if (size > config.requests.maxSize) {
      throw new Error(`Message size ${size} is too large. Maximum size is ${config.requests.maxSize} bytes.`);
    }
  });

  if (accessRights.restrictToAccounts.length === 0) {
    return;
  }

  const accounts = new Set(accessRights.restrictToAccounts);

  for (const request of requests) {
    const message = (await client.boc.parse_message({
      boc: request.body
    })).parsed;

    if (!accounts.has(message.dst)) {
      throw _auth.Auth.unauthorizedError();
    }
  }
}

async function postRequests(_, args, context) {
  const requests = args.requests;

  if (!requests) {
    return [];
  }

  const tracer = context.tracer;
  return _tracer.QTracer.trace(tracer, 'postRequests', async span => {
    span.setTag('params', requests);
    const accessRights = await (0, _collection.requireGrantedAccess)(context, args);
    await checkPostRestrictions(context.config, context.client, requests, accessRights);
    const expired = requests.find(x => x.expireAt && Date.now() > x.expireAt);

    if (expired) {
      throw _utils.QError.messageExpired(expired.id, expired.expireAt);
    }

    const messageTraceSpans = requests.map(request => {
      const messageId = Buffer.from(request.id, 'base64').toString('hex');
      const postSpan = tracer.startSpan('postRequest', {
        childOf: _tracer.QTracer.messageRootSpanContext(messageId)
      });
      postSpan.addTags({
        messageId,
        messageSize: Math.ceil(request.body.length * 3 / 4)
      });
      return postSpan;
    });

    try {
      if (context.config.requests.mode === 'rest') {
        await postRequestsUsingRest(requests, context, span);
      } else {
        await postRequestsUsingKafka(requests, context, span);
      }

      context.data.statPostCount.increment();
      context.data.log.debug('postRequests', 'POSTED', args, context.remoteAddress);
    } catch (error) {
      context.data.statPostFailed.increment();
      context.data.log.debug('postRequests', 'FAILED', args, context.remoteAddress);
      throw error;
    } finally {
      messageTraceSpans.forEach(x => x.finish());
    }

    return requests.map(x => x.id);
  }, context.parentSpan);
} //------------------------------------------------------------- Access Management


async function registerAccessKeys(_, args, context) {
  return context.auth.registerAccessKeys(args.account || '', args.keys || [], args.signedManagementAccessKey || '');
}

async function revokeAccessKeys(_, args, context) {
  return context.auth.revokeAccessKeys(args.account || '', args.keys || [], args.signedManagementAccessKey || '');
}

async function finishOperations(_, args, context) {
  const operationIds = new Set(args.operationIds || []);

  if (operationIds.size === 0) {
    return 0;
  }

  return context.data.finishOperations(operationIds);
}

function customResolvers(data) {
  return {
    Query: {
      info,
      getAccountsCount,
      getTransactionsCount,
      getAccountsTotalBalance,
      getManagementAccessKey,
      aggregateBlockSignatures: data.blocks_signatures.aggregationResolver(),
      aggregateBlocks: data.blocks.aggregationResolver(),
      aggregateTransactions: data.transactions.aggregationResolver(),
      aggregateMessages: data.messages.aggregationResolver(),
      aggregateAccounts: data.accounts.aggregationResolver(),
      explainQueryBlockSignatures: data.blocks_signatures.explainQueryResolver(),
      explainQueryBlocks: data.blocks.explainQueryResolver(),
      explainQueryTransactions: data.transactions.explainQueryResolver(),
      explainQueryMessages: data.messages.explainQueryResolver(),
      explainQueryAccounts: data.accounts.explainQueryResolver()
    },
    Mutation: {
      postRequests,
      registerAccessKeys,
      revokeAccessKeys,
      finishOperations
    }
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,