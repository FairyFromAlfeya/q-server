"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.postRequestsResolvers = void 0;

var _core = require("@tonclient/core");

var _kafkajs = require("kafkajs");

var _opentracing = require("opentracing");

var _collection = require("../data/collection");

var _auth = require("../auth");

var _config = require("../config");

var _nodeFetch = _interopRequireDefault(require("node-fetch"));

var _tracer = require("../tracer");

var _utils = require("../utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

async function postRequestsUsingRest(requests, context, _span) {
  const config = context.config.requests;
  const url = `${(0, _config.ensureProtocol)(config.server, 'http')}/topics/${config.topic}`;
  const response = await (0, _nodeFetch.default)(url, {
    method: 'POST',
    mode: 'cors',
    cache: 'no-cache',
    credentials: 'same-origin',
    headers: {
      'Content-Type': 'application/json'
    },
    redirect: 'follow',
    referrer: 'no-referrer',
    body: JSON.stringify({
      records: requests.map(request => ({
        key: request.id,
        value: request.body
      }))
    })
  });

  if (response.status !== 200) {
    const message = `Post requests failed: ${await response.text()}`;
    throw new Error(message);
  }
}

async function postRequestsUsingKafka(requests, context, span) {
  const ensureShared = async (name, createValue) => {
    if (context.shared.has(name)) {
      return context.shared.get(name);
    }

    const value = await createValue();
    context.shared.set(name, value);
    return value;
  };

  const config = context.config.requests;
  const producer = await ensureShared('producer', async () => {
    const kafka = await ensureShared('kafka', async () => new _kafkajs.Kafka({
      clientId: 'q-server',
      brokers: [config.server]
    }));
    const newProducer = kafka.producer();
    await newProducer.connect();
    return newProducer;
  });
  const messages = requests.map(request => {
    const traceInfo = {};
    context.data.tracer.inject(span, _opentracing.FORMAT_TEXT_MAP, traceInfo);
    const keyBuffer = Buffer.from(request.id, 'base64');
    const traceBuffer = Object.keys(traceInfo).length > 0 ? Buffer.from(JSON.stringify(traceInfo), 'utf8') : Buffer.from([]);
    const key = Buffer.concat([keyBuffer, traceBuffer]);
    const value = Buffer.from(request.body, 'base64');
    return {
      key,
      value
    };
  });
  await producer.send({
    topic: config.topic,
    messages
  });
}

async function checkPostRestrictions(config, client, requests, accessRights) {
  requests.forEach(request => {
    const size = Math.ceil(request.body.length * 3 / 4);

    if (size > config.requests.maxSize) {
      throw new Error(`Message size ${size} is too large. Maximum size is ${config.requests.maxSize} bytes.`);
    }
  });

  if (accessRights.restrictToAccounts.length === 0) {
    return;
  }

  const accounts = new Set(accessRights.restrictToAccounts);

  for (const request of requests) {
    const message = (await client.boc.parse_message({
      boc: request.body
    })).parsed;

    if (!accounts.has(message.dst)) {
      throw _auth.Auth.unauthorizedError();
    }
  }
}

async function postRequests(_parent, args, context) {
  const requests = args.requests;

  if (!requests) {
    return [];
  }

  const tracer = context.tracer;
  return _tracer.QTracer.trace(tracer, 'postRequests', async span => {
    span.setTag('params', requests);
    const accessRights = await (0, _collection.requireGrantedAccess)(context, args);
    await checkPostRestrictions(context.config, context.client, requests, accessRights);
    const expired = requests.find(x => x.expireAt && Date.now() > x.expireAt);

    if (expired) {
      throw _utils.QError.messageExpired(expired.id, expired.expireAt);
    }

    const messageTraceSpans = requests.map(request => {
      const messageId = Buffer.from(request.id, 'base64').toString('hex');
      const postSpan = tracer.startSpan('postRequest', {
        childOf: _tracer.QTracer.messageRootSpanContext(messageId)
      });
      postSpan.addTags({
        messageId,
        messageSize: Math.ceil(request.body.length * 3 / 4)
      });
      return postSpan;
    });

    try {
      if (context.config.requests.mode === 'rest') {
        await postRequestsUsingRest(requests, context, span);
      } else {
        await postRequestsUsingKafka(requests, context, span);
      }

      await context.data.statPostCount.increment();
      context.data.log.debug('postRequests', 'POSTED', args, context.remoteAddress);
    } catch (error) {
      await context.data.statPostFailed.increment();
      context.data.log.debug('postRequests', 'FAILED', args, context.remoteAddress);
      throw error;
    } finally {
      messageTraceSpans.forEach(x => x.finish());
    }

    return requests.map(x => x.id);
  }, context.parentSpan);
}

const postRequestsResolvers = {
  Mutation: {
    postRequests
  }
};
exports.postRequestsResolvers = postRequestsResolvers;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,