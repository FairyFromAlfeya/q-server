"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.postRequestsResolvers = void 0;

var _core = require("@tonclient/core");

var _kafkajs = require("kafkajs");

var _opentracing = require("opentracing");

var _collection = require("../data/collection");

var _auth = require("../auth");

var _config = require("../config");

var _nodeFetch = _interopRequireDefault(require("node-fetch"));

var _tracer = require("../tracer");

var _utils = require("../utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

async function postRequestsUsingRest(requests, context, _span) {
  const config = context.config.requests;
  const url = `${(0, _config.ensureProtocol)(config.server, 'http')}/topics/${config.topic}`;
  const response = await (0, _nodeFetch.default)(url, {
    method: 'POST',
    mode: 'cors',
    cache: 'no-cache',
    credentials: 'same-origin',
    headers: {
      'Content-Type': 'application/json'
    },
    redirect: 'follow',
    referrer: 'no-referrer',
    body: JSON.stringify({
      records: requests.map(request => ({
        key: request.id,
        value: request.body
      }))
    })
  });

  if (response.status !== 200) {
    const message = `Post requests failed: ${await response.text()}`;
    throw new Error(message);
  }
}

async function postRequestsUsingKafka(requests, context, span) {
  const ensureShared = async (name, createValue) => {
    if (context.shared.has(name)) {
      return context.shared.get(name);
    }

    const value = await createValue();
    context.shared.set(name, value);
    return value;
  };

  const config = context.config.requests;
  const producer = await ensureShared('producer', async () => {
    const kafka = await ensureShared('kafka', async () => new _kafkajs.Kafka({
      clientId: 'q-server',
      brokers: [config.server]
    }));
    const newProducer = kafka.producer();
    await newProducer.connect();
    return newProducer;
  });
  const messages = requests.map(request => {
    const traceInfo = {};
    context.data.tracer.inject(span, _opentracing.FORMAT_TEXT_MAP, traceInfo);
    const keyBuffer = Buffer.from(request.id, 'base64');
    const traceBuffer = Object.keys(traceInfo).length > 0 ? Buffer.from(JSON.stringify(traceInfo), 'utf8') : Buffer.from([]);
    const key = Buffer.concat([keyBuffer, traceBuffer]);
    const value = Buffer.from(request.body, 'base64');
    return {
      key,
      value
    };
  });
  await producer.send({
    topic: config.topic,
    messages
  });
}

async function checkPostRestrictions(config, client, requests, accessRights) {
  requests.forEach(request => {
    const size = Math.ceil(request.body.length * 3 / 4);

    if (size > config.requests.maxSize) {
      throw new Error(`Message size ${size} is too large. Maximum size is ${config.requests.maxSize} bytes.`);
    }
  });

  if (accessRights.restrictToAccounts.length === 0) {
    return;
  }

  const accounts = new Set(accessRights.restrictToAccounts);

  for (const request of requests) {
    const message = (await client.boc.parse_message({
      boc: request.body
    })).parsed;

    if (!accounts.has(message.dst)) {
      throw _auth.Auth.unauthorizedError();
    }
  }
}

async function postRequests(_parent, args, context) {
  const requests = args.requests;

  if (!requests) {
    return [];
  }

  const tracer = context.tracer;
  return _tracer.QTracer.trace(tracer, 'postRequests', async span => {
    span.setTag('params', requests);
    const accessRights = await (0, _collection.requireGrantedAccess)(context, args);
    await checkPostRestrictions(context.config, context.client, requests, accessRights);
    const expired = requests.find(x => x.expireAt && Date.now() > x.expireAt);

    if (expired) {
      throw _utils.QError.messageExpired(expired.id, expired.expireAt);
    }

    const messageTraceSpans = requests.map(request => {
      const messageId = Buffer.from(request.id, 'base64').toString('hex');
      const postSpan = tracer.startSpan('postRequest', {
        childOf: _tracer.QTracer.messageRootSpanContext(messageId)
      });
      postSpan.addTags({
        messageId,
        messageSize: Math.ceil(request.body.length * 3 / 4)
      });
      return postSpan;
    });

    try {
      if (context.config.requests.mode === 'rest') {
        await postRequestsUsingRest(requests, context, span);
      } else {
        await postRequestsUsingKafka(requests, context, span);
      }

      context.data.statPostCount.increment();
      context.data.log.debug('postRequests', 'POSTED', args, context.remoteAddress);
    } catch (error) {
      context.data.statPostFailed.increment();
      context.data.log.debug('postRequests', 'FAILED', args, context.remoteAddress);
      throw error;
    } finally {
      messageTraceSpans.forEach(x => x.finish());
    }

    return requests.map(x => x.id);
  }, context.parentSpan);
}

const postRequestsResolvers = {
  Mutation: {
    postRequests
  }
};
exports.postRequestsResolvers = postRequestsResolvers;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zZXJ2ZXIvZ3JhcGhxbC9wb3N0LXJlcXVlc3RzLmpzIl0sIm5hbWVzIjpbInBvc3RSZXF1ZXN0c1VzaW5nUmVzdCIsInJlcXVlc3RzIiwiY29udGV4dCIsIl9zcGFuIiwiY29uZmlnIiwidXJsIiwic2VydmVyIiwidG9waWMiLCJyZXNwb25zZSIsIm1ldGhvZCIsIm1vZGUiLCJjYWNoZSIsImNyZWRlbnRpYWxzIiwiaGVhZGVycyIsInJlZGlyZWN0IiwicmVmZXJyZXIiLCJib2R5IiwiSlNPTiIsInN0cmluZ2lmeSIsInJlY29yZHMiLCJtYXAiLCJyZXF1ZXN0Iiwia2V5IiwiaWQiLCJ2YWx1ZSIsInN0YXR1cyIsIm1lc3NhZ2UiLCJ0ZXh0IiwiRXJyb3IiLCJwb3N0UmVxdWVzdHNVc2luZ0thZmthIiwic3BhbiIsImVuc3VyZVNoYXJlZCIsIm5hbWUiLCJjcmVhdGVWYWx1ZSIsInNoYXJlZCIsImhhcyIsImdldCIsInNldCIsInByb2R1Y2VyIiwia2Fma2EiLCJLYWZrYSIsImNsaWVudElkIiwiYnJva2VycyIsIm5ld1Byb2R1Y2VyIiwiY29ubmVjdCIsIm1lc3NhZ2VzIiwidHJhY2VJbmZvIiwiZGF0YSIsInRyYWNlciIsImluamVjdCIsIkZPUk1BVF9URVhUX01BUCIsImtleUJ1ZmZlciIsIkJ1ZmZlciIsImZyb20iLCJ0cmFjZUJ1ZmZlciIsIk9iamVjdCIsImtleXMiLCJsZW5ndGgiLCJjb25jYXQiLCJzZW5kIiwiY2hlY2tQb3N0UmVzdHJpY3Rpb25zIiwiY2xpZW50IiwiYWNjZXNzUmlnaHRzIiwiZm9yRWFjaCIsInNpemUiLCJNYXRoIiwiY2VpbCIsIm1heFNpemUiLCJyZXN0cmljdFRvQWNjb3VudHMiLCJhY2NvdW50cyIsIlNldCIsImJvYyIsInBhcnNlX21lc3NhZ2UiLCJwYXJzZWQiLCJkc3QiLCJBdXRoIiwidW5hdXRob3JpemVkRXJyb3IiLCJwb3N0UmVxdWVzdHMiLCJfcGFyZW50IiwiYXJncyIsIlFUcmFjZXIiLCJ0cmFjZSIsInNldFRhZyIsImV4cGlyZWQiLCJmaW5kIiwieCIsImV4cGlyZUF0IiwiRGF0ZSIsIm5vdyIsIlFFcnJvciIsIm1lc3NhZ2VFeHBpcmVkIiwibWVzc2FnZVRyYWNlU3BhbnMiLCJtZXNzYWdlSWQiLCJ0b1N0cmluZyIsInBvc3RTcGFuIiwic3RhcnRTcGFuIiwiY2hpbGRPZiIsIm1lc3NhZ2VSb290U3BhbkNvbnRleHQiLCJhZGRUYWdzIiwibWVzc2FnZVNpemUiLCJzdGF0UG9zdENvdW50IiwiaW5jcmVtZW50IiwibG9nIiwiZGVidWciLCJyZW1vdGVBZGRyZXNzIiwiZXJyb3IiLCJzdGF0UG9zdEZhaWxlZCIsImZpbmlzaCIsInBhcmVudFNwYW4iLCJwb3N0UmVxdWVzdHNSZXNvbHZlcnMiLCJNdXRhdGlvbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUVBOztBQUNBOztBQUNBOztBQUVBOztBQUNBOztBQUNBOztBQUNBOztBQUVBOztBQUNBOzs7O0FBU0EsZUFBZUEscUJBQWYsQ0FBcUNDLFFBQXJDLEVBQTBEQyxPQUExRCxFQUE0RkMsS0FBNUYsRUFBd0g7QUFDcEgsUUFBTUMsTUFBTSxHQUFHRixPQUFPLENBQUNFLE1BQVIsQ0FBZUgsUUFBOUI7QUFDQSxRQUFNSSxHQUFHLEdBQUksR0FBRSw0QkFBZUQsTUFBTSxDQUFDRSxNQUF0QixFQUE4QixNQUE5QixDQUFzQyxXQUFVRixNQUFNLENBQUNHLEtBQU0sRUFBNUU7QUFDQSxRQUFNQyxRQUFRLEdBQUcsTUFBTSx3QkFBTUgsR0FBTixFQUFXO0FBQzlCSSxJQUFBQSxNQUFNLEVBQUUsTUFEc0I7QUFFOUJDLElBQUFBLElBQUksRUFBRSxNQUZ3QjtBQUc5QkMsSUFBQUEsS0FBSyxFQUFFLFVBSHVCO0FBSTlCQyxJQUFBQSxXQUFXLEVBQUUsYUFKaUI7QUFLOUJDLElBQUFBLE9BQU8sRUFBRTtBQUNMLHNCQUFnQjtBQURYLEtBTHFCO0FBUTlCQyxJQUFBQSxRQUFRLEVBQUUsUUFSb0I7QUFTOUJDLElBQUFBLFFBQVEsRUFBRSxhQVRv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QyxFQUFpRHhCLElBQWpELEVBQXVEN0UsT0FBTyxDQUFDc0csYUFBL0Q7QUFDQSxZQUFNQyxLQUFOO0FBQ0gsS0FaRCxTQVlVO0FBQ05kLE1BQUFBLGlCQUFpQixDQUFDNUIsT0FBbEIsQ0FBMEJzQixDQUFDLElBQUlBLENBQUMsQ0FBQ3NCLE1BQUYsRUFBL0I7QUFDSDs7QUFDRCxXQUFPMUcsUUFBUSxDQUFDbUIsR0FBVCxDQUFhaUUsQ0FBQyxJQUFJQSxDQUFDLENBQUM5RCxFQUFwQixDQUFQO0FBQ0gsR0FyQ00sRUFxQ0pyQixPQUFPLENBQUMwRyxVQXJDSixDQUFQO0FBc0NIOztBQUVNLE1BQU1DLHFCQUFxQixHQUFHO0FBQ2pDQyxFQUFBQSxRQUFRLEVBQUU7QUFDTmpDLElBQUFBO0FBRE07QUFEdUIsQ0FBOUIiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBAZmxvd1xuXG5pbXBvcnQgeyBUb25DbGllbnQgfSBmcm9tIFwiQHRvbmNsaWVudC9jb3JlXCI7XG5pbXBvcnQgeyBLYWZrYSwgUHJvZHVjZXIgfSBmcm9tICdrYWZrYWpzJztcbmltcG9ydCB7IFNwYW4sIEZPUk1BVF9URVhUX01BUCB9IGZyb20gJ29wZW50cmFjaW5nJztcbmltcG9ydCB0eXBlIHsgUUNvbmZpZyB9IGZyb20gXCIuLi9jb25maWdcIjtcbmltcG9ydCB7IHJlcXVpcmVHcmFudGVkQWNjZXNzIH0gZnJvbSAnLi4vZGF0YS9jb2xsZWN0aW9uJztcbmltcG9ydCB7IEF1dGggfSBmcm9tICcuLi9hdXRoJztcbmltcG9ydCB7IGVuc3VyZVByb3RvY29sIH0gZnJvbSAnLi4vY29uZmlnJztcbmltcG9ydCBmZXRjaCBmcm9tICdub2RlLWZldGNoJztcbmltcG9ydCB0eXBlIHsgQWNjZXNzUmlnaHRzIH0gZnJvbSAnLi4vYXV0aCc7XG5pbXBvcnQgeyBRVHJhY2VyIH0gZnJvbSAnLi4vdHJhY2VyJztcbmltcG9ydCB7IFFFcnJvciB9IGZyb20gJy4uL3V0aWxzJztcbmltcG9ydCB0eXBlIHsgR3JhcGhRTFJlcXVlc3RDb250ZXh0RXggfSBmcm9tIFwiLi9jb250ZXh0XCI7XG5cbnR5cGUgUmVxdWVzdCA9IHtcbiAgICBpZDogc3RyaW5nLFxuICAgIGJvZHk6IHN0cmluZyxcbiAgICBleHBpcmVBdDogbnVtYmVyLFxufVxuXG5hc3luYyBmdW5jdGlvbiBwb3N0UmVxdWVzdHNVc2luZ1Jlc3QocmVxdWVzdHM6IFJlcXVlc3RbXSwgY29udGV4dDogR3JhcGhRTFJlcXVlc3RDb250ZXh0RXgsIF9zcGFuOiBTcGFuKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc3QgY29uZmlnID0gY29udGV4dC5jb25maWcucmVxdWVzdHM7XG4gICAgY29uc3QgdXJsID0gYCR7ZW5zdXJlUHJvdG9jb2woY29uZmlnLnNlcnZlciwgJ2h0dHAnKX0vdG9waWNzLyR7Y29uZmlnLnRvcGljfWA7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCh1cmwsIHtcbiAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgIG1vZGU6ICdjb3JzJyxcbiAgICAgICAgY2FjaGU6ICduby1jYWNoZScsXG4gICAgICAgIGNyZWRlbnRpYWxzOiAnc2FtZS1vcmlnaW4nLFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICB9LFxuICAgICAgICByZWRpcmVjdDogJ2ZvbGxvdycsXG4gICAgICAgIHJlZmVycmVyOiAnbm8tcmVmZXJyZXInLFxuICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICByZWNvcmRzOiByZXF1ZXN0cy5tYXAoKHJlcXVlc3QpID0+ICh7XG4gICAgICAgICAgICAgICAga2V5OiByZXF1ZXN0LmlkLFxuICAgICAgICAgICAgICAgIHZhbHVlOiByZXF1ZXN0LmJvZHksXG4gICAgICAgICAgICB9KSksXG4gICAgICAgIH0pLFxuICAgIH0pO1xuICAgIGlmIChyZXNwb25zZS5zdGF0dXMgIT09IDIwMCkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gYFBvc3QgcmVxdWVzdHMgZmFpbGVkOiAke2F3YWl0IHJlc3BvbnNlLnRleHQoKX1gO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBwb3N0UmVxdWVzdHNVc2luZ0thZmthKHJlcXVlc3RzOiBSZXF1ZXN0W10sIGNvbnRleHQ6IEdyYXBoUUxSZXF1ZXN0Q29udGV4dEV4LCBzcGFuOiBTcGFuKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc3QgZW5zdXJlU2hhcmVkID0gYXN5bmMgKG5hbWUsIGNyZWF0ZVZhbHVlOiAoKSA9PiBQcm9taXNlPGFueT4pID0+IHtcbiAgICAgICAgaWYgKGNvbnRleHQuc2hhcmVkLmhhcyhuYW1lKSkge1xuICAgICAgICAgICAgcmV0dXJuIGNvbnRleHQuc2hhcmVkLmdldChuYW1lKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB2YWx1ZSA9IGF3YWl0IGNyZWF0ZVZhbHVlKCk7XG4gICAgICAgIGNvbnRleHQuc2hhcmVkLnNldChuYW1lLCB2YWx1ZSk7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9O1xuXG4gICAgY29uc3QgY29uZmlnID0gY29udGV4dC5jb25maWcucmVxdWVzdHM7XG4gICAgY29uc3QgcHJvZHVjZXI6IFByb2R1Y2VyID0gYXdhaXQgZW5zdXJlU2hhcmVkKCdwcm9kdWNlcicsIGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uc3Qga2Fma2E6IEthZmthID0gYXdhaXQgZW5zdXJlU2hhcmVkKCdrYWZrYScsIGFzeW5jICgpID0+IG5ldyBLYWZrYSh7XG4gICAgICAgICAgICBjbGllbnRJZDogJ3Etc2VydmVyJyxcbiAgICAgICAgICAgIGJyb2tlcnM6IFtjb25maWcuc2VydmVyXSxcbiAgICAgICAgfSkpO1xuICAgICAgICBjb25zdCBuZXdQcm9kdWNlciA9IGthZmthLnByb2R1Y2VyKCk7XG4gICAgICAgIGF3YWl0IG5ld1Byb2R1Y2VyLmNvbm5lY3QoKTtcbiAgICAgICAgcmV0dXJuIG5ld1Byb2R1Y2VyO1xuXG4gICAgfSk7XG5cbiAgICBjb25zdCBtZXNzYWdlcyA9IHJlcXVlc3RzLm1hcCgocmVxdWVzdCkgPT4ge1xuICAgICAgICBjb25zdCB0cmFjZUluZm8gPSB7fTtcbiAgICAgICAgY29udGV4dC5kYXRhLnRyYWNlci5pbmplY3Qoc3BhbiwgRk9STUFUX1RFWFRfTUFQLCB0cmFjZUluZm8pO1xuICAgICAgICBjb25zdCBrZXlCdWZmZXIgPSBCdWZmZXIuZnJvbShyZXF1ZXN0LmlkLCAnYmFzZTY0Jyk7XG4gICAgICAgIGNvbnN0IHRyYWNlQnVmZmVyID0gKE9iamVjdC5rZXlzKHRyYWNlSW5mbykubGVuZ3RoID4gMClcbiAgICAgICAgICAgID8gQnVmZmVyLmZyb20oSlNPTi5zdHJpbmdpZnkodHJhY2VJbmZvKSwgJ3V0ZjgnKVxuICAgICAgICAgICAgOiBCdWZmZXIuZnJvbShbXSk7XG4gICAgICAgIGNvbnN0IGtleSA9IEJ1ZmZlci5jb25jYXQoW2tleUJ1ZmZlciwgdHJhY2VCdWZmZXJdKTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBCdWZmZXIuZnJvbShyZXF1ZXN0LmJvZHksICdiYXNlNjQnKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGtleSxcbiAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICB9O1xuICAgIH0pO1xuICAgIGF3YWl0IHByb2R1Y2VyLnNlbmQoe1xuICAgICAgICB0b3BpYzogY29uZmlnLnRvcGljLFxuICAgICAgICBtZXNzYWdlcyxcbiAgICB9KTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gY2hlY2tQb3N0UmVzdHJpY3Rpb25zKFxuICAgIGNvbmZpZzogUUNvbmZpZyxcbiAgICBjbGllbnQ6IFRvbkNsaWVudCxcbiAgICByZXF1ZXN0czogUmVxdWVzdFtdLFxuICAgIGFjY2Vzc1JpZ2h0czogQWNjZXNzUmlnaHRzLFxuKSB7XG4gICAgcmVxdWVzdHMuZm9yRWFjaCgocmVxdWVzdCkgPT4ge1xuICAgICAgICBjb25zdCBzaXplID0gTWF0aC5jZWlsKHJlcXVlc3QuYm9keS5sZW5ndGggKiAzIC8gNCk7XG4gICAgICAgIGlmIChzaXplID4gY29uZmlnLnJlcXVlc3RzLm1heFNpemUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgTWVzc2FnZSBzaXplICR7c2l6ZX0gaXMgdG9vIGxhcmdlLiBNYXhpbXVtIHNpemUgaXMgJHtjb25maWcucmVxdWVzdHMubWF4U2l6ZX0gYnl0ZXMuYCk7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIGlmIChhY2Nlc3NSaWdodHMucmVzdHJpY3RUb0FjY291bnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGFjY291bnRzID0gbmV3IFNldChhY2Nlc3NSaWdodHMucmVzdHJpY3RUb0FjY291bnRzKTtcbiAgICBmb3IgKGNvbnN0IHJlcXVlc3Q6IFJlcXVlc3Qgb2YgcmVxdWVzdHMpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IChhd2FpdCBjbGllbnQuYm9jLnBhcnNlX21lc3NhZ2Uoe1xuICAgICAgICAgICAgYm9jOiByZXF1ZXN0LmJvZHksXG4gICAgICAgIH0pKS5wYXJzZWQ7XG4gICAgICAgIGlmICghYWNjb3VudHMuaGFzKG1lc3NhZ2UuZHN0KSkge1xuICAgICAgICAgICAgdGhyb3cgQXV0aC51bmF1dGhvcml6ZWRFcnJvcigpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBwb3N0UmVxdWVzdHMoXG4gICAgX3BhcmVudDogYW55LFxuICAgIGFyZ3M6IHsgcmVxdWVzdHM6IFJlcXVlc3RbXSwgYWNjZXNzS2V5Pzogc3RyaW5nIH0sXG4gICAgY29udGV4dDogR3JhcGhRTFJlcXVlc3RDb250ZXh0RXgsXG4pOiBQcm9taXNlPHN0cmluZ1tdPiB7XG4gICAgY29uc3QgcmVxdWVzdHM6ID8oUmVxdWVzdFtdKSA9IGFyZ3MucmVxdWVzdHM7XG4gICAgaWYgKCFyZXF1ZXN0cykge1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxuXG4gICAgY29uc3QgdHJhY2VyID0gY29udGV4dC50cmFjZXI7XG4gICAgcmV0dXJuIFFUcmFjZXIudHJhY2UodHJhY2VyLCAncG9zdFJlcXVlc3RzJywgYXN5bmMgKHNwYW46IFNwYW4pID0+IHtcbiAgICAgICAgc3Bhbi5zZXRUYWcoJ3BhcmFtcycsIHJlcXVlc3RzKTtcbiAgICAgICAgY29uc3QgYWNjZXNzUmlnaHRzID0gYXdhaXQgcmVxdWlyZUdyYW50ZWRBY2Nlc3MoY29udGV4dCwgYXJncyk7XG4gICAgICAgIGF3YWl0IGNoZWNrUG9zdFJlc3RyaWN0aW9ucyhjb250ZXh0LmNvbmZpZywgY29udGV4dC5jbGllbnQsIHJlcXVlc3RzLCBhY2Nlc3NSaWdodHMpO1xuXG4gICAgICAgIGNvbnN0IGV4cGlyZWQ6ID9SZXF1ZXN0ID0gcmVxdWVzdHMuZmluZCh4ID0+IHguZXhwaXJlQXQgJiYgKERhdGUubm93KCkgPiB4LmV4cGlyZUF0KSk7XG4gICAgICAgIGlmIChleHBpcmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBRRXJyb3IubWVzc2FnZUV4cGlyZWQoZXhwaXJlZC5pZCwgZXhwaXJlZC5leHBpcmVBdCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBtZXNzYWdlVHJhY2VTcGFucyA9IHJlcXVlc3RzLm1hcCgocmVxdWVzdCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbWVzc2FnZUlkID0gQnVmZmVyLmZyb20ocmVxdWVzdC5pZCwgJ2Jhc2U2NCcpLnRvU3RyaW5nKCdoZXgnKTtcbiAgICAgICAgICAgIGNvbnN0IHBvc3RTcGFuID0gdHJhY2VyLnN0YXJ0U3BhbigncG9zdFJlcXVlc3QnLCB7XG4gICAgICAgICAgICAgICAgY2hpbGRPZjogUVRyYWNlci5tZXNzYWdlUm9vdFNwYW5Db250ZXh0KG1lc3NhZ2VJZCksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHBvc3RTcGFuLmFkZFRhZ3Moe1xuICAgICAgICAgICAgICAgIG1lc3NhZ2VJZCxcbiAgICAgICAgICAgICAgICBtZXNzYWdlU2l6ZTogTWF0aC5jZWlsKHJlcXVlc3QuYm9keS5sZW5ndGggKiAzIC8gNCksXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgcmV0dXJuIHBvc3RTcGFuO1xuICAgICAgICB9KTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChjb250ZXh0LmNvbmZpZy5yZXF1ZXN0cy5tb2RlID09PSAncmVzdCcpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCBwb3N0UmVxdWVzdHNVc2luZ1Jlc3QocmVxdWVzdHMsIGNvbnRleHQsIHNwYW4pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBhd2FpdCBwb3N0UmVxdWVzdHNVc2luZ0thZmthKHJlcXVlc3RzLCBjb250ZXh0LCBzcGFuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnRleHQuZGF0YS5zdGF0UG9zdENvdW50LmluY3JlbWVudCgpO1xuICAgICAgICAgICAgY29udGV4dC5kYXRhLmxvZy5kZWJ1ZygncG9zdFJlcXVlc3RzJywgJ1BPU1RFRCcsIGFyZ3MsIGNvbnRleHQucmVtb3RlQWRkcmVzcyk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb250ZXh0LmRhdGEuc3RhdFBvc3RGYWlsZWQuaW5jcmVtZW50KCk7XG4gICAgICAgICAgICBjb250ZXh0LmRhdGEubG9nLmRlYnVnKCdwb3N0UmVxdWVzdHMnLCAnRkFJTEVEJywgYXJncywgY29udGV4dC5yZW1vdGVBZGRyZXNzKTtcbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgbWVzc2FnZVRyYWNlU3BhbnMuZm9yRWFjaCh4ID0+IHguZmluaXNoKCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXF1ZXN0cy5tYXAoeCA9PiB4LmlkKTtcbiAgICB9LCBjb250ZXh0LnBhcmVudFNwYW4pO1xufVxuXG5leHBvcnQgY29uc3QgcG9zdFJlcXVlc3RzUmVzb2x2ZXJzID0ge1xuICAgIE11dGF0aW9uOiB7XG4gICAgICAgIHBvc3RSZXF1ZXN0cyxcbiAgICB9LFxufTtcbiJdfQ==