"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mam = void 0;

var _collection = require("../data/collection");

var _utils = require("../utils");

const {
  version
} = (0, _utils.packageJson)();

// Query
function info() {
  return {
    version
  };
}

function stat(_parent, args, context) {
  (0, _collection.mamAccessRequired)(context, args);
  const data = context.data;
  let totalWaitForCount = 0;
  let totalSubscriptionCount = 0;
  const collections = data.collections.map(collection => {
    totalWaitForCount += collection.waitForCount;
    totalSubscriptionCount += collection.subscriptionCount;
    return {
      name: collection.name,
      subscriptionCount: collection.subscriptionCount,
      waitForCount: collection.waitForCount,
      maxQueueSize: collection.maxQueueSize,
      subscriptions: [],
      waitFor: []
    };
  });
  return {
    waitForCount: totalWaitForCount,
    subscriptionCount: totalSubscriptionCount,
    collections
  };
}

async function getCollections(_parent, args, context) {
  (0, _collection.mamAccessRequired)(context, args);
  const data = context.data;
  const collections = [];

  for (const collection of data.collections) {
    const indexes = [];

    for (const index of await collection.getIndexes()) {
      indexes.push(index.fields.join(', '));
    }

    collections.push({
      name: collection.name,
      count: 0,
      indexes
    });
  }

  return collections;
}

async function dropCachedDbInfo(_parent, args, context) {
  (0, _collection.mamAccessRequired)(context, args);
  await context.data.dropCachedDbInfo();
  return true;
} // Mutation


const mam = {
  Query: {
    info,
    getCollections,
    stat
  },
  Mutation: {
    dropCachedDbInfo
  }
};
exports.mam = mam;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zZXJ2ZXIvZ3JhcGhxbC9tYW0uanMiXSwibmFtZXMiOlsidmVyc2lvbiIsImluZm8iLCJzdGF0IiwiX3BhcmVudCIsImFyZ3MiLCJjb250ZXh0IiwiZGF0YSIsInRvdGFsV2FpdEZvckNvdW50IiwidG90YWxTdWJzY3JpcHRpb25Db3VudCIsImNvbGxlY3Rpb25zIiwibWFwIiwiY29sbGVjdGlvbiIsIndhaXRGb3JDb3VudCIsInN1YnNjcmlwdGlvbkNvdW50IiwibmFtZSIsIm1heFF1ZXVlU2l6ZSIsInN1YnNjcmlwdGlvbnMiLCJ3YWl0Rm9yIiwiZ2V0Q29sbGVjdGlvbnMiLCJpbmRleGVzIiwiaW5kZXgiLCJnZXRJbmRleGVzIiwicHVzaCIsImZpZWxkcyIsImpvaW4iLCJjb3VudCIsImRyb3BDYWNoZWREYkluZm8iLCJtYW0iLCJRdWVyeSIsIk11dGF0aW9uIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBRUE7O0FBRUE7O0FBQ0EsTUFBTTtBQUFDQSxFQUFBQTtBQUFELElBQVkseUJBQWxCOztBQWlDQTtBQUVBLFNBQVNDLElBQVQsR0FBc0I7QUFDbEIsU0FBTztBQUNIRCxJQUFBQTtBQURHLEdBQVA7QUFHSDs7QUFFRCxTQUFTRSxJQUFULENBQWNDLE9BQWQsRUFBNEJDLElBQTVCLEVBQXVDQyxPQUF2QyxFQUErRTtBQUMzRSxxQ0FBa0JBLE9BQWxCLEVBQTJCRCxJQUEzQjtBQUNBLFFBQU1FLElBQUksR0FBR0QsT0FBTyxDQUFDQyxJQUFyQjtBQUNBLE1BQUlDLGlCQUFpQixHQUFHLENBQXhCO0FBQ0EsTUFBSUMsc0JBQXNCLEdBQUcsQ0FBN0I7QUFDQSxRQUFNQyxXQUFXLEdBQUdILElBQUksQ0FBQ0csV0FBTCxDQUFpQkMsR0FBakIsQ0FBc0JDLFVBQUQsSUFBaUM7QUFDdEVKLElBQUFBLGlCQUFpQixJQUFJSSxVQUFVLENBQUNDLFlBQWhDO0FBQ0FKLElBQUFBLHNCQUFzQixJQUFJRyxVQUFVLENBQUNFLGlCQUFyQztBQUNBLFdBQU87QUFDSEMsTUFBQUEsSUFBSSxFQUFFSCxVQUFVLENBQUNHLElBRGQ7QUFFSEQsTUFBQUEsaUJBQWlCLEVBQUVGLFVBQVUsQ0FBQ0UsaUJBRjNCO0FBR0hELE1BQUFBLFlBQVksRUFBRUQsVUFBVSxDQUFDQyxZQUh0QjtBQUlIRyxNQUFBQSxZQUFZLEVBQUVKLFVBQVUsQ0FBQ0ksWUFKdEI7QUFLSEMsTUFBQUEsYUFBYSxFQUFFLEVBTFo7QUFNSEMsTUFBQUEsT0FBTyxFQUFFO0FBTk4sS0FBUDtBQVFILEdBWG1CLENBQXBCO0FBWUEsU0FBTztBQUNITCxJQUFBQSxZQUFZLEVBQUVMLGlCQURYO0FBRUhNLElBQUFBLGlCQUFpQixFQUFFTCxzQkFGaEI7QUFHSEMsSUFBQUE7QUFIRyxHQUFQO0FBS0g7O0FBRUQsZUFBZVMsY0FBZixDQUE4QmYsT0FBOUIsRUFBNENDLElBQTVDLEVBQXVEQyxPQUF2RCxFQUF1SDtBQUNuSCxxQ0FBa0JBLE9BQWxCLEVBQTJCRCxJQUEzQjtBQUNBLFFBQU1FLElBQUksR0FBR0QsT0FBTyxDQUFDQyxJQUFyQjtBQUNBLFFBQU1HLFdBQWdDLEdBQUcsRUFBekM7O0FBQ0EsT0FBSyxNQUFNRSxVQUFYLElBQXlCTCxJQUFJLENBQUNHLFdBQTlCLEVBQTJDO0FBQ3ZDLFVBQU1VLE9BQWlCLEdBQUcsRUFBMUI7O0FBQ0EsU0FBSyxNQUFNQyxLQUFYLElBQW9CLE1BQU1ULFVBQVUsQ0FBQ1UsVUFBWCxFQUExQixFQUFtRDtBQUMvQ0YsTUFBQUEsT0FBTyxDQUFDRyxJQUFSLENBQWFGLEtBQUssQ0FBQ0csTUFBTixDQUFhQyxJQUFiLENBQWtCLElBQWxCLENBQWI7QUFDSDs7QUFDRGYsSUFBQUEsV0FBVyxDQUFDYSxJQUFaLENBQWlCO0FBQ2JSLE1BQUFBLElBQUksRUFBRUgsVUFBVSxDQUFDRyxJQURKO0FBRWJXLE1BQUFBLEtBQUssRUFBRSxDQUZNO0FBR2JOLE1BQUFBO0FBSGEsS0FBakI7QUFLSDs7QUFDRCxTQUFPVixXQUFQO0FBQ0g7O0FBRUQsZUFBZWlCLGdCQUFmLENBQWdDdkIsT0FBaEMsRUFBOENDLElBQTlDLEVBQXlEQyxPQUF6RCxFQUE2RztBQUN6RyxxQ0FBa0JBLE9BQWxCLEVBQTJCRCxJQUEzQjtBQUNBLFFBQU1DLE9BQU8sQ0FBQ0MsSUFBUixDQUFhb0IsZ0JBQWIsRUFBTjtBQUNBLFNBQU8sSUFBUDtBQUNILEMsQ0FFRDs7O0FBRU8sTUFBTUMsR0FBRyxHQUFHO0FBQ2ZDLEVBQUFBLEtBQUssRUFBRTtBQUNIM0IsSUFBQUEsSUFERztBQUVIaUIsSUFBQUEsY0FGRztBQUdIaEIsSUFBQUE7QUFIRyxHQURRO0FBTWYyQixFQUFBQSxRQUFRLEVBQUU7QUFDTkgsSUFBQUE7QUFETTtBQU5LLENBQVoiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBAZmxvd1xuXG5pbXBvcnQgeyBRRGF0YUNvbGxlY3Rpb24sIG1hbUFjY2Vzc1JlcXVpcmVkIH0gZnJvbSBcIi4uL2RhdGEvY29sbGVjdGlvblwiO1xuaW1wb3J0IHR5cGUgeyBHcmFwaFFMUmVxdWVzdENvbnRleHRFeCB9IGZyb20gXCIuL2NvbnRleHRcIjtcbmltcG9ydCB7cGFja2FnZUpzb259IGZyb20gJy4uL3V0aWxzJztcbmNvbnN0IHt2ZXJzaW9ufSA9IHBhY2thZ2VKc29uKCk7XG5cbnR5cGUgSW5mbyA9IHtcbiAgICB2ZXJzaW9uOiBzdHJpbmcsXG59XG5cbnR5cGUgTGlzdGVuZXJTdGF0ID0ge1xuICAgIGZpbHRlcjogc3RyaW5nLFxuICAgIHNlbGVjdGlvbjogc3RyaW5nLFxuICAgIHF1ZXVlU2l6ZTogbnVtYmVyLFxuICAgIGV2ZW50Q291bnQ6IG51bWJlcixcbiAgICBzZWNvbmRzQWN0aXZlOiBudW1iZXIsXG59XG5cbnR5cGUgQ29sbGVjdGlvblN0YXQgPSB7XG4gICAgbmFtZTogc3RyaW5nLFxuICAgIHN1YnNjcmlwdGlvbkNvdW50OiBudW1iZXIsXG4gICAgd2FpdEZvckNvdW50OiBudW1iZXIsXG4gICAgbWF4UXVldWVTaXplOiBudW1iZXIsXG4gICAgc3Vic2NyaXB0aW9uczogTGlzdGVuZXJTdGF0W10sXG4gICAgd2FpdEZvcjogTGlzdGVuZXJTdGF0W10sXG59XG5cbnR5cGUgU3RhdCA9IHtcbiAgICBjb2xsZWN0aW9uczogQ29sbGVjdGlvblN0YXRbXVxufVxuXG50eXBlIENvbGxlY3Rpb25TdW1tYXJ5ID0ge1xuICAgIG5hbWU6IHN0cmluZyxcbiAgICBjb3VudDogbnVtYmVyLFxuICAgIGluZGV4ZXM6IHN0cmluZ1tdLFxufVxuXG4vLyBRdWVyeVxuXG5mdW5jdGlvbiBpbmZvKCk6IEluZm8ge1xuICAgIHJldHVybiB7XG4gICAgICAgIHZlcnNpb24sXG4gICAgfTtcbn1cblxuZnVuY3Rpb24gc3RhdChfcGFyZW50OiBhbnksIGFyZ3M6IGFueSwgY29udGV4dDogR3JhcGhRTFJlcXVlc3RDb250ZXh0RXgpOiBTdGF0IHtcbiAgICBtYW1BY2Nlc3NSZXF1aXJlZChjb250ZXh0LCBhcmdzKTtcbiAgICBjb25zdCBkYXRhID0gY29udGV4dC5kYXRhO1xuICAgIGxldCB0b3RhbFdhaXRGb3JDb3VudCA9IDA7XG4gICAgbGV0IHRvdGFsU3Vic2NyaXB0aW9uQ291bnQgPSAwO1xuICAgIGNvbnN0IGNvbGxlY3Rpb25zID0gZGF0YS5jb2xsZWN0aW9ucy5tYXAoKGNvbGxlY3Rpb246IFFEYXRhQ29sbGVjdGlvbikgPT4ge1xuICAgICAgICB0b3RhbFdhaXRGb3JDb3VudCArPSBjb2xsZWN0aW9uLndhaXRGb3JDb3VudDtcbiAgICAgICAgdG90YWxTdWJzY3JpcHRpb25Db3VudCArPSBjb2xsZWN0aW9uLnN1YnNjcmlwdGlvbkNvdW50O1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbmFtZTogY29sbGVjdGlvbi5uYW1lLFxuICAgICAgICAgICAgc3Vic2NyaXB0aW9uQ291bnQ6IGNvbGxlY3Rpb24uc3Vic2NyaXB0aW9uQ291bnQsXG4gICAgICAgICAgICB3YWl0Rm9yQ291bnQ6IGNvbGxlY3Rpb24ud2FpdEZvckNvdW50LFxuICAgICAgICAgICAgbWF4UXVldWVTaXplOiBjb2xsZWN0aW9uLm1heFF1ZXVlU2l6ZSxcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbnM6IFtdLFxuICAgICAgICAgICAgd2FpdEZvcjogW10sXG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgICB3YWl0Rm9yQ291bnQ6IHRvdGFsV2FpdEZvckNvdW50LFxuICAgICAgICBzdWJzY3JpcHRpb25Db3VudDogdG90YWxTdWJzY3JpcHRpb25Db3VudCxcbiAgICAgICAgY29sbGVjdGlvbnMsXG4gICAgfTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0Q29sbGVjdGlvbnMoX3BhcmVudDogYW55LCBhcmdzOiBhbnksIGNvbnRleHQ6IEdyYXBoUUxSZXF1ZXN0Q29udGV4dEV4KTogUHJvbWlzZTxDb2xsZWN0aW9uU3VtbWFyeVtdPiB7XG4gICAgbWFtQWNjZXNzUmVxdWlyZWQoY29udGV4dCwgYXJncyk7XG4gICAgY29uc3QgZGF0YSA9IGNvbnRleHQuZGF0YTtcbiAgICBjb25zdCBjb2xsZWN0aW9uczogQ29sbGVjdGlvblN1bW1hcnlbXSA9IFtdO1xuICAgIGZvciAoY29uc3QgY29sbGVjdGlvbiBvZiBkYXRhLmNvbGxlY3Rpb25zKSB7XG4gICAgICAgIGNvbnN0IGluZGV4ZXM6IHN0cmluZ1tdID0gW107XG4gICAgICAgIGZvciAoY29uc3QgaW5kZXggb2YgYXdhaXQgY29sbGVjdGlvbi5nZXRJbmRleGVzKCkpIHtcbiAgICAgICAgICAgIGluZGV4ZXMucHVzaChpbmRleC5maWVsZHMuam9pbignLCAnKSk7XG4gICAgICAgIH1cbiAgICAgICAgY29sbGVjdGlvbnMucHVzaCh7XG4gICAgICAgICAgICBuYW1lOiBjb2xsZWN0aW9uLm5hbWUsXG4gICAgICAgICAgICBjb3VudDogMCxcbiAgICAgICAgICAgIGluZGV4ZXMsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gY29sbGVjdGlvbnM7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGRyb3BDYWNoZWREYkluZm8oX3BhcmVudDogYW55LCBhcmdzOiBhbnksIGNvbnRleHQ6IEdyYXBoUUxSZXF1ZXN0Q29udGV4dEV4KTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgbWFtQWNjZXNzUmVxdWlyZWQoY29udGV4dCwgYXJncyk7XG4gICAgYXdhaXQgY29udGV4dC5kYXRhLmRyb3BDYWNoZWREYkluZm8oKTtcbiAgICByZXR1cm4gdHJ1ZTtcbn1cblxuLy8gTXV0YXRpb25cblxuZXhwb3J0IGNvbnN0IG1hbSA9IHtcbiAgICBRdWVyeToge1xuICAgICAgICBpbmZvLFxuICAgICAgICBnZXRDb2xsZWN0aW9ucyxcbiAgICAgICAgc3RhdFxuICAgIH0sXG4gICAgTXV0YXRpb246IHtcbiAgICAgICAgZHJvcENhY2hlZERiSW5mbyxcbiAgICB9XG59O1xuIl19