"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mam = void 0;

var _collection = require("../data/collection");

var _utils = require("../utils");

const {
  version
} = (0, _utils.packageJson)();

// Query
function info() {
  return {
    version
  };
}

function stat(_parent, args, context) {
  (0, _collection.mamAccessRequired)(context, args);
  const data = context.data;
  let totalWaitForCount = 0;
  let totalSubscriptionCount = 0;
  const collections = data.collections.map(collection => {
    totalWaitForCount += collection.waitForCount;
    totalSubscriptionCount += collection.subscriptionCount;
    return {
      name: collection.name,
      subscriptionCount: collection.subscriptionCount,
      waitForCount: collection.waitForCount,
      maxQueueSize: collection.maxQueueSize,
      subscriptions: [],
      waitFor: []
    };
  });
  return {
    waitForCount: totalWaitForCount,
    subscriptionCount: totalSubscriptionCount,
    collections
  };
}

async function getCollections(_parent, args, context) {
  (0, _collection.mamAccessRequired)(context, args);
  const data = context.data;
  const collections = [];

  for (const collection of data.collections) {
    const indexes = [];

    for (const index of await collection.getIndexes()) {
      indexes.push(index.fields.join(', '));
    }

    collections.push({
      name: collection.name,
      count: 0,
      indexes
    });
  }

  return collections;
}

async function dropCachedDbInfo(_parent, args, context) {
  (0, _collection.mamAccessRequired)(context, args);
  await context.data.dropCachedDbInfo();
  return true;
}

async function updateConfig(_parent, args, context) {
  (0, _collection.mamAccessRequired)(context, args);
  const config = args.config;

  if (config) {
    const {
      debugLatency
    } = config;

    if (debugLatency !== undefined) {
      context.data.updateDebugLatency(debugLatency);
    }
  }

  return true;
} // Mutation


const mam = {
  Query: {
    info,
    getCollections,
    stat
  },
  Mutation: {
    dropCachedDbInfo,
    updateConfig
  }
};
exports.mam = mam;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zZXJ2ZXIvZ3JhcGhxbC9tYW0uanMiXSwibmFtZXMiOlsidmVyc2lvbiIsImluZm8iLCJzdGF0IiwiX3BhcmVudCIsImFyZ3MiLCJjb250ZXh0IiwiZGF0YSIsInRvdGFsV2FpdEZvckNvdW50IiwidG90YWxTdWJzY3JpcHRpb25Db3VudCIsImNvbGxlY3Rpb25zIiwibWFwIiwiY29sbGVjdGlvbiIsIndhaXRGb3JDb3VudCIsInN1YnNjcmlwdGlvbkNvdW50IiwibmFtZSIsIm1heFF1ZXVlU2l6ZSIsInN1YnNjcmlwdGlvbnMiLCJ3YWl0Rm9yIiwiZ2V0Q29sbGVjdGlvbnMiLCJpbmRleGVzIiwiaW5kZXgiLCJnZXRJbmRleGVzIiwicHVzaCIsImZpZWxkcyIsImpvaW4iLCJjb3VudCIsImRyb3BDYWNoZWREYkluZm8iLCJ1cGRhdGVDb25maWciLCJjb25maWciLCJkZWJ1Z0xhdGVuY3kiLCJ1bmRlZmluZWQiLCJ1cGRhdGVEZWJ1Z0xhdGVuY3kiLCJtYW0iLCJRdWVyeSIsIk11dGF0aW9uIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBRUE7O0FBRUE7O0FBRUEsTUFBTTtBQUFFQSxFQUFBQTtBQUFGLElBQWMseUJBQXBCOztBQWlDQTtBQUVBLFNBQVNDLElBQVQsR0FBc0I7QUFDbEIsU0FBTztBQUNIRCxJQUFBQTtBQURHLEdBQVA7QUFHSDs7QUFFRCxTQUFTRSxJQUFULENBQWNDLE9BQWQsRUFBNEJDLElBQTVCLEVBQXVDQyxPQUF2QyxFQUErRTtBQUMzRSxxQ0FBa0JBLE9BQWxCLEVBQTJCRCxJQUEzQjtBQUNBLFFBQU1FLElBQUksR0FBR0QsT0FBTyxDQUFDQyxJQUFyQjtBQUNBLE1BQUlDLGlCQUFpQixHQUFHLENBQXhCO0FBQ0EsTUFBSUMsc0JBQXNCLEdBQUcsQ0FBN0I7QUFDQSxRQUFNQyxXQUFXLEdBQUdILElBQUksQ0FBQ0csV0FBTCxDQUFpQkMsR0FBakIsQ0FBc0JDLFVBQUQsSUFBaUM7QUFDdEVKLElBQUFBLGlCQUFpQixJQUFJSSxVQUFVLENBQUNDLFlBQWhDO0FBQ0FKLElBQUFBLHNCQUFzQixJQUFJRyxVQUFVLENBQUNFLGlCQUFyQztBQUNBLFdBQU87QUFDSEMsTUFBQUEsSUFBSSxFQUFFSCxVQUFVLENBQUNHLElBRGQ7QUFFSEQsTUFBQUEsaUJBQWlCLEVBQUVGLFVBQVUsQ0FBQ0UsaUJBRjNCO0FBR0hELE1BQUFBLFlBQVksRUFBRUQsVUFBVSxDQUFDQyxZQUh0QjtBQUlIRyxNQUFBQSxZQUFZLEVBQUVKLFVBQVUsQ0FBQ0ksWUFKdEI7QUFLSEMsTUFBQUEsYUFBYSxFQUFFLEVBTFo7QUFNSEMsTUFBQUEsT0FBTyxFQUFFO0FBTk4sS0FBUDtBQVFILEdBWG1CLENBQXBCO0FBWUEsU0FBTztBQUNITCxJQUFBQSxZQUFZLEVBQUVMLGlCQURYO0FBRUhNLElBQUFBLGlCQUFpQixFQUFFTCxzQkFGaEI7QUFHSEMsSUFBQUE7QUFIRyxHQUFQO0FBS0g7O0FBRUQsZUFBZVMsY0FBZixDQUE4QmYsT0FBOUIsRUFBNENDLElBQTVDLEVBQXVEQyxPQUF2RCxFQUF1SDtBQUNuSCxxQ0FBa0JBLE9BQWxCLEVBQTJCRCxJQUEzQjtBQUNBLFFBQU1FLElBQUksR0FBR0QsT0FBTyxDQUFDQyxJQUFyQjtBQUNBLFFBQU1HLFdBQWdDLEdBQUcsRUFBekM7O0FBQ0EsT0FBSyxNQUFNRSxVQUFYLElBQXlCTCxJQUFJLENBQUNHLFdBQTlCLEVBQTJDO0FBQ3ZDLFVBQU1VLE9BQWlCLEdBQUcsRUFBMUI7O0FBQ0EsU0FBSyxNQUFNQyxLQUFYLElBQW9CLE1BQU1ULFVBQVUsQ0FBQ1UsVUFBWCxFQUExQixFQUFtRDtBQUMvQ0YsTUFBQUEsT0FBTyxDQUFDRyxJQUFSLENBQWFGLEtBQUssQ0FBQ0csTUFBTixDQUFhQyxJQUFiLENBQWtCLElBQWxCLENBQWI7QUFDSDs7QUFDRGYsSUFBQUEsV0FBVyxDQUFDYSxJQUFaLENBQWlCO0FBQ2JSLE1BQUFBLElBQUksRUFBRUgsVUFBVSxDQUFDRyxJQURKO0FBRWJXLE1BQUFBLEtBQUssRUFBRSxDQUZNO0FBR2JOLE1BQUFBO0FBSGEsS0FBakI7QUFLSDs7QUFDRCxTQUFPVixXQUFQO0FBQ0g7O0FBRUQsZUFBZWlCLGdCQUFmLENBQWdDdkIsT0FBaEMsRUFBOENDLElBQTlDLEVBQXlEQyxPQUF6RCxFQUE2RztBQUN6RyxxQ0FBa0JBLE9BQWxCLEVBQTJCRCxJQUEzQjtBQUNBLFFBQU1DLE9BQU8sQ0FBQ0MsSUFBUixDQUFhb0IsZ0JBQWIsRUFBTjtBQUNBLFNBQU8sSUFBUDtBQUNIOztBQUVELGVBQWVDLFlBQWYsQ0FBNEJ4QixPQUE1QixFQUEwQ0MsSUFBMUMsRUFBcURDLE9BQXJELEVBQXlHO0FBQ3JHLHFDQUFrQkEsT0FBbEIsRUFBMkJELElBQTNCO0FBQ0EsUUFBTXdCLE1BQU0sR0FBR3hCLElBQUksQ0FBQ3dCLE1BQXBCOztBQUNBLE1BQUlBLE1BQUosRUFBWTtBQUNSLFVBQU07QUFBRUMsTUFBQUE7QUFBRixRQUFtQkQsTUFBekI7O0FBQ0EsUUFBSUMsWUFBWSxLQUFLQyxTQUFyQixFQUFnQztBQUM1QnpCLE1BQUFBLE9BQU8sQ0FBQ0MsSUFBUixDQUFheUIsa0JBQWIsQ0FBZ0NGLFlBQWhDO0FBQ0g7QUFDSjs7QUFDRCxTQUFPLElBQVA7QUFDSCxDLENBRUQ7OztBQUVPLE1BQU1HLEdBQUcsR0FBRztBQUNmQyxFQUFBQSxLQUFLLEVBQUU7QUFDSGhDLElBQUFBLElBREc7QUFFSGlCLElBQUFBLGNBRkc7QUFHSGhCLElBQUFBO0FBSEcsR0FEUTtBQU1mZ0MsRUFBQUEsUUFBUSxFQUFFO0FBQ05SLElBQUFBLGdCQURNO0FBRU5DLElBQUFBO0FBRk07QUFOSyxDQUFaIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQGZsb3dcblxuaW1wb3J0IHsgUURhdGFDb2xsZWN0aW9uLCBtYW1BY2Nlc3NSZXF1aXJlZCB9IGZyb20gXCIuLi9kYXRhL2NvbGxlY3Rpb25cIjtcbmltcG9ydCB0eXBlIHsgR3JhcGhRTFJlcXVlc3RDb250ZXh0RXggfSBmcm9tIFwiLi9jb250ZXh0XCI7XG5pbXBvcnQgeyBwYWNrYWdlSnNvbiB9IGZyb20gJy4uL3V0aWxzJztcblxuY29uc3QgeyB2ZXJzaW9uIH0gPSBwYWNrYWdlSnNvbigpO1xuXG50eXBlIEluZm8gPSB7XG4gICAgdmVyc2lvbjogc3RyaW5nLFxufVxuXG50eXBlIExpc3RlbmVyU3RhdCA9IHtcbiAgICBmaWx0ZXI6IHN0cmluZyxcbiAgICBzZWxlY3Rpb246IHN0cmluZyxcbiAgICBxdWV1ZVNpemU6IG51bWJlcixcbiAgICBldmVudENvdW50OiBudW1iZXIsXG4gICAgc2Vjb25kc0FjdGl2ZTogbnVtYmVyLFxufVxuXG50eXBlIENvbGxlY3Rpb25TdGF0ID0ge1xuICAgIG5hbWU6IHN0cmluZyxcbiAgICBzdWJzY3JpcHRpb25Db3VudDogbnVtYmVyLFxuICAgIHdhaXRGb3JDb3VudDogbnVtYmVyLFxuICAgIG1heFF1ZXVlU2l6ZTogbnVtYmVyLFxuICAgIHN1YnNjcmlwdGlvbnM6IExpc3RlbmVyU3RhdFtdLFxuICAgIHdhaXRGb3I6IExpc3RlbmVyU3RhdFtdLFxufVxuXG50eXBlIFN0YXQgPSB7XG4gICAgY29sbGVjdGlvbnM6IENvbGxlY3Rpb25TdGF0W11cbn1cblxudHlwZSBDb2xsZWN0aW9uU3VtbWFyeSA9IHtcbiAgICBuYW1lOiBzdHJpbmcsXG4gICAgY291bnQ6IG51bWJlcixcbiAgICBpbmRleGVzOiBzdHJpbmdbXSxcbn1cblxuLy8gUXVlcnlcblxuZnVuY3Rpb24gaW5mbygpOiBJbmZvIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB2ZXJzaW9uLFxuICAgIH07XG59XG5cbmZ1bmN0aW9uIHN0YXQoX3BhcmVudDogYW55LCBhcmdzOiBhbnksIGNvbnRleHQ6IEdyYXBoUUxSZXF1ZXN0Q29udGV4dEV4KTogU3RhdCB7XG4gICAgbWFtQWNjZXNzUmVxdWlyZWQoY29udGV4dCwgYXJncyk7XG4gICAgY29uc3QgZGF0YSA9IGNvbnRleHQuZGF0YTtcbiAgICBsZXQgdG90YWxXYWl0Rm9yQ291bnQgPSAwO1xuICAgIGxldCB0b3RhbFN1YnNjcmlwdGlvbkNvdW50ID0gMDtcbiAgICBjb25zdCBjb2xsZWN0aW9ucyA9IGRhdGEuY29sbGVjdGlvbnMubWFwKChjb2xsZWN0aW9uOiBRRGF0YUNvbGxlY3Rpb24pID0+IHtcbiAgICAgICAgdG90YWxXYWl0Rm9yQ291bnQgKz0gY29sbGVjdGlvbi53YWl0Rm9yQ291bnQ7XG4gICAgICAgIHRvdGFsU3Vic2NyaXB0aW9uQ291bnQgKz0gY29sbGVjdGlvbi5zdWJzY3JpcHRpb25Db3VudDtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG5hbWU6IGNvbGxlY3Rpb24ubmFtZSxcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbkNvdW50OiBjb2xsZWN0aW9uLnN1YnNjcmlwdGlvbkNvdW50LFxuICAgICAgICAgICAgd2FpdEZvckNvdW50OiBjb2xsZWN0aW9uLndhaXRGb3JDb3VudCxcbiAgICAgICAgICAgIG1heFF1ZXVlU2l6ZTogY29sbGVjdGlvbi5tYXhRdWV1ZVNpemUsXG4gICAgICAgICAgICBzdWJzY3JpcHRpb25zOiBbXSxcbiAgICAgICAgICAgIHdhaXRGb3I6IFtdLFxuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgd2FpdEZvckNvdW50OiB0b3RhbFdhaXRGb3JDb3VudCxcbiAgICAgICAgc3Vic2NyaXB0aW9uQ291bnQ6IHRvdGFsU3Vic2NyaXB0aW9uQ291bnQsXG4gICAgICAgIGNvbGxlY3Rpb25zLFxuICAgIH07XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldENvbGxlY3Rpb25zKF9wYXJlbnQ6IGFueSwgYXJnczogYW55LCBjb250ZXh0OiBHcmFwaFFMUmVxdWVzdENvbnRleHRFeCk6IFByb21pc2U8Q29sbGVjdGlvblN1bW1hcnlbXT4ge1xuICAgIG1hbUFjY2Vzc1JlcXVpcmVkKGNvbnRleHQsIGFyZ3MpO1xuICAgIGNvbnN0IGRhdGEgPSBjb250ZXh0LmRhdGE7XG4gICAgY29uc3QgY29sbGVjdGlvbnM6IENvbGxlY3Rpb25TdW1tYXJ5W10gPSBbXTtcbiAgICBmb3IgKGNvbnN0IGNvbGxlY3Rpb24gb2YgZGF0YS5jb2xsZWN0aW9ucykge1xuICAgICAgICBjb25zdCBpbmRleGVzOiBzdHJpbmdbXSA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IGluZGV4IG9mIGF3YWl0IGNvbGxlY3Rpb24uZ2V0SW5kZXhlcygpKSB7XG4gICAgICAgICAgICBpbmRleGVzLnB1c2goaW5kZXguZmllbGRzLmpvaW4oJywgJykpO1xuICAgICAgICB9XG4gICAgICAgIGNvbGxlY3Rpb25zLnB1c2goe1xuICAgICAgICAgICAgbmFtZTogY29sbGVjdGlvbi5uYW1lLFxuICAgICAgICAgICAgY291bnQ6IDAsXG4gICAgICAgICAgICBpbmRleGVzLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbGxlY3Rpb25zO1xufVxuXG5hc3luYyBmdW5jdGlvbiBkcm9wQ2FjaGVkRGJJbmZvKF9wYXJlbnQ6IGFueSwgYXJnczogYW55LCBjb250ZXh0OiBHcmFwaFFMUmVxdWVzdENvbnRleHRFeCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIG1hbUFjY2Vzc1JlcXVpcmVkKGNvbnRleHQsIGFyZ3MpO1xuICAgIGF3YWl0IGNvbnRleHQuZGF0YS5kcm9wQ2FjaGVkRGJJbmZvKCk7XG4gICAgcmV0dXJuIHRydWU7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHVwZGF0ZUNvbmZpZyhfcGFyZW50OiBhbnksIGFyZ3M6IGFueSwgY29udGV4dDogR3JhcGhRTFJlcXVlc3RDb250ZXh0RXgpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICBtYW1BY2Nlc3NSZXF1aXJlZChjb250ZXh0LCBhcmdzKTtcbiAgICBjb25zdCBjb25maWcgPSBhcmdzLmNvbmZpZztcbiAgICBpZiAoY29uZmlnKSB7XG4gICAgICAgIGNvbnN0IHsgZGVidWdMYXRlbmN5IH0gPSBjb25maWc7XG4gICAgICAgIGlmIChkZWJ1Z0xhdGVuY3kgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY29udGV4dC5kYXRhLnVwZGF0ZURlYnVnTGF0ZW5jeShkZWJ1Z0xhdGVuY3kpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuXG4vLyBNdXRhdGlvblxuXG5leHBvcnQgY29uc3QgbWFtID0ge1xuICAgIFF1ZXJ5OiB7XG4gICAgICAgIGluZm8sXG4gICAgICAgIGdldENvbGxlY3Rpb25zLFxuICAgICAgICBzdGF0XG4gICAgfSxcbiAgICBNdXRhdGlvbjoge1xuICAgICAgICBkcm9wQ2FjaGVkRGJJbmZvLFxuICAgICAgICB1cGRhdGVDb25maWdcbiAgICB9XG59O1xuIl19