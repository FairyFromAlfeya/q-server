"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.counterpartiesResolvers = counterpartiesResolvers;
exports.Counterparty = void 0;

var _blockchain = _interopRequireDefault(require("../data/blockchain"));

var _collection = require("../data/collection");

var _filters = require("../filter/filters");

var _tracer = require("../tracer");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

//------------------------------------------------------------- Counterparties
const Counterparty = (0, _filters.struct)({
  account: _filters.stringLowerFilter,
  counterparty: _filters.stringLowerFilter,
  last_message_at: _filters.scalar,
  last_message_id: _filters.stringLowerFilter,
  last_message_is_reverse: _filters.scalar,
  last_message_value: _filters.bigUInt2
}, true);
exports.Counterparty = Counterparty;

async function counterparties(_parent, args, context) {
  const tracer = context.tracer;
  return _tracer.QTracer.trace(tracer, 'counterparties', async () => {
    await (0, _collection.requireGrantedAccess)(context, args);
    let text = "FOR doc IN counterparties FILTER doc.account == @account";
    const vars = {
      account: args.account,
      first: Math.min(50, Number.parseInt(args.first || 50))
    };

    if (args.after) {
      const after = args.after.split("/");
      text += " AND (" + "doc.last_message_at > @after_0" + " OR doc.last_message_at == @after_0 AND doc.counterparty > @after_1" + ")";
      vars.after_0 = Number.parseInt(after[0]);
      vars.after_1 = after[1];
    }

    text += " SORT doc.last_message_at, doc.counterparty LIMIT @first RETURN doc";
    const result = await context.data.query(context.data.counterparties.provider, text, vars, [{
      path: "last_message_at,counterparty",
      direction: "DESC"
    }]);
    result.forEach(x => x.cursor = `${x.last_message_at}/${x.counterparty}`);
    return result;
  }, _tracer.QTracer.getParentSpan(tracer, context));
}

function counterpartiesResolvers(_data) {
  return {
    Counterparty: {
      last_message_value(parent, args) {
        return (0, _filters.resolveBigUInt)(2, parent.last_message_value, args);
      }

    },
    Query: {
      counterparties
    }
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zZXJ2ZXIvZ3JhcGhxbC9yZXNvbHZlcnMtY291bnRlcnBhcnRpZXMuanMiXSwibmFtZXMiOlsiQ291bnRlcnBhcnR5IiwiYWNjb3VudCIsInN0cmluZ0xvd2VyRmlsdGVyIiwiY291bnRlcnBhcnR5IiwibGFzdF9tZXNzYWdlX2F0Iiwic2NhbGFyIiwibGFzdF9tZXNzYWdlX2lkIiwibGFzdF9tZXNzYWdlX2lzX3JldmVyc2UiLCJsYXN0X21lc3NhZ2VfdmFsdWUiLCJiaWdVSW50MiIsImNvdW50ZXJwYXJ0aWVzIiwiX3BhcmVudCIsImFyZ3MiLCJjb250ZXh0IiwidHJhY2VyIiwiUVRyYWNlciIsInRyYWNlIiwidGV4dCIsInZhcnMiLCJmaXJzdCIsIk1hdGgiLCJtaW4iLCJOdW1iZXIiLCJwYXJzZUludCIsImFmdGVyIiwic3BsaXQiLCJhZnRlcl8wIiwiYWZ0ZXJfMSIsInJlc3VsdCIsImRhdGEiLCJxdWVyeSIsInByb3ZpZGVyIiwicGF0aCIsImRpcmVjdGlvbiIsImZvckVhY2giLCJ4IiwiY3Vyc29yIiwiZ2V0UGFyZW50U3BhbiIsImNvdW50ZXJwYXJ0aWVzUmVzb2x2ZXJzIiwiX2RhdGEiLCJwYXJlbnQiLCJRdWVyeSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFFQTs7QUFDQTs7QUFDQTs7QUFDQTs7OztBQUdBO0FBRU8sTUFBTUEsWUFBWSxHQUFHLHFCQUFPO0FBQy9CQyxFQUFBQSxPQUFPLEVBQUVDLDBCQURzQjtBQUUvQkMsRUFBQUEsWUFBWSxFQUFFRCwwQkFGaUI7QUFHL0JFLEVBQUFBLGVBQWUsRUFBRUMsZUFIYztBQUkvQkMsRUFBQUEsZUFBZSxFQUFFSiwwQkFKYztBQUsvQkssRUFBQUEsdUJBQXVCLEVBQUVGLGVBTE07QUFNL0JHLEVBQUFBLGtCQUFrQixFQUFFQztBQU5XLENBQVAsRUFPekIsSUFQeUIsQ0FBckI7OztBQVNQLGVBQWVDLGNBQWYsQ0FBOEJDLE9BQTlCLEVBQXVDQyxJQUF2QyxFQUE2Q0MsT0FBN0MsRUFBa0c7QUFDOUYsUUFBTUMsTUFBTSxHQUFHRCxPQUFPLENBQUNDLE1BQXZCO0FBQ0EsU0FBT0MsZ0JBQVFDLEtBQVIsQ0FBY0YsTUFBZCxFQUFzQixnQkFBdEIsRUFBd0MsWUFBWTtBQUN2RCxVQUFNLHNDQUFxQkQsT0FBckIsRUFBOEJELElBQTlCLENBQU47QUFDQSxRQUFJSyxJQUFJLEdBQUcsMERBQVg7QUFDQSxVQUFNQyxJQUFTLEdBQUc7QUFDZGpCLE1BQUFBLE9BQU8sRUFBRVcsSUFBSSxDQUFDWCxPQURBO0FBRWRrQixNQUFBQSxLQUFLLEVBQUVDLElBQUksQ0FBQ0MsR0FBTCxDQUFTLEVBQVQsRUFBYUMsTUFBTSxDQUFDQyxRQUFQLENBQWdCWCxJQUFJLENBQUNPLEtBQUwsSUFBYyxFQUE5QixDQUFiO0FBRk8sS0FBbEI7O0FBSUEsUUFBSVAsSUFBSSxDQUFDWSxLQUFULEVBQWdCO0FBQ1osWUFBTUEsS0FBSyxHQUFHWixJQUFJLENBQUNZLEtBQUwsQ0FBV0MsS0FBWCxDQUFpQixHQUFqQixDQUFkO0FBQ0FSLE1BQUFBLElBQUksSUFBSSxXQUNKLGdDQURJLEdBRUoscUVBRkksR0FHSixHQUhKO0FBSUFDLE1BQUFBLElBQUksQ0FBQ1EsT0FBTCxHQUFlSixNQUFNLENBQUNDLFFBQVAsQ0FBZ0JDLEtBQUssQ0FBQyxDQUFELENBQXJCLENBQWY7QUFDQU4sTUFBQUEsSUFBSSxDQUFDUyxPQUFMLEdBQWVILEtBQUssQ0FBQyxDQUFELENBQXBCO0FBQ0g7O0FBQ0RQLElBQUFBLElBQUksSUFBSSxxRUFBUjtBQUVBLFVBQU1XLE1BQVcsR0FBRyxNQUFNZixPQUFPLENBQUNnQixJQUFSLENBQWFDLEtBQWIsQ0FDdEJqQixPQUFPLENBQUNnQixJQUFSLENBQWFuQixjQUFiLENBQTRCcUIsUUFETixFQUV0QmQsSUFGc0IsRUFHdEJDLElBSHNCLEVBSXRCLENBQUM7QUFBRWMsTUFBQUEsSUFBSSxFQUFFLDhCQUFSO0FBQXdDQyxNQUFBQSxTQUFTLEVBQUU7QUFBbkQsS0FBRCxDQUpzQixDQUExQjtBQU1BTCxJQUFBQSxNQUFNLENBQUNNLE9BQVAsQ0FBZUMsQ0FBQyxJQUFJQSxDQUFDLENBQUNDLE1BQUYsR0FBWSxHQUFFRCxDQUFDLENBQUMvQixlQUFnQixJQUFHK0IsQ0FBQyxDQUFDaEMsWUFBYSxFQUF0RTtBQUNBLFdBQU95QixNQUFQO0FBQ0gsR0ExQk0sRUEwQkpiLGdCQUFRc0IsYUFBUixDQUFzQnZCLE1BQXRCLEVBQThCRCxPQUE5QixDQTFCSSxDQUFQO0FBMkJIOztBQUVNLFNBQVN5Qix1QkFBVCxDQUFpQ0MsS0FBakMsRUFBOEQ7QUFDakUsU0FBTztBQUNIdkMsSUFBQUEsWUFBWSxFQUFFO0FBQ1ZRLE1BQUFBLGtCQUFrQixDQUFDZ0MsTUFBRCxFQUFTNUIsSUFBVCxFQUFlO0FBQzdCLGVBQU8sNkJBQWUsQ0FBZixFQUFrQjRCLE1BQU0sQ0FBQ2hDLGtCQUF6QixFQUE2Q0ksSUFBN0MsQ0FBUDtBQUNIOztBQUhTLEtBRFg7QUFNSDZCLElBQUFBLEtBQUssRUFBRTtBQUNIL0IsTUFBQUE7QUFERztBQU5KLEdBQVA7QUFVSCIsInNvdXJjZXNDb250ZW50IjpbIi8vIEBmbG93XG5cbmltcG9ydCBRQmxvY2tjaGFpbkRhdGEgZnJvbSAnLi4vZGF0YS9ibG9ja2NoYWluJztcbmltcG9ydCB7IHJlcXVpcmVHcmFudGVkQWNjZXNzIH0gZnJvbSAnLi4vZGF0YS9jb2xsZWN0aW9uJztcbmltcG9ydCB7IGJpZ1VJbnQyLCByZXNvbHZlQmlnVUludCwgc3RyaW5nTG93ZXJGaWx0ZXIsIHN0cnVjdCwgc2NhbGFyIH0gZnJvbSBcIi4uL2ZpbHRlci9maWx0ZXJzXCI7XG5pbXBvcnQgeyBRVHJhY2VyIH0gZnJvbSAnLi4vdHJhY2VyJztcbmltcG9ydCB0eXBlIHsgR3JhcGhRTFJlcXVlc3RDb250ZXh0RXggfSBmcm9tIFwiLi9yZXNvbHZlcnMtY3VzdG9tXCI7XG5cbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBDb3VudGVycGFydGllc1xuXG5leHBvcnQgY29uc3QgQ291bnRlcnBhcnR5ID0gc3RydWN0KHtcbiAgICBhY2NvdW50OiBzdHJpbmdMb3dlckZpbHRlcixcbiAgICBjb3VudGVycGFydHk6IHN0cmluZ0xvd2VyRmlsdGVyLFxuICAgIGxhc3RfbWVzc2FnZV9hdDogc2NhbGFyLFxuICAgIGxhc3RfbWVzc2FnZV9pZDogc3RyaW5nTG93ZXJGaWx0ZXIsXG4gICAgbGFzdF9tZXNzYWdlX2lzX3JldmVyc2U6IHNjYWxhcixcbiAgICBsYXN0X21lc3NhZ2VfdmFsdWU6IGJpZ1VJbnQyLFxufSwgdHJ1ZSk7XG5cbmFzeW5jIGZ1bmN0aW9uIGNvdW50ZXJwYXJ0aWVzKF9wYXJlbnQsIGFyZ3MsIGNvbnRleHQ6IEdyYXBoUUxSZXF1ZXN0Q29udGV4dEV4KTogUHJvbWlzZTxPYmplY3RbXT4ge1xuICAgIGNvbnN0IHRyYWNlciA9IGNvbnRleHQudHJhY2VyO1xuICAgIHJldHVybiBRVHJhY2VyLnRyYWNlKHRyYWNlciwgJ2NvdW50ZXJwYXJ0aWVzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICBhd2FpdCByZXF1aXJlR3JhbnRlZEFjY2Vzcyhjb250ZXh0LCBhcmdzKTtcbiAgICAgICAgbGV0IHRleHQgPSBcIkZPUiBkb2MgSU4gY291bnRlcnBhcnRpZXMgRklMVEVSIGRvYy5hY2NvdW50ID09IEBhY2NvdW50XCI7XG4gICAgICAgIGNvbnN0IHZhcnM6IGFueSA9IHtcbiAgICAgICAgICAgIGFjY291bnQ6IGFyZ3MuYWNjb3VudCxcbiAgICAgICAgICAgIGZpcnN0OiBNYXRoLm1pbig1MCwgTnVtYmVyLnBhcnNlSW50KGFyZ3MuZmlyc3QgfHwgNTApKSxcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKGFyZ3MuYWZ0ZXIpIHtcbiAgICAgICAgICAgIGNvbnN0IGFmdGVyID0gYXJncy5hZnRlci5zcGxpdChcIi9cIik7XG4gICAgICAgICAgICB0ZXh0ICs9IFwiIEFORCAoXCIgK1xuICAgICAgICAgICAgICAgIFwiZG9jLmxhc3RfbWVzc2FnZV9hdCA+IEBhZnRlcl8wXCIgK1xuICAgICAgICAgICAgICAgIFwiIE9SIGRvYy5sYXN0X21lc3NhZ2VfYXQgPT0gQGFmdGVyXzAgQU5EIGRvYy5jb3VudGVycGFydHkgPiBAYWZ0ZXJfMVwiICtcbiAgICAgICAgICAgICAgICBcIilcIjtcbiAgICAgICAgICAgIHZhcnMuYWZ0ZXJfMCA9IE51bWJlci5wYXJzZUludChhZnRlclswXSk7XG4gICAgICAgICAgICB2YXJzLmFmdGVyXzEgPSBhZnRlclsxXTtcbiAgICAgICAgfVxuICAgICAgICB0ZXh0ICs9IFwiIFNPUlQgZG9jLmxhc3RfbWVzc2FnZV9hdCwgZG9jLmNvdW50ZXJwYXJ0eSBMSU1JVCBAZmlyc3QgUkVUVVJOIGRvY1wiO1xuXG4gICAgICAgIGNvbnN0IHJlc3VsdDogYW55ID0gYXdhaXQgY29udGV4dC5kYXRhLnF1ZXJ5KFxuICAgICAgICAgICAgY29udGV4dC5kYXRhLmNvdW50ZXJwYXJ0aWVzLnByb3ZpZGVyLFxuICAgICAgICAgICAgdGV4dCxcbiAgICAgICAgICAgIHZhcnMsXG4gICAgICAgICAgICBbeyBwYXRoOiBcImxhc3RfbWVzc2FnZV9hdCxjb3VudGVycGFydHlcIiwgZGlyZWN0aW9uOiBcIkRFU0NcIiB9XSxcbiAgICAgICAgKTtcbiAgICAgICAgcmVzdWx0LmZvckVhY2goeCA9PiB4LmN1cnNvciA9IGAke3gubGFzdF9tZXNzYWdlX2F0fS8ke3guY291bnRlcnBhcnR5fWApXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSwgUVRyYWNlci5nZXRQYXJlbnRTcGFuKHRyYWNlciwgY29udGV4dCkpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb3VudGVycGFydGllc1Jlc29sdmVycyhfZGF0YTogUUJsb2NrY2hhaW5EYXRhKTogYW55IHtcbiAgICByZXR1cm4ge1xuICAgICAgICBDb3VudGVycGFydHk6IHtcbiAgICAgICAgICAgIGxhc3RfbWVzc2FnZV92YWx1ZShwYXJlbnQsIGFyZ3MpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZUJpZ1VJbnQoMiwgcGFyZW50Lmxhc3RfbWVzc2FnZV92YWx1ZSwgYXJncyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICBRdWVyeToge1xuICAgICAgICAgICAgY291bnRlcnBhcnRpZXMsXG4gICAgICAgIH0sXG4gICAgfTtcbn1cbiJdfQ==