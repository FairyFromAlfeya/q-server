"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createProviders = createProviders;
exports.default = void 0;

var _core = require("@tonclient/core");

var _libNode = require("@tonclient/lib-node");

var _fs = _interopRequireDefault(require("fs"));

var _express = _interopRequireDefault(require("express"));

var _http = _interopRequireDefault(require("http"));

var _path = _interopRequireDefault(require("path"));

var _apolloServerExpress = require("apollo-server-express");

var _subscriptionsTransportWs = require("subscriptions-transport-ws");

var _arangoProvider = require("./data/arango-provider");

var _blockchain = _interopRequireDefault(require("./data/blockchain"));

var _collection = require("./data/collection");

var _config = require("./config");

var _dataProvider = require("./data/data-provider");

var _memjsDatacache = require("./data/memjs-datacache");

var _aggregates = require("./graphql/aggregates");

var _counterparties = require("./graphql/counterparties");

var _explain = require("./graphql/explain");

var _info = require("./graphql/info");

var _postRequests = require("./graphql/post-requests");

var _resolversGenerated = require("./graphql/resolvers-generated");

var _access = require("./graphql/access");

var _mam = require("./graphql/mam");

var _totals = require("./graphql/totals");

var _logs = _interopRequireDefault(require("./logs"));

var _tracer = require("./tracer");

var _opentracing = require("opentracing");

var _auth = require("./auth");

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
 * Copyright 2018-2020 TON DEV SOLUTIONS LTD.
 *
 * Licensed under the SOFTWARE EVALUATION License (the "License"); you may not use
 * this file except in compliance with the License.  You may obtain a copy of the
 * License at:
 *
 * http://www.ton.dev/licenses
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific TON DEV software governing permissions and
 * limitations under the License.
 */
const v8 = require('v8');

class MemStats {
  constructor(stats) {
    this.stats = stats;
  }

  report() {
    v8.getHeapSpaceStatistics().forEach(space => {
      const spaceName = space.space_name.replace('space_', '').replace('_space', '');

      const gauge = (metric, value) => {
        return this.stats.gauge(`heap.space.${spaceName}.${metric}`, value, []);
      };

      gauge('physical_size', space.physical_space_size);
      gauge('available_size', space.space_available_size);
      gauge('size', space.space_size);
      gauge('used_size', space.space_used_size);
    });
  }

  start() {//TODO: this.checkMemReport();
    //TODO: this.checkGc();
  }

  checkMemReport() {
    setTimeout(() => {
      this.report();
      this.checkMemReport();
    }, 5000);
  }

  checkGc() {
    setTimeout(() => {
      global.gc();
      this.checkGc();
    }, 60000);
  }

}

function createProviders(configName, logs, config, networkName, cacheKeyPrefix) {
  const newArangoProvider = (dbName, config) => new _arangoProvider.ArangoProvider(logs.create(`${configName}_${dbName}`), config);

  const mutable = newArangoProvider('mut', config.mut);
  const hot = newArangoProvider('hot', config.hot);
  const cacheLog = logs.create(`${configName}_cache`);
  const cold = new _dataProvider.QDataPrecachedCombiner(cacheLog, (0, _memjsDatacache.isCacheEnabled)(config.cache) ? new _memjsDatacache.MemjsDataCache(cacheLog, config.cache) : _dataProvider.missingDataCache, config.cold.map(x => newArangoProvider('cold', x)), networkName, cacheKeyPrefix);
  const immutable = new _dataProvider.QDataCombiner([hot, cold]);
  const counterparties = newArangoProvider('counterparties', config.counterparties);
  return {
    mutable,
    immutable,
    counterparties
  };
}

function isObject(test) {
  return typeof test === 'object' && test !== null;
}

function overrideObject(original, overrides) {
  Object.entries(overrides).forEach(([name, overrideValue]) => {
    if (name in original && isObject(overrideValue) && isObject(original[name])) {
      overrideObject(original[name], overrideValue);
    } else {
      original[name] = overrideValue;
    }
  });
}

class TONQServer {
  constructor(options) {
    this.config = options.config;
    this.logs = options.logs;
    this.log = this.logs.create('server');
    this.shared = new Map();
    this.tracer = _tracer.QTracer.create(options.config);
    this.stats = _tracer.QStats.create(options.config.statsd.server, options.config.statsd.tags, options.config.statsd.resetInterval);
    this.auth = new _auth.Auth(options.config);
    this.endPoints = [];
    this.app = (0, _express.default)();
    this.server = _http.default.createServer(this.app);
    this.data = options.data || new _blockchain.default({
      logs: this.logs,
      auth: this.auth,
      tracer: this.tracer,
      stats: this.stats,
      providers: createProviders('fast', this.logs, this.config.data, this.config.networkName, this.config.cacheKeyPrefix),
      slowQueriesProviders: createProviders('slow', this.logs, this.config.slowQueriesData, this.config.networkName, this.config.cacheKeyPrefix),
      isTests: false
    });
    this.memStats = new MemStats(this.stats);
    this.memStats.start();
    this.addEndPoint({
      path: '/graphql/mam',
      resolvers: _mam.mam,
      typeDefFileNames: ['type-defs-mam.graphql'],
      supportSubscriptions: false
    });
    const resolvers = (0, _resolversGenerated.createResolvers)(this.data);
    [_info.infoResolvers, _totals.totalsResolvers, (0, _aggregates.aggregatesResolvers)(this.data), (0, _explain.explainResolvers)(this.data), _postRequests.postRequestsResolvers, _access.accessResolvers, (0, _counterparties.counterpartiesResolvers)(this.data)].forEach(x => overrideObject(resolvers, x));
    this.addEndPoint({
      path: '/graphql',
      resolvers,
      typeDefFileNames: ['type-defs-generated.graphql', 'type-defs-custom.graphql', 'type-defs-counterparties.graphql'],
      supportSubscriptions: true
    });
  }

  async start() {
    _core.TonClient.useBinaryLibrary(_libNode.libNode);

    this.client = new _core.TonClient();
    await this.data.start();
    const {
      host,
      port
    } = this.config.server;
    this.server.listen({
      host,
      port
    }, () => {
      this.endPoints.forEach(endPoint => {
        this.log.debug('GRAPHQL', `http://${host}:${port}${endPoint.path}`);
      });
    });
    this.server.setTimeout(2147483647);
    const version = (0, _utils.packageJson)().version;
    const startCounter = new _tracer.StatsCounter(this.stats, _config.STATS.start, [`version:${version}`]);
    await startCounter.increment();
  }

  async stop() {
    await new Promise(resolve => this.server.close(() => resolve()));
    this.logs.stop();
  }

  addEndPoint(endPoint) {
    const typeDefs = endPoint.typeDefFileNames.map(x => _fs.default.readFileSync(_path.default.join('res', x), 'utf-8')).join('\n');
    const config = {
      debug: false,
      typeDefs,
      resolvers: endPoint.resolvers,
      subscriptions: {
        keepAlive: this.config.server.keepAlive,

        onDisconnect(_webSocket, context) {
          if (context.activeRequests) {
            context.activeRequests.forEach(x => x.emitClose());
            context.activeRequests = [];
          }
        },

        onConnect(connectionParams, _webSocket, context) {
          const activeRequests = [];
          context.activeRequests = activeRequests;
          return {
            activeRequests,
            accessKey: connectionParams.accessKey || connectionParams.accesskey
          };
        }

      },
      context: ({
        req,
        connection
      }) => {
        const request = new _collection.RequestController();

        if (req && req.on) {
          req.on('close', () => {
            request.emitClose();
          });
        }

        if (connection && connection.context) {
          if (!connection.context.activeRequests) {
            connection.context.activeRequests = [];
          }

          const activeRequests = connection.context.activeRequests;
          activeRequests.push(request);
          request.events.on(_collection.RequestEvent.FINISH, () => {
            const index = activeRequests.indexOf(request);

            if (index >= 0) {
              activeRequests.splice(index, 1);
            }
          });
        }

        return {
          data: this.data,
          tracer: this.tracer,
          stats: this.stats,
          auth: this.auth,
          client: this.client,
          config: this.config,
          shared: this.shared,
          remoteAddress: req && req.socket && req.socket.remoteAddress || '',
          accessKey: _auth.Auth.extractAccessKey(req, connection),
          parentSpan: _tracer.QTracer.extractParentSpan(this.tracer, connection ? connection : req),
          req,
          connection,
          request
        };
      },
      plugins: [{
        requestDidStart(_requestContext) {
          return {
            willSendResponse(ctx) {
              const context = ctx.context;

              if (context.multipleAccessKeysDetected) {
                throw _utils.QError.multipleAccessKeys();
              }
            }

          };
        }

      }]
    };
    const apollo = new _apolloServerExpress.ApolloServer(config);
    apollo.applyMiddleware({
      app: this.app,
      path: endPoint.path
    });

    if (endPoint.supportSubscriptions) {
      apollo.installSubscriptionHandlers(this.server);
    }

    this.endPoints.push(endPoint);
  }

}

exports.default = TONQServer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,