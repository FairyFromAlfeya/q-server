"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _fs = _interopRequireDefault(require("fs"));

var _express = _interopRequireDefault(require("express"));

var _http = _interopRequireDefault(require("http"));

var _path = _interopRequireDefault(require("path"));

var _apolloServerExpress = require("apollo-server-express");

var _subscriptionsTransportWs = require("subscriptions-transport-ws");

var _tonClientNodeJs = require("ton-client-node-js");

var _blockchain = _interopRequireDefault(require("./data/blockchain"));

var _collection = require("./data/collection");

var _config = require("./config");

var _resolversGenerated = require("./graphql/resolvers-generated");

var _resolversCustom = require("./graphql/resolvers-custom");

var _resolversMam = require("./graphql/resolvers-mam");

var _logs = _interopRequireDefault(require("./logs"));

var _tracer = require("./tracer");

var _opentracing = require("opentracing");

var _auth = require("./auth");

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
 * Copyright 2018-2020 TON DEV SOLUTIONS LTD.
 *
 * Licensed under the SOFTWARE EVALUATION License (the "License"); you may not use
 * this file except in compliance with the License.  You may obtain a copy of the
 * License at:
 *
 * http://www.ton.dev/licenses
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific TON DEV software governing permissions and
 * limitations under the License.
 */
const v8 = require('v8');

class MemStats {
  constructor(stats) {
    this.stats = stats;
  }

  report() {
    v8.getHeapSpaceStatistics().forEach(space => {
      const spaceName = space.space_name.replace('space_', '').replace('_space', '');

      const gauge = (metric, value) => {
        this.stats.gauge(`heap.space.${spaceName}.${metric}`, value);
      };

      gauge('physical_size', space.physical_space_size);
      gauge('available_size', space.space_available_size);
      gauge('size', space.space_size);
      gauge('used_size', space.space_used_size);
    });
  }

  start() {//TODO: this.checkMemReport();
    //TODO: this.checkGc();
  }

  checkMemReport() {
    setTimeout(() => {
      this.report();
      this.checkMemReport();
    }, 5000);
  }

  checkGc() {
    setTimeout(() => {
      global.gc();
      this.checkGc();
    }, 60000);
  }

}

class TONQServer {
  constructor(options) {
    this.config = options.config;
    this.logs = options.logs;
    this.log = this.logs.create('server');
    this.shared = new Map();
    this.tracer = _tracer.QTracer.create(options.config);
    this.stats = _tracer.QStats.create(options.config.statsd.server, options.config.statsd.tags);
    this.auth = new _auth.Auth(options.config);
    this.endPoints = [];
    this.app = (0, _express.default)();
    this.server = _http.default.createServer(this.app);
    this.data = new _blockchain.default(this.config, this.logs, this.auth, this.tracer, this.stats);
    this.memStats = new MemStats(this.stats);
    this.memStats.start();
    this.addEndPoint({
      path: '/graphql/mam',
      resolvers: _resolversMam.resolversMam,
      typeDefFileNames: ['type-defs-mam.graphql'],
      supportSubscriptions: false
    });
    this.addEndPoint({
      path: '/graphql',
      resolvers: (0, _resolversCustom.attachCustomResolvers)(this.data, (0, _resolversGenerated.createResolvers)(this.data)),
      typeDefFileNames: ['type-defs-generated.graphql', 'type-defs-custom.graphql'],
      supportSubscriptions: true
    });
  }

  async start() {
    this.client = await _tonClientNodeJs.TONClient.create({
      servers: ['']
    });
    await this.data.start();
    const {
      host,
      port
    } = this.config.server;
    this.server.listen({
      host,
      port
    }, () => {
      this.endPoints.forEach(endPoint => {
        this.log.debug('GRAPHQL', `http://${host}:${port}${endPoint.path}`);
      });
    });
    this.server.setTimeout(2147483647);
    const version = (0, _utils.packageJson)().version;
    const startCounter = new _tracer.StatsCounter(this.stats, _config.STATS.start, [`version:${version}`]);
    startCounter.increment();
  }

  async stop() {
    await new Promise(resolve => this.server.close(() => resolve()));
    this.logs.stop();
  }

  addEndPoint(endPoint) {
    const typeDefs = endPoint.typeDefFileNames.map(x => _fs.default.readFileSync(_path.default.join('res', x), 'utf-8')).join('\n');
    const config = {
      debug: false,
      typeDefs,
      resolvers: endPoint.resolvers,
      subscriptions: {
        keepAlive: this.config.server.keepAlive,

        onDisconnect(_webSocket, context) {
          if (context.activeRequests) {
            context.activeRequests.forEach(x => x.emitClose());
            context.activeRequests = [];
          }
        },

        onConnect(connectionParams, _webSocket, context) {
          const activeRequests = [];
          context.activeRequests = activeRequests;
          return {
            activeRequests,
            accessKey: connectionParams.accessKey || connectionParams.accesskey
          };
        }

      },
      context: ({
        req,
        connection
      }) => {
        const request = new _collection.RequestController();

        if (req && req.on) {
          req.on('close', () => {
            request.emitClose();
          });
        }

        if (connection && connection.context) {
          if (!connection.context.activeRequests) {
            connection.context.activeRequests = [];
          }

          const activeRequests = connection.context.activeRequests;
          activeRequests.push(request);
          request.events.on(_collection.RequestEvent.FINISH, () => {
            const index = activeRequests.indexOf(request);

            if (index >= 0) {
              activeRequests.splice(index, 1);
            }
          });
        }

        return {
          data: this.data,
          tracer: this.tracer,
          stats: this.stats,
          auth: this.auth,
          client: this.client,
          config: this.config,
          shared: this.shared,
          remoteAddress: req && req.socket && req.socket.remoteAddress || '',
          accessKey: _auth.Auth.extractAccessKey(req, connection),
          parentSpan: _tracer.QTracer.extractParentSpan(this.tracer, connection ? connection : req),
          req,
          connection,
          request
        };
      },
      plugins: [{
        requestDidStart(_requestContext) {
          return {
            willSendResponse(ctx) {
              const context = ctx.context;

              if (context.multipleAccessKeysDetected) {
                throw _utils.QError.multipleAccessKeys();
              }
            }

          };
        }

      }]
    };
    const apollo = new _apolloServerExpress.ApolloServer(config);
    apollo.applyMiddleware({
      app: this.app,
      path: endPoint.path
    });

    if (endPoint.supportSubscriptions) {
      apollo.installSubscriptionHandlers(this.server);
    }

    this.endPoints.push(endPoint);
  }

}

exports.default = TONQServer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zZXJ2ZXIvc2VydmVyLmpzIl0sIm5hbWVzIjpbInY4IiwicmVxdWlyZSIsIk1lbVN0YXRzIiwiY29uc3RydWN0b3IiLCJzdGF0cyIsInJlcG9ydCIsImdldEhlYXBTcGFjZVN0YXRpc3RpY3MiLCJmb3JFYWNoIiwic3BhY2UiLCJzcGFjZU5hbWUiLCJzcGFjZV9uYW1lIiwicmVwbGFjZSIsImdhdWdlIiwibWV0cmljIiwidmFsdWUiLCJwaHlzaWNhbF9zcGFjZV9zaXplIiwic3BhY2VfYXZhaWxhYmxlX3NpemUiLCJzcGFjZV9zaXplIiwic3BhY2VfdXNlZF9zaXplIiwic3RhcnQiLCJjaGVja01lbVJlcG9ydCIsInNldFRpbWVvdXQiLCJjaGVja0djIiwiZ2xvYmFsIiwiZ2MiLCJUT05RU2VydmVyIiwib3B0aW9ucyIsImNvbmZpZyIsImxvZ3MiLCJsb2ciLCJjcmVhdGUiLCJzaGFyZWQiLCJNYXAiLCJ0cmFjZXIiLCJRVHJhY2VyIiwiUVN0YXRzIiwic3RhdHNkIiwic2VydmVyIiwidGFncyIsImF1dGgiLCJBdXRoIiwiZW5kUG9pbnRzIiwiYXBwIiwiaHR0cCIsImNyZWF0ZVNlcnZlciIsImRhdGEiLCJRQmxvY2tjaGFpbkRhdGEiLCJtZW1TdGF0cyIsImFkZEVuZFBvaW50IiwicGF0aCIsInJlc29sdmVycyIsInJlc29sdmVyc01hbSIsInR5cGVEZWZGaWxlTmFtZXMiLCJzdXBwb3J0U3Vic2NyaXB0aW9ucyIsImNsaWVudCIsIlRPTkNsaWVudE5vZGVKcyIsInNlcnZlcnMiLCJob3N0IiwicG9ydCIsImxpc3RlbiIsImVuZFBvaW50IiwiZGVidWciLCJ2ZXJzaW9uIiwic3RhcnRDb3VudGVyIiwiU3RhdHNDb3VudGVyIiwiU1RBVFMiLCJpbmNyZW1lbnQiLCJzdG9wIiwiUHJvbWlzZSIsInJlc29sdmUiLCJjbG9zZSIsInR5cGVEZWZzIiwibWFwIiwieCIsImZzIiwicmVhZEZpbGVTeW5jIiwiam9pbiIsInN1YnNjcmlwdGlvbnMiLCJrZWVwQWxpdmUiLCJvbkRpc2Nvbm5lY3QiLCJfd2ViU29ja2V0IiwiY29udGV4dCIsImFjdGl2ZVJlcXVlc3RzIiwiZW1pdENsb3NlIiwib25Db25uZWN0IiwiY29ubmVjdGlvblBhcmFtcyIsImFjY2Vzc0tleSIsImFjY2Vzc2tleSIsInJlcSIsImNvbm5lY3Rpb24iLCJyZXF1ZXN0IiwiUmVxdWVzdENvbnRyb2xsZXIiLCJvbiIsInB1c2giLCJldmVudHMiLCJSZXF1ZXN0RXZlbnQiLCJGSU5JU0giLCJpbmRleCIsImluZGV4T2YiLCJzcGxpY2UiLCJyZW1vdGVBZGRyZXNzIiwic29ja2V0IiwiZXh0cmFjdEFjY2Vzc0tleSIsInBhcmVudFNwYW4iLCJleHRyYWN0UGFyZW50U3BhbiIsInBsdWdpbnMiLCJyZXF1ZXN0RGlkU3RhcnQiLCJfcmVxdWVzdENvbnRleHQiLCJ3aWxsU2VuZFJlc3BvbnNlIiwiY3R4IiwibXVsdGlwbGVBY2Nlc3NLZXlzRGV0ZWN0ZWQiLCJRRXJyb3IiLCJtdWx0aXBsZUFjY2Vzc0tleXMiLCJhcG9sbG8iLCJBcG9sbG9TZXJ2ZXIiLCJhcHBseU1pZGRsZXdhcmUiLCJpbnN0YWxsU3Vic2NyaXB0aW9uSGFuZGxlcnMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFpQkE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBRUE7O0FBQ0E7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBRUE7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBR0E7O0FBR0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7QUExQ0E7Ozs7Ozs7Ozs7Ozs7OztBQXdEQSxNQUFNQSxFQUFFLEdBQUdDLE9BQU8sQ0FBQyxJQUFELENBQWxCOztBQUVBLE1BQU1DLFFBQU4sQ0FBZTtBQUdYQyxFQUFBQSxXQUFXLENBQUNDLEtBQUQsRUFBZ0I7QUFDdkIsU0FBS0EsS0FBTCxHQUFhQSxLQUFiO0FBQ0g7O0FBRURDLEVBQUFBLE1BQU0sR0FBRztBQUNMTCxJQUFBQSxFQUFFLENBQUNNLHNCQUFILEdBQTRCQyxPQUE1QixDQUFxQ0MsS0FBRCxJQUFX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S0EsR0FEUztBQUVuQk8sTUFBQUEsSUFBSSxFQUFFVyxRQUFRLENBQUNYO0FBRkksS0FBdkI7O0FBSUEsUUFBSVcsUUFBUSxDQUFDUCxvQkFBYixFQUFtQztBQUMvQjRELE1BQUFBLE1BQU0sQ0FBQ0csMkJBQVAsQ0FBbUMsS0FBSy9FLE1BQXhDO0FBQ0g7O0FBQ0QsU0FBS0ksU0FBTCxDQUFlb0QsSUFBZixDQUFvQmpDLFFBQXBCO0FBQ0g7O0FBM0oyQiIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgMjAxOC0yMDIwIFRPTiBERVYgU09MVVRJT05TIExURC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgU09GVFdBUkUgRVZBTFVBVElPTiBMaWNlbnNlICh0aGUgXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2VcbiAqIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZVxuICogTGljZW5zZSBhdDpcbiAqXG4gKiBodHRwOi8vd3d3LnRvbi5kZXYvbGljZW5zZXNcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIFRPTiBERVYgc29mdHdhcmUgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuLy8gQGZsb3dcbmltcG9ydCBmcyBmcm9tICdmcyc7XG5pbXBvcnQgZXhwcmVzcyBmcm9tICdleHByZXNzJztcbmltcG9ydCBodHRwIGZyb20gJ2h0dHAnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5cbmltcG9ydCB7IEFwb2xsb1NlcnZlciwgQXBvbGxvU2VydmVyRXhwcmVzc0NvbmZpZyB9IGZyb20gJ2Fwb2xsby1zZXJ2ZXItZXhwcmVzcyc7XG5pbXBvcnQgeyBDb25uZWN0aW9uQ29udGV4dCB9IGZyb20gJ3N1YnNjcmlwdGlvbnMtdHJhbnNwb3J0LXdzJztcbmltcG9ydCB0eXBlIHsgVE9OQ2xpZW50IH0gZnJvbSAndG9uLWNsaWVudC1qcy90eXBlcyc7XG5pbXBvcnQgeyBUT05DbGllbnQgYXMgVE9OQ2xpZW50Tm9kZUpzIH0gZnJvbSAndG9uLWNsaWVudC1ub2RlLWpzJztcbmltcG9ydCBRQmxvY2tjaGFpbkRhdGEgZnJvbSAnLi9kYXRhL2Jsb2NrY2hhaW4nO1xuaW1wb3J0IHsgUmVxdWVzdENvbnRyb2xsZXIsIFJlcXVlc3RFdmVudCB9IGZyb20gJy4vZGF0YS9jb2xsZWN0aW9uJztcbmltcG9ydCB0eXBlIHsgR3JhcGhRTFJlcXVlc3RDb250ZXh0IH0gZnJvbSAnLi9kYXRhL2NvbGxlY3Rpb24nO1xuaW1wb3J0IHsgU1RBVFMgfSBmcm9tICcuL2NvbmZpZyc7XG5cbmltcG9ydCB7IGNyZWF0ZVJlc29sdmVycyB9IGZyb20gJy4vZ3JhcGhxbC9yZXNvbHZlcnMtZ2VuZXJhdGVkJztcbmltcG9ydCB7IGF0dGFjaEN1c3RvbVJlc29sdmVycyB9IGZyb20gJy4vZ3JhcGhxbC9yZXNvbHZlcnMtY3VzdG9tJztcbmltcG9ydCB7IHJlc29sdmVyc01hbSB9IGZyb20gJy4vZ3JhcGhxbC9yZXNvbHZlcnMtbWFtJztcblxuaW1wb3J0IHR5cGUgeyBRQ29uZmlnIH0gZnJvbSAnLi9jb25maWcnO1xuaW1wb3J0IFFMb2dzIGZyb20gJy4vbG9ncyc7XG5pbXBvcnQgdHlwZSB7IFFMb2cgfSBmcm9tICcuL2xvZ3MnO1xuaW1wb3J0IHR5cGUgeyBJU3RhdHMgfSBmcm9tICcuL3RyYWNlcic7XG5pbXBvcnQgeyBRU3RhdHMsIFFUcmFjZXIsIFN0YXRzQ291bnRlciB9IGZyb20gJy4vdHJhY2VyJztcbmltcG9ydCB7IFRyYWNlciB9IGZyb20gJ29wZW50cmFjaW5nJztcbmltcG9ydCB7IEF1dGggfSBmcm9tICcuL2F1dGgnO1xuaW1wb3J0IHsgcGFja2FnZUpzb24sIFFFcnJvciB9IGZyb20gJy4vdXRpbHMnO1xuXG50eXBlIFFPcHRpb25zID0ge1xuICAgIGNvbmZpZzogUUNvbmZpZyxcbiAgICBsb2dzOiBRTG9ncyxcbn1cblxudHlwZSBFbmRQb2ludCA9IHtcbiAgICBwYXRoOiBzdHJpbmcsXG4gICAgcmVzb2x2ZXJzOiBhbnksXG4gICAgdHlwZURlZkZpbGVOYW1lczogc3RyaW5nW10sXG4gICAgc3VwcG9ydFN1YnNjcmlwdGlvbnM6IGJvb2xlYW4sXG59XG5cbmNvbnN0IHY4ID0gcmVxdWlyZSgndjgnKTtcblxuY2xhc3MgTWVtU3RhdHMge1xuICAgIHN0YXRzOiBJU3RhdHM7XG5cbiAgICBjb25zdHJ1Y3RvcihzdGF0czogSVN0YXRzKSB7XG4gICAgICAgIHRoaXMuc3RhdHMgPSBzdGF0cztcbiAgICB9XG5cbiAgICByZXBvcnQoKSB7XG4gICAgICAgIHY4LmdldEhlYXBTcGFjZVN0YXRpc3RpY3MoKS5mb3JFYWNoKChzcGFjZSkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc3BhY2VOYW1lID0gc3BhY2Uuc3BhY2VfbmFtZVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKCdzcGFjZV8nLCAnJylcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgnX3NwYWNlJywgJycpO1xuICAgICAgICAgICAgY29uc3QgZ2F1Z2UgPSAobWV0cmljOiBzdHJpbmcsIHZhbHVlOiBudW1iZXIpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRzLmdhdWdlKGBoZWFwLnNwYWNlLiR7c3BhY2VOYW1lfS4ke21ldHJpY31gLCB2YWx1ZSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgZ2F1Z2UoJ3BoeXNpY2FsX3NpemUnLCBzcGFjZS5waHlzaWNhbF9zcGFjZV9zaXplKTtcbiAgICAgICAgICAgIGdhdWdlKCdhdmFpbGFibGVfc2l6ZScsIHNwYWNlLnNwYWNlX2F2YWlsYWJsZV9zaXplKTtcbiAgICAgICAgICAgIGdhdWdlKCdzaXplJywgc3BhY2Uuc3BhY2Vfc2l6ZSk7XG4gICAgICAgICAgICBnYXVnZSgndXNlZF9zaXplJywgc3BhY2Uuc3BhY2VfdXNlZF9zaXplKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgc3RhcnQoKSB7XG4gICAgICAgIC8vVE9ETzogdGhpcy5jaGVja01lbVJlcG9ydCgpO1xuICAgICAgICAvL1RPRE86IHRoaXMuY2hlY2tHYygpO1xuICAgIH1cblxuICAgIGNoZWNrTWVtUmVwb3J0KCkge1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMucmVwb3J0KCk7XG4gICAgICAgICAgICB0aGlzLmNoZWNrTWVtUmVwb3J0KCk7XG4gICAgICAgIH0sIDUwMDApO1xuICAgIH1cblxuICAgIGNoZWNrR2MoKSB7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgZ2xvYmFsLmdjKCk7XG4gICAgICAgICAgICB0aGlzLmNoZWNrR2MoKTtcbiAgICAgICAgfSwgNjAwMDApO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVE9OUVNlcnZlciB7XG4gICAgY29uZmlnOiBRQ29uZmlnO1xuICAgIGxvZ3M6IFFMb2dzO1xuICAgIGxvZzogUUxvZztcbiAgICBhcHA6IGV4cHJlc3MuQXBwbGljYXRpb247XG4gICAgc2VydmVyOiBhbnk7XG4gICAgZW5kUG9pbnRzOiBFbmRQb2ludFtdO1xuICAgIGRhdGE6IFFCbG9ja2NoYWluRGF0YTtcbiAgICB0cmFjZXI6IFRyYWNlcjtcbiAgICBzdGF0czogSVN0YXRzO1xuICAgIGNsaWVudDogVE9OQ2xpZW50O1xuICAgIGF1dGg6IEF1dGg7XG4gICAgbWVtU3RhdHM6IE1lbVN0YXRzO1xuICAgIHNoYXJlZDogTWFwPHN0cmluZywgYW55PjtcblxuXG4gICAgY29uc3RydWN0b3Iob3B0aW9uczogUU9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5jb25maWcgPSBvcHRpb25zLmNvbmZpZztcbiAgICAgICAgdGhpcy5sb2dzID0gb3B0aW9ucy5sb2dzO1xuICAgICAgICB0aGlzLmxvZyA9IHRoaXMubG9ncy5jcmVhdGUoJ3NlcnZlcicpO1xuICAgICAgICB0aGlzLnNoYXJlZCA9IG5ldyBNYXAoKTtcbiAgICAgICAgdGhpcy50cmFjZXIgPSBRVHJhY2VyLmNyZWF0ZShvcHRpb25zLmNvbmZpZyk7XG4gICAgICAgIHRoaXMuc3RhdHMgPSBRU3RhdHMuY3JlYXRlKG9wdGlvbnMuY29uZmlnLnN0YXRzZC5zZXJ2ZXIsIG9wdGlvbnMuY29uZmlnLnN0YXRzZC50YWdzKTtcbiAgICAgICAgdGhpcy5hdXRoID0gbmV3IEF1dGgob3B0aW9ucy5jb25maWcpO1xuICAgICAgICB0aGlzLmVuZFBvaW50cyA9IFtdO1xuICAgICAgICB0aGlzLmFwcCA9IGV4cHJlc3MoKTtcbiAgICAgICAgdGhpcy5zZXJ2ZXIgPSBodHRwLmNyZWF0ZVNlcnZlcih0aGlzLmFwcCk7XG4gICAgICAgIHRoaXMuZGF0YSA9IG5ldyBRQmxvY2tjaGFpbkRhdGEodGhpcy5jb25maWcsIHRoaXMubG9ncywgdGhpcy5hdXRoLCB0aGlzLnRyYWNlciwgdGhpcy5zdGF0cyk7XG4gICAgICAgIHRoaXMubWVtU3RhdHMgPSBuZXcgTWVtU3RhdHModGhpcy5zdGF0cyk7XG4gICAgICAgIHRoaXMubWVtU3RhdHMuc3RhcnQoKTtcbiAgICAgICAgdGhpcy5hZGRFbmRQb2ludCh7XG4gICAgICAgICAgICBwYXRoOiAnL2dyYXBocWwvbWFtJyxcbiAgICAgICAgICAgIHJlc29sdmVyczogcmVzb2x2ZXJzTWFtLFxuICAgICAgICAgICAgdHlwZURlZkZpbGVOYW1lczogWyd0eXBlLWRlZnMtbWFtLmdyYXBocWwnXSxcbiAgICAgICAgICAgIHN1cHBvcnRTdWJzY3JpcHRpb25zOiBmYWxzZSxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuYWRkRW5kUG9pbnQoe1xuICAgICAgICAgICAgcGF0aDogJy9ncmFwaHFsJyxcbiAgICAgICAgICAgIHJlc29sdmVyczogYXR0YWNoQ3VzdG9tUmVzb2x2ZXJzKHRoaXMuZGF0YSwgY3JlYXRlUmVzb2x2ZXJzKHRoaXMuZGF0YSkpLFxuICAgICAgICAgICAgdHlwZURlZkZpbGVOYW1lczogWyd0eXBlLWRlZnMtZ2VuZXJhdGVkLmdyYXBocWwnLCAndHlwZS1kZWZzLWN1c3RvbS5ncmFwaHFsJ10sXG4gICAgICAgICAgICBzdXBwb3J0U3Vic2NyaXB0aW9uczogdHJ1ZSxcbiAgICAgICAgfSk7XG4gICAgfVxuXG5cbiAgICBhc3luYyBzdGFydCgpIHtcbiAgICAgICAgdGhpcy5jbGllbnQgPSBhd2FpdCBUT05DbGllbnROb2RlSnMuY3JlYXRlKHsgc2VydmVyczogWycnXSB9KTtcbiAgICAgICAgYXdhaXQgdGhpcy5kYXRhLnN0YXJ0KCk7XG4gICAgICAgIGNvbnN0IHsgaG9zdCwgcG9ydCB9ID0gdGhpcy5jb25maWcuc2VydmVyO1xuICAgICAgICB0aGlzLnNlcnZlci5saXN0ZW4oe1xuICAgICAgICAgICAgaG9zdCxcbiAgICAgICAgICAgIHBvcnQsXG4gICAgICAgIH0sICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZW5kUG9pbnRzLmZvckVhY2goKGVuZFBvaW50OiBFbmRQb2ludCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMubG9nLmRlYnVnKCdHUkFQSFFMJywgYGh0dHA6Ly8ke2hvc3R9OiR7cG9ydH0ke2VuZFBvaW50LnBhdGh9YCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuc2VydmVyLnNldFRpbWVvdXQoMjE0NzQ4MzY0Nyk7XG5cbiAgICAgICAgY29uc3QgdmVyc2lvbiA9IHBhY2thZ2VKc29uKCkudmVyc2lvbjtcbiAgICAgICAgY29uc3Qgc3RhcnRDb3VudGVyID0gbmV3IFN0YXRzQ291bnRlcih0aGlzLnN0YXRzLCBTVEFUUy5zdGFydCwgW2B2ZXJzaW9uOiR7dmVyc2lvbn1gXSk7XG4gICAgICAgIHN0YXJ0Q291bnRlci5pbmNyZW1lbnQoKVxuICAgIH1cblxuXG4gICAgYXN5bmMgc3RvcCgpIHtcbiAgICAgICAgYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHRoaXMuc2VydmVyLmNsb3NlKCgpID0+IHJlc29sdmUoKSkpO1xuICAgICAgICB0aGlzLmxvZ3Muc3RvcCgpO1xuICAgIH1cblxuICAgIGFkZEVuZFBvaW50KGVuZFBvaW50OiBFbmRQb2ludCkge1xuICAgICAgICBjb25zdCB0eXBlRGVmcyA9IGVuZFBvaW50LnR5cGVEZWZGaWxlTmFtZXNcbiAgICAgICAgICAgIC5tYXAoeCA9PiBmcy5yZWFkRmlsZVN5bmMocGF0aC5qb2luKCdyZXMnLCB4KSwgJ3V0Zi04JykpXG4gICAgICAgICAgICAuam9pbignXFxuJyk7XG4gICAgICAgIGNvbnN0IGNvbmZpZzogQXBvbGxvU2VydmVyRXhwcmVzc0NvbmZpZyA9IHtcbiAgICAgICAgICAgIGRlYnVnOiBmYWxzZSxcbiAgICAgICAgICAgIHR5cGVEZWZzLFxuICAgICAgICAgICAgcmVzb2x2ZXJzOiBlbmRQb2ludC5yZXNvbHZlcnMsXG4gICAgICAgICAgICBzdWJzY3JpcHRpb25zOiB7XG4gICAgICAgICAgICAgICAga2VlcEFsaXZlOiB0aGlzLmNvbmZpZy5zZXJ2ZXIua2VlcEFsaXZlLFxuICAgICAgICAgICAgICAgIG9uRGlzY29ubmVjdChfd2ViU29ja2V0OiBXZWJTb2NrZXQsIGNvbnRleHQ6IENvbm5lY3Rpb25Db250ZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb250ZXh0LmFjdGl2ZVJlcXVlc3RzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmFjdGl2ZVJlcXVlc3RzLmZvckVhY2goeCA9PiB4LmVtaXRDbG9zZSgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQuYWN0aXZlUmVxdWVzdHMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgb25Db25uZWN0KGNvbm5lY3Rpb25QYXJhbXM6IE9iamVjdCwgX3dlYlNvY2tldDogV2ViU29ja2V0LCBjb250ZXh0OiBDb25uZWN0aW9uQ29udGV4dCk6IGFueSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFjdGl2ZVJlcXVlc3RzID0gW107XG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQuYWN0aXZlUmVxdWVzdHMgPSBhY3RpdmVSZXF1ZXN0cztcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2ZVJlcXVlc3RzLFxuICAgICAgICAgICAgICAgICAgICAgICAgYWNjZXNzS2V5OiBjb25uZWN0aW9uUGFyYW1zLmFjY2Vzc0tleSB8fCBjb25uZWN0aW9uUGFyYW1zLmFjY2Vzc2tleSxcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29udGV4dDogKHsgcmVxLCBjb25uZWN0aW9uIH0pID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXF1ZXN0ID0gbmV3IFJlcXVlc3RDb250cm9sbGVyKCk7XG4gICAgICAgICAgICAgICAgaWYgKHJlcSAmJiByZXEub24pIHtcbiAgICAgICAgICAgICAgICAgICAgcmVxLm9uKCdjbG9zZScsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3QuZW1pdENsb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoY29ubmVjdGlvbiAmJiBjb25uZWN0aW9uLmNvbnRleHQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjb25uZWN0aW9uLmNvbnRleHQuYWN0aXZlUmVxdWVzdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24uY29udGV4dC5hY3RpdmVSZXF1ZXN0cyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFjdGl2ZVJlcXVlc3RzID0gY29ubmVjdGlvbi5jb250ZXh0LmFjdGl2ZVJlcXVlc3RzO1xuICAgICAgICAgICAgICAgICAgICBhY3RpdmVSZXF1ZXN0cy5wdXNoKHJlcXVlc3QpO1xuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0LmV2ZW50cy5vbihSZXF1ZXN0RXZlbnQuRklOSVNILCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpbmRleCA9IGFjdGl2ZVJlcXVlc3RzLmluZGV4T2YocmVxdWVzdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2ZVJlcXVlc3RzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBkYXRhOiB0aGlzLmRhdGEsXG4gICAgICAgICAgICAgICAgICAgIHRyYWNlcjogdGhpcy50cmFjZXIsXG4gICAgICAgICAgICAgICAgICAgIHN0YXRzOiB0aGlzLnN0YXRzLFxuICAgICAgICAgICAgICAgICAgICBhdXRoOiB0aGlzLmF1dGgsXG4gICAgICAgICAgICAgICAgICAgIGNsaWVudDogdGhpcy5jbGllbnQsXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZzogdGhpcy5jb25maWcsXG4gICAgICAgICAgICAgICAgICAgIHNoYXJlZDogdGhpcy5zaGFyZWQsXG4gICAgICAgICAgICAgICAgICAgIHJlbW90ZUFkZHJlc3M6IChyZXEgJiYgcmVxLnNvY2tldCAmJiByZXEuc29ja2V0LnJlbW90ZUFkZHJlc3MpIHx8ICcnLFxuICAgICAgICAgICAgICAgICAgICBhY2Nlc3NLZXk6IEF1dGguZXh0cmFjdEFjY2Vzc0tleShyZXEsIGNvbm5lY3Rpb24pLFxuICAgICAgICAgICAgICAgICAgICBwYXJlbnRTcGFuOiBRVHJhY2VyLmV4dHJhY3RQYXJlbnRTcGFuKHRoaXMudHJhY2VyLCBjb25uZWN0aW9uID8gY29ubmVjdGlvbiA6IHJlcSksXG4gICAgICAgICAgICAgICAgICAgIHJlcSxcbiAgICAgICAgICAgICAgICAgICAgY29ubmVjdGlvbixcbiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdCxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBsdWdpbnM6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3REaWRTdGFydChfcmVxdWVzdENvbnRleHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lsbFNlbmRSZXNwb25zZShjdHgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY29udGV4dDogR3JhcGhRTFJlcXVlc3RDb250ZXh0ID0gY3R4LmNvbnRleHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb250ZXh0Lm11bHRpcGxlQWNjZXNzS2V5c0RldGVjdGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBRRXJyb3IubXVsdGlwbGVBY2Nlc3NLZXlzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBhcG9sbG8gPSBuZXcgQXBvbGxvU2VydmVyKGNvbmZpZyk7XG4gICAgICAgIGFwb2xsby5hcHBseU1pZGRsZXdhcmUoe1xuICAgICAgICAgICAgYXBwOiB0aGlzLmFwcCxcbiAgICAgICAgICAgIHBhdGg6IGVuZFBvaW50LnBhdGgsXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoZW5kUG9pbnQuc3VwcG9ydFN1YnNjcmlwdGlvbnMpIHtcbiAgICAgICAgICAgIGFwb2xsby5pbnN0YWxsU3Vic2NyaXB0aW9uSGFuZGxlcnModGhpcy5zZXJ2ZXIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZW5kUG9pbnRzLnB1c2goZW5kUG9pbnQpO1xuICAgIH1cblxuXG59XG5cbiJdfQ==