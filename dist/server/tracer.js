"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.QTracer = exports.StatsTiming = exports.StatsGauge = exports.StatsCounter = exports.QStats = void 0;

var _config = require("./config");

var _noop = require("opentracing/lib/noop");

var _nodeStatsd = _interopRequireDefault(require("node-statsd"));

var _opentracing = require("opentracing");

var _jaegerClient = require("jaeger-client");

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function dummy(stat, value, sampleRate, tags) {}

const dummyStats = {
  increment: dummy,
  decrement: dummy,
  histogram: dummy,
  gauge: dummy,
  set: dummy,
  timing: dummy
};

class QStats {
  static create(server) {
    if (!server) {
      return dummyStats;
    }

    const hostPort = server.split(':');
    return new _nodeStatsd.default(hostPort[0], hostPort[1], _config.STATS.prefix);
  }

}

exports.QStats = QStats;

class StatsCounter {
  constructor(stats, name, tags) {
    this.stats = stats;
    this.name = name;
    this.tags = tags;
  }

  increment() {
    this.stats.increment(this.name, 1, this.tags);
  }

}

exports.StatsCounter = StatsCounter;

class StatsGauge {
  constructor(stats, name, tags) {
    this.stats = stats;
    this.name = name;
    this.tags = tags;
    this.value = 0;
  }

  set(value) {
    this.value = value;
    this.stats.gauge(this.name, this.value, this.tags);
  }

  increment(delta = 1) {
    this.set(this.value + delta);
  }

  decrement(delta = 1) {
    this.set(this.value - delta);
  }

}

exports.StatsGauge = StatsGauge;

class StatsTiming {
  constructor(stats, name, tags) {
    this.stats = stats;
    this.name = name;
    this.tags = tags;
  }

  report(value) {
    this.stats.timing(this.name, value, this.tags);
  }

  start() {
    const start = Date.now();
    return () => {
      this.report(Date.now() - start);
    };
  }

}

exports.StatsTiming = StatsTiming;

function parseUrl(url) {
  const protocolSeparatorPos = url.indexOf('://');
  const protocolEnd = protocolSeparatorPos >= 0 ? protocolSeparatorPos + 3 : 0;
  const questionPos = url.indexOf('?', protocolEnd);
  const queryStart = questionPos >= 0 ? questionPos + 1 : url.length;
  const pathEnd = questionPos >= 0 ? questionPos : url.length;
  const pathSeparatorPos = url.indexOf('/', protocolEnd); // eslint-disable-next-line no-nested-ternary

  const pathStart = pathSeparatorPos >= 0 ? pathSeparatorPos < pathEnd ? pathSeparatorPos : pathEnd : questionPos >= 0 ? questionPos : url.length;
  const hostPort = url.substring(protocolEnd, pathStart).split(':');
  return {
    protocol: url.substring(0, protocolEnd),
    host: hostPort[0],
    port: hostPort[1] || '',
    path: url.substring(pathStart, pathEnd),
    query: url.substring(queryStart)
  };
}

class QTracer {
  static getJaegerConfig(config) {
    const endpoint = config.endpoint;

    if (!endpoint) {
      return null;
    }

    const parts = parseUrl(endpoint);
    return parts.protocol === '' ? {
      agentHost: parts.host,
      agentPort: parts.port,
      serviceName: config.service,
      sampler: {
        type: 'const',
        param: 1
      },
      reporter: {
        logSpans: true
      }
    } : {
      serviceName: config.service,
      sampler: {
        type: 'const',
        param: 1
      },
      reporter: {
        collectorEndpoint: endpoint,
        logSpans: true
      }
    };
  }

  static create(config) {
    QTracer.config = config;
    const jaegerConfig = QTracer.getJaegerConfig(config.jaeger);

    if (!jaegerConfig) {
      return _noop.tracer;
    }

    return (0, _jaegerClient.initTracerFromEnv)(jaegerConfig, {
      logger: {
        info(msg) {
          console.log('INFO ', msg);
        },

        error(msg) {
          console.log('ERROR', msg);
        }

      }
    });
  }

  static extractParentSpan(tracer, req) {
    let ctx_src, ctx_frm;

    if (req.headers) {
      ctx_src = req.headers;
      ctx_frm = _opentracing.FORMAT_TEXT_MAP;
    } else {
      ctx_src = req.context;
      ctx_frm = _opentracing.FORMAT_BINARY;
    }

    return tracer.extract(ctx_frm, ctx_src);
  }

  static getParentSpan(tracer, context) {
    return context.tracerParentSpan;
  }

  static failed(tracer, span, error) {
    span.log({
      event: 'failed',
      payload: (0, _utils.toLog)(error)
    });
  }

  static async trace(tracer, name, f, parentSpan) {
    const span = tracer.startSpan(name, {
      childOf: parentSpan
    });

    try {
      span.setTag(_opentracing.Tags.SPAN_KIND, 'server');
      Object.entries(QTracer.config.jaeger.tags).forEach(([name, value]) => {
        if (name) {
          span.setTag(name, value);
        }
      });
      const result = await f(span);

      if (result !== undefined) {
        span.setTag('result', (0, _utils.toLog)(result));
      }

      span.finish();
      return result;
    } catch (error) {
      const cleaned = (0, _utils.cleanError)(error);
      QTracer.failed(tracer, span, cleaned);
      span.finish();
      throw cleaned;
    }
  }

}

exports.QTracer = QTracer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NlcnZlci90cmFjZXIuanMiXSwibmFtZXMiOlsiZHVtbXkiLCJzdGF0IiwidmFsdWUiLCJzYW1wbGVSYXRlIiwidGFncyIsImR1bW15U3RhdHMiLCJpbmNyZW1lbnQiLCJkZWNyZW1lbnQiLCJoaXN0b2dyYW0iLCJnYXVnZSIsInNldCIsInRpbWluZyIsIlFTdGF0cyIsImNyZWF0ZSIsInNlcnZlciIsImhvc3RQb3J0Iiwic3BsaXQiLCJTdGF0c0QiLCJTVEFUUyIsInByZWZpeCIsIlN0YXRzQ291bnRlciIsImNvbnN0cnVjdG9yIiwic3RhdHMiLCJuYW1lIiwiU3RhdHNHYXVnZSIsImRlbHRhIiwiU3RhdHNUaW1pbmciLCJyZXBvcnQiLCJzdGFydCIsIkRhdGUiLCJub3ciLCJwYXJzZVVybCIsInVybCIsInByb3RvY29sU2VwYXJhdG9yUG9zIiwiaW5kZXhPZiIsInByb3RvY29sRW5kIiwicXVlc3Rpb25Qb3MiLCJxdWVyeVN0YXJ0IiwibGVuZ3RoIiwicGF0aEVuZCIsInBhdGhTZXBhcmF0b3JQb3MiLCJwYXRoU3RhcnQiLCJzdWJzdHJpbmciLCJwcm90b2NvbCIsImhvc3QiLCJwb3J0IiwicGF0aCIsInF1ZXJ5IiwiUVRyYWNlciIsImdldEphZWdlckNvbmZpZyIsImNvbmZpZyIsImVuZHBvaW50IiwicGFydHMiLCJhZ2VudEhvc3QiLCJhZ2VudFBvcnQiLCJzZXJ2aWNlTmFtZSIsInNlcnZpY2UiLCJzYW1wbGVyIiwidHlwZSIsInBhcmFtIiwicmVwb3J0ZXIiLCJsb2dTcGFucyIsImNvbGxlY3RvckVuZHBvaW50IiwiamFlZ2VyQ29uZmlnIiwiamFlZ2VyIiwibm9vcFRyYWNlciIsImxvZ2dlciIsImluZm8iLCJtc2ciLCJjb25zb2xlIiwibG9nIiwiZXJyb3IiLCJleHRyYWN0UGFyZW50U3BhbiIsInRyYWNlciIsInJlcSIsImN0eF9zcmMiLCJjdHhfZnJtIiwiaGVhZGVycyIsIkZPUk1BVF9URVhUX01BUCIsImNvbnRleHQiLCJGT1JNQVRfQklOQVJZIiwiZXh0cmFjdCIsImdldFBhcmVudFNwYW4iLCJ0cmFjZXJQYXJlbnRTcGFuIiwiZmFpbGVkIiwic3BhbiIsImV2ZW50IiwicGF5bG9hZCIsInRyYWNlIiwiZiIsInBhcmVudFNwYW4iLCJzdGFydFNwYW4iLCJjaGlsZE9mIiwic2V0VGFnIiwiVGFncyIsIlNQQU5fS0lORCIsIk9iamVjdCIsImVudHJpZXMiLCJmb3JFYWNoIiwicmVzdWx0IiwidW5kZWZpbmVkIiwiZmluaXNoIiwiY2xlYW5lZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUVBOztBQUVBOztBQUNBOztBQUNBOztBQUVBOztBQUNBOzs7O0FBZ0JBLFNBQVNBLEtBQVQsQ0FBZUMsSUFBZixFQUE2QkMsS0FBN0IsRUFBNkNDLFVBQTdDLEVBQTZFQyxJQUE3RSxFQUE4RixDQUM3Rjs7QUFFRCxNQUFNQyxVQUFrQixHQUFHO0FBQ3ZCQyxFQUFBQSxTQUFTLEVBQUVOLEtBRFk7QUFFdkJPLEVBQUFBLFNBQVMsRUFBRVAsS0FGWTtBQUd2QlEsRUFBQUEsU0FBUyxFQUFFUixLQUhZO0FBSXZCUyxFQUFBQSxLQUFLLEVBQUVULEtBSmdCO0FBS3ZCVSxFQUFBQSxHQUFHLEVBQUVWLEtBTGtCO0FBTXZCVyxFQUFBQSxNQUFNLEVBQUVYO0FBTmUsQ0FBM0I7O0FBU08sTUFBTVksTUFBTixDQUFhO0FBQ2hCLFNBQU9DLE1BQVAsQ0FBY0MsTUFBZCxFQUFzQztBQUNsQyxRQUFJLENBQUNBLE1BQUwsRUFBYTtBQUNULGFBQU9ULFVBQVA7QUFDSDs7QUFDRCxVQUFNVSxRQUFRLEdBQUdELE1BQU0sQ0FBQ0UsS0FBUCxDQUFhLEdBQWIsQ0FBakI7QUFDQSxXQUFPLElBQUlDLG1CQUFKLENBQVdGLFFBQVEsQ0FBQyxDQUFELENBQW5CLEVBQXdCQSxRQUFRLENBQUMsQ0FBRCxDQUFoQyxFQUFxQ0csY0FBTUMsTUFBM0MsQ0FBUDtBQUNIOztBQVBlOzs7O0FBVWIsTUFBTUMsWUFBTixDQUFtQjtBQUt0QkMsRUFBQUEsV0FBVyxDQUFDQyxLQUFE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O0FBQ0g7QUFDSixPQUpEO0FBS0EsWUFBTWlHLE1BQU0sR0FBRyxNQUFNVixDQUFDLENBQUNKLElBQUQsQ0FBdEI7O0FBQ0EsVUFBSWMsTUFBTSxLQUFLQyxTQUFmLEVBQTBCO0FBQ3RCZixRQUFBQSxJQUFJLENBQUNRLE1BQUwsQ0FBWSxRQUFaLEVBQXNCLGtCQUFNTSxNQUFOLENBQXRCO0FBQ0g7O0FBQ0RkLE1BQUFBLElBQUksQ0FBQ2dCLE1BQUw7QUFDQSxhQUFPRixNQUFQO0FBQ0gsS0FiRCxDQWFFLE9BQU81QixLQUFQLEVBQWM7QUFDWixZQUFNK0IsT0FBTyxHQUFHLHVCQUFXL0IsS0FBWCxDQUFoQjtBQUNBdkIsTUFBQUEsT0FBTyxDQUFDb0MsTUFBUixDQUFlWCxNQUFmLEVBQXVCWSxJQUF2QixFQUE2QmlCLE9BQTdCO0FBQ0FqQixNQUFBQSxJQUFJLENBQUNnQixNQUFMO0FBQ0EsWUFBTUMsT0FBTjtBQUNIO0FBQ0o7O0FBdkhnQiIsInNvdXJjZXNDb250ZW50IjpbIi8vIEBmbG93XG5cbmltcG9ydCB7U1RBVFN9IGZyb20gJy4vY29uZmlnJztcbmltcG9ydCB0eXBlIHtRQ29uZmlnfSBmcm9tIFwiLi9jb25maWdcIjtcbmltcG9ydCB7dHJhY2VyIGFzIG5vb3BUcmFjZXJ9IGZyb20gXCJvcGVudHJhY2luZy9saWIvbm9vcFwiO1xuaW1wb3J0IFN0YXRzRCBmcm9tICdub2RlLXN0YXRzZCc7XG5pbXBvcnQge1RyYWNlciwgVGFncywgRk9STUFUX1RFWFRfTUFQLCBGT1JNQVRfQklOQVJZLCBTcGFuLCBTcGFuQ29udGV4dH0gZnJvbSBcIm9wZW50cmFjaW5nXCI7XG5cbmltcG9ydCB7aW5pdFRyYWNlckZyb21FbnYgYXMgaW5pdEphZWdlclRyYWNlcn0gZnJvbSAnamFlZ2VyLWNsaWVudCc7XG5pbXBvcnQge2NsZWFuRXJyb3IsIHRvTG9nfSBmcm9tIFwiLi91dGlsc1wiO1xuXG5leHBvcnQgaW50ZXJmYWNlIElTdGF0cyB7XG4gICAgaW5jcmVtZW50KHN0YXQ6IHN0cmluZywgdmFsdWU/OiBudW1iZXIsIHNhbXBsZVJhdGU/OiBudW1iZXIgfCBzdHJpbmdbXSwgdGFncz86IHN0cmluZ1tdKTogdm9pZCxcblxuICAgIGRlY3JlbWVudChzdGF0OiBzdHJpbmcsIHZhbHVlPzogbnVtYmVyLCBzYW1wbGVSYXRlPzogbnVtYmVyIHwgc3RyaW5nW10sIHRhZ3M/OiBzdHJpbmdbXSk6IHZvaWQsXG5cbiAgICBoaXN0b2dyYW0oc3RhdDogc3RyaW5nLCB2YWx1ZTogbnVtYmVyLCBzYW1wbGVSYXRlPzogbnVtYmVyIHwgc3RyaW5nW10sIHRhZ3M/OiBzdHJpbmdbXSk6IHZvaWQsXG5cbiAgICBnYXVnZShzdGF0OiBzdHJpbmcsIHZhbHVlOiBudW1iZXIsIHNhbXBsZVJhdGU/OiBudW1iZXIgfCBzdHJpbmdbXSwgdGFncz86IHN0cmluZ1tdKTogdm9pZCxcblxuICAgIHNldChzdGF0OiBzdHJpbmcsIHZhbHVlOiBudW1iZXIsIHNhbXBsZVJhdGU/OiBudW1iZXIgfCBzdHJpbmdbXSwgdGFncz86IHN0cmluZ1tdKTogdm9pZCxcblxuICAgIHRpbWluZyhzdGF0OiBzdHJpbmcsIHZhbHVlOiBudW1iZXIsIHNhbXBsZVJhdGU/OiBudW1iZXIgfCBzdHJpbmdbXSwgdGFncz86IHN0cmluZ1tdKTogdm9pZCxcbn1cblxuZnVuY3Rpb24gZHVtbXkoc3RhdDogc3RyaW5nLCB2YWx1ZT86IG51bWJlciwgc2FtcGxlUmF0ZT86IG51bWJlciB8IHN0cmluZ1tdLCB0YWdzPzogc3RyaW5nW10pIHtcbn1cblxuY29uc3QgZHVtbXlTdGF0czogSVN0YXRzID0ge1xuICAgIGluY3JlbWVudDogZHVtbXksXG4gICAgZGVjcmVtZW50OiBkdW1teSxcbiAgICBoaXN0b2dyYW06IGR1bW15LFxuICAgIGdhdWdlOiBkdW1teSxcbiAgICBzZXQ6IGR1bW15LFxuICAgIHRpbWluZzogZHVtbXksXG59O1xuXG5leHBvcnQgY2xhc3MgUVN0YXRzIHtcbiAgICBzdGF0aWMgY3JlYXRlKHNlcnZlcjogc3RyaW5nKTogSVN0YXRzIHtcbiAgICAgICAgaWYgKCFzZXJ2ZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBkdW1teVN0YXRzO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGhvc3RQb3J0ID0gc2VydmVyLnNwbGl0KCc6Jyk7XG4gICAgICAgIHJldHVybiBuZXcgU3RhdHNEKGhvc3RQb3J0WzBdLCBob3N0UG9ydFsxXSwgU1RBVFMucHJlZml4KTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBTdGF0c0NvdW50ZXIge1xuICAgIHN0YXRzOiBJU3RhdHM7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIHRhZ3M6IHN0cmluZ1tdO1xuXG4gICAgY29uc3RydWN0b3Ioc3RhdHM6IElTdGF0cywgbmFtZTogc3RyaW5nLCB0YWdzOiBzdHJpbmdbXSkge1xuICAgICAgICB0aGlzLnN0YXRzID0gc3RhdHM7XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgIHRoaXMudGFncyA9IHRhZ3M7XG4gICAgfVxuXG4gICAgaW5jcmVtZW50KCkge1xuICAgICAgICB0aGlzLnN0YXRzLmluY3JlbWVudCh0aGlzLm5hbWUsIDEsIHRoaXMudGFncyk7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgU3RhdHNHYXVnZSB7XG4gICAgc3RhdHM6IElTdGF0cztcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgdGFnczogc3RyaW5nW107XG4gICAgdmFsdWU6IG51bWJlcjtcblxuICAgIGNvbnN0cnVjdG9yKHN0YXRzOiBJU3RhdHMsIG5hbWU6IHN0cmluZywgdGFnczogc3RyaW5nW10pIHtcbiAgICAgICAgdGhpcy5zdGF0cyA9IHN0YXRzO1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICB0aGlzLnRhZ3MgPSB0YWdzO1xuICAgICAgICB0aGlzLnZhbHVlID0gMDtcbiAgICB9XG5cbiAgICBzZXQodmFsdWU6IG51bWJlcikge1xuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIHRoaXMuc3RhdHMuZ2F1Z2UodGhpcy5uYW1lLCB0aGlzLnZhbHVlLCB0aGlzLnRhZ3MpO1xuICAgIH1cblxuICAgIGluY3JlbWVudChkZWx0YTogbnVtYmVyID0gMSkge1xuICAgICAgICB0aGlzLnNldCh0aGlzLnZhbHVlICsgZGVsdGEpO1xuICAgIH1cblxuICAgIGRlY3JlbWVudChkZWx0YTogbnVtYmVyID0gMSkge1xuICAgICAgICB0aGlzLnNldCh0aGlzLnZhbHVlIC0gZGVsdGEpO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIFN0YXRzVGltaW5nIHtcbiAgICBzdGF0czogSVN0YXRzO1xuICAgIG5hbWU6IHN0cmluZztcbiAgICB0YWdzOiBzdHJpbmdbXTtcblxuICAgIGNvbnN0cnVjdG9yKHN0YXRzOiBJU3RhdHMsIG5hbWU6IHN0cmluZywgdGFnczogc3RyaW5nW10pIHtcbiAgICAgICAgdGhpcy5zdGF0cyA9IHN0YXRzO1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICB0aGlzLnRhZ3MgPSB0YWdzO1xuICAgIH1cblxuICAgIHJlcG9ydCh2YWx1ZTogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMuc3RhdHMudGltaW5nKHRoaXMubmFtZSwgdmFsdWUsIHRoaXMudGFncyk7XG4gICAgfVxuXG4gICAgc3RhcnQoKTogKCkgPT4gdm9pZCB7XG4gICAgICAgIGNvbnN0IHN0YXJ0ID0gRGF0ZS5ub3coKTtcbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMucmVwb3J0KERhdGUubm93KCkgLSBzdGFydCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIHBhcnNlVXJsKHVybDogc3RyaW5nKToge1xuICAgIHByb3RvY29sOiBzdHJpbmcsXG4gICAgaG9zdDogc3RyaW5nLFxuICAgIHBvcnQ6IHN0cmluZyxcbiAgICBwYXRoOiBzdHJpbmcsXG4gICAgcXVlcnk6IHN0cmluZyxcbn0ge1xuICAgIGNvbnN0IHByb3RvY29sU2VwYXJhdG9yUG9zID0gdXJsLmluZGV4T2YoJzovLycpO1xuICAgIGNvbnN0IHByb3RvY29sRW5kID0gcHJvdG9jb2xTZXBhcmF0b3JQb3MgPj0gMCA/IHByb3RvY29sU2VwYXJhdG9yUG9zICsgMyA6IDA7XG4gICAgY29uc3QgcXVlc3Rpb25Qb3MgPSB1cmwuaW5kZXhPZignPycsIHByb3RvY29sRW5kKTtcbiAgICBjb25zdCBxdWVyeVN0YXJ0ID0gcXVlc3Rpb25Qb3MgPj0gMCA/IHF1ZXN0aW9uUG9zICsgMSA6IHVybC5sZW5ndGg7XG4gICAgY29uc3QgcGF0aEVuZCA9IHF1ZXN0aW9uUG9zID49IDAgPyBxdWVzdGlvblBvcyA6IHVybC5sZW5ndGg7XG4gICAgY29uc3QgcGF0aFNlcGFyYXRvclBvcyA9IHVybC5pbmRleE9mKCcvJywgcHJvdG9jb2xFbmQpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXN0ZWQtdGVybmFyeVxuICAgIGNvbnN0IHBhdGhTdGFydCA9IHBhdGhTZXBhcmF0b3JQb3MgPj0gMFxuICAgICAgICA/IChwYXRoU2VwYXJhdG9yUG9zIDwgcGF0aEVuZCA/IHBhdGhTZXBhcmF0b3JQb3MgOiBwYXRoRW5kKVxuICAgICAgICA6IChxdWVzdGlvblBvcyA+PSAwID8gcXVlc3Rpb25Qb3MgOiB1cmwubGVuZ3RoKTtcbiAgICBjb25zdCBob3N0UG9ydCA9IHVybC5zdWJzdHJpbmcocHJvdG9jb2xFbmQsIHBhdGhTdGFydCkuc3BsaXQoJzonKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBwcm90b2NvbDogdXJsLnN1YnN0cmluZygwLCBwcm90b2NvbEVuZCksXG4gICAgICAgIGhvc3Q6IGhvc3RQb3J0WzBdLFxuICAgICAgICBwb3J0OiBob3N0UG9ydFsxXSB8fCAnJyxcbiAgICAgICAgcGF0aDogdXJsLnN1YnN0cmluZyhwYXRoU3RhcnQsIHBhdGhFbmQpLFxuICAgICAgICBxdWVyeTogdXJsLnN1YnN0cmluZyhxdWVyeVN0YXJ0KSxcbiAgICB9O1xufVxuXG5leHBvcnQgY2xhc3MgUVRyYWNlciB7XG4gICAgc3RhdGljIGNvbmZpZzogUUNvbmZpZztcblxuICAgIHN0YXRpYyBnZXRKYWVnZXJDb25maWcoY29uZmlnOiB7XG4gICAgICAgIGVuZHBvaW50OiBzdHJpbmcsXG4gICAgICAgIHNlcnZpY2U6IHN0cmluZyxcbiAgICAgICAgdGFnczogeyBbc3RyaW5nXTogc3RyaW5nIH1cbiAgICB9KTogP3tcbiAgICAgICAgc2VydmljZU5hbWU6IHN0cmluZyxcbiAgICAgICAgYWdlbnRIb3N0Pzogc3RyaW5nLFxuICAgICAgICBhZ2VudFBvcnQ/OiBzdHJpbmcsXG4gICAgICAgIHNhbXBsZXI6IHtcbiAgICAgICAgICAgIHR5cGU6IHN0cmluZyxcbiAgICAgICAgICAgIHBhcmFtOiBudW1iZXIsXG4gICAgICAgIH0sXG4gICAgICAgIHJlcG9ydGVyOiB7XG4gICAgICAgICAgICBjb2xsZWN0b3JFbmRwb2ludD86IHN0cmluZyxcbiAgICAgICAgICAgIGxvZ1NwYW5zOiBib29sZWFuLFxuICAgICAgICB9LFxuICAgIH0ge1xuICAgICAgICBjb25zdCBlbmRwb2ludCA9IGNvbmZpZy5lbmRwb2ludDtcbiAgICAgICAgaWYgKCFlbmRwb2ludCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcGFydHMgPSBwYXJzZVVybChlbmRwb2ludCk7XG4gICAgICAgIHJldHVybiAocGFydHMucHJvdG9jb2wgPT09ICcnKVxuICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgYWdlbnRIb3N0OiBwYXJ0cy5ob3N0LFxuICAgICAgICAgICAgICAgIGFnZW50UG9ydDogcGFydHMucG9ydCxcbiAgICAgICAgICAgICAgICBzZXJ2aWNlTmFtZTogY29uZmlnLnNlcnZpY2UsXG4gICAgICAgICAgICAgICAgc2FtcGxlcjoge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnY29uc3QnLFxuICAgICAgICAgICAgICAgICAgICBwYXJhbTogMSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHJlcG9ydGVyOiB7XG4gICAgICAgICAgICAgICAgICAgIGxvZ1NwYW5zOiB0cnVlLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICA6IHtcbiAgICAgICAgICAgICAgICBzZXJ2aWNlTmFtZTogY29uZmlnLnNlcnZpY2UsXG4gICAgICAgICAgICAgICAgc2FtcGxlcjoge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnY29uc3QnLFxuICAgICAgICAgICAgICAgICAgICBwYXJhbTogMSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHJlcG9ydGVyOiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbGxlY3RvckVuZHBvaW50OiBlbmRwb2ludCxcbiAgICAgICAgICAgICAgICAgICAgbG9nU3BhbnM6IHRydWUsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH07XG4gICAgfVxuXG4gICAgc3RhdGljIGNyZWF0ZShjb25maWc6IFFDb25maWcpOiBUcmFjZXIge1xuICAgICAgICBRVHJhY2VyLmNvbmZpZyA9IGNvbmZpZztcbiAgICAgICAgY29uc3QgamFlZ2VyQ29uZmlnID0gUVRyYWNlci5nZXRKYWVnZXJDb25maWcoY29uZmlnLmphZWdlcik7XG4gICAgICAgIGlmICghamFlZ2VyQ29uZmlnKSB7XG4gICAgICAgICAgICByZXR1cm4gbm9vcFRyYWNlcjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaW5pdEphZWdlclRyYWNlcihqYWVnZXJDb25maWcsIHtcbiAgICAgICAgICAgIGxvZ2dlcjoge1xuICAgICAgICAgICAgICAgIGluZm8obXNnKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdJTkZPICcsIG1zZyk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlcnJvcihtc2cpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0VSUk9SJywgbXNnKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgc3RhdGljIGV4dHJhY3RQYXJlbnRTcGFuKHRyYWNlcjogVHJhY2VyLCByZXE6IGFueSk6IGFueSB7XG4gICAgICAgIGxldCBjdHhfc3JjLFxuICAgICAgICAgICAgY3R4X2ZybTtcbiAgICAgICAgaWYgKHJlcS5oZWFkZXJzKSB7XG4gICAgICAgICAgICBjdHhfc3JjID0gcmVxLmhlYWRlcnM7XG4gICAgICAgICAgICBjdHhfZnJtID0gRk9STUFUX1RFWFRfTUFQO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY3R4X3NyYyA9IHJlcS5jb250ZXh0O1xuICAgICAgICAgICAgY3R4X2ZybSA9IEZPUk1BVF9CSU5BUlk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRyYWNlci5leHRyYWN0KGN0eF9mcm0sIGN0eF9zcmMpO1xuICAgIH1cblxuICAgIHN0YXRpYyBnZXRQYXJlbnRTcGFuKHRyYWNlcjogVHJhY2VyLCBjb250ZXh0OiBhbnkpOiAoU3BhbkNvbnRleHQgfCB0eXBlb2YgdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBjb250ZXh0LnRyYWNlclBhcmVudFNwYW47XG4gICAgfVxuXG4gICAgc3RhdGljIGZhaWxlZCh0cmFjZXI6IFRyYWNlciwgc3BhbjogU3BhbiwgZXJyb3I6IGFueSkge1xuICAgICAgICBzcGFuLmxvZyh7XG4gICAgICAgICAgICBldmVudDogJ2ZhaWxlZCcsXG4gICAgICAgICAgICBwYXlsb2FkOiB0b0xvZyhlcnJvciksXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHN0YXRpYyBhc3luYyB0cmFjZTxUPihcbiAgICAgICAgdHJhY2VyOiBUcmFjZXIsXG4gICAgICAgIG5hbWU6IHN0cmluZyxcbiAgICAgICAgZjogKHNwYW46IFNwYW4pID0+IFByb21pc2U8VD4sXG4gICAgICAgIHBhcmVudFNwYW4/OiAoU3BhbiB8IFNwYW5Db250ZXh0KSxcbiAgICApOiBQcm9taXNlPFQ+IHtcbiAgICAgICAgY29uc3Qgc3BhbiA9IHRyYWNlci5zdGFydFNwYW4obmFtZSwge2NoaWxkT2Y6IHBhcmVudFNwYW59KTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHNwYW4uc2V0VGFnKFRhZ3MuU1BBTl9LSU5ELCAnc2VydmVyJyk7XG4gICAgICAgICAgICBPYmplY3QuZW50cmllcyhRVHJhY2VyLmNvbmZpZy5qYWVnZXIudGFncykuZm9yRWFjaCgoW25hbWUsIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChuYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIHNwYW4uc2V0VGFnKG5hbWUsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGYoc3Bhbik7XG4gICAgICAgICAgICBpZiAocmVzdWx0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBzcGFuLnNldFRhZygncmVzdWx0JywgdG9Mb2cocmVzdWx0KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzcGFuLmZpbmlzaCgpO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnN0IGNsZWFuZWQgPSBjbGVhbkVycm9yKGVycm9yKTtcbiAgICAgICAgICAgIFFUcmFjZXIuZmFpbGVkKHRyYWNlciwgc3BhbiwgY2xlYW5lZCk7XG4gICAgICAgICAgICBzcGFuLmZpbmlzaCgpO1xuICAgICAgICAgICAgdGhyb3cgY2xlYW5lZDtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==