"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.QTracer = void 0;

var _noop = require("opentracing/lib/noop");

var _opentracing = require("opentracing");

var _jaegerClient = require("jaeger-client");

var _utils = require("./utils");

class QTracer {
  static create(config) {
    QTracer.config = config;
    const endpoint = config.jaeger.endpoint;

    if (!endpoint) {
      return _noop.tracer;
    }

    return (0, _jaegerClient.initTracerFromEnv)({
      serviceName: config.jaeger.service,
      sampler: {
        type: 'const',
        param: 1
      },
      reporter: {
        collectorEndpoint: endpoint,
        logSpans: true
      }
    }, {
      logger: {
        info(msg) {
          console.log('INFO ', msg);
        },

        error(msg) {
          console.log('ERROR', msg);
        }

      }
    });
  }

  static extractParentSpan(tracer, req) {
    let ctx_src, ctx_frm;

    if (req.headers) {
      ctx_src = req.headers;
      ctx_frm = _opentracing.FORMAT_TEXT_MAP;
    } else {
      ctx_src = req.context;
      ctx_frm = _opentracing.FORMAT_BINARY;
    }

    return tracer.extract(ctx_frm, ctx_src);
  }

  static getParentSpan(tracer, context) {
    return context.tracerParentSpan;
  }

  static failed(tracer, span, error) {
    span.log({
      event: 'failed',
      payload: (0, _utils.toLog)(error)
    });
  }

  static async trace(tracer, name, f, parentSpan) {
    const span = tracer.startSpan(name, {
      childOf: parentSpan
    });

    try {
      span.setTag(_opentracing.Tags.SPAN_KIND, 'server');
      Object.entries(QTracer.config.jaeger.tags).forEach(([name, value]) => {
        if (name) {
          span.setTag(name, value);
        }
      });
      const result = await f(span);

      if (result !== undefined) {
        span.setTag('result', (0, _utils.toLog)(result));
      }

      span.finish();
      return result;
    } catch (error) {
      const cleaned = (0, _utils.cleanError)(error);
      QTracer.failed(tracer, span, cleaned);
      span.finish();
      throw cleaned;
    }
  }

}

exports.QTracer = QTracer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NlcnZlci90cmFjZXIuanMiXSwibmFtZXMiOlsiUVRyYWNlciIsImNyZWF0ZSIsImNvbmZpZyIsImVuZHBvaW50IiwiamFlZ2VyIiwibm9vcFRyYWNlciIsInNlcnZpY2VOYW1lIiwic2VydmljZSIsInNhbXBsZXIiLCJ0eXBlIiwicGFyYW0iLCJyZXBvcnRlciIsImNvbGxlY3RvckVuZHBvaW50IiwibG9nU3BhbnMiLCJsb2dnZXIiLCJpbmZvIiwibXNnIiwiY29uc29sZSIsImxvZyIsImVycm9yIiwiZXh0cmFjdFBhcmVudFNwYW4iLCJ0cmFjZXIiLCJyZXEiLCJjdHhfc3JjIiwiY3R4X2ZybSIsImhlYWRlcnMiLCJGT1JNQVRfVEVYVF9NQVAiLCJjb250ZXh0IiwiRk9STUFUX0JJTkFSWSIsImV4dHJhY3QiLCJnZXRQYXJlbnRTcGFuIiwidHJhY2VyUGFyZW50U3BhbiIsImZhaWxlZCIsInNwYW4iLCJldmVudCIsInBheWxvYWQiLCJ0cmFjZSIsIm5hbWUiLCJmIiwicGFyZW50U3BhbiIsInN0YXJ0U3BhbiIsImNoaWxkT2YiLCJzZXRUYWciLCJUYWdzIiwiU1BBTl9LSU5EIiwiT2JqZWN0IiwiZW50cmllcyIsInRhZ3MiLCJmb3JFYWNoIiwidmFsdWUiLCJyZXN1bHQiLCJ1bmRlZmluZWQiLCJmaW5pc2giLCJjbGVhbmVkIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBR0E7O0FBQ0E7O0FBRUE7O0FBQ0E7O0FBRU8sTUFBTUEsT0FBTixDQUFjO0FBRWpCLFNBQU9DLE1BQVAsQ0FBY0MsTUFBZCxFQUF1QztBQUNuQ0YsSUFBQUEsT0FBTyxDQUFDRSxNQUFSLEdBQWlCQSxNQUFqQjtBQUNBLFVBQU1DLFFBQVEsR0FBR0QsTUFBTSxDQUFDRSxNQUFQLENBQWNELFFBQS9COztBQUNBLFFBQUksQ0FBQ0EsUUFBTCxFQUFlO0FBQ1gsYUFBT0UsWUFBUDtBQUNIOztBQUNELFdBQU8scUNBQWlCO0FBQ3BCQyxNQUFBQSxXQUFXLEVBQUVKLE1BQU0sQ0FB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LEVBQTZCb0IsT0FBN0I7QUFDQXBCLE1BQUFBLElBQUksQ0FBQ21CLE1BQUw7QUFDQSxZQUFNQyxPQUFOO0FBQ0g7QUFDSjs7QUE1RWdCIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQGZsb3dcblxuaW1wb3J0IHR5cGUgeyBRQ29uZmlnIH0gZnJvbSBcIi4vY29uZmlnXCI7XG5pbXBvcnQgeyB0cmFjZXIgYXMgbm9vcFRyYWNlciB9IGZyb20gXCJvcGVudHJhY2luZy9saWIvbm9vcFwiO1xuaW1wb3J0IHsgVHJhY2VyLCBUYWdzLCBGT1JNQVRfVEVYVF9NQVAsIEZPUk1BVF9CSU5BUlksIFNwYW4sIFNwYW5Db250ZXh0IH0gZnJvbSBcIm9wZW50cmFjaW5nXCI7XG5cbmltcG9ydCB7IGluaXRUcmFjZXJGcm9tRW52IGFzIGluaXRKYWVnZXJUcmFjZXIgfSBmcm9tICdqYWVnZXItY2xpZW50JztcbmltcG9ydCB7IGNsZWFuRXJyb3IsIHRvTG9nIH0gZnJvbSBcIi4vdXRpbHNcIjtcblxuZXhwb3J0IGNsYXNzIFFUcmFjZXIge1xuICAgIHN0YXRpYyBjb25maWc6IFFDb25maWc7XG4gICAgc3RhdGljIGNyZWF0ZShjb25maWc6IFFDb25maWcpOiBUcmFjZXIge1xuICAgICAgICBRVHJhY2VyLmNvbmZpZyA9IGNvbmZpZztcbiAgICAgICAgY29uc3QgZW5kcG9pbnQgPSBjb25maWcuamFlZ2VyLmVuZHBvaW50O1xuICAgICAgICBpZiAoIWVuZHBvaW50KSB7XG4gICAgICAgICAgICByZXR1cm4gbm9vcFRyYWNlcjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaW5pdEphZWdlclRyYWNlcih7XG4gICAgICAgICAgICBzZXJ2aWNlTmFtZTogY29uZmlnLmphZWdlci5zZXJ2aWNlLFxuICAgICAgICAgICAgc2FtcGxlcjoge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdjb25zdCcsXG4gICAgICAgICAgICAgICAgcGFyYW06IDEsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVwb3J0ZXI6IHtcbiAgICAgICAgICAgICAgICBjb2xsZWN0b3JFbmRwb2ludDogZW5kcG9pbnQsXG4gICAgICAgICAgICAgICAgbG9nU3BhbnM6IHRydWUsXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGxvZ2dlcjoge1xuICAgICAgICAgICAgICAgIGluZm8obXNnKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdJTkZPICcsIG1zZyk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlcnJvcihtc2cpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0VSUk9SJywgbXNnKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgc3RhdGljIGV4dHJhY3RQYXJlbnRTcGFuKHRyYWNlcjogVHJhY2VyLCByZXE6IGFueSk6IGFueSB7XG4gICAgICAgIGxldCBjdHhfc3JjLCBjdHhfZnJtO1xuICAgICAgICBpZiAocmVxLmhlYWRlcnMpIHtcbiAgICAgICAgICAgIGN0eF9zcmMgPSByZXEuaGVhZGVycztcbiAgICAgICAgICAgIGN0eF9mcm0gPSBGT1JNQVRfVEVYVF9NQVA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjdHhfc3JjID0gcmVxLmNvbnRleHQ7XG4gICAgICAgICAgICBjdHhfZnJtID0gRk9STUFUX0JJTkFSWTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJhY2VyLmV4dHJhY3QoY3R4X2ZybSwgY3R4X3NyYyk7XG4gICAgfVxuXG4gICAgc3RhdGljIGdldFBhcmVudFNwYW4odHJhY2VyOiBUcmFjZXIsIGNvbnRleHQ6IGFueSk6IChTcGFuQ29udGV4dCB8IHR5cGVvZiB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIGNvbnRleHQudHJhY2VyUGFyZW50U3BhbjtcbiAgICB9XG5cbiAgICBzdGF0aWMgZmFpbGVkKHRyYWNlcjogVHJhY2VyLCBzcGFuOiBTcGFuLCBlcnJvcjogYW55KSB7XG4gICAgICAgIHNwYW4ubG9nKHsgZXZlbnQ6ICdmYWlsZWQnLCBwYXlsb2FkOiB0b0xvZyhlcnJvcikgfSk7XG4gICAgfVxuXG4gICAgc3RhdGljIGFzeW5jIHRyYWNlPFQ+KFxuICAgICAgICB0cmFjZXI6IFRyYWNlcixcbiAgICAgICAgbmFtZTogc3RyaW5nLFxuICAgICAgICBmOiAoc3BhbjogU3BhbikgPT4gUHJvbWlzZTxUPixcbiAgICAgICAgcGFyZW50U3Bhbj86IChTcGFuIHwgU3BhbkNvbnRleHQpXG4gICAgKTogUHJvbWlzZTxUPiB7XG4gICAgICAgIGNvbnN0IHNwYW4gPSB0cmFjZXIuc3RhcnRTcGFuKG5hbWUsIHsgY2hpbGRPZjogcGFyZW50U3BhbiB9KTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHNwYW4uc2V0VGFnKFRhZ3MuU1BBTl9LSU5ELCAnc2VydmVyJyk7XG4gICAgICAgICAgICBPYmplY3QuZW50cmllcyhRVHJhY2VyLmNvbmZpZy5qYWVnZXIudGFncykuZm9yRWFjaCgoW25hbWUsIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChuYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIHNwYW4uc2V0VGFnKG5hbWUsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGYoc3Bhbik7XG4gICAgICAgICAgICBpZiAocmVzdWx0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBzcGFuLnNldFRhZygncmVzdWx0JywgdG9Mb2cocmVzdWx0KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzcGFuLmZpbmlzaCgpO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnN0IGNsZWFuZWQgPSBjbGVhbkVycm9yKGVycm9yKTtcbiAgICAgICAgICAgIFFUcmFjZXIuZmFpbGVkKHRyYWNlciwgc3BhbiwgY2xlYW5lZCk7XG4gICAgICAgICAgICBzcGFuLmZpbmlzaCgpO1xuICAgICAgICAgICAgdGhyb3cgY2xlYW5lZDtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==