"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.QTracer = exports.StatsTiming = exports.StatsGauge = exports.StatsCounter = exports.QStats = void 0;

var _config = require("./config");

var _noop = require("opentracing/lib/noop");

var _nodeStatsd = _interopRequireDefault(require("node-statsd"));

var _opentracing = require("opentracing");

var _jaegerClient = require("jaeger-client");

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function dummy(stat, value, sampleRate, tags) {}

const dummyStats = {
  configuredTags: [],
  increment: dummy,
  decrement: dummy,
  histogram: dummy,
  gauge: dummy,
  set: dummy,
  timing: dummy
};

class QStats {
  static create(server, configuredTags) {
    if (!server) {
      return dummyStats;
    }

    const hostPort = server.split(':');
    const stats = new _nodeStatsd.default(hostPort[0], hostPort[1], _config.STATS.prefix);
    stats['configuredTags'] = configuredTags;
    return stats;
  }

  static combineTags(stats, tags) {
    return stats.configuredTags && stats.configuredTags.length > 0 ? stats.configuredTags.concat(tags) : tags;
  }

}

exports.QStats = QStats;

class StatsCounter {
  constructor(stats, name, tags) {
    this.stats = stats;
    this.name = name;
    this.tags = QStats.combineTags(stats, tags);
  }

  increment() {
    this.stats.increment(this.name, 1, this.tags);
  }

}

exports.StatsCounter = StatsCounter;

class StatsGauge {
  constructor(stats, name, tags) {
    this.stats = stats;
    this.name = name;
    this.tags = QStats.combineTags(stats, tags);
    this.value = 0;
  }

  set(value) {
    this.value = value;
    this.stats.gauge(this.name, this.value, this.tags);
  }

  increment(delta = 1) {
    this.set(this.value + delta);
  }

  decrement(delta = 1) {
    this.set(this.value - delta);
  }

}

exports.StatsGauge = StatsGauge;

class StatsTiming {
  constructor(stats, name, tags) {
    this.stats = stats;
    this.name = name;
    this.tags = QStats.combineTags(stats, tags);
  }

  report(value) {
    this.stats.timing(this.name, value, this.tags);
  }

  start() {
    const start = Date.now();
    return () => {
      this.report(Date.now() - start);
    };
  }

}

exports.StatsTiming = StatsTiming;

function parseUrl(url) {
  const protocolSeparatorPos = url.indexOf('://');
  const protocolEnd = protocolSeparatorPos >= 0 ? protocolSeparatorPos + 3 : 0;
  const questionPos = url.indexOf('?', protocolEnd);
  const queryStart = questionPos >= 0 ? questionPos + 1 : url.length;
  const pathEnd = questionPos >= 0 ? questionPos : url.length;
  const pathSeparatorPos = url.indexOf('/', protocolEnd); // eslint-disable-next-line no-nested-ternary

  const pathStart = pathSeparatorPos >= 0 ? pathSeparatorPos < pathEnd ? pathSeparatorPos : pathEnd : questionPos >= 0 ? questionPos : url.length;
  const hostPort = url.substring(protocolEnd, pathStart).split(':');
  return {
    protocol: url.substring(0, protocolEnd),
    host: hostPort[0],
    port: hostPort[1] || '',
    path: url.substring(pathStart, pathEnd),
    query: url.substring(queryStart)
  };
}

class QTracer {
  static getJaegerConfig(config) {
    const endpoint = config.endpoint;

    if (!endpoint) {
      return null;
    }

    const parts = parseUrl(endpoint);
    return parts.protocol === '' ? {
      serviceName: config.service,
      sampler: {
        type: 'const',
        param: 1
      },
      reporter: {
        logSpans: true,
        agentHost: parts.host,
        agentPort: Number(parts.port)
      }
    } : {
      serviceName: config.service,
      sampler: {
        type: 'const',
        param: 1
      },
      reporter: {
        logSpans: true,
        collectorEndpoint: endpoint
      }
    };
  }

  static create(config) {
    QTracer.config = config;
    const jaegerConfig = QTracer.getJaegerConfig(config.jaeger);

    if (!jaegerConfig) {
      return _noop.tracer;
    }

    return (0, _jaegerClient.initTracerFromEnv)(jaegerConfig, {
      logger: {
        info(msg) {
          console.log('INFO ', msg);
        },

        error(msg) {
          console.log('ERROR', msg);
        }

      }
    });
  }

  static extractParentSpan(tracer, req) {
    let ctx_src, ctx_frm;

    if (req.headers) {
      ctx_src = req.headers;
      ctx_frm = _opentracing.FORMAT_TEXT_MAP;
    } else {
      ctx_src = req.context;
      ctx_frm = _opentracing.FORMAT_BINARY;
    }

    return tracer.extract(ctx_frm, ctx_src);
  }

  static getParentSpan(tracer, context) {
    return context.tracerParentSpan;
  }

  static failed(tracer, span, error) {
    span.log({
      event: 'failed',
      payload: (0, _utils.toLog)(error)
    });
  }

  static async trace(tracer, name, f, parentSpan) {
    const span = tracer.startSpan(name, {
      childOf: parentSpan
    });

    try {
      span.setTag(_opentracing.Tags.SPAN_KIND, 'server');
      Object.entries(QTracer.config.jaeger.tags).forEach(([name, value]) => {
        if (name) {
          span.setTag(name, value);
        }
      });
      const result = await f(span);

      if (result !== undefined) {
        span.setTag('result', (0, _utils.toLog)(result));
      }

      span.finish();
      return result;
    } catch (error) {
      const cleaned = (0, _utils.cleanError)(error);
      QTracer.failed(tracer, span, cleaned);
      span.finish();
      throw cleaned;
    }
  }

}

exports.QTracer = QTracer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NlcnZlci90cmFjZXIuanMiXSwibmFtZXMiOlsiZHVtbXkiLCJzdGF0IiwidmFsdWUiLCJzYW1wbGVSYXRlIiwidGFncyIsImR1bW15U3RhdHMiLCJjb25maWd1cmVkVGFncyIsImluY3JlbWVudCIsImRlY3JlbWVudCIsImhpc3RvZ3JhbSIsImdhdWdlIiwic2V0IiwidGltaW5nIiwiUVN0YXRzIiwiY3JlYXRlIiwic2VydmVyIiwiaG9zdFBvcnQiLCJzcGxpdCIsInN0YXRzIiwiU3RhdHNEIiwiU1RBVFMiLCJwcmVmaXgiLCJjb21iaW5lVGFncyIsImxlbmd0aCIsImNvbmNhdCIsIlN0YXRzQ291bnRlciIsImNvbnN0cnVjdG9yIiwibmFtZSIsIlN0YXRzR2F1Z2UiLCJkZWx0YSIsIlN0YXRzVGltaW5nIiwicmVwb3J0Iiwic3RhcnQiLCJEYXRlIiwibm93IiwicGFyc2VVcmwiLCJ1cmwiLCJwcm90b2NvbFNlcGFyYXRvclBvcyIsImluZGV4T2YiLCJwcm90b2NvbEVuZCIsInF1ZXN0aW9uUG9zIiwicXVlcnlTdGFydCIsInBhdGhFbmQiLCJwYXRoU2VwYXJhdG9yUG9zIiwicGF0aFN0YXJ0Iiwic3Vic3RyaW5nIiwicHJvdG9jb2wiLCJob3N0IiwicG9ydCIsInBhdGgiLCJxdWVyeSIsIlFUcmFjZXIiLCJnZXRKYWVnZXJDb25maWciLCJjb25maWciLCJlbmRwb2ludCIsInBhcnRzIiwic2VydmljZU5hbWUiLCJzZXJ2aWNlIiwic2FtcGxlciIsInR5cGUiLCJwYXJhbSIsInJlcG9ydGVyIiwibG9nU3BhbnMiLCJhZ2VudEhvc3QiLCJhZ2VudFBvcnQiLCJOdW1iZXIiLCJjb2xsZWN0b3JFbmRwb2ludCIsImphZWdlckNvbmZpZyIsImphZWdlciIsIm5vb3BUcmFjZXIiLCJsb2dnZXIiLCJpbmZvIiwibXNnIiwiY29uc29sZSIsImxvZyIsImVycm9yIiwiZXh0cmFjdFBhcmVudFNwYW4iLCJ0cmFjZXIiLCJyZXEiLCJjdHhfc3JjIiwiY3R4X2ZybSIsImhlYWRlcnMiLCJGT1JNQVRfVEVYVF9NQVAiLCJjb250ZXh0IiwiRk9STUFUX0JJTkFSWSIsImV4dHJhY3QiLCJnZXRQYXJlbnRTcGFuIiwidHJhY2VyUGFyZW50U3BhbiIsImZhaWxlZCIsInNwYW4iLCJldmVudCIsInBheWxvYWQiLCJ0cmFjZSIsImYiLCJwYXJlbnRTcGFuIiwic3RhcnRTcGFuIiwiY2hpbGRPZiIsInNldFRhZyIsIlRhZ3MiLCJTUEFOX0tJTkQiLCJPYmplY3QiLCJlbnRyaWVzIiwiZm9yRWFjaCIsInJlc3VsdCIsInVuZGVmaW5lZCIsImZpbmlzaCIsImNsZWFuZWQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFFQTs7QUFFQTs7QUFDQTs7QUFDQTs7QUFFQTs7QUFDQTs7OztBQWtCQSxTQUFTQSxLQUFULENBQWVDLElBQWYsRUFBNkJDLEtBQTdCLEVBQTZDQyxVQUE3QyxFQUE2RUMsSUFBN0UsRUFBOEYsQ0FDN0Y7O0FBRUQsTUFBTUMsVUFBa0IsR0FBRztBQUN2QkMsRUFBQUEsY0FBYyxFQUFFLEVBRE87QUFFdkJDLEVBQUFBLFNBQVMsRUFBRVAsS0FGWTtBQUd2QlEsRUFBQUEsU0FBUyxFQUFFUixLQUhZO0FBSXZCUyxFQUFBQSxTQUFTLEVBQUVULEtBSlk7QUFLdkJVLEVBQUFBLEtBQUssRUFBRVYsS0FMZ0I7QUFNdkJXLEVBQUFBLEdBQUcsRUFBRVgsS0FOa0I7QUFPdkJZLEVBQUFBLE1BQU0sRUFBRVo7QUFQZSxDQUEzQjs7QUFVTyxNQUFNYSxNQUFOLENBQWE7QUFDaEIsU0FBT0MsTUFBUCxDQUFjQyxNQUFkLEVBQThCVCxjQUE5QixFQUFnRTtBQUM1RCxRQUFJLENBQUNTLE1BQUwsRUFBYTtBQUNULGFBQU9WLFVBQVA7QUFDSDs7QUFDRCxVQUFNVyxRQUFRLEdBQUdELE1BQU0sQ0FBQ0UsS0FBUCxDQUFhLEdBQWIsQ0FBakI7QUFDQSxVQUFNQyxLQUFLLEdBQUcsSUFBSUMsbUJBQUosQ0FBV0gsUUFBUSxDQUFDLENBQUQsQ0FBbkIsRUFBd0JBLFFBQVEsQ0FB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T0FBTjtBQUNIO0FBQ0o7O0FBNUdnQiIsInNvdXJjZXNDb250ZW50IjpbIi8vIEBmbG93XG5cbmltcG9ydCB7IFNUQVRTIH0gZnJvbSAnLi9jb25maWcnO1xuaW1wb3J0IHR5cGUgeyBRQ29uZmlnIH0gZnJvbSBcIi4vY29uZmlnXCI7XG5pbXBvcnQgeyB0cmFjZXIgYXMgbm9vcFRyYWNlciB9IGZyb20gXCJvcGVudHJhY2luZy9saWIvbm9vcFwiO1xuaW1wb3J0IFN0YXRzRCBmcm9tICdub2RlLXN0YXRzZCc7XG5pbXBvcnQgeyBUcmFjZXIsIFRhZ3MsIEZPUk1BVF9URVhUX01BUCwgRk9STUFUX0JJTkFSWSwgU3BhbiwgU3BhbkNvbnRleHQgfSBmcm9tIFwib3BlbnRyYWNpbmdcIjtcblxuaW1wb3J0IHsgaW5pdFRyYWNlckZyb21FbnYgYXMgaW5pdEphZWdlclRyYWNlciB9IGZyb20gJ2phZWdlci1jbGllbnQnO1xuaW1wb3J0IHsgY2xlYW5FcnJvciwgdG9Mb2cgfSBmcm9tIFwiLi91dGlsc1wiO1xuXG5leHBvcnQgaW50ZXJmYWNlIElTdGF0cyB7XG4gICAgY29uZmlndXJlZFRhZ3M6IHN0cmluZ1tdLFxuXG4gICAgaW5jcmVtZW50KHN0YXQ6IHN0cmluZywgdmFsdWU/OiBudW1iZXIsIHNhbXBsZVJhdGU/OiBudW1iZXIgfCBzdHJpbmdbXSwgdGFncz86IHN0cmluZ1tdKTogdm9pZCxcblxuICAgIGRlY3JlbWVudChzdGF0OiBzdHJpbmcsIHZhbHVlPzogbnVtYmVyLCBzYW1wbGVSYXRlPzogbnVtYmVyIHwgc3RyaW5nW10sIHRhZ3M/OiBzdHJpbmdbXSk6IHZvaWQsXG5cbiAgICBoaXN0b2dyYW0oc3RhdDogc3RyaW5nLCB2YWx1ZTogbnVtYmVyLCBzYW1wbGVSYXRlPzogbnVtYmVyIHwgc3RyaW5nW10sIHRhZ3M/OiBzdHJpbmdbXSk6IHZvaWQsXG5cbiAgICBnYXVnZShzdGF0OiBzdHJpbmcsIHZhbHVlOiBudW1iZXIsIHNhbXBsZVJhdGU/OiBudW1iZXIgfCBzdHJpbmdbXSwgdGFncz86IHN0cmluZ1tdKTogdm9pZCxcblxuICAgIHNldChzdGF0OiBzdHJpbmcsIHZhbHVlOiBudW1iZXIsIHNhbXBsZVJhdGU/OiBudW1iZXIgfCBzdHJpbmdbXSwgdGFncz86IHN0cmluZ1tdKTogdm9pZCxcblxuICAgIHRpbWluZyhzdGF0OiBzdHJpbmcsIHZhbHVlOiBudW1iZXIsIHNhbXBsZVJhdGU/OiBudW1iZXIgfCBzdHJpbmdbXSwgdGFncz86IHN0cmluZ1tdKTogdm9pZCxcbn1cblxuZnVuY3Rpb24gZHVtbXkoc3RhdDogc3RyaW5nLCB2YWx1ZT86IG51bWJlciwgc2FtcGxlUmF0ZT86IG51bWJlciB8IHN0cmluZ1tdLCB0YWdzPzogc3RyaW5nW10pIHtcbn1cblxuY29uc3QgZHVtbXlTdGF0czogSVN0YXRzID0ge1xuICAgIGNvbmZpZ3VyZWRUYWdzOiBbXSxcbiAgICBpbmNyZW1lbnQ6IGR1bW15LFxuICAgIGRlY3JlbWVudDogZHVtbXksXG4gICAgaGlzdG9ncmFtOiBkdW1teSxcbiAgICBnYXVnZTogZHVtbXksXG4gICAgc2V0OiBkdW1teSxcbiAgICB0aW1pbmc6IGR1bW15LFxufTtcblxuZXhwb3J0IGNsYXNzIFFTdGF0cyB7XG4gICAgc3RhdGljIGNyZWF0ZShzZXJ2ZXI6IHN0cmluZywgY29uZmlndXJlZFRhZ3M6IHN0cmluZ1tdKTogSVN0YXRzIHtcbiAgICAgICAgaWYgKCFzZXJ2ZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBkdW1teVN0YXRzO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGhvc3RQb3J0ID0gc2VydmVyLnNwbGl0KCc6Jyk7XG4gICAgICAgIGNvbnN0IHN0YXRzID0gbmV3IFN0YXRzRChob3N0UG9ydFswXSwgaG9zdFBvcnRbMV0sIFNUQVRTLnByZWZpeCk7XG4gICAgICAgIHN0YXRzWydjb25maWd1cmVkVGFncyddID0gY29uZmlndXJlZFRhZ3M7XG4gICAgICAgIHJldHVybiBzdGF0cztcbiAgICB9XG5cbiAgICBzdGF0aWMgY29tYmluZVRhZ3Moc3RhdHM6IElTdGF0cywgdGFnczogc3RyaW5nW10pOiBzdHJpbmdbXSB7XG4gICAgICAgIHJldHVybiAoc3RhdHMuY29uZmlndXJlZFRhZ3MgJiYgc3RhdHMuY29uZmlndXJlZFRhZ3MubGVuZ3RoID4gMClcbiAgICAgICAgICAgID8gc3RhdHMuY29uZmlndXJlZFRhZ3MuY29uY2F0KHRhZ3MpXG4gICAgICAgICAgICA6IHRhZ3M7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgU3RhdHNDb3VudGVyIHtcbiAgICBzdGF0czogSVN0YXRzO1xuICAgIG5hbWU6IHN0cmluZztcbiAgICB0YWdzOiBzdHJpbmdbXTtcblxuICAgIGNvbnN0cnVjdG9yKHN0YXRzOiBJU3RhdHMsIG5hbWU6IHN0cmluZywgdGFnczogc3RyaW5nW10pIHtcbiAgICAgICAgdGhpcy5zdGF0cyA9IHN0YXRzO1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICB0aGlzLnRhZ3MgPSBRU3RhdHMuY29tYmluZVRhZ3Moc3RhdHMsIHRhZ3MpO1xuICAgIH1cblxuICAgIGluY3JlbWVudCgpIHtcbiAgICAgICAgdGhpcy5zdGF0cy5pbmNyZW1lbnQodGhpcy5uYW1lLCAxLCB0aGlzLnRhZ3MpO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIFN0YXRzR2F1Z2Uge1xuICAgIHN0YXRzOiBJU3RhdHM7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIHRhZ3M6IHN0cmluZ1tdO1xuICAgIHZhbHVlOiBudW1iZXI7XG5cbiAgICBjb25zdHJ1Y3RvcihzdGF0czogSVN0YXRzLCBuYW1lOiBzdHJpbmcsIHRhZ3M6IHN0cmluZ1tdKSB7XG4gICAgICAgIHRoaXMuc3RhdHMgPSBzdGF0cztcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgdGhpcy50YWdzID0gUVN0YXRzLmNvbWJpbmVUYWdzKHN0YXRzLCB0YWdzKTtcbiAgICAgICAgdGhpcy52YWx1ZSA9IDA7XG4gICAgfVxuXG4gICAgc2V0KHZhbHVlOiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgICAgICB0aGlzLnN0YXRzLmdhdWdlKHRoaXMubmFtZSwgdGhpcy52YWx1ZSwgdGhpcy50YWdzKTtcbiAgICB9XG5cbiAgICBpbmNyZW1lbnQoZGVsdGE6IG51bWJlciA9IDEpIHtcbiAgICAgICAgdGhpcy5zZXQodGhpcy52YWx1ZSArIGRlbHRhKTtcbiAgICB9XG5cbiAgICBkZWNyZW1lbnQoZGVsdGE6IG51bWJlciA9IDEpIHtcbiAgICAgICAgdGhpcy5zZXQodGhpcy52YWx1ZSAtIGRlbHRhKTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBTdGF0c1RpbWluZyB7XG4gICAgc3RhdHM6IElTdGF0cztcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgdGFnczogc3RyaW5nW107XG5cbiAgICBjb25zdHJ1Y3RvcihzdGF0czogSVN0YXRzLCBuYW1lOiBzdHJpbmcsIHRhZ3M6IHN0cmluZ1tdKSB7XG4gICAgICAgIHRoaXMuc3RhdHMgPSBzdGF0cztcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgdGhpcy50YWdzID0gUVN0YXRzLmNvbWJpbmVUYWdzKHN0YXRzLCB0YWdzKTtcbiAgICB9XG5cbiAgICByZXBvcnQodmFsdWU6IG51bWJlcikge1xuICAgICAgICB0aGlzLnN0YXRzLnRpbWluZyh0aGlzLm5hbWUsIHZhbHVlLCB0aGlzLnRhZ3MpO1xuICAgIH1cblxuICAgIHN0YXJ0KCk6ICgpID0+IHZvaWQge1xuICAgICAgICBjb25zdCBzdGFydCA9IERhdGUubm93KCk7XG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnJlcG9ydChEYXRlLm5vdygpIC0gc3RhcnQpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiBwYXJzZVVybCh1cmw6IHN0cmluZyk6IHtcbiAgICBwcm90b2NvbDogc3RyaW5nLFxuICAgIGhvc3Q6IHN0cmluZyxcbiAgICBwb3J0OiBzdHJpbmcsXG4gICAgcGF0aDogc3RyaW5nLFxuICAgIHF1ZXJ5OiBzdHJpbmcsXG59IHtcbiAgICBjb25zdCBwcm90b2NvbFNlcGFyYXRvclBvcyA9IHVybC5pbmRleE9mKCc6Ly8nKTtcbiAgICBjb25zdCBwcm90b2NvbEVuZCA9IHByb3RvY29sU2VwYXJhdG9yUG9zID49IDAgPyBwcm90b2NvbFNlcGFyYXRvclBvcyArIDMgOiAwO1xuICAgIGNvbnN0IHF1ZXN0aW9uUG9zID0gdXJsLmluZGV4T2YoJz8nLCBwcm90b2NvbEVuZCk7XG4gICAgY29uc3QgcXVlcnlTdGFydCA9IHF1ZXN0aW9uUG9zID49IDAgPyBxdWVzdGlvblBvcyArIDEgOiB1cmwubGVuZ3RoO1xuICAgIGNvbnN0IHBhdGhFbmQgPSBxdWVzdGlvblBvcyA+PSAwID8gcXVlc3Rpb25Qb3MgOiB1cmwubGVuZ3RoO1xuICAgIGNvbnN0IHBhdGhTZXBhcmF0b3JQb3MgPSB1cmwuaW5kZXhPZignLycsIHByb3RvY29sRW5kKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmVzdGVkLXRlcm5hcnlcbiAgICBjb25zdCBwYXRoU3RhcnQgPSBwYXRoU2VwYXJhdG9yUG9zID49IDBcbiAgICAgICAgPyAocGF0aFNlcGFyYXRvclBvcyA8IHBhdGhFbmQgPyBwYXRoU2VwYXJhdG9yUG9zIDogcGF0aEVuZClcbiAgICAgICAgOiAocXVlc3Rpb25Qb3MgPj0gMCA/IHF1ZXN0aW9uUG9zIDogdXJsLmxlbmd0aCk7XG4gICAgY29uc3QgaG9zdFBvcnQgPSB1cmwuc3Vic3RyaW5nKHByb3RvY29sRW5kLCBwYXRoU3RhcnQpLnNwbGl0KCc6Jyk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcHJvdG9jb2w6IHVybC5zdWJzdHJpbmcoMCwgcHJvdG9jb2xFbmQpLFxuICAgICAgICBob3N0OiBob3N0UG9ydFswXSxcbiAgICAgICAgcG9ydDogaG9zdFBvcnRbMV0gfHwgJycsXG4gICAgICAgIHBhdGg6IHVybC5zdWJzdHJpbmcocGF0aFN0YXJ0LCBwYXRoRW5kKSxcbiAgICAgICAgcXVlcnk6IHVybC5zdWJzdHJpbmcocXVlcnlTdGFydCksXG4gICAgfTtcbn1cblxudHlwZSBKYWVnZXJDb25maWcgPSB7XG4gICAgc2VydmljZU5hbWU6IHN0cmluZyxcbiAgICBkaXNhYmxlPzogYm9vbGVhbixcbiAgICBzYW1wbGVyOiB7XG4gICAgICAgIHR5cGU6IHN0cmluZyxcbiAgICAgICAgcGFyYW06IG51bWJlcixcbiAgICAgICAgaG9zdFBvcnQ/OiBzdHJpbmcsXG4gICAgICAgIGhvc3Q/OiBzdHJpbmcsXG4gICAgICAgIHBvcnQ/OiBudW1iZXIsXG4gICAgICAgIHJlZnJlc2hJbnRlcnZhbE1zPzogbnVtYmVyLFxuICAgIH0sXG4gICAgcmVwb3J0ZXI6IHtcbiAgICAgICAgbG9nU3BhbnM6IGJvb2xlYW4sXG4gICAgICAgIGFnZW50SG9zdD86IHN0cmluZyxcbiAgICAgICAgYWdlbnRQb3J0PzogbnVtYmVyLFxuICAgICAgICBhZ2VudFNvY2tldFR5cGU/OiBzdHJpbmcsXG4gICAgICAgIGNvbGxlY3RvckVuZHBvaW50Pzogc3RyaW5nLFxuICAgICAgICB1c2VybmFtZT86IHN0cmluZyxcbiAgICAgICAgcGFzc3dvcmQ/OiBzdHJpbmcsXG4gICAgICAgIGZsdXNoSW50ZXJ2YWxNcz86IG51bWJlcixcbiAgICB9LFxuICAgIHRocm90dGxlcj86IHtcbiAgICAgICAgaG9zdDogc3RyaW5nLFxuICAgICAgICBwb3J0OiBudW1iZXIsXG4gICAgICAgIHJlZnJlc2hJbnRlcnZhbE1zOiBudW1iZXIsXG4gICAgfSxcbn1cblxuZXhwb3J0IGNsYXNzIFFUcmFjZXIge1xuICAgIHN0YXRpYyBjb25maWc6IFFDb25maWc7XG5cbiAgICBzdGF0aWMgZ2V0SmFlZ2VyQ29uZmlnKGNvbmZpZzoge1xuICAgICAgICBlbmRwb2ludDogc3RyaW5nLFxuICAgICAgICBzZXJ2aWNlOiBzdHJpbmcsXG4gICAgICAgIHRhZ3M6IHsgW3N0cmluZ106IHN0cmluZyB9XG4gICAgfSk6ID9KYWVnZXJDb25maWcge1xuICAgICAgICBjb25zdCBlbmRwb2ludCA9IGNvbmZpZy5lbmRwb2ludDtcbiAgICAgICAgaWYgKCFlbmRwb2ludCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcGFydHMgPSBwYXJzZVVybChlbmRwb2ludCk7XG4gICAgICAgIHJldHVybiAocGFydHMucHJvdG9jb2wgPT09ICcnKVxuICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgc2VydmljZU5hbWU6IGNvbmZpZy5zZXJ2aWNlLFxuICAgICAgICAgICAgICAgIHNhbXBsZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2NvbnN0JyxcbiAgICAgICAgICAgICAgICAgICAgcGFyYW06IDEsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICByZXBvcnRlcjoge1xuICAgICAgICAgICAgICAgICAgICBsb2dTcGFuczogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgYWdlbnRIb3N0OiBwYXJ0cy5ob3N0LFxuICAgICAgICAgICAgICAgICAgICBhZ2VudFBvcnQ6IE51bWJlcihwYXJ0cy5wb3J0KVxuICAgICAgICAgICAgICAgICAgICAsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDoge1xuICAgICAgICAgICAgICAgIHNlcnZpY2VOYW1lOiBjb25maWcuc2VydmljZSxcbiAgICAgICAgICAgICAgICBzYW1wbGVyOiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdjb25zdCcsXG4gICAgICAgICAgICAgICAgICAgIHBhcmFtOiAxLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgcmVwb3J0ZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgbG9nU3BhbnM6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGNvbGxlY3RvckVuZHBvaW50OiBlbmRwb2ludCxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfTtcbiAgICB9XG5cbiAgICBzdGF0aWMgY3JlYXRlKGNvbmZpZzogUUNvbmZpZyk6IFRyYWNlciB7XG4gICAgICAgIFFUcmFjZXIuY29uZmlnID0gY29uZmlnO1xuICAgICAgICBjb25zdCBqYWVnZXJDb25maWcgPSBRVHJhY2VyLmdldEphZWdlckNvbmZpZyhjb25maWcuamFlZ2VyKTtcbiAgICAgICAgaWYgKCFqYWVnZXJDb25maWcpIHtcbiAgICAgICAgICAgIHJldHVybiBub29wVHJhY2VyO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpbml0SmFlZ2VyVHJhY2VyKGphZWdlckNvbmZpZywge1xuICAgICAgICAgICAgbG9nZ2VyOiB7XG4gICAgICAgICAgICAgICAgaW5mbyhtc2cpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0lORk8gJywgbXNnKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVycm9yKG1zZykge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnRVJST1InLCBtc2cpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBzdGF0aWMgZXh0cmFjdFBhcmVudFNwYW4odHJhY2VyOiBUcmFjZXIsIHJlcTogYW55KTogYW55IHtcbiAgICAgICAgbGV0IGN0eF9zcmMsXG4gICAgICAgICAgICBjdHhfZnJtO1xuICAgICAgICBpZiAocmVxLmhlYWRlcnMpIHtcbiAgICAgICAgICAgIGN0eF9zcmMgPSByZXEuaGVhZGVycztcbiAgICAgICAgICAgIGN0eF9mcm0gPSBGT1JNQVRfVEVYVF9NQVA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjdHhfc3JjID0gcmVxLmNvbnRleHQ7XG4gICAgICAgICAgICBjdHhfZnJtID0gRk9STUFUX0JJTkFSWTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJhY2VyLmV4dHJhY3QoY3R4X2ZybSwgY3R4X3NyYyk7XG4gICAgfVxuXG4gICAgc3RhdGljIGdldFBhcmVudFNwYW4odHJhY2VyOiBUcmFjZXIsIGNvbnRleHQ6IGFueSk6IChTcGFuQ29udGV4dCB8IHR5cGVvZiB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIGNvbnRleHQudHJhY2VyUGFyZW50U3BhbjtcbiAgICB9XG5cbiAgICBzdGF0aWMgZmFpbGVkKHRyYWNlcjogVHJhY2VyLCBzcGFuOiBTcGFuLCBlcnJvcjogYW55KSB7XG4gICAgICAgIHNwYW4ubG9nKHtcbiAgICAgICAgICAgIGV2ZW50OiAnZmFpbGVkJyxcbiAgICAgICAgICAgIHBheWxvYWQ6IHRvTG9nKGVycm9yKSxcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgc3RhdGljIGFzeW5jIHRyYWNlPFQ+KFxuICAgICAgICB0cmFjZXI6IFRyYWNlcixcbiAgICAgICAgbmFtZTogc3RyaW5nLFxuICAgICAgICBmOiAoc3BhbjogU3BhbikgPT4gUHJvbWlzZTxUPixcbiAgICAgICAgcGFyZW50U3Bhbj86IChTcGFuIHwgU3BhbkNvbnRleHQpLFxuICAgICk6IFByb21pc2U8VD4ge1xuICAgICAgICBjb25zdCBzcGFuID0gdHJhY2VyLnN0YXJ0U3BhbihuYW1lLCB7IGNoaWxkT2Y6IHBhcmVudFNwYW4gfSk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBzcGFuLnNldFRhZyhUYWdzLlNQQU5fS0lORCwgJ3NlcnZlcicpO1xuICAgICAgICAgICAgT2JqZWN0LmVudHJpZXMoUVRyYWNlci5jb25maWcuamFlZ2VyLnRhZ3MpLmZvckVhY2goKFtuYW1lLCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgICAgICBpZiAobmFtZSkge1xuICAgICAgICAgICAgICAgICAgICBzcGFuLnNldFRhZyhuYW1lLCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBmKHNwYW4pO1xuICAgICAgICAgICAgaWYgKHJlc3VsdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgc3Bhbi5zZXRUYWcoJ3Jlc3VsdCcsIHRvTG9nKHJlc3VsdCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3Bhbi5maW5pc2goKTtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zdCBjbGVhbmVkID0gY2xlYW5FcnJvcihlcnJvcik7XG4gICAgICAgICAgICBRVHJhY2VyLmZhaWxlZCh0cmFjZXIsIHNwYW4sIGNsZWFuZWQpO1xuICAgICAgICAgICAgc3Bhbi5maW5pc2goKTtcbiAgICAgICAgICAgIHRocm93IGNsZWFuZWQ7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=