"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.QTracer = void 0;

var _noop = require("opentracing/lib/noop");

var _opentracing = require("opentracing");

var _jaegerClient = require("jaeger-client");

var _utils = require("./utils");

class QTracer {
  static create(config) {
    QTracer.config = config;
    const endpoint = config.jaeger.endpoint;

    if (!endpoint) {
      return _noop.tracer;
    }

    return (0, _jaegerClient.initTracerFromEnv)({
      serviceName: config.jaeger.service,
      sampler: {
        type: 'const',
        param: 1
      },
      reporter: {
        collectorEndpoint: endpoint,
        logSpans: true
      }
    }, {
      logger: {
        info(msg) {
          console.log('INFO ', msg);
        },

        error(msg) {
          console.log('ERROR', msg);
        }

      }
    });
  }

  static extractParentSpan(tracer, req) {
    let ctx_src, ctx_frm;

    if (req.headers) {
      ctx_src = req.headers;
      ctx_frm = _opentracing.FORMAT_TEXT_MAP;
    } else {
      ctx_src = req.context;
      ctx_frm = _opentracing.FORMAT_BINARY;
    }

    return tracer.extract(ctx_frm, ctx_src);
  }

  static getParentSpan(tracer, context) {
    return context.tracerParentSpan;
  }

  static failed(tracer, span, error) {
    span.log({
      event: 'failed',
      payload: error
    });
  }

  static async trace(tracer, name, f, parentSpan) {
    const span = tracer.startSpan(name, {
      childOf: parentSpan
    });

    try {
      span.setTag(_opentracing.Tags.SPAN_KIND, 'server');
      Object.entries(QTracer.config.jaeger.tags).forEach(([name, value]) => {
        if (name) {
          span.setTag(name, value);
        }
      });
      const result = await f(span);

      if (result !== undefined) {
        span.setTag('result', result);
      }

      span.finish();
      return result;
    } catch (error) {
      const cleaned = (0, _utils.cleanError)(error);
      QTracer.failed(tracer, span, cleaned);
      span.finish();
      throw cleaned;
    }
  }

}

exports.QTracer = QTracer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NlcnZlci90cmFjZXIuanMiXSwibmFtZXMiOlsiUVRyYWNlciIsImNyZWF0ZSIsImNvbmZpZyIsImVuZHBvaW50IiwiamFlZ2VyIiwibm9vcFRyYWNlciIsInNlcnZpY2VOYW1lIiwic2VydmljZSIsInNhbXBsZXIiLCJ0eXBlIiwicGFyYW0iLCJyZXBvcnRlciIsImNvbGxlY3RvckVuZHBvaW50IiwibG9nU3BhbnMiLCJsb2dnZXIiLCJpbmZvIiwibXNnIiwiY29uc29sZSIsImxvZyIsImVycm9yIiwiZXh0cmFjdFBhcmVudFNwYW4iLCJ0cmFjZXIiLCJyZXEiLCJjdHhfc3JjIiwiY3R4X2ZybSIsImhlYWRlcnMiLCJGT1JNQVRfVEVYVF9NQVAiLCJjb250ZXh0IiwiRk9STUFUX0JJTkFSWSIsImV4dHJhY3QiLCJnZXRQYXJlbnRTcGFuIiwidHJhY2VyUGFyZW50U3BhbiIsImZhaWxlZCIsInNwYW4iLCJldmVudCIsInBheWxvYWQiLCJ0cmFjZSIsIm5hbWUiLCJmIiwicGFyZW50U3BhbiIsInN0YXJ0U3BhbiIsImNoaWxkT2YiLCJzZXRUYWciLCJUYWdzIiwiU1BBTl9LSU5EIiwiT2JqZWN0IiwiZW50cmllcyIsInRhZ3MiLCJmb3JFYWNoIiwidmFsdWUiLCJyZXN1bHQiLCJ1bmRlZmluZWQiLCJmaW5pc2giLCJjbGVhbmVkIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBR0E7O0FBQ0E7O0FBRUE7O0FBQ0E7O0FBRU8sTUFBTUEsT0FBTixDQUFjO0FBRWpCLFNBQU9DLE1BQVAsQ0FBY0MsTUFBZCxFQUF1QztBQUNuQ0YsSUFBQUEsT0FBTyxDQUFDRSxNQUFSLEdBQWlCQSxNQUFqQjtBQUNBLFVBQU1DLFFBQVEsR0FBR0QsTUFBTSxDQUFDRSxNQUFQLENBQWNELFFBQS9COztBQUNBLFFBQUksQ0FBQ0EsUUFBTCxFQUFlO0FBQ1gsYUFBT0UsWUFBUDtBQUNIOztBQUNELFdBQU8scUNBQWlCO0FBQ3BCQyxNQUFBQSxXQUFXLEVBQUVKLE1BQU0sQ0FB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TUFBQUEsSUFBSSxDQUFDbUIsTUFBTDtBQUNBLFlBQU1DLE9BQU47QUFDSDtBQUNKOztBQTVFZ0IiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBAZmxvd1xuXG5pbXBvcnQgdHlwZSB7IFFDb25maWcgfSBmcm9tIFwiLi9jb25maWdcIjtcbmltcG9ydCB7IHRyYWNlciBhcyBub29wVHJhY2VyIH0gZnJvbSBcIm9wZW50cmFjaW5nL2xpYi9ub29wXCI7XG5pbXBvcnQgeyBUcmFjZXIsIFRhZ3MsIEZPUk1BVF9URVhUX01BUCwgRk9STUFUX0JJTkFSWSwgU3BhbiwgU3BhbkNvbnRleHQgfSBmcm9tIFwib3BlbnRyYWNpbmdcIjtcblxuaW1wb3J0IHsgaW5pdFRyYWNlckZyb21FbnYgYXMgaW5pdEphZWdlclRyYWNlciB9IGZyb20gJ2phZWdlci1jbGllbnQnO1xuaW1wb3J0IHsgY2xlYW5FcnJvciB9IGZyb20gXCIuL3V0aWxzXCI7XG5cbmV4cG9ydCBjbGFzcyBRVHJhY2VyIHtcbiAgICBzdGF0aWMgY29uZmlnOiBRQ29uZmlnO1xuICAgIHN0YXRpYyBjcmVhdGUoY29uZmlnOiBRQ29uZmlnKTogVHJhY2VyIHtcbiAgICAgICAgUVRyYWNlci5jb25maWcgPSBjb25maWc7XG4gICAgICAgIGNvbnN0IGVuZHBvaW50ID0gY29uZmlnLmphZWdlci5lbmRwb2ludDtcbiAgICAgICAgaWYgKCFlbmRwb2ludCkge1xuICAgICAgICAgICAgcmV0dXJuIG5vb3BUcmFjZXI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGluaXRKYWVnZXJUcmFjZXIoe1xuICAgICAgICAgICAgc2VydmljZU5hbWU6IGNvbmZpZy5qYWVnZXIuc2VydmljZSxcbiAgICAgICAgICAgIHNhbXBsZXI6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnY29uc3QnLFxuICAgICAgICAgICAgICAgIHBhcmFtOiAxLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlcG9ydGVyOiB7XG4gICAgICAgICAgICAgICAgY29sbGVjdG9yRW5kcG9pbnQ6IGVuZHBvaW50LFxuICAgICAgICAgICAgICAgIGxvZ1NwYW5zOiB0cnVlLFxuICAgICAgICAgICAgfVxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBsb2dnZXI6IHtcbiAgICAgICAgICAgICAgICBpbmZvKG1zZykge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnSU5GTyAnLCBtc2cpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZXJyb3IobXNnKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdFUlJPUicsIG1zZyk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHN0YXRpYyBleHRyYWN0UGFyZW50U3Bhbih0cmFjZXI6IFRyYWNlciwgcmVxOiBhbnkpOiBhbnkge1xuICAgICAgICBsZXQgY3R4X3NyYywgY3R4X2ZybTtcbiAgICAgICAgaWYgKHJlcS5oZWFkZXJzKSB7XG4gICAgICAgICAgICBjdHhfc3JjID0gcmVxLmhlYWRlcnM7XG4gICAgICAgICAgICBjdHhfZnJtID0gRk9STUFUX1RFWFRfTUFQO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY3R4X3NyYyA9IHJlcS5jb250ZXh0O1xuICAgICAgICAgICAgY3R4X2ZybSA9IEZPUk1BVF9CSU5BUlk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRyYWNlci5leHRyYWN0KGN0eF9mcm0sIGN0eF9zcmMpO1xuICAgIH1cblxuICAgIHN0YXRpYyBnZXRQYXJlbnRTcGFuKHRyYWNlcjogVHJhY2VyLCBjb250ZXh0OiBhbnkpOiAoU3BhbkNvbnRleHQgfCB0eXBlb2YgdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBjb250ZXh0LnRyYWNlclBhcmVudFNwYW47XG4gICAgfVxuXG4gICAgc3RhdGljIGZhaWxlZCh0cmFjZXI6IFRyYWNlciwgc3BhbjogU3BhbiwgZXJyb3I6IGFueSkge1xuICAgICAgICBzcGFuLmxvZyh7IGV2ZW50OiAnZmFpbGVkJywgcGF5bG9hZDogZXJyb3IgfSk7XG4gICAgfVxuXG4gICAgc3RhdGljIGFzeW5jIHRyYWNlPFQ+KFxuICAgICAgICB0cmFjZXI6IFRyYWNlcixcbiAgICAgICAgbmFtZTogc3RyaW5nLFxuICAgICAgICBmOiAoc3BhbjogU3BhbikgPT4gUHJvbWlzZTxUPixcbiAgICAgICAgcGFyZW50U3Bhbj86IChTcGFuIHwgU3BhbkNvbnRleHQpXG4gICAgKTogUHJvbWlzZTxUPiB7XG4gICAgICAgIGNvbnN0IHNwYW4gPSB0cmFjZXIuc3RhcnRTcGFuKG5hbWUsIHsgY2hpbGRPZjogcGFyZW50U3BhbiB9KTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHNwYW4uc2V0VGFnKFRhZ3MuU1BBTl9LSU5ELCAnc2VydmVyJyk7XG4gICAgICAgICAgICBPYmplY3QuZW50cmllcyhRVHJhY2VyLmNvbmZpZy5qYWVnZXIudGFncykuZm9yRWFjaCgoW25hbWUsIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChuYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIHNwYW4uc2V0VGFnKG5hbWUsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGYoc3Bhbik7XG4gICAgICAgICAgICBpZiAocmVzdWx0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBzcGFuLnNldFRhZygncmVzdWx0JywgcmVzdWx0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNwYW4uZmluaXNoKCk7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc3QgY2xlYW5lZCA9IGNsZWFuRXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgUVRyYWNlci5mYWlsZWQodHJhY2VyLCBzcGFuLCBjbGVhbmVkKTtcbiAgICAgICAgICAgIHNwYW4uZmluaXNoKCk7XG4gICAgICAgICAgICB0aHJvdyBjbGVhbmVkO1xuICAgICAgICB9XG4gICAgfVxufVxuIl19