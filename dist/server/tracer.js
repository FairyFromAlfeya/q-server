"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.QTracer = exports.StatsTiming = exports.StatsGauge = exports.StatsCounter = exports.QStats = void 0;

var _config = require("./config");

var _noop = require("opentracing/lib/noop");

var _nodeStatsd = _interopRequireDefault(require("node-statsd"));

var _opentracing = require("opentracing");

var _jaegerClient = require("jaeger-client");

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function dummy(stat, value, sampleRate, tags) {}

function logStatsError(error) {
  console.log(`StatsD send failed: ${error.message}`);
}

const dummyStats = {
  configuredTags: [],
  increment: dummy,
  decrement: dummy,
  histogram: dummy,
  gauge: dummy,
  set: dummy,
  timing: dummy
};

class QStats {
  static create(server, configuredTags) {
    if (!server) {
      return dummyStats;
    }

    const hostPort = server.split(':');
    let stats = null;

    const withStats = f => {
      try {
        f(stats || (() => {
          const newStats = new _nodeStatsd.default(hostPort[0], hostPort[1], _config.STATS.prefix);
          newStats.socket.on("error", err => {
            logStatsError(err);
            stats = null;
          });
          stats = newStats;
          return newStats;
        })());
      } catch (e) {
        logStatsError(e);
        stats = null;
      }
    };

    return {
      increment(stat, value, sampleRate, tags) {
        withStats(stats => stats.increment(stat, value, sampleRate, tags));
      },

      decrement(stat, value, sampleRate, tags) {
        withStats(stats => stats.decrement(stat, value, sampleRate, tags));
      },

      histogram(stat, value, sampleRate, tags) {
        withStats(stats => stats.histogram(stat, value, sampleRate, tags));
      },

      gauge(stat, value, sampleRate, tags) {
        withStats(stats => stats.gauge(stat, value, sampleRate, tags));
      },

      set(stat, value, sampleRate, tags) {
        withStats(stats => stats.set(stat, value, sampleRate, tags));
      },

      timing(stat, value, sampleRate, tags) {
        withStats(stats => stats.timing(stat, value, sampleRate, tags));
      },

      configuredTags
    };
  }

  static combineTags(stats, tags) {
    return stats && stats.configuredTags && stats.configuredTags.length > 0 ? stats.configuredTags.concat(tags) : tags;
  }

}

exports.QStats = QStats;

class StatsCounter {
  constructor(stats, name, tags) {
    this.stats = stats;
    this.name = name;
    this.tags = QStats.combineTags(stats, tags);
  }

  increment() {
    this.stats.increment(this.name, 1, this.tags);
  }

}

exports.StatsCounter = StatsCounter;

class StatsGauge {
  constructor(stats, name, tags) {
    this.stats = stats;
    this.name = name;
    this.tags = QStats.combineTags(stats, tags);
    this.value = 0;
  }

  set(value) {
    this.value = value;
    this.stats.gauge(this.name, this.value, this.tags);
  }

  increment(delta = 1) {
    this.set(this.value + delta);
  }

  decrement(delta = 1) {
    this.set(this.value - delta);
  }

}

exports.StatsGauge = StatsGauge;

class StatsTiming {
  constructor(stats, name, tags) {
    this.stats = stats;
    this.name = name;
    this.tags = QStats.combineTags(stats, tags);
  }

  report(value) {
    this.stats.timing(this.name, value, this.tags);
  }

  start() {
    const start = Date.now();
    return () => {
      this.report(Date.now() - start);
    };
  }

}

exports.StatsTiming = StatsTiming;

function parseUrl(url) {
  const protocolSeparatorPos = url.indexOf('://');
  const protocolEnd = protocolSeparatorPos >= 0 ? protocolSeparatorPos + 3 : 0;
  const questionPos = url.indexOf('?', protocolEnd);
  const queryStart = questionPos >= 0 ? questionPos + 1 : url.length;
  const pathEnd = questionPos >= 0 ? questionPos : url.length;
  const pathSeparatorPos = url.indexOf('/', protocolEnd); // eslint-disable-next-line no-nested-ternary

  const pathStart = pathSeparatorPos >= 0 ? pathSeparatorPos < pathEnd ? pathSeparatorPos : pathEnd : questionPos >= 0 ? questionPos : url.length;
  const hostPort = url.substring(protocolEnd, pathStart).split(':');
  return {
    protocol: url.substring(0, protocolEnd),
    host: hostPort[0],
    port: hostPort[1] || '',
    path: url.substring(pathStart, pathEnd),
    query: url.substring(queryStart)
  };
}

class QTracer {
  static getJaegerConfig(config) {
    const endpoint = config.endpoint;

    if (!endpoint) {
      return null;
    }

    const parts = parseUrl(endpoint);
    return parts.protocol === '' ? {
      serviceName: config.service,
      sampler: {
        type: 'const',
        param: 1
      },
      reporter: {
        logSpans: true,
        agentHost: parts.host,
        agentPort: Number(parts.port)
      }
    } : {
      serviceName: config.service,
      sampler: {
        type: 'const',
        param: 1
      },
      reporter: {
        logSpans: true,
        collectorEndpoint: endpoint
      }
    };
  }

  static create(config) {
    QTracer.config = config;
    const jaegerConfig = QTracer.getJaegerConfig(config.jaeger);

    if (!jaegerConfig) {
      return _noop.tracer;
    }

    return (0, _jaegerClient.initTracerFromEnv)(jaegerConfig, {
      logger: {
        info(msg) {
          console.log('INFO ', msg);
        },

        error(msg) {
          console.log('ERROR', msg);
        }

      }
    });
  }

  static messageRootSpanContext(messageId) {
    if (!messageId) {
      return null;
    }

    const traceId = messageId.substr(0, 16);
    const spanId = messageId.substr(16, 16);
    return _jaegerClient.SpanContext.fromString(`${traceId}:${spanId}:0:1`);
  }

  static extractParentSpan(tracer, req) {
    let ctx_src, ctx_frm;

    if (req.headers) {
      ctx_src = req.headers;
      ctx_frm = _opentracing.FORMAT_TEXT_MAP;
    } else {
      ctx_src = req.context;
      ctx_frm = _opentracing.FORMAT_BINARY;
    }

    return tracer.extract(ctx_frm, ctx_src);
  }

  static getParentSpan(tracer, context) {
    return context.tracerParentSpan;
  }

  static failed(tracer, span, error) {
    span.log({
      event: 'failed',
      payload: (0, _utils.toLog)(error)
    });
  }

  static async trace(tracer, name, f, parentSpan) {
    const span = tracer.startSpan(name, {
      childOf: parentSpan
    });

    try {
      span.setTag(_opentracing.Tags.SPAN_KIND, 'server');
      Object.entries(QTracer.config.jaeger.tags).forEach(([name, value]) => {
        if (name) {
          span.setTag(name, value);
        }
      });
      const result = await f(span);

      if (result !== undefined) {
        span.setTag('result', (0, _utils.toLog)(result));
      }

      span.finish();
      return result;
    } catch (error) {
      const cleaned = (0, _utils.cleanError)(error);
      QTracer.failed(tracer, span, cleaned);
      span.finish();
      throw cleaned;
    }
  }

}

exports.QTracer = QTracer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,