"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.QDataBroker = void 0;

var _arangojs = require("arangojs");

class DataCache {
  async get(key) {
    return null;
  }

  async set(key, value) {}

}

class InMemoryCache extends DataCache {
  constructor() {
    super();
    this.items = new Map();
  }

  async get(key) {
    return this.items.get(key);
  }

  async set(key, value) {
    this.items.set(key, value);
  }

}

class QDataBroker {
  constructor(config) {}

  async query(params) {
    const queryDb = db => {
      return db.query(params.text, params.vars);
    };

    const queryHot = async () => {
      return queryDb(this.hot);
    };

    const queryCold = async () => {
      if (this.cold.length === 0) {
        return [];
      }

      const key = JSON.stringify({
        text: params.text,
        vars: params.vars,
        orderBy: params.orderBy
      });
      let docs = await this.cache.get(key);

      if (isNullOrUndefined(docs)) {
        const results = await Promise.all(this.cold.map(queryDb));
        docs = combineResults(results);
        await this.cache.set(key, docs);
      }

      return docs;
    };

    const results = await Promise.all([queryHot(), queryCold()]);
    return combineResults(results);
  }

}

exports.QDataBroker = QDataBroker;

function combineResults(results, orderBy) {
  const docs = collectDistinctDocs(results);
  docs.sort((a, b) => compareDocs(a, b, orderBy));
  return docs;
}

function collectDistinctDocs(source) {
  const distinctDocs = [];
  const distinctKeys = new Set();
  source.forEach(docs => {
    docs.forEach(doc => {
      if (!distinctKeys.has(doc._key)) {
        distinctDocs.push(doc);
        distinctKeys.add(doc._key);
      }
    });
  });
  return distinctDocs;
}

function compareDocs(a, b, orderBy) {
  for (let i = 0; i < orderBy.length; i += 1) {
    const field = orderBy[i];
    const path = field.path.split('.');
    const aValue = getValue(a, path, 0);
    const bValue = getValue(a, path, 0);
    let comparison = compareValues(aValue, bValue);

    if (comparison !== 0) {
      return field.direction === 'DESC' ? -comparison : comparison;
    }
  }

  return 0;
}

function getValue(value, path, pathIndex) {
  if (isNullOrUndefined(value) || pathIndex >= path.length) {
    return value;
  }

  return getValue(value[path[pathIndex]], path, pathIndex + 1);
}

function compareValues(a, b) {
  const aHasValue = !isNullOrUndefined(a);
  const bHasValue = !isNullOrUndefined(b);

  if (!aHasValue) {
    return bHasValue ? -1 : 0;
  }

  if (!bHasValue) {
    return 1;
  }

  return a === b ? 0 : a < b ? -1 : 0;
}

function isNullOrUndefined(v) {
  return v === null || typeof v === 'undefined';
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,