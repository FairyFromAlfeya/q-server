"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _arangochair = _interopRequireDefault(require("arangochair"));

var _arangojs = require("arangojs");

var _arangoCollection = require("./arango-collection");

var _auth = require("./auth");

var _config = require("./config");

var _logs = _interopRequireDefault(require("./logs"));

var _resolversGenerated = require("./resolvers-generated");

var _opentracing = require("opentracing");

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
 * Copyright 2018-2020 TON DEV SOLUTIONS LTD.
 *
 * Licensed under the SOFTWARE EVALUATION License (the "License"); you may not use
 * this file except in compliance with the License.  You may obtain a copy of the
 * License at:
 *
 * http://www.ton.dev/licenses
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific TON DEV software governing permissions and
 * limitations under the License.
 */
class Arango {
  constructor(config, logs, auth, tracer) {
    this.config = config;
    this.log = logs.create('db');
    this.auth = auth;
    this.serverAddress = config.database.server;
    this.databaseName = config.database.name;
    this.tracer = tracer;

    const createDb = config => {
      const db = new _arangojs.Database({
        url: `${(0, _config.ensureProtocol)(config.server, 'http')}`,
        agentOptions: {
          maxSockets: config.maxSockets
        }
      });
      db.useDatabase(config.name);

      if (config.auth) {
        const authParts = config.auth.split(':');
        db.useBasicAuth(authParts[0], authParts.slice(1).join(':'));
      }

      return db;
    };

    this.db = createDb(config.database);
    const slowDb = createDb(config.slowDatabase);
    this.collections = [];
    this.collectionsByName = new Map();

    const addCollection = (name, docType) => {
      const collection = new _arangoCollection.Collection(name, docType, logs, this.auth, this.tracer, this.db, slowDb);
      this.collections.push(collection);
      this.collectionsByName.set(name, collection);
      return collection;
    };

    this.transactions = addCollection('transactions', _resolversGenerated.Transaction);
    this.messages = addCollection('messages', _resolversGenerated.Message);
    this.accounts = addCollection('accounts', _resolversGenerated.Account);
    this.blocks = addCollection('blocks', _resolversGenerated.Block);
    this.blocks_signatures = addCollection('blocks_signatures', _resolversGenerated.BlockSignatures);
  }

  start() {
    const listenerUrl = `${(0, _config.ensureProtocol)(this.serverAddress, 'http')}/${this.databaseName}`;
    this.listener = new _arangochair.default(listenerUrl);

    if (this.config.database.auth) {
      const userPassword = Buffer.from(this.config.database.auth).toString('base64');
      this.listener.req.opts.headers['Authorization'] = `Basic ${userPassword}`;
    }

    this.collections.forEach(collection => {
      const name = collection.name;
      this.listener.subscribe({
        collection: name
      });
      this.listener.on(name, (docJson, type) => {
        if (type === 'insert/update') {
          this.onDocumentInsertOrUpdate(name, JSON.parse(docJson));
        }
      });
    });
    this.listener.start();
    this.log.debug('LISTEN', listenerUrl);
    this.listener.on('error', err => {
      this.log.error('FAILED', 'LISTEN', `${err}`);
      setTimeout(() => this.listener.start(), this.config.listener.restartTimeout);
    });
  }

  onDocumentInsertOrUpdate(name, doc) {
    const collection = this.collectionsByName.get(name);

    if (collection) {
      collection.onDocumentInsertOrUpdate(doc);
    }
  }

  async query(query, bindVars) {
    return (0, _utils.wrap)(this.log, 'QUERY', {
      query,
      bindVars
    }, async () => {
      const cursor = await this.db.query({
        query,
        bindVars
      });
      return cursor.all();
    });
  }

  async finishOperations(operationIds) {
    let count = 0;
    this.collections.forEach(x => count += x.finishOperations(operationIds));
    return count;
  }

}

exports.default = Arango;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,