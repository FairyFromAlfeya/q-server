"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _arangochair = _interopRequireDefault(require("arangochair"));

var _arangojs = require("arangojs");

var _arangoCollection = require("./arango-collection");

var _auth = require("./auth");

var _config = require("./config");

var _logs = _interopRequireDefault(require("./logs"));

var _resolversGenerated = require("./resolvers-generated");

var _opentracing = require("opentracing");

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
 * Copyright 2018-2020 TON DEV SOLUTIONS LTD.
 *
 * Licensed under the SOFTWARE EVALUATION License (the "License"); you may not use
 * this file except in compliance with the License.  You may obtain a copy of the
 * License at:
 *
 * http://www.ton.dev/licenses
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific TON DEV software governing permissions and
 * limitations under the License.
 */
class Arango {
  constructor(config, logs, auth, tracer) {
    this.config = config;
    this.log = logs.create('db');
    this.auth = auth;
    this.serverAddress = config.database.server;
    this.databaseName = config.database.name;
    this.tracer = tracer;

    const createDb = config => {
      const db = new _arangojs.Database({
        url: `${(0, _config.ensureProtocol)(config.server, 'http')}`,
        agentOptions: {
          maxSockets: config.maxSockets
        }
      });
      db.useDatabase(config.name);

      if (config.auth) {
        const authParts = config.auth.split(':');
        db.useBasicAuth(authParts[0], authParts.slice(1).join(':'));
      }

      return db;
    };

    this.db = createDb(config.database);
    const slowDb = createDb(config.slowDatabase);
    this.collections = [];
    this.collectionsByName = new Map();

    const addCollection = (name, docType) => {
      const collection = new _arangoCollection.Collection(name, docType, logs, this.auth, this.tracer, this.db, slowDb);
      this.collections.push(collection);
      this.collectionsByName.set(name, collection);
      return collection;
    };

    this.transactions = addCollection('transactions', _resolversGenerated.Transaction);
    this.messages = addCollection('messages', _resolversGenerated.Message);
    this.accounts = addCollection('accounts', _resolversGenerated.Account);
    this.blocks = addCollection('blocks', _resolversGenerated.Block);
    this.blocks_signatures = addCollection('blocks_signatures', _resolversGenerated.BlockSignatures);
  }

  start() {
    const listenerUrl = `${(0, _config.ensureProtocol)(this.serverAddress, 'http')}/${this.databaseName}`;
    this.listener = new _arangochair.default(listenerUrl);

    if (this.config.database.auth) {
      const userPassword = Buffer.from(this.config.database.auth).toString('base64');
      this.listener.req.opts.headers['Authorization'] = `Basic ${userPassword}`;
    }

    this.collections.forEach(collection => {
      const name = collection.name;
      this.listener.subscribe({
        collection: name
      });
      this.listener.on(name, (docJson, type) => {
        if (type === 'insert/update' || type === 'insert' || type === 'update') {
          this.onDocumentInsertOrUpdate(name, docJson);
        }
      });
    });
    this.listener.start();
    this.log.debug('LISTEN', listenerUrl);
    this.listener.on('error', (err, status, headers, body) => {
      let error = err;

      try {
        error = JSON.parse(body);
      } catch {}

      this.log.error('FAILED', 'LISTEN', `${err}`, error);
      setTimeout(() => this.listener.start(), this.config.listener.restartTimeout);
    });
  }

  onDocumentInsertOrUpdate(name, doc) {
    const collection = this.collectionsByName.get(name);

    if (collection) {
      collection.onDocumentInsertOrUpdate(doc);
    }
  }

  async query(query, bindVars) {
    return (0, _utils.wrap)(this.log, 'QUERY', {
      query,
      bindVars
    }, async () => {
      const cursor = await this.db.query({
        query,
        bindVars
      });
      return cursor.all();
    });
  }

  async finishOperations(operationIds) {
    let count = 0;
    this.collections.forEach(x => count += x.finishOperations(operationIds));
    return count;
  }

}

exports.default = Arango;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NlcnZlci9hcmFuZ28uanMiXSwibmFtZXMiOlsiQXJhbmdvIiwiY29uc3RydWN0b3IiLCJjb25maWciLCJsb2dzIiwiYXV0aCIsInRyYWNlciIsImxvZyIsImNyZWF0ZSIsInNlcnZlckFkZHJlc3MiLCJkYXRhYmFzZSIsInNlcnZlciIsImRhdGFiYXNlTmFtZSIsIm5hbWUiLCJjcmVhdGVEYiIsImRiIiwiRGF0YWJhc2UiLCJ1cmwiLCJhZ2VudE9wdGlvbnMiLCJtYXhTb2NrZXRzIiwidXNlRGF0YWJhc2UiLCJhdXRoUGFydHMiLCJzcGxpdCIsInVzZUJhc2ljQXV0aCIsInNsaWNlIiwiam9pbiIsInNsb3dEYiIsInNsb3dEYXRhYmFzZSIsImNvbGxlY3Rpb25zIiwiY29sbGVjdGlvbnNCeU5hbWUiLCJNYXAiLCJhZGRDb2xsZWN0aW9uIiwiZG9jVHlwZSIsImNvbGxlY3Rpb24iLCJDb2xsZWN0aW9uIiwicHVzaCIsInNldCIsInRyYW5zYWN0aW9ucyIsIlRyYW5zYWN0aW9uIiwibWVzc2FnZXMiLCJNZXNzYWdlIiwiYWNjb3VudHMiLCJBY2NvdW50IiwiYmxvY2tzIiwiQmxvY2siLCJibG9ja3Nfc2lnbmF0dXJlcyIsIkJsb2NrU2lnbmF0dXJlcyIsInN0YXJ0IiwibGlzdGVuZXJVcmwiLCJsaXN0ZW5lciIsImFyYW5nb2NoYWlyIiwidXNlclBhc3N3b3JkIiwiQnVmZmVyIiwiZnJvbSIsInRvU3RyaW5nIiwicmVxIiwib3B0cyIsImhlYWRlcnMiLCJmb3JFYWNoIiwic3Vic2NyaWJlIiwib24iLCJkb2NKc29uIiwidHlwZSIsIm9uRG9jdW1lbnRJbnNlcnRPclVwZGF0ZSIsImRlYnVnIiwiZXJyIiwic3RhdHVzIiwiYm9keSIsImVycm9yIiwiSlNPTiIsInBhcnNlIiwic2V0VGltZW91dCIsInJlc3RhcnRUaW1lb3V0IiwiZG9jIiwiZ2V0IiwicXVlcnkiLCJiaW5kVmFycyIsImN1cnNvciIsImFsbCIsImZpbmlzaE9wZXJhdGlvbnMiLCJv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QUF1QkMsWUFBdkIsRUFBbUU7QUFDL0QsUUFBSUMsS0FBSyxHQUFHLENBQVo7QUFDQSxTQUFLckQsV0FBTCxDQUFpQjhCLE9BQWpCLENBQXlCd0IsQ0FBQyxJQUFLRCxLQUFLLElBQUlDLENBQUMsQ0FBQ0gsZ0JBQUYsQ0FBbUJDLFlBQW5CLENBQXhDO0FBQ0EsV0FBT0MsS0FBUDtBQUNIOztBQS9IdUIiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IDIwMTgtMjAyMCBUT04gREVWIFNPTFVUSU9OUyBMVEQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIFNPRlRXQVJFIEVWQUxVQVRJT04gTGljZW5zZSAodGhlIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlXG4gKiB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGVcbiAqIExpY2Vuc2UgYXQ6XG4gKlxuICogaHR0cDovL3d3dy50b24uZGV2L2xpY2Vuc2VzXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBUT04gREVWIHNvZnR3YXJlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbi8vIEBmbG93XG5cbmltcG9ydCBhcmFuZ29jaGFpciBmcm9tICdhcmFuZ29jaGFpcic7XG5pbXBvcnQgeyBEYXRhYmFzZSB9IGZyb20gJ2FyYW5nb2pzJztcbmltcG9ydCB7IENvbGxlY3Rpb259IGZyb20gXCIuL2FyYW5nby1jb2xsZWN0aW9uXCI7XG5pbXBvcnQgeyBBdXRoIH0gZnJvbSBcIi4vYXV0aFwiO1xuaW1wb3J0IHR5cGUgeyBRQ29uZmlnLCBRRGJDb25maWcgfSBmcm9tICcuL2NvbmZpZydcbmltcG9ydCB7IGVuc3VyZVByb3RvY29sIH0gZnJvbSAnLi9jb25maWcnO1xuaW1wb3J0IHR5cGUgeyBRTG9nIH0gZnJvbSAnLi9sb2dzJztcbmltcG9ydCBRTG9ncyBmcm9tICcuL2xvZ3MnXG5pbXBvcnQgdHlwZSB7IFFUeXBlIH0gZnJvbSAnLi9kYi10eXBlcyc7XG5pbXBvcnQgeyBBY2NvdW50LCBCbG9jaywgQmxvY2tTaWduYXR1cmVzLCBNZXNzYWdlLCBUcmFuc2FjdGlvbiB9IGZyb20gJy4vcmVzb2x2ZXJzLWdlbmVyYXRlZCc7XG5pbXBvcnQgeyBUcmFjZXIgfSBmcm9tIFwib3BlbnRyYWNpbmdcIjtcbmltcG9ydCB7IHdyYXAgfSBmcm9tIFwiLi91dGlsc1wiO1xuXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFyYW5nbyB7XG4gICAgY29uZmlnOiBRQ29uZmlnO1xuICAgIGxvZzogUUxvZztcbiAgICBzZXJ2ZXJBZGRyZXNzOiBzdHJpbmc7XG4gICAgZGF0YWJhc2VOYW1lOiBzdHJpbmc7XG4gICAgZGI6IERhdGFiYXNlO1xuXG4gICAgYXV0aDogQXV0aDtcbiAgICB0cmFjZXI6IFRyYWNlcjtcblxuICAgIHRyYW5zYWN0aW9uczogQ29sbGVjdGlvbjtcbiAgICBtZXNzYWdlczogQ29sbGVjdGlvbjtcbiAgICBhY2NvdW50czogQ29sbGVjdGlvbjtcbiAgICBibG9ja3M6IENvbGxlY3Rpb247XG4gICAgYmxvY2tzX3NpZ25hdHVyZXM6IENvbGxlY3Rpb247XG5cbiAgICBjb2xsZWN0aW9uczogQ29sbGVjdGlvbltdO1xuICAgIGNvbGxlY3Rpb25zQnlOYW1lOiBNYXA8c3RyaW5nLCBDb2xsZWN0aW9uPjtcblxuICAgIGxpc3RlbmVyOiBhbnk7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgY29uZmlnOiBRQ29uZmlnLFxuICAgICAgICBsb2dzOiBRTG9ncyxcbiAgICAgICAgYXV0aDogQXV0aCxcbiAgICAgICAgdHJhY2VyOiBUcmFjZXIsXG4gICAgKSB7XG4gICAgICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xuICAgICAgICB0aGlzLmxvZyA9IGxvZ3MuY3JlYXRlKCdkYicpO1xuICAgICAgICB0aGlzLmF1dGggPSBhdXRoO1xuICAgICAgICB0aGlzLnNlcnZlckFkZHJlc3MgPSBjb25maWcuZGF0YWJhc2Uuc2VydmVyO1xuICAgICAgICB0aGlzLmRhdGFiYXNlTmFtZSA9IGNvbmZpZy5kYXRhYmFzZS5uYW1lO1xuICAgICAgICB0aGlzLnRyYWNlciA9IHRyYWNlcjtcblxuICAgICAgICBjb25zdCBjcmVhdGVEYiA9IChjb25maWc6IFFEYkNvbmZpZyk6IERhdGFiYXNlID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGRiID0gbmV3IERhdGFiYXNlKHtcbiAgICAgICAgICAgICAgICB1cmw6IGAke2Vuc3VyZVByb3RvY29sKGNvbmZpZy5zZXJ2ZXIsICdodHRwJyl9YCxcbiAgICAgICAgICAgICAgICBhZ2VudE9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICAgICAgbWF4U29ja2V0czogY29uZmlnLm1heFNvY2tldHMsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZGIudXNlRGF0YWJhc2UoY29uZmlnLm5hbWUpO1xuICAgICAgICAgICAgaWYgKGNvbmZpZy5hdXRoKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYXV0aFBhcnRzID0gY29uZmlnLmF1dGguc3BsaXQoJzonKTtcbiAgICAgICAgICAgICAgICBkYi51c2VCYXNpY0F1dGgoYXV0aFBhcnRzWzBdLCBhdXRoUGFydHMuc2xpY2UoMSkuam9pbignOicpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBkYjtcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmRiID0gY3JlYXRlRGIoY29uZmlnLmRhdGFiYXNlKTtcbiAgICAgICAgY29uc3Qgc2xvd0RiID0gY3JlYXRlRGIoY29uZmlnLnNsb3dEYXRhYmFzZSk7XG5cbiAgICAgICAgdGhpcy5jb2xsZWN0aW9ucyA9IFtdO1xuICAgICAgICB0aGlzLmNvbGxlY3Rpb25zQnlOYW1lID0gbmV3IE1hcCgpO1xuXG4gICAgICAgIGNvbnN0IGFkZENvbGxlY3Rpb24gPSAobmFtZTogc3RyaW5nLCBkb2NUeXBlOiBRVHlwZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgY29sbGVjdGlvbiA9IG5ldyBDb2xsZWN0aW9uKFxuICAgICAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICAgICAgZG9jVHlwZSxcbiAgICAgICAgICAgICAgICBsb2dzLFxuICAgICAgICAgICAgICAgIHRoaXMuYXV0aCxcbiAgICAgICAgICAgICAgICB0aGlzLnRyYWNlcixcbiAgICAgICAgICAgICAgICB0aGlzLmRiLFxuICAgICAgICAgICAgICAgIHNsb3dEYixcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB0aGlzLmNvbGxlY3Rpb25zLnB1c2goY29sbGVjdGlvbik7XG4gICAgICAgICAgICB0aGlzLmNvbGxlY3Rpb25zQnlOYW1lLnNldChuYW1lLCBjb2xsZWN0aW9uKTtcbiAgICAgICAgICAgIHJldHVybiBjb2xsZWN0aW9uO1xuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMudHJhbnNhY3Rpb25zID0gYWRkQ29sbGVjdGlvbigndHJhbnNhY3Rpb25zJywgVHJhbnNhY3Rpb24pO1xuICAgICAgICB0aGlzLm1lc3NhZ2VzID0gYWRkQ29sbGVjdGlvbignbWVzc2FnZXMnLCBNZXNzYWdlKTtcbiAgICAgICAgdGhpcy5hY2NvdW50cyA9IGFkZENvbGxlY3Rpb24oJ2FjY291bnRzJywgQWNjb3VudCk7XG4gICAgICAgIHRoaXMuYmxvY2tzID0gYWRkQ29sbGVjdGlvbignYmxvY2tzJywgQmxvY2spO1xuICAgICAgICB0aGlzLmJsb2Nrc19zaWduYXR1cmVzID0gYWRkQ29sbGVjdGlvbignYmxvY2tzX3NpZ25hdHVyZXMnLCBCbG9ja1NpZ25hdHVyZXMpO1xuICAgIH1cblxuICAgIHN0YXJ0KCkge1xuICAgICAgICBjb25zdCBsaXN0ZW5lclVybCA9IGAke2Vuc3VyZVByb3RvY29sKHRoaXMuc2VydmVyQWRkcmVzcywgJ2h0dHAnKX0vJHt0aGlzLmRhdGFiYXNlTmFtZX1gO1xuICAgICAgICB0aGlzLmxpc3RlbmVyID0gbmV3IGFyYW5nb2NoYWlyKGxpc3RlbmVyVXJsKTtcblxuICAgICAgICBpZiAodGhpcy5jb25maWcuZGF0YWJhc2UuYXV0aCkge1xuICAgICAgICAgICAgY29uc3QgdXNlclBhc3N3b3JkID0gQnVmZmVyLmZyb20odGhpcy5jb25maWcuZGF0YWJhc2UuYXV0aCkudG9TdHJpbmcoJ2Jhc2U2NCcpO1xuICAgICAgICAgICAgdGhpcy5saXN0ZW5lci5yZXEub3B0cy5oZWFkZXJzWydBdXRob3JpemF0aW9uJ10gPSBgQmFzaWMgJHt1c2VyUGFzc3dvcmR9YDtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY29sbGVjdGlvbnMuZm9yRWFjaChjb2xsZWN0aW9uID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG5hbWUgPSBjb2xsZWN0aW9uLm5hbWU7XG4gICAgICAgICAgICB0aGlzLmxpc3RlbmVyLnN1YnNjcmliZSh7IGNvbGxlY3Rpb246IG5hbWUgfSk7XG4gICAgICAgICAgICB0aGlzLmxpc3RlbmVyLm9uKG5hbWUsIChkb2NKc29uLCB0eXBlKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGUgPT09ICdpbnNlcnQvdXBkYXRlJyB8fCB0eXBlID09PSAnaW5zZXJ0JyB8fCB0eXBlID09PSAndXBkYXRlJykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm9uRG9jdW1lbnRJbnNlcnRPclVwZGF0ZShuYW1lLCBkb2NKc29uKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubGlzdGVuZXIuc3RhcnQoKTtcbiAgICAgICAgdGhpcy5sb2cuZGVidWcoJ0xJU1RFTicsIGxpc3RlbmVyVXJsKTtcbiAgICAgICAgdGhpcy5saXN0ZW5lci5vbignZXJyb3InLCAoZXJyLCBzdGF0dXMsIGhlYWRlcnMsIGJvZHkpID0+IHtcbiAgICAgICAgICAgIGxldCBlcnJvciA9IGVycjtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZXJyb3IgPSBKU09OLnBhcnNlKGJvZHkpO1xuICAgICAgICAgICAgfSBjYXRjaCB7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmxvZy5lcnJvcignRkFJTEVEJywgJ0xJU1RFTicsIGAke2Vycn1gLCBlcnJvcik7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMubGlzdGVuZXIuc3RhcnQoKSwgdGhpcy5jb25maWcubGlzdGVuZXIucmVzdGFydFRpbWVvdXQpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBvbkRvY3VtZW50SW5zZXJ0T3JVcGRhdGUobmFtZTogc3RyaW5nLCBkb2M6IGFueSkge1xuICAgICAgICBjb25zdCBjb2xsZWN0aW9uOiAoQ29sbGVjdGlvbiB8IHR5cGVvZiB1bmRlZmluZWQpID0gdGhpcy5jb2xsZWN0aW9uc0J5TmFtZS5nZXQobmFtZSk7XG4gICAgICAgIGlmIChjb2xsZWN0aW9uKSB7XG4gICAgICAgICAgICBjb2xsZWN0aW9uLm9uRG9jdW1lbnRJbnNlcnRPclVwZGF0ZShkb2MpO1xuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICBhc3luYyBxdWVyeShxdWVyeTogYW55LCBiaW5kVmFyczogYW55KSB7XG4gICAgICAgIHJldHVybiB3cmFwKHRoaXMubG9nLCAnUVVFUlknLCB7IHF1ZXJ5LCBiaW5kVmFycyB9LCBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBjdXJzb3IgPSBhd2FpdCB0aGlzLmRiLnF1ZXJ5KHsgcXVlcnksIGJpbmRWYXJzIH0pO1xuICAgICAgICAgICAgcmV0dXJuIGN1cnNvci5hbGwoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgYXN5bmMgZmluaXNoT3BlcmF0aW9ucyhvcGVyYXRpb25JZHM6IFNldDxzdHJpbmc+KTogUHJvbWlzZTxudW1iZXI+IHtcbiAgICAgICAgbGV0IGNvdW50ID0gMDtcbiAgICAgICAgdGhpcy5jb2xsZWN0aW9ucy5mb3JFYWNoKHggPT4gKGNvdW50ICs9IHguZmluaXNoT3BlcmF0aW9ucyhvcGVyYXRpb25JZHMpKSk7XG4gICAgICAgIHJldHVybiBjb3VudDtcbiAgICB9XG59XG4iXX0=