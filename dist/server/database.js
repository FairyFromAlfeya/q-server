"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _arangochair = _interopRequireDefault(require("arangochair"));

var _arangojs = require("arangojs");

var _collection = require("./collection");

var _auth = require("./auth");

var _config = require("./config");

var _logs = _interopRequireDefault(require("./logs"));

var _resolversGenerated = require("./resolvers-generated");

var _opentracing = require("opentracing");

var _tracer = require("./tracer");

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
 * Copyright 2018-2020 TON DEV SOLUTIONS LTD.
 *
 * Licensed under the SOFTWARE EVALUATION License (the "License"); you may not use
 * this file except in compliance with the License.  You may obtain a copy of the
 * License at:
 *
 * http://www.ton.dev/licenses
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific TON DEV software governing permissions and
 * limitations under the License.
 */
class QDatabase {
  constructor(config, logs, auth, tracer, stats) {
    this.config = config;
    this.log = logs.create('db');
    this.auth = auth;
    this.serverAddress = config.database.server;
    this.databaseName = config.database.name;
    this.tracer = tracer;
    this.statPostCount = new _tracer.StatsCounter(stats, _config.STATS.post.count, []);
    this.statPostFailed = new _tracer.StatsCounter(stats, _config.STATS.post.failed, []);

    const createDb = config => {
      const db = new _arangojs.Database({
        url: `${(0, _config.ensureProtocol)(config.server, 'http')}`,
        agentOptions: {
          maxSockets: config.maxSockets
        }
      });
      db.useDatabase(config.name);

      if (config.auth) {
        const authParts = config.auth.split(':');
        db.useBasicAuth(authParts[0], authParts.slice(1).join(':'));
      }

      return db;
    };

    this.db = createDb(config.database);
    const slowDb = createDb(config.slowDatabase);
    this.collections = [];
    this.collectionsByName = new Map();

    const addCollection = (name, docType) => {
      const collection = new _collection.QCollection(name, docType, logs, this.auth, this.tracer, stats, this.db, slowDb, config.isTests || false);
      this.collections.push(collection);
      this.collectionsByName.set(name, collection);
      return collection;
    };

    this.transactions = addCollection('transactions', _resolversGenerated.Transaction);
    this.messages = addCollection('messages', _resolversGenerated.Message);
    this.accounts = addCollection('accounts', _resolversGenerated.Account);
    this.blocks = addCollection('blocks', _resolversGenerated.Block);
    this.blocks_signatures = addCollection('blocks_signatures', _resolversGenerated.BlockSignatures);
  }

  start() {
    const listenerUrl = `${(0, _config.ensureProtocol)(this.serverAddress, 'http')}/${this.databaseName}`;
    this.listener = new _arangochair.default(listenerUrl);

    if (this.config.database.auth) {
      const userPassword = Buffer.from(this.config.database.auth).toString('base64');
      this.listener.req.opts.headers['Authorization'] = `Basic ${userPassword}`;
    }

    this.collections.forEach(collection => {
      const name = collection.name;
      this.listener.subscribe({
        collection: name
      });
      this.listener.on(name, (docJson, type) => {
        if (type === 'insert/update' || type === 'insert' || type === 'update') {
          this.onDocumentInsertOrUpdate(name, docJson);
        }
      });
    });
    this.listener.start();
    this.log.debug('LISTEN', listenerUrl);
    this.listener.on('error', (err, status, headers, body) => {
      let error = err;

      try {
        error = JSON.parse(body);
      } catch {}

      this.log.error('FAILED', 'LISTEN', `${err}`, error);
      setTimeout(() => this.listener.start(), this.config.listener.restartTimeout);
    });
  }

  onDocumentInsertOrUpdate(name, doc) {
    const collection = this.collectionsByName.get(name);

    if (collection) {
      collection.onDocumentInsertOrUpdate(doc);
    }
  }

  dropCachedDbInfo() {
    this.collections.forEach(x => x.dropCachedDbInfo());
  }

  async query(query, bindVars) {
    return (0, _utils.wrap)(this.log, 'QUERY', {
      query,
      bindVars
    }, async () => {
      const cursor = await this.db.query({
        query,
        bindVars
      });
      return cursor.all();
    });
  }

  async finishOperations(operationIds) {
    let count = 0;
    this.collections.forEach(x => count += x.finishOperations(operationIds));
    return count;
  }

}

exports.default = QDatabase;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NlcnZlci9kYXRhYmFzZS5qcyJdLCJuYW1lcyI6WyJRRGF0YWJhc2UiLCJjb25zdHJ1Y3RvciIsImNvbmZpZyIsImxvZ3MiLCJhdXRoIiwidHJhY2VyIiwic3RhdHMiLCJsb2ciLCJjcmVhdGUiLCJzZXJ2ZXJBZGRyZXNzIiwiZGF0YWJhc2UiLCJzZXJ2ZXIiLCJkYXRhYmFzZU5hbWUiLCJuYW1lIiwic3RhdFBvc3RDb3VudCIsIlN0YXRzQ291bnRlciIsIlNUQVRTIiwicG9zdCIsImNvdW50Iiwic3RhdFBvc3RGYWlsZWQiLCJmYWlsZWQiLCJjcmVhdGVEYiIsImRiIiwiRGF0YWJhc2UiLCJ1cmwiLCJhZ2VudE9wdGlvbnMiLCJtYXhTb2NrZXRzIiwidXNlRGF0YWJhc2UiLCJhdXRoUGFydHMiLCJzcGxpdCIsInVzZUJhc2ljQXV0aCIsInNsaWNlIiwiam9pbiIsInNsb3dEYiIsInNsb3dEYXRhYmFzZSIsImNvbGxlY3Rpb25zIiwiY29sbGVjdGlvbnNCeU5hbWUiLCJNYXAiLCJhZGRDb2xsZWN0aW9uIiwiZG9jVHlwZSIsImNvbGxlY3Rpb24iLCJRQ29sbGVjdGlvbiIsImlzVGVzdHMiLCJwdXNoIiwic2V0IiwidHJhbnNhY3Rpb25zIiwiVHJhbnNhY3Rpb24iLCJtZXNzYWdlcyIsIk1lc3NhZ2UiLCJhY2NvdW50cyIsIkFjY291bnQiLCJibG9ja3MiLCJCbG9jayIsImJsb2Nrc19zaWduYXR1cmVzIiwiQmxvY2tTaWduYXR1cmVzIiwic3RhcnQiLCJsaXN0ZW5lclVybCIsImxpc3RlbmVyIiwiYXJhbmdvY2hhaXIiLCJ1c2VyUGFzc3dvcmQiLCJCdWZmZXIiLCJmcm9tIiwidG9TdHJpbmciLCJyZXEiLCJvcHRzIiwiaGVhZGVycyIsImZvckVhY2giLCJzdWJzY3JpYmUiLCJvbiIsImRvY0pzb24iLCJ0eXBlIiwib25Eb2N1bWVudEluc2VydE9yVXBkYXRlIiwiZGVidWciLCJlcnIiLCJzdGF0dXMiLCJib2R5IiwiZXJyb3IiLCJKU09OIiwicGFyc2UiLCJzZXRUaW1lb3V0IiwicmVzdGFydFRpbWVvdXQiLCJkb2MiLCJnZXQiLCJkcm9wQ2FjaGVkRGJJbmZvIiwieCIsInF1ZXJ5IiwiYmluZFZhcnMiLCJjdXJzb3IiLCJhbGwiLCJmaW5pc2hPcGVyYXRpb25zIiwib3BlcmF0aW9uSWRzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBa0JBOztBQUNBOztBQUNBOztBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUNBOztBQUNBOztBQUVBOzs7O0FBL0JBOzs7Ozs7Ozs7Ozs7Ozs7QUFrQ2UsTUFBTUEsU0FBTixDQUFnQjtBQXVCM0JDLEVBQUFBLFdBQVcsQ0FDUEMsTUFETyxFQUVQQyxJQUZPLEVBR1BDLElBSE8sRUFJUEMsTUFKTyxFQUtQQyxLQUxPLEVBTVQ7QUFDRSxTQUFLSixNQUFMLEdBQWNBLE1BQWQ7QUFDQSxTQUFLSyxHQUFMLEdBQVdKLElBQUksQ0FBQ0ssTUFBTCxDQUFZLElBQVosQ0FBWDtBQUNBLFNBQUtKLElBQUwsR0FBWUEsSUFBWjtBQUNBLFNBQUtLLGFBQUwsR0FBcUJQLE1BQU0sQ0FBQ1EsUUFBUCxDQUFnQkMsTUFBckM7QUFDQSxTQUFLQyxZQUFMLEdBQW9CVixNQUFNLENBQUNRLFFBQVAsQ0FBZ0JHLElBQXBDO0FBQ0EsU0FBS1IsTUFBTCxHQUFjQSxNQUFkO0FBRUEsU0FBS1MsYUFBTCxHQUFxQixJQUFJQyxvQkFBSixDQUFpQlQsS0FBakIsRUFBd0JVLGNBQU1DLElBQU4sQ0FBV0MsS0FBbkMsRUFBMEMsRUFBMUMsQ0FBckI7QUFDQSxTQUFLQyxjQUFMLEdBQXNCLElBQUlKLG9CQUFKLENBQWlCVCxLQUFqQixFQUF3QlUsY0FBTUMsSUFBTixDQUFXRyxNQUFuQyxFQUEyQyxFQUEzQyxDQUF0Qjs7QUFFQSxVQUFNQyxRQUFRLEdBQUluQixNQUFELElBQWlDO0FBQzlDLFlBQU1vQixFQUFFLEdBQUcsSUFBSUMsa0JBQUosQ0FBYTtBQUNwQkMsUUFBQUEsR0FBRyxFQUFHLEdBQUUsNEJBQWV0QixNQUFNLENBQUNTLE1BQXRC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SixFQUFnQjtBQUNaQSxNQUFBQSxVQUFVLENBQUMrQix3QkFBWCxDQUFvQ1UsR0FBcEM7QUFDSDtBQUNKOztBQUdERSxFQUFBQSxnQkFBZ0IsR0FBRztBQUNmLFNBQUtoRCxXQUFMLENBQWlCK0IsT0FBakIsQ0FBMEJrQixDQUFELElBQW9CQSxDQUFDLENBQUNELGdCQUFGLEVBQTdDO0FBQ0g7O0FBRUQsUUFBTUUsS0FBTixDQUFZQSxLQUFaLEVBQXdCQyxRQUF4QixFQUF1QztBQUNuQyxXQUFPLGlCQUFLLEtBQUsvRSxHQUFWLEVBQWUsT0FBZixFQUF3QjtBQUFFOEUsTUFBQUEsS0FBRjtBQUFTQyxNQUFBQTtBQUFULEtBQXhCLEVBQTZDLFlBQVk7QUFDNUQsWUFBTUMsTUFBTSxHQUFHLE1BQU0sS0FBS2pFLEVBQUwsQ0FBUStELEtBQVIsQ0FBYztBQUFFQSxRQUFBQSxLQUFGO0FBQVNDLFFBQUFBO0FBQVQsT0FBZCxDQUFyQjtBQUNBLGFBQU9DLE1BQU0sQ0FBQ0MsR0FBUCxFQUFQO0FBQ0gsS0FITSxDQUFQO0FBSUg7O0FBRUQsUUFBTUMsZ0JBQU4sQ0FBdUJDLFlBQXZCLEVBQW1FO0FBQy9ELFFBQUl4RSxLQUFLLEdBQUcsQ0FBWjtBQUNBLFNBQUtpQixXQUFMLENBQWlCK0IsT0FBakIsQ0FBeUJrQixDQUFDLElBQUtsRSxLQUFLLElBQUlrRSxDQUFDLENBQUNLLGdCQUFGLENBQW1CQyxZQUFuQixDQUF4QztBQUNBLFdBQU94RSxLQUFQO0FBQ0g7O0FBM0kwQiIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgMjAxOC0yMDIwIFRPTiBERVYgU09MVVRJT05TIExURC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgU09GVFdBUkUgRVZBTFVBVElPTiBMaWNlbnNlICh0aGUgXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2VcbiAqIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZVxuICogTGljZW5zZSBhdDpcbiAqXG4gKiBodHRwOi8vd3d3LnRvbi5kZXYvbGljZW5zZXNcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIFRPTiBERVYgc29mdHdhcmUgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuLy8gQGZsb3dcblxuaW1wb3J0IGFyYW5nb2NoYWlyIGZyb20gJ2FyYW5nb2NoYWlyJztcbmltcG9ydCB7IERhdGFiYXNlIH0gZnJvbSAnYXJhbmdvanMnO1xuaW1wb3J0IHsgUUNvbGxlY3Rpb24gfSBmcm9tICcuL2NvbGxlY3Rpb24nO1xuaW1wb3J0IHsgQXV0aCB9IGZyb20gJy4vYXV0aCc7XG5pbXBvcnQgdHlwZSB7IFFDb25maWcsIFFEYkNvbmZpZyB9IGZyb20gJy4vY29uZmlnJ1xuaW1wb3J0IHsgZW5zdXJlUHJvdG9jb2wsIFNUQVRTIH0gZnJvbSAnLi9jb25maWcnO1xuaW1wb3J0IHR5cGUgeyBRTG9nIH0gZnJvbSAnLi9sb2dzJztcbmltcG9ydCBRTG9ncyBmcm9tICcuL2xvZ3MnXG5pbXBvcnQgdHlwZSB7IFFUeXBlIH0gZnJvbSAnLi9kYi10eXBlcyc7XG5pbXBvcnQgeyBBY2NvdW50LCBCbG9jaywgQmxvY2tTaWduYXR1cmVzLCBNZXNzYWdlLCBUcmFuc2FjdGlvbiB9IGZyb20gJy4vcmVzb2x2ZXJzLWdlbmVyYXRlZCc7XG5pbXBvcnQgeyBUcmFjZXIgfSBmcm9tICdvcGVudHJhY2luZyc7XG5pbXBvcnQgeyBTdGF0c0NvdW50ZXIgfSBmcm9tICcuL3RyYWNlcic7XG5pbXBvcnQgdHlwZSB7IElTdGF0cyB9IGZyb20gJy4vdHJhY2VyJztcbmltcG9ydCB7IHdyYXAgfSBmcm9tICcuL3V0aWxzJztcblxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBRRGF0YWJhc2Uge1xuICAgIGNvbmZpZzogUUNvbmZpZztcbiAgICBsb2c6IFFMb2c7XG4gICAgc2VydmVyQWRkcmVzczogc3RyaW5nO1xuICAgIGRhdGFiYXNlTmFtZTogc3RyaW5nO1xuICAgIGRiOiBEYXRhYmFzZTtcblxuICAgIGF1dGg6IEF1dGg7XG4gICAgdHJhY2VyOiBUcmFjZXI7XG4gICAgc3RhdFBvc3RDb3VudDogU3RhdHNDb3VudGVyO1xuICAgIHN0YXRQb3N0RmFpbGVkOiBTdGF0c0NvdW50ZXI7XG5cbiAgICB0cmFuc2FjdGlvbnM6IFFDb2xsZWN0aW9uO1xuICAgIG1lc3NhZ2VzOiBRQ29sbGVjdGlvbjtcbiAgICBhY2NvdW50czogUUNvbGxlY3Rpb247XG4gICAgYmxvY2tzOiBRQ29sbGVjdGlvbjtcbiAgICBibG9ja3Nfc2lnbmF0dXJlczogUUNvbGxlY3Rpb247XG5cbiAgICBjb2xsZWN0aW9uczogUUNvbGxlY3Rpb25bXTtcbiAgICBjb2xsZWN0aW9uc0J5TmFtZTogTWFwPHN0cmluZywgUUNvbGxlY3Rpb24+O1xuXG4gICAgbGlzdGVuZXI6IGFueTtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBjb25maWc6IFFDb25maWcsXG4gICAgICAgIGxvZ3M6IFFMb2dzLFxuICAgICAgICBhdXRoOiBBdXRoLFxuICAgICAgICB0cmFjZXI6IFRyYWNlcixcbiAgICAgICAgc3RhdHM6IElTdGF0cyxcbiAgICApIHtcbiAgICAgICAgdGhpcy5jb25maWcgPSBjb25maWc7XG4gICAgICAgIHRoaXMubG9nID0gbG9ncy5jcmVhdGUoJ2RiJyk7XG4gICAgICAgIHRoaXMuYXV0aCA9IGF1dGg7XG4gICAgICAgIHRoaXMuc2VydmVyQWRkcmVzcyA9IGNvbmZpZy5kYXRhYmFzZS5zZXJ2ZXI7XG4gICAgICAgIHRoaXMuZGF0YWJhc2VOYW1lID0gY29uZmlnLmRhdGFiYXNlLm5hbWU7XG4gICAgICAgIHRoaXMudHJhY2VyID0gdHJhY2VyO1xuXG4gICAgICAgIHRoaXMuc3RhdFBvc3RDb3VudCA9IG5ldyBTdGF0c0NvdW50ZXIoc3RhdHMsIFNUQVRTLnBvc3QuY291bnQsIFtdKTtcbiAgICAgICAgdGhpcy5zdGF0UG9zdEZhaWxlZCA9IG5ldyBTdGF0c0NvdW50ZXIoc3RhdHMsIFNUQVRTLnBvc3QuZmFpbGVkLCBbXSk7XG5cbiAgICAgICAgY29uc3QgY3JlYXRlRGIgPSAoY29uZmlnOiBRRGJDb25maWcpOiBEYXRhYmFzZSA9PiB7XG4gICAgICAgICAgICBjb25zdCBkYiA9IG5ldyBEYXRhYmFzZSh7XG4gICAgICAgICAgICAgICAgdXJsOiBgJHtlbnN1cmVQcm90b2NvbChjb25maWcuc2VydmVyLCAnaHR0cCcpfWAsXG4gICAgICAgICAgICAgICAgYWdlbnRPcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgICAgIG1heFNvY2tldHM6IGNvbmZpZy5tYXhTb2NrZXRzLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGRiLnVzZURhdGFiYXNlKGNvbmZpZy5uYW1lKTtcbiAgICAgICAgICAgIGlmIChjb25maWcuYXV0aCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGF1dGhQYXJ0cyA9IGNvbmZpZy5hdXRoLnNwbGl0KCc6Jyk7XG4gICAgICAgICAgICAgICAgZGIudXNlQmFzaWNBdXRoKGF1dGhQYXJ0c1swXSwgYXV0aFBhcnRzLnNsaWNlKDEpLmpvaW4oJzonKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZGI7XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5kYiA9IGNyZWF0ZURiKGNvbmZpZy5kYXRhYmFzZSk7XG4gICAgICAgIGNvbnN0IHNsb3dEYiA9IGNyZWF0ZURiKGNvbmZpZy5zbG93RGF0YWJhc2UpO1xuXG4gICAgICAgIHRoaXMuY29sbGVjdGlvbnMgPSBbXTtcbiAgICAgICAgdGhpcy5jb2xsZWN0aW9uc0J5TmFtZSA9IG5ldyBNYXAoKTtcblxuICAgICAgICBjb25zdCBhZGRDb2xsZWN0aW9uID0gKG5hbWU6IHN0cmluZywgZG9jVHlwZTogUVR5cGUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGNvbGxlY3Rpb24gPSBuZXcgUUNvbGxlY3Rpb24oXG4gICAgICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgICAgICBkb2NUeXBlLFxuICAgICAgICAgICAgICAgIGxvZ3MsXG4gICAgICAgICAgICAgICAgdGhpcy5hdXRoLFxuICAgICAgICAgICAgICAgIHRoaXMudHJhY2VyLFxuICAgICAgICAgICAgICAgIHN0YXRzLFxuICAgICAgICAgICAgICAgIHRoaXMuZGIsXG4gICAgICAgICAgICAgICAgc2xvd0RiLFxuICAgICAgICAgICAgICAgIGNvbmZpZy5pc1Rlc3RzIHx8IGZhbHNlLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRoaXMuY29sbGVjdGlvbnMucHVzaChjb2xsZWN0aW9uKTtcbiAgICAgICAgICAgIHRoaXMuY29sbGVjdGlvbnNCeU5hbWUuc2V0KG5hbWUsIGNvbGxlY3Rpb24pO1xuICAgICAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb247XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy50cmFuc2FjdGlvbnMgPSBhZGRDb2xsZWN0aW9uKCd0cmFuc2FjdGlvbnMnLCBUcmFuc2FjdGlvbik7XG4gICAgICAgIHRoaXMubWVzc2FnZXMgPSBhZGRDb2xsZWN0aW9uKCdtZXNzYWdlcycsIE1lc3NhZ2UpO1xuICAgICAgICB0aGlzLmFjY291bnRzID0gYWRkQ29sbGVjdGlvbignYWNjb3VudHMnLCBBY2NvdW50KTtcbiAgICAgICAgdGhpcy5ibG9ja3MgPSBhZGRDb2xsZWN0aW9uKCdibG9ja3MnLCBCbG9jayk7XG4gICAgICAgIHRoaXMuYmxvY2tzX3NpZ25hdHVyZXMgPSBhZGRDb2xsZWN0aW9uKCdibG9ja3Nfc2lnbmF0dXJlcycsIEJsb2NrU2lnbmF0dXJlcyk7XG4gICAgfVxuXG4gICAgc3RhcnQoKSB7XG4gICAgICAgIGNvbnN0IGxpc3RlbmVyVXJsID0gYCR7ZW5zdXJlUHJvdG9jb2wodGhpcy5zZXJ2ZXJBZGRyZXNzLCAnaHR0cCcpfS8ke3RoaXMuZGF0YWJhc2VOYW1lfWA7XG4gICAgICAgIHRoaXMubGlzdGVuZXIgPSBuZXcgYXJhbmdvY2hhaXIobGlzdGVuZXJVcmwpO1xuXG4gICAgICAgIGlmICh0aGlzLmNvbmZpZy5kYXRhYmFzZS5hdXRoKSB7XG4gICAgICAgICAgICBjb25zdCB1c2VyUGFzc3dvcmQgPSBCdWZmZXIuZnJvbSh0aGlzLmNvbmZpZy5kYXRhYmFzZS5hdXRoKS50b1N0cmluZygnYmFzZTY0Jyk7XG4gICAgICAgICAgICB0aGlzLmxpc3RlbmVyLnJlcS5vcHRzLmhlYWRlcnNbJ0F1dGhvcml6YXRpb24nXSA9IGBCYXNpYyAke3VzZXJQYXNzd29yZH1gO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jb2xsZWN0aW9ucy5mb3JFYWNoKGNvbGxlY3Rpb24gPT4ge1xuICAgICAgICAgICAgY29uc3QgbmFtZSA9IGNvbGxlY3Rpb24ubmFtZTtcbiAgICAgICAgICAgIHRoaXMubGlzdGVuZXIuc3Vic2NyaWJlKHsgY29sbGVjdGlvbjogbmFtZSB9KTtcbiAgICAgICAgICAgIHRoaXMubGlzdGVuZXIub24obmFtZSwgKGRvY0pzb24sIHR5cGUpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZSA9PT0gJ2luc2VydC91cGRhdGUnIHx8IHR5cGUgPT09ICdpbnNlcnQnIHx8IHR5cGUgPT09ICd1cGRhdGUnKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMub25Eb2N1bWVudEluc2VydE9yVXBkYXRlKG5hbWUsIGRvY0pzb24pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5saXN0ZW5lci5zdGFydCgpO1xuICAgICAgICB0aGlzLmxvZy5kZWJ1ZygnTElTVEVOJywgbGlzdGVuZXJVcmwpO1xuICAgICAgICB0aGlzLmxpc3RlbmVyLm9uKCdlcnJvcicsIChlcnIsIHN0YXR1cywgaGVhZGVycywgYm9keSkgPT4ge1xuICAgICAgICAgICAgbGV0IGVycm9yID0gZXJyO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBlcnJvciA9IEpTT04ucGFyc2UoYm9keSk7XG4gICAgICAgICAgICB9IGNhdGNoIHtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMubG9nLmVycm9yKCdGQUlMRUQnLCAnTElTVEVOJywgYCR7ZXJyfWAsIGVycm9yKTtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy5saXN0ZW5lci5zdGFydCgpLCB0aGlzLmNvbmZpZy5saXN0ZW5lci5yZXN0YXJ0VGltZW91dCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIG9uRG9jdW1lbnRJbnNlcnRPclVwZGF0ZShuYW1lOiBzdHJpbmcsIGRvYzogYW55KSB7XG4gICAgICAgIGNvbnN0IGNvbGxlY3Rpb246IChRQ29sbGVjdGlvbiB8IHR5cGVvZiB1bmRlZmluZWQpID0gdGhpcy5jb2xsZWN0aW9uc0J5TmFtZS5nZXQobmFtZSk7XG4gICAgICAgIGlmIChjb2xsZWN0aW9uKSB7XG4gICAgICAgICAgICBjb2xsZWN0aW9uLm9uRG9jdW1lbnRJbnNlcnRPclVwZGF0ZShkb2MpO1xuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICBkcm9wQ2FjaGVkRGJJbmZvKCkge1xuICAgICAgICB0aGlzLmNvbGxlY3Rpb25zLmZvckVhY2goKHg6IFFDb2xsZWN0aW9uKSA9PiB4LmRyb3BDYWNoZWREYkluZm8oKSk7XG4gICAgfVxuXG4gICAgYXN5bmMgcXVlcnkocXVlcnk6IGFueSwgYmluZFZhcnM6IGFueSkge1xuICAgICAgICByZXR1cm4gd3JhcCh0aGlzLmxvZywgJ1FVRVJZJywgeyBxdWVyeSwgYmluZFZhcnMgfSwgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgY3Vyc29yID0gYXdhaXQgdGhpcy5kYi5xdWVyeSh7IHF1ZXJ5LCBiaW5kVmFycyB9KTtcbiAgICAgICAgICAgIHJldHVybiBjdXJzb3IuYWxsKCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGFzeW5jIGZpbmlzaE9wZXJhdGlvbnMob3BlcmF0aW9uSWRzOiBTZXQ8c3RyaW5nPik6IFByb21pc2U8bnVtYmVyPiB7XG4gICAgICAgIGxldCBjb3VudCA9IDA7XG4gICAgICAgIHRoaXMuY29sbGVjdGlvbnMuZm9yRWFjaCh4ID0+IChjb3VudCArPSB4LmZpbmlzaE9wZXJhdGlvbnMob3BlcmF0aW9uSWRzKSkpO1xuICAgICAgICByZXR1cm4gY291bnQ7XG4gICAgfVxufVxuIl19