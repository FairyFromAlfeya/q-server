"use strict";

const {
  Database
} = require('arangojs');

const {
  BLOCKCHAIN_DB
} = require('./config');

const program = require('commander');

const fetch = require('node-fetch');

function sameFields(a, b) {
  return a.join(',').toLowerCase() === b.join(',').toLowerCase();
}

async function detectRedirect(url) {
  try {
    const response = await fetch(url);
    return new URL(response.url).origin;
  } catch {
    return url;
  }
}

async function updateCollection(collection, db) {
  const dbCollection = db.collection(collection.name);
  const existingIndexes = await dbCollection.indexes();

  for (const existing of existingIndexes) {
    if (!collection.indexes.find(x => sameFields(x.fields, existing.fields))) {
      console.log(`${collection.name}: remove index [${existing.id}] on [${existing.fields.join(',')}]`);
      await dbCollection.dropIndex(existing.id);
    }
  }

  for (const required of collection.indexes) {
    if (!existingIndexes.find(x => sameFields(x.fields, required.fields))) {
      console.log(`${collection.name}: create index on [${required.fields.join(',')}]`);
      await dbCollection.createPersistentIndex(required.fields);
    }
  }
}

async function updateDb(config) {
  const db = new Database({
    url: await detectRedirect(config.server)
  });

  if (config.auth) {
    const [user, password] = config.auth.split(':');
    db.useBasicAuth(user, password);
  }

  db.useDatabase(config.name);

  for (const collection of [...Object.values(BLOCKCHAIN_DB.collections)]) {
    await updateCollection(collection, db);
  }

  await db.close();
}

function update(servers, options) {
  (async () => {
    let hasErrors = false;

    for (const server of [].concat(servers)) {
      console.log(`Update ${server}`);

      try {
        await updateDb({
          server,
          name: BLOCKCHAIN_DB.name,
          auth: options.auth
        });
      } catch (error) {
        console.error(error.message);
        hasErrors = true;
      }
    }

    process.exit(hasErrors ? 1 : 0);
  })();
}

program.arguments('[servers...]').option('-a, --auth <user:password>', 'user:password', '').action(update).parse(process.argv);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NlcnZlci91cGRhdGUtaW5kZXhlcy5qcyJdLCJuYW1lcyI6WyJEYXRhYmFzZSIsInJlcXVpcmUiLCJCTE9DS0NIQUlOX0RCIiwicHJvZ3JhbSIsImZldGNoIiwic2FtZUZpZWxkcyIsImEiLCJiIiwiam9pbiIsInRvTG93ZXJDYXNlIiwiZGV0ZWN0UmVkaXJlY3QiLCJ1cmwiLCJyZXNwb25zZSIsIlVSTCIsIm9yaWdpbiIsInVwZGF0ZUNvbGxlY3Rpb24iLCJjb2xsZWN0aW9uIiwiZGIiLCJkYkNvbGxlY3Rpb24iLCJuYW1lIiwiZXhpc3RpbmdJbmRleGVzIiwiaW5kZXhlcyIsImV4aXN0aW5nIiwiZmluZCIsIngiLCJmaWVsZHMiLCJjb25zb2xlIiwibG9nIiwiaWQiLCJkcm9wSW5kZXgiLCJyZXF1aXJlZCIsImNyZWF0ZVBlcnNpc3RlbnRJbmRleCIsInVwZGF0ZURiIiwiY29uZmlnIiwic2VydmVyIiwiYXV0aCIsInVzZXIiLCJwYXNzd29yZCIsInNwbGl0IiwidXNlQmFzaWNBdXRoIiwidXNlRGF0YWJhc2UiLCJPYmplY3QiLCJ2YWx1ZXMiLCJjb2xsZWN0aW9ucyIsImNsb3NlIiwidXBkYXRlIiwic2VydmVycyIsIm9wdGlvbnMiLCJoYXNFcnJvcnMiLCJjb25jYXQiLCJlcnJvciIsIm1lc3NhZ2UiLCJwcm9jZXNzIiwiZXhpdCIsImFyZ3VtZW50cyIsIm9wdGlvbiIsImFjdGlvbiIsInBhcnNlIiwiYXJndiJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxNQUFNO0FBQUVBLEVBQUFBO0FBQUYsSUFBZUMsT0FBTyxDQUFDLFVBQUQsQ0FBNUI7O0FBQ0EsTUFBTTtBQUFFQyxFQUFBQTtBQUFGLElBQW9CRCxPQUFPLENBQUMsVUFBRCxDQUFqQzs7QUFDQSxNQUFNRSxPQUFPLEdBQUdGLE9BQU8sQ0FBQyxXQUFELENBQXZCOztBQUNBLE1BQU1HLEtBQUssR0FBR0gsT0FBTyxDQUFDLFlBQUQsQ0FBckI7O0FBRUEsU0FBU0ksVUFBVCxDQUFvQkMsQ0FBcEIsRUFBdUJDLENBQXZCLEVBQTBCO0FBQ3RCLFNBQU9ELENBQUMsQ0FBQ0UsSUFBRixDQUFPLEdBQVAsRUFBWUMsV0FBWixPQUE4QkYsQ0FBQyxDQUFDQyxJQUFGLENBQU8sR0FBUCxFQUFZQyxXQUFaLEVBQXJDO0FBQ0g7O0FBRUQsZUFBZUMsY0FBZixDQUE4QkMsR0FBOUIsRUFBbUM7QUFDL0IsTUFBSTtBQUNBLFVBQU1DLFFBQVEsR0FBRyxNQUFNUixLQUFLLENBQUNPLEdBQUQsQ0FBNUI7QUFDQSxXQUFPLElBQUlFLEdBQUosQ0FBUUQsUUFBUSxDQUFDRCxHQUFqQixFQUFzQkcsTUFBN0I7QUFDSCxHQUhELENBR0UsTUFBTTtBQUNKLFdBQU9ILEdBQVA7QUFDSDtBQUNKOztBQUVELGVBQWVJLGdCQUFmLENBQWdDQyxVQUFoQyxFQUE0Q0MsRUFBNUMsRUFBZ0Q7QUFDNUMsUUFBTUMsWUFBWSxHQUFHRCxFQUFFLENBQUNELFVBQUgsQ0FBY0EsVUFBVSxDQUFDRyxJQUF6QixDQUFyQjtBQUNBLFFBQU1DLGVBQWUsR0FBRyxNQUFNRixZQUFZLENBQUNHLE9BQWIsRUFBOUI7O0FBQ0EsT0FBSyxNQUFNQyxRQUFYLElBQXVCRixlQUF2QixFQUF3QztBQUNwQyxRQUFJLENBQUNKLFVBQVUsQ0FBQ0ssT0FBWCxDQUFtQkUsSUFBbkIsQ0FBd0JDLENBQUMsSUFBSW5CLFVBQVUsQ0FBQ21CLENBQUMsQ0FBQ0MsTUFBSCxFQUFXSCxRQUFRLENBQUNHLE1BQXBCLENBQXZDLENBQUwsRUFBMEU7QUFDdEVDLE1BQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFhLEdBQUVYLFVBQVUsQ0FBQ0csSUFBSyxtQkFBa0JHLFFBQVEsQ0FBQ00sRUFBRyxTQUFRTixRQUFRLENBQUNHLE1BQVQsQ0FBZ0JqQixJQUFoQixDQUFxQixHQUFyQixDQUEwQixHQUEvRjtBQUNBLFlBQU1VLFlBQVksQ0FBQ1csU0FBYixDQUF1QlAsUUFBUSxDQUFDTSxFQUFoQyxDQUFOO0FBQ0g7QUFDSjs7QUFDRCxPQUFLLE1BQU1FLFFBQVgsSUFBdUJkLFVBQVUsQ0FBQ0ssT0FBbEMsRUFBMkM7QUFDdkMsUUFBSSxDQUFDRCxlQUFlLENBQUNHLElBQWhCLENBQXFCQyxDQUFDLElBQUluQixVQUFVLENBQUNtQixDQUFDLENBQUNDLE1BQUgsRUFBV0ssUUFBUSxDQUFDTCxNQUFwQixDQUFwQyxDQUFMLEVBQXVFO0FBQ25FQyxNQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBYSxHQUFFWCxVQUFVLENBQUNHLElBQUssc0JBQXFCVyxRQUFRLENBQUNMLE1BQVQsQ0FBZ0JqQixJQUFoQixDQUFxQixHQUFyQixDQUEwQixHQUE5RTtBQUNBLFlBQU1VLFlBQVksQ0FBQ2EscUJBQWIsQ0FBbUNELFFBQVEsQ0FBQ0wsTUFBNUMsQ0FBTjtBQUNIO0FBQ0o7QUFDSjs7QUFFRCxlQUFlTyxRQUFmLENBQXdCQyxNQUF4QixFQUFnQztBQUM1QixRQUFNaEIsRUFBRSxHQUFHLElBQUlqQixRQUFKLENBQWE7QUFDcEJXLElBQUFBLEdBQUcsRUFBRSxNQUFNRCxjQUFjLENBQUN1QixNQUFNLENBQUNDLE1BQVI7QUFETCxHQUFiLENBQVg7O0FBSUEsTUFBSUQsTUFBTSxDQUFDRSxJQUFYLEVBQWlCO0FBQ2IsVUFBTSxDQUFDQyxJQUFELEVBQU9DLFFBQVAsSUFBbUJKLE1BQU0sQ0FBQ0UsSUFBUCxDQUFZRyxLQUFaLENBQWtCLEdBQWxCLENBQXpCO0FBQ0FyQixJQUFBQSxFQUFFLENBQUNzQixZQUFILENBQWdCSCxJQUFoQixFQUFzQkMsUUFBdEI7QUFDSDs7QUFDRHBCLEVBQUFBLEVBQUUsQ0FBQ3VCLFdBQUgsQ0FBZVAsTUFBTSxDQUFDZCxJQUF0Qjs7QUFDQSxPQUFLLE1BQU1ILFVBQVgsSUFBeUIsQ0FBQyxHQUFHeUIsTUFBTSxDQUFDQyxNQUFQLENBQWN4QyxhQUFhLENBQUN5QyxXQUE1QixDQUFKLENBQXpCLEVBQXdFO0FBQ3BFLFVBQU01QixnQkFBZ0IsQ0FBQ0MsVUFBRCxFQUFhQyxFQUFiLENBQXRCO0FBQ0g7O0FBQ0QsUUFBTUEsRUFBRSxDQUFDMkIsS0FBSCxFQUFOO0FBQ0g7O0FBRUQsU0FBU0MsTUFBVCxDQUFnQkMsT0FBaEIsRUFBeUJDLE9BQXpCLEVBQWtDO0FBQzlCLEdBQUMsWUFBWTtBQUNULFFBQUlDLFNBQVMsR0FBRyxLQUFoQjs7QUFDQSxTQUFLLE1BQU1kLE1BQVgsSUFBcUIsR0FBR2UsTUFBSCxDQUFVSCxPQUFWLENBQXJCLEVBQXlDO0FBQ3JDcEIsTUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQWEsVUFBU08sTUFBTyxFQUE3Qjs7QUFDQSxVQUFJO0FBQ0EsY0FBTUYsUUFBUSxDQUFDO0FBQ1hFLFVBQUFBLE1BRFc7QUFFWGYsVUFBQUEsSUFBSSxFQUFFakIsYUFBYSxDQUFDaUIsSUFGVDtBQUdYZ0IsVUFBQUEsSUFBSSxFQUFFWSxPQUFPLENBQUNaO0FBSEgsU0FBRCxDQUFkO0FBS0gsT0FORCxDQU1FLE9BQU9lLEtBQVAsRUFBYztBQUNaeEIsUUFBQUEsT0FBTyxDQUFDd0IsS0FBUixDQUFjQSxLQUFLLENBQUNDLE9BQXBCO0FBQ0FILFFBQUFBLFNBQVMsR0FBRyxJQUFaO0FBQ0g7QUFDSjs7QUFDREksSUFBQUEsT0FBTyxDQUFDQyxJQUFSLENBQWFMLFNBQVMsR0FBRyxDQUFILEdBQU8sQ0FBN0I7QUFDSCxHQWhCRDtBQWlCSDs7QUFFRDdDLE9BQU8sQ0FDRm1ELFNBREwsQ0FDZSxjQURmLEVBRUtDLE1BRkwsQ0FFWSw0QkFGWixFQUUwQyxlQUYxQyxFQUUyRCxFQUYzRCxFQUdLQyxNQUhMLENBR1lYLE1BSFosRUFJS1ksS0FKTCxDQUlXTCxPQUFPLENBQUNNLElBSm5CIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgeyBEYXRhYmFzZSB9ID0gcmVxdWlyZSgnYXJhbmdvanMnKTtcbmNvbnN0IHsgQkxPQ0tDSEFJTl9EQiB9ID0gcmVxdWlyZSgnLi9jb25maWcnKTtcbmNvbnN0IHByb2dyYW0gPSByZXF1aXJlKCdjb21tYW5kZXInKTtcbmNvbnN0IGZldGNoID0gcmVxdWlyZSgnbm9kZS1mZXRjaCcpO1xuXG5mdW5jdGlvbiBzYW1lRmllbGRzKGEsIGIpIHtcbiAgICByZXR1cm4gYS5qb2luKCcsJykudG9Mb3dlckNhc2UoKSA9PT0gYi5qb2luKCcsJykudG9Mb3dlckNhc2UoKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gZGV0ZWN0UmVkaXJlY3QodXJsKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCh1cmwpO1xuICAgICAgICByZXR1cm4gbmV3IFVSTChyZXNwb25zZS51cmwpLm9yaWdpbjtcbiAgICB9IGNhdGNoIHtcbiAgICAgICAgcmV0dXJuIHVybDtcbiAgICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHVwZGF0ZUNvbGxlY3Rpb24oY29sbGVjdGlvbiwgZGIpIHtcbiAgICBjb25zdCBkYkNvbGxlY3Rpb24gPSBkYi5jb2xsZWN0aW9uKGNvbGxlY3Rpb24ubmFtZSk7XG4gICAgY29uc3QgZXhpc3RpbmdJbmRleGVzID0gYXdhaXQgZGJDb2xsZWN0aW9uLmluZGV4ZXMoKTtcbiAgICBmb3IgKGNvbnN0IGV4aXN0aW5nIG9mIGV4aXN0aW5nSW5kZXhlcykge1xuICAgICAgICBpZiAoIWNvbGxlY3Rpb24uaW5kZXhlcy5maW5kKHggPT4gc2FtZUZpZWxkcyh4LmZpZWxkcywgZXhpc3RpbmcuZmllbGRzKSkpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGAke2NvbGxlY3Rpb24ubmFtZX06IHJlbW92ZSBpbmRleCBbJHtleGlzdGluZy5pZH1dIG9uIFske2V4aXN0aW5nLmZpZWxkcy5qb2luKCcsJyl9XWApO1xuICAgICAgICAgICAgYXdhaXQgZGJDb2xsZWN0aW9uLmRyb3BJbmRleChleGlzdGluZy5pZCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZm9yIChjb25zdCByZXF1aXJlZCBvZiBjb2xsZWN0aW9uLmluZGV4ZXMpIHtcbiAgICAgICAgaWYgKCFleGlzdGluZ0luZGV4ZXMuZmluZCh4ID0+IHNhbWVGaWVsZHMoeC5maWVsZHMsIHJlcXVpcmVkLmZpZWxkcykpKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgJHtjb2xsZWN0aW9uLm5hbWV9OiBjcmVhdGUgaW5kZXggb24gWyR7cmVxdWlyZWQuZmllbGRzLmpvaW4oJywnKX1dYCk7XG4gICAgICAgICAgICBhd2FpdCBkYkNvbGxlY3Rpb24uY3JlYXRlUGVyc2lzdGVudEluZGV4KHJlcXVpcmVkLmZpZWxkcyk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHVwZGF0ZURiKGNvbmZpZykge1xuICAgIGNvbnN0IGRiID0gbmV3IERhdGFiYXNlKHtcbiAgICAgICAgdXJsOiBhd2FpdCBkZXRlY3RSZWRpcmVjdChjb25maWcuc2VydmVyKSxcblxuICAgIH0pO1xuICAgIGlmIChjb25maWcuYXV0aCkge1xuICAgICAgICBjb25zdCBbdXNlciwgcGFzc3dvcmRdID0gY29uZmlnLmF1dGguc3BsaXQoJzonKTtcbiAgICAgICAgZGIudXNlQmFzaWNBdXRoKHVzZXIsIHBhc3N3b3JkKTtcbiAgICB9XG4gICAgZGIudXNlRGF0YWJhc2UoY29uZmlnLm5hbWUpO1xuICAgIGZvciAoY29uc3QgY29sbGVjdGlvbiBvZiBbLi4uT2JqZWN0LnZhbHVlcyhCTE9DS0NIQUlOX0RCLmNvbGxlY3Rpb25zKV0pIHtcbiAgICAgICAgYXdhaXQgdXBkYXRlQ29sbGVjdGlvbihjb2xsZWN0aW9uLCBkYik7XG4gICAgfVxuICAgIGF3YWl0IGRiLmNsb3NlKCk7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZShzZXJ2ZXJzLCBvcHRpb25zKSB7XG4gICAgKGFzeW5jICgpID0+IHtcbiAgICAgICAgbGV0IGhhc0Vycm9ycyA9IGZhbHNlO1xuICAgICAgICBmb3IgKGNvbnN0IHNlcnZlciBvZiBbXS5jb25jYXQoc2VydmVycykpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBVcGRhdGUgJHtzZXJ2ZXJ9YCk7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGF3YWl0IHVwZGF0ZURiKHtcbiAgICAgICAgICAgICAgICAgICAgc2VydmVyLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBCTE9DS0NIQUlOX0RCLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgIGF1dGg6IG9wdGlvbnMuYXV0aCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvci5tZXNzYWdlKTtcbiAgICAgICAgICAgICAgICBoYXNFcnJvcnMgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHByb2Nlc3MuZXhpdChoYXNFcnJvcnMgPyAxIDogMCk7XG4gICAgfSkoKTtcbn1cblxucHJvZ3JhbVxuICAgIC5hcmd1bWVudHMoJ1tzZXJ2ZXJzLi4uXScpXG4gICAgLm9wdGlvbignLWEsIC0tYXV0aCA8dXNlcjpwYXNzd29yZD4nLCAndXNlcjpwYXNzd29yZCcsICcnKVxuICAgIC5hY3Rpb24odXBkYXRlKVxuICAgIC5wYXJzZShwcm9jZXNzLmFyZ3YpO1xuXG5cblxuIl19