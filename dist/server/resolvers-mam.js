"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.resolversMam = void 0;

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _arango = _interopRequireDefault(require("./arango"));

var _arangoCollection = require("./arango-collection");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Query
function info() {
  const pkg = JSON.parse(_fs.default.readFileSync(_path.default.resolve(__dirname, '..', '..', 'package.json')));
  return {
    version: pkg.version
  };
}

function stat(_parent, args, context) {
  (0, _arangoCollection.mamAccessRequired)(context, args);
  const db = context.db;
  let totalWaitForCount = 0;
  let totalSubscriptionCount = 0;
  const collections = db.collections.map(collection => {
    totalWaitForCount += collection.waitForCount;
    totalSubscriptionCount += collection.subscriptionCount;
    return {
      name: collection.name,
      subscriptionCount: collection.subscriptionCount,
      waitForCount: collection.waitForCount,
      maxQueueSize: collection.maxQueueSize,
      subscriptions: [],
      waitFor: []
    };
  });
  return {
    waitForCount: totalWaitForCount,
    subscriptionCount: totalSubscriptionCount,
    collections
  };
}

async function getCollections(_parent, args, context) {
  (0, _arangoCollection.mamAccessRequired)(context, args);
  const db = context.db;
  const collections = [];

  for (const collection of db.collections) {
    const indexes = [];
    const dbCollection = collection.dbCollection();

    for (const index of await dbCollection.indexes()) {
      indexes.push(index.fields.join(', '));
    }

    collections.push({
      name: collection.name,
      count: (await dbCollection.count()).count,
      indexes
    });
  }

  return collections;
} // Mutation


const resolversMam = {
  Query: {
    info,
    getCollections,
    stat
  }
};
exports.resolversMam = resolversMam;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NlcnZlci9yZXNvbHZlcnMtbWFtLmpzIl0sIm5hbWVzIjpbImluZm8iLCJwa2ciLCJKU09OIiwicGFyc2UiLCJmcyIsInJlYWRGaWxlU3luYyIsInBhdGgiLCJyZXNvbHZlIiwiX19kaXJuYW1lIiwidmVyc2lvbiIsInN0YXQiLCJfcGFyZW50IiwiYXJncyIsImNvbnRleHQiLCJkYiIsInRvdGFsV2FpdEZvckNvdW50IiwidG90YWxTdWJzY3JpcHRpb25Db3VudCIsImNvbGxlY3Rpb25zIiwibWFwIiwiY29sbGVjdGlvbiIsIndhaXRGb3JDb3VudCIsInN1YnNjcmlwdGlvbkNvdW50IiwibmFtZSIsIm1heFF1ZXVlU2l6ZSIsInN1YnNjcmlwdGlvbnMiLCJ3YWl0Rm9yIiwiZ2V0Q29sbGVjdGlvbnMiLCJpbmRleGVzIiwiZGJDb2xsZWN0aW9uIiwiaW5kZXgiLCJwdXNoIiwiZmllbGRzIiwiam9pbiIsImNvdW50IiwicmVzb2x2ZXJzTWFtIiwiUXVlcnkiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFFQTs7QUFDQTs7QUFDQTs7QUFDQTs7OztBQWtDQTtBQUVBLFNBQVNBLElBQVQsR0FBc0I7QUFDbEIsUUFBTUMsR0FBRyxHQUFHQyxJQUFJLENBQUNDLEtBQUwsQ0FBWUMsWUFBR0MsWUFBSCxDQUFnQkMsY0FBS0MsT0FBTCxDQUFhQyxTQUFiLEVBQXdCLElBQXhCLEVBQThCLElBQTlCLEVBQW9DLGNBQXBDLENBQWhCLENBQVosQ0FBWjtBQUNBLFNBQU87QUFDSEMsSUFBQUEsT0FBTyxFQUFFUixHQUFHLENBQUNRO0FBRFYsR0FBUDtBQUdIOztBQUVELFNBQVNDLElBQVQsQ0FBY0MsT0FBZCxFQUE0QkMsSUFBNUIsRUFBdUNDLE9BQXZDLEVBQStFO0FBQzNFLDJDQUFrQkEsT0FBbEIsRUFBMkJELElBQTNCO0FBQ0EsUUFBTUUsRUFBVSxHQUFHRCxPQUFPLENBQUNDLEVBQTNCO0FBQ0EsTUFBSUMsaUJBQWlCLEdBQUcsQ0FBeEI7QUFDQSxNQUFJQyxzQkFBc0IsR0FBRyxDQUE3QjtBQUNBLFFBQU1DLFdBQVcsR0FBR0gsRUFBRSxDQUFDRyxXQUFILENBQWVDLEdBQWYsQ0FBb0JDLFVBQUQsSUFBNEI7QUFDL0RKLElBQUFBLGlCQUFpQixJQUFJSSxVQUFVLENBQUNDLFlBQWhDO0FBQ0FKLElBQUFBLHNCQUFzQixJQUFJRyxVQUFVLENBQUNFLGlCQUFyQztBQUNBLFdBQU87QUFDSEMsTUFBQUEsSUFBSSxFQUFFSCxVQUFVLENBQUNHLElBRGQ7QUFFSEQsTUFBQUEsaUJBQWlCLEVBQUVGLFVBQVUsQ0FBQ0UsaUJBRjNCO0FBR0hELE1BQUFBLFlBQVksRUFBRUQsVUFBVSxDQUFDQyxZQUh0QjtBQUlIRyxNQUFBQSxZQUFZLEVBQUVKLFVBQVUsQ0FBQ0ksWUFKdEI7QUFLSEMsTUFBQUEsYUFBYSxFQUFFLEVBTFo7QUFNSEMsTUFBQUEsT0FBTyxFQUFFO0FBTk4sS0FBUDtBQVFILEdBWG1CLENBQXBCO0FBWUEsU0FBTztBQUNITCxJQUFBQSxZQUFZLEVBQUVMLGlCQURYO0FBRUhNLElBQUFBLGlCQUFpQixFQUFFTCxzQkFGaEI7QUFHSEMsSUFBQUE7QUFIRyxHQUFQO0FBS0g7O0FBRUQsZUFBZVMsY0FBZixDQUE4QmYsT0FBOUIsRUFBNENDLElBQTVDLEVBQXVEQyxPQUF2RCxFQUF1SDtBQUNuSCwyQ0FBa0JBLE9BQWxCLEVBQTJCRCxJQUEzQjtBQUNBLFFBQU1FLEVBQVUsR0FBR0QsT0FBTyxDQUFDQyxFQUEzQjtBQUNBLFFBQU1HLFdBQWdDLEdBQUcsRUFBekM7O0FBQ0EsT0FBSyxNQUFNRSxVQUFYLElBQXlCTCxFQUFFLENBQUNHLFdBQTVCLEVBQXlDO0FBQ3JDLFVBQU1VLE9BQWlCLEdBQUcsRUFBMUI7QUFDQSxVQUFNQyxZQUFZLEdBQUdULFVBQVUsQ0FBQ1MsWUFBWCxFQUFyQjs7QUFDQSxTQUFLLE1BQU1DLEtBQVgsSUFBb0IsTUFBTUQsWUFBWSxDQUFDRCxPQUFiLEVBQTFCLEVBQWtEO0FBQzlDQSxNQUFBQSxPQUFPLENBQUNHLElBQVIsQ0FBYUQsS0FBSyxDQUFDRSxNQUFOLENBQWFDLElBQWIsQ0FBa0IsSUFBbEIsQ0FBYjtBQUNIOztBQUNEZixJQUFBQSxXQUFXLENBQUNhLElBQVosQ0FBaUI7QUFDYlIsTUFBQUEsSUFBSSxFQUFFSCxVQUFVLENBQUNHLElBREo7QUFFYlcsTUFBQUEsS0FBSyxFQUFFLENBQUMsTUFBTUwsWUFBWSxDQUFDSyxLQUFiLEVBQVAsRUFBNkJBLEtBRnZCO0FBR2JOLE1BQUFBO0FBSGEsS0FBakI7QUFLSDs7QUFDRCxTQUFPVixXQUFQO0FBQ0gsQyxDQUVEOzs7QUFFTyxNQUFNaUIsWUFBWSxHQUFHO0FBQ3hCQyxFQUFBQSxLQUFLLEVBQUU7QUFDSG5DLElBQUFBLElBREc7QUFFSDBCLElBQUFBLGNBRkc7QUFHSGhCLElBQUFBO0FBSEc7QUFEaUIsQ0FBckIiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBAZmxvd1xuXG5pbXBvcnQgZnMgZnJvbSBcImZzXCI7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCBBcmFuZ28gZnJvbSBcIi4vYXJhbmdvXCI7XG5pbXBvcnQgeyBDb2xsZWN0aW9uLCBtYW1BY2Nlc3NSZXF1aXJlZCB9IGZyb20gXCIuL2FyYW5nby1jb2xsZWN0aW9uXCI7XG5pbXBvcnQgdHlwZSB7IEdyYXBoUUxSZXF1ZXN0Q29udGV4dEV4IH0gZnJvbSBcIi4vcmVzb2x2ZXJzLWN1c3RvbVwiO1xuXG50eXBlIEluZm8gPSB7XG4gICAgdmVyc2lvbjogc3RyaW5nLFxufVxuXG50eXBlIExpc3RlbmVyU3RhdCA9IHtcbiAgICBmaWx0ZXI6IHN0cmluZyxcbiAgICBzZWxlY3Rpb246IHN0cmluZyxcbiAgICBxdWV1ZVNpemU6IG51bWJlcixcbiAgICBldmVudENvdW50OiBudW1iZXIsXG4gICAgc2Vjb25kc0FjdGl2ZTogbnVtYmVyLFxufVxuXG50eXBlIENvbGxlY3Rpb25TdGF0ID0ge1xuICAgIG5hbWU6IHN0cmluZyxcbiAgICBzdWJzY3JpcHRpb25Db3VudDogbnVtYmVyLFxuICAgIHdhaXRGb3JDb3VudDogbnVtYmVyLFxuICAgIG1heFF1ZXVlU2l6ZTogbnVtYmVyLFxuICAgIHN1YnNjcmlwdGlvbnM6IExpc3RlbmVyU3RhdFtdLFxuICAgIHdhaXRGb3I6IExpc3RlbmVyU3RhdFtdLFxufVxuXG50eXBlIFN0YXQgPSB7XG4gICAgY29sbGVjdGlvbnM6IENvbGxlY3Rpb25TdGF0W11cbn1cblxudHlwZSBDb2xsZWN0aW9uU3VtbWFyeSA9IHtcbiAgICBuYW1lOiBzdHJpbmcsXG4gICAgY291bnQ6IG51bWJlcixcbiAgICBpbmRleGVzOiBzdHJpbmdbXSxcbn1cblxuLy8gUXVlcnlcblxuZnVuY3Rpb24gaW5mbygpOiBJbmZvIHtcbiAgICBjb25zdCBwa2cgPSBKU09OLnBhcnNlKChmcy5yZWFkRmlsZVN5bmMocGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgJy4uJywgJy4uJywgJ3BhY2thZ2UuanNvbicpKTogYW55KSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdmVyc2lvbjogcGtnLnZlcnNpb24sXG4gICAgfTtcbn1cblxuZnVuY3Rpb24gc3RhdChfcGFyZW50OiBhbnksIGFyZ3M6IGFueSwgY29udGV4dDogR3JhcGhRTFJlcXVlc3RDb250ZXh0RXgpOiBTdGF0IHtcbiAgICBtYW1BY2Nlc3NSZXF1aXJlZChjb250ZXh0LCBhcmdzKTtcbiAgICBjb25zdCBkYjogQXJhbmdvID0gY29udGV4dC5kYjtcbiAgICBsZXQgdG90YWxXYWl0Rm9yQ291bnQgPSAwO1xuICAgIGxldCB0b3RhbFN1YnNjcmlwdGlvbkNvdW50ID0gMDtcbiAgICBjb25zdCBjb2xsZWN0aW9ucyA9IGRiLmNvbGxlY3Rpb25zLm1hcCgoY29sbGVjdGlvbjogQ29sbGVjdGlvbikgPT4ge1xuICAgICAgICB0b3RhbFdhaXRGb3JDb3VudCArPSBjb2xsZWN0aW9uLndhaXRGb3JDb3VudDtcbiAgICAgICAgdG90YWxTdWJzY3JpcHRpb25Db3VudCArPSBjb2xsZWN0aW9uLnN1YnNjcmlwdGlvbkNvdW50O1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbmFtZTogY29sbGVjdGlvbi5uYW1lLFxuICAgICAgICAgICAgc3Vic2NyaXB0aW9uQ291bnQ6IGNvbGxlY3Rpb24uc3Vic2NyaXB0aW9uQ291bnQsXG4gICAgICAgICAgICB3YWl0Rm9yQ291bnQ6IGNvbGxlY3Rpb24ud2FpdEZvckNvdW50LFxuICAgICAgICAgICAgbWF4UXVldWVTaXplOiBjb2xsZWN0aW9uLm1heFF1ZXVlU2l6ZSxcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbnM6IFtdLFxuICAgICAgICAgICAgd2FpdEZvcjogW10sXG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgICB3YWl0Rm9yQ291bnQ6IHRvdGFsV2FpdEZvckNvdW50LFxuICAgICAgICBzdWJzY3JpcHRpb25Db3VudDogdG90YWxTdWJzY3JpcHRpb25Db3VudCxcbiAgICAgICAgY29sbGVjdGlvbnMsXG4gICAgfTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0Q29sbGVjdGlvbnMoX3BhcmVudDogYW55LCBhcmdzOiBhbnksIGNvbnRleHQ6IEdyYXBoUUxSZXF1ZXN0Q29udGV4dEV4KTogUHJvbWlzZTxDb2xsZWN0aW9uU3VtbWFyeVtdPiB7XG4gICAgbWFtQWNjZXNzUmVxdWlyZWQoY29udGV4dCwgYXJncyk7XG4gICAgY29uc3QgZGI6IEFyYW5nbyA9IGNvbnRleHQuZGI7XG4gICAgY29uc3QgY29sbGVjdGlvbnM6IENvbGxlY3Rpb25TdW1tYXJ5W10gPSBbXTtcbiAgICBmb3IgKGNvbnN0IGNvbGxlY3Rpb24gb2YgZGIuY29sbGVjdGlvbnMpIHtcbiAgICAgICAgY29uc3QgaW5kZXhlczogc3RyaW5nW10gPSBbXTtcbiAgICAgICAgY29uc3QgZGJDb2xsZWN0aW9uID0gY29sbGVjdGlvbi5kYkNvbGxlY3Rpb24oKTtcbiAgICAgICAgZm9yIChjb25zdCBpbmRleCBvZiBhd2FpdCBkYkNvbGxlY3Rpb24uaW5kZXhlcygpKSB7XG4gICAgICAgICAgICBpbmRleGVzLnB1c2goaW5kZXguZmllbGRzLmpvaW4oJywgJykpO1xuICAgICAgICB9XG4gICAgICAgIGNvbGxlY3Rpb25zLnB1c2goe1xuICAgICAgICAgICAgbmFtZTogY29sbGVjdGlvbi5uYW1lLFxuICAgICAgICAgICAgY291bnQ6IChhd2FpdCBkYkNvbGxlY3Rpb24uY291bnQoKSkuY291bnQsXG4gICAgICAgICAgICBpbmRleGVzLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbGxlY3Rpb25zO1xufVxuXG4vLyBNdXRhdGlvblxuXG5leHBvcnQgY29uc3QgcmVzb2x2ZXJzTWFtID0ge1xuICAgIFF1ZXJ5OiB7XG4gICAgICAgIGluZm8sXG4gICAgICAgIGdldENvbGxlY3Rpb25zLFxuICAgICAgICBzdGF0XG4gICAgfSxcbn07XG4iXX0=