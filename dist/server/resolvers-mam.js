"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.resolversMam = void 0;

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _arango = _interopRequireDefault(require("./arango"));

var _arangoCollection = require("./arango-collection");

var _arangoListeners = require("./arango-listeners");

var _auth = require("./auth");

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Query
function info() {
  const pkg = JSON.parse(_fs.default.readFileSync(_path.default.resolve(__dirname, '..', '..', 'package.json')));
  return {
    version: pkg.version
  };
}

function checkMamAccess(args, context) {
  const accessKey = args.accessKey;

  if (!accessKey || !context.config.mamAccessKeys.has(accessKey)) {
    throw _auth.Auth.unauthorizedError();
  }
}

function stat(_parent, args, context) {
  checkMamAccess(args, context);

  const listenerToStat = listener => {
    return {
      filter: JSON.stringify(listener.filter),
      selection: (0, _utils.selectionToString)(listener.selection),
      queueSize: 0,
      eventCount: listener.getEventCount(),
      secondsActive: (Date.now() - listener.startTime) / 1000
    };
  };

  const isSubscription = listener => {
    return listener instanceof _arangoListeners.SubscriptionListener;
  };

  const db = context.db;
  return {
    collections: db.collections.map(collection => {
      const listeners = [...collection.listeners.values()];
      const waitFor = listeners.filter(x => !isSubscription(x));
      const subscriptions = listeners.filter(isSubscription);
      return {
        name: collection.name,
        subscriptionCount: subscriptions.length,
        waitForCount: waitFor.length,
        maxQueueSize: collection.maxQueueSize,
        subscriptions: subscriptions.map(listenerToStat),
        waitFor: waitFor.map(listenerToStat)
      };
    })
  };
}

async function getCollections(_parent, args, context) {
  checkMamAccess(args, context);
  const db = context.db;
  const collections = [];

  for (const collection of db.collections) {
    const indexes = [];
    const dbCollection = collection.dbCollection();

    for (const index of await dbCollection.indexes()) {
      indexes.push(index.fields.join(', '));
    }

    collections.push({
      name: collection.name,
      count: (await dbCollection.count()).count,
      indexes
    });
  }

  return collections;
} // Mutation


const resolversMam = {
  Query: {
    info,
    getCollections,
    stat
  }
};
exports.resolversMam = resolversMam;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,