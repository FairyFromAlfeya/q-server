"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.resolversMam = void 0;

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _arango = _interopRequireDefault(require("./arango"));

var _arangoCollection = require("./arango-collection");

var _package = require("../package.json");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Query
function info() {
  return {
    version: _package.version
  };
}

function stat(_parent, args, context) {
  (0, _arangoCollection.mamAccessRequired)(context, args);
  const db = context.db;
  let totalWaitForCount = 0;
  let totalSubscriptionCount = 0;
  const collections = db.collections.map(collection => {
    totalWaitForCount += collection.waitForCount;
    totalSubscriptionCount += collection.subscriptionCount;
    return {
      name: collection.name,
      subscriptionCount: collection.subscriptionCount,
      waitForCount: collection.waitForCount,
      maxQueueSize: collection.maxQueueSize,
      subscriptions: [],
      waitFor: []
    };
  });
  return {
    waitForCount: totalWaitForCount,
    subscriptionCount: totalSubscriptionCount,
    collections
  };
}

async function getCollections(_parent, args, context) {
  (0, _arangoCollection.mamAccessRequired)(context, args);
  const db = context.db;
  const collections = [];

  for (const collection of db.collections) {
    const indexes = [];
    const dbCollection = collection.dbCollection();

    for (const index of await dbCollection.indexes()) {
      indexes.push(index.fields.join(', '));
    }

    collections.push({
      name: collection.name,
      count: (await dbCollection.count()).count,
      indexes
    });
  }

  return collections;
} // Mutation


const resolversMam = {
  Query: {
    info,
    getCollections,
    stat
  }
};
exports.resolversMam = resolversMam;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NlcnZlci9yZXNvbHZlcnMtbWFtLmpzIl0sIm5hbWVzIjpbImluZm8iLCJ2ZXJzaW9uIiwic3RhdCIsIl9wYXJlbnQiLCJhcmdzIiwiY29udGV4dCIsImRiIiwidG90YWxXYWl0Rm9yQ291bnQiLCJ0b3RhbFN1YnNjcmlwdGlvbkNvdW50IiwiY29sbGVjdGlvbnMiLCJtYXAiLCJjb2xsZWN0aW9uIiwid2FpdEZvckNvdW50Iiwic3Vic2NyaXB0aW9uQ291bnQiLCJuYW1lIiwibWF4UXVldWVTaXplIiwic3Vic2NyaXB0aW9ucyIsIndhaXRGb3IiLCJnZXRDb2xsZWN0aW9ucyIsImluZGV4ZXMiLCJkYkNvbGxlY3Rpb24iLCJpbmRleCIsInB1c2giLCJmaWVsZHMiLCJqb2luIiwiY291bnQiLCJyZXNvbHZlcnNNYW0iLCJRdWVyeSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUVBOztBQUNBOztBQUNBOztBQUNBOztBQUVBOzs7O0FBaUNBO0FBRUEsU0FBU0EsSUFBVCxHQUFzQjtBQUNsQixTQUFPO0FBQ0hDLElBQUFBLE9BQU8sRUFBUEE7QUFERyxHQUFQO0FBR0g7O0FBRUQsU0FBU0MsSUFBVCxDQUFjQyxPQUFkLEVBQTRCQyxJQUE1QixFQUF1Q0MsT0FBdkMsRUFBK0U7QUFDM0UsMkNBQWtCQSxPQUFsQixFQUEyQkQsSUFBM0I7QUFDQSxRQUFNRSxFQUFVLEdBQUdELE9BQU8sQ0FBQ0MsRUFBM0I7QUFDQSxNQUFJQyxpQkFBaUIsR0FBRyxDQUF4QjtBQUNBLE1BQUlDLHNCQUFzQixHQUFHLENBQTdCO0FBQ0EsUUFBTUMsV0FBVyxHQUFHSCxFQUFFLENBQUNHLFdBQUgsQ0FBZUMsR0FBZixDQUFvQkMsVUFBRCxJQUE0QjtBQUMvREosSUFBQUEsaUJBQWlCLElBQUlJLFVBQVUsQ0FBQ0MsWUFBaEM7QUFDQUosSUFBQUEsc0JBQXNCLElBQUlHLFVBQVUsQ0FBQ0UsaUJBQXJDO0FBQ0EsV0FBTztBQUNIQyxNQUFBQSxJQUFJLEVBQUVILFVBQVUsQ0FBQ0csSUFEZDtBQUVIRCxNQUFBQSxpQkFBaUIsRUFBRUYsVUFBVSxDQUFDRSxpQkFGM0I7QUFHSEQsTUFBQUEsWUFBWSxFQUFFRCxVQUFVLENBQUNDLFlBSHRCO0FBSUhHLE1BQUFBLFlBQVksRUFBRUosVUFBVSxDQUFDSSxZQUp0QjtBQUtIQyxNQUFBQSxhQUFhLEVBQUUsRUFMWjtBQU1IQyxNQUFBQSxPQUFPLEVBQUU7QUFOTixLQUFQO0FBUUgsR0FYbUIsQ0FBcEI7QUFZQSxTQUFPO0FBQ0hMLElBQUFBLFlBQVksRUFBRUwsaUJBRFg7QUFFSE0sSUFBQUEsaUJBQWlCLEVBQUVMLHNCQUZoQjtBQUdIQyxJQUFBQTtBQUhHLEdBQVA7QUFLSDs7QUFFRCxlQUFlUyxjQUFmLENBQThCZixPQUE5QixFQUE0Q0MsSUFBNUMsRUFBdURDLE9BQXZELEVBQXVIO0FBQ25ILDJDQUFrQkEsT0FBbEIsRUFBMkJELElBQTNCO0FBQ0EsUUFBTUUsRUFBVSxHQUFHRCxPQUFPLENBQUNDLEVBQTNCO0FBQ0EsUUFBTUcsV0FBZ0MsR0FBRyxFQUF6Qzs7QUFDQSxPQUFLLE1BQU1FLFVBQVgsSUFBeUJMLEVBQUUsQ0FBQ0csV0FBNUIsRUFBeUM7QUFDckMsVUFBTVUsT0FBaUIsR0FBRyxFQUExQjtBQUNBLFVBQU1DLFlBQVksR0FBR1QsVUFBVSxDQUFDUyxZQUFYLEVBQXJCOztBQUNBLFNBQUssTUFBTUMsS0FBWCxJQUFvQixNQUFNRCxZQUFZLENBQUNELE9BQWIsRUFBMUIsRUFBa0Q7QUFDOUNBLE1BQUFBLE9BQU8sQ0FBQ0csSUFBUixDQUFhRCxLQUFLLENBQUNFLE1BQU4sQ0FBYUMsSUFBYixDQUFrQixJQUFsQixDQUFiO0FBQ0g7O0FBQ0RmLElBQUFBLFdBQVcsQ0FBQ2EsSUFBWixDQUFpQjtBQUNiUixNQUFBQSxJQUFJLEVBQUVILFVBQVUsQ0FBQ0csSUFESjtBQUViVyxNQUFBQSxLQUFLLEVBQUUsQ0FBQyxNQUFNTCxZQUFZLENBQUNLLEtBQWIsRUFBUCxFQUE2QkEsS0FGdkI7QUFHYk4sTUFBQUE7QUFIYSxLQUFqQjtBQUtIOztBQUNELFNBQU9WLFdBQVA7QUFDSCxDLENBRUQ7OztBQUVPLE1BQU1pQixZQUFZLEdBQUc7QUFDeEJDLEVBQUFBLEtBQUssRUFBRTtBQUNIM0IsSUFBQUEsSUFERztBQUVIa0IsSUFBQUEsY0FGRztBQUdIaEIsSUFBQUE7QUFIRztBQURpQixDQUFyQiIsInNvdXJjZXNDb250ZW50IjpbIi8vIEBmbG93XG5cbmltcG9ydCBmcyBmcm9tIFwiZnNcIjtcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IEFyYW5nbyBmcm9tIFwiLi9hcmFuZ29cIjtcbmltcG9ydCB7IENvbGxlY3Rpb24sIG1hbUFjY2Vzc1JlcXVpcmVkIH0gZnJvbSBcIi4vYXJhbmdvLWNvbGxlY3Rpb25cIjtcbmltcG9ydCB0eXBlIHsgR3JhcGhRTFJlcXVlc3RDb250ZXh0RXggfSBmcm9tIFwiLi9yZXNvbHZlcnMtY3VzdG9tXCI7XG5pbXBvcnQge3ZlcnNpb259IGZyb20gJy4uL3BhY2thZ2UuanNvbic7XG5cbnR5cGUgSW5mbyA9IHtcbiAgICB2ZXJzaW9uOiBzdHJpbmcsXG59XG5cbnR5cGUgTGlzdGVuZXJTdGF0ID0ge1xuICAgIGZpbHRlcjogc3RyaW5nLFxuICAgIHNlbGVjdGlvbjogc3RyaW5nLFxuICAgIHF1ZXVlU2l6ZTogbnVtYmVyLFxuICAgIGV2ZW50Q291bnQ6IG51bWJlcixcbiAgICBzZWNvbmRzQWN0aXZlOiBudW1iZXIsXG59XG5cbnR5cGUgQ29sbGVjdGlvblN0YXQgPSB7XG4gICAgbmFtZTogc3RyaW5nLFxuICAgIHN1YnNjcmlwdGlvbkNvdW50OiBudW1iZXIsXG4gICAgd2FpdEZvckNvdW50OiBudW1iZXIsXG4gICAgbWF4UXVldWVTaXplOiBudW1iZXIsXG4gICAgc3Vic2NyaXB0aW9uczogTGlzdGVuZXJTdGF0W10sXG4gICAgd2FpdEZvcjogTGlzdGVuZXJTdGF0W10sXG59XG5cbnR5cGUgU3RhdCA9IHtcbiAgICBjb2xsZWN0aW9uczogQ29sbGVjdGlvblN0YXRbXVxufVxuXG50eXBlIENvbGxlY3Rpb25TdW1tYXJ5ID0ge1xuICAgIG5hbWU6IHN0cmluZyxcbiAgICBjb3VudDogbnVtYmVyLFxuICAgIGluZGV4ZXM6IHN0cmluZ1tdLFxufVxuXG4vLyBRdWVyeVxuXG5mdW5jdGlvbiBpbmZvKCk6IEluZm8ge1xuICAgIHJldHVybiB7XG4gICAgICAgIHZlcnNpb24sXG4gICAgfTtcbn1cblxuZnVuY3Rpb24gc3RhdChfcGFyZW50OiBhbnksIGFyZ3M6IGFueSwgY29udGV4dDogR3JhcGhRTFJlcXVlc3RDb250ZXh0RXgpOiBTdGF0IHtcbiAgICBtYW1BY2Nlc3NSZXF1aXJlZChjb250ZXh0LCBhcmdzKTtcbiAgICBjb25zdCBkYjogQXJhbmdvID0gY29udGV4dC5kYjtcbiAgICBsZXQgdG90YWxXYWl0Rm9yQ291bnQgPSAwO1xuICAgIGxldCB0b3RhbFN1YnNjcmlwdGlvbkNvdW50ID0gMDtcbiAgICBjb25zdCBjb2xsZWN0aW9ucyA9IGRiLmNvbGxlY3Rpb25zLm1hcCgoY29sbGVjdGlvbjogQ29sbGVjdGlvbikgPT4ge1xuICAgICAgICB0b3RhbFdhaXRGb3JDb3VudCArPSBjb2xsZWN0aW9uLndhaXRGb3JDb3VudDtcbiAgICAgICAgdG90YWxTdWJzY3JpcHRpb25Db3VudCArPSBjb2xsZWN0aW9uLnN1YnNjcmlwdGlvbkNvdW50O1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbmFtZTogY29sbGVjdGlvbi5uYW1lLFxuICAgICAgICAgICAgc3Vic2NyaXB0aW9uQ291bnQ6IGNvbGxlY3Rpb24uc3Vic2NyaXB0aW9uQ291bnQsXG4gICAgICAgICAgICB3YWl0Rm9yQ291bnQ6IGNvbGxlY3Rpb24ud2FpdEZvckNvdW50LFxuICAgICAgICAgICAgbWF4UXVldWVTaXplOiBjb2xsZWN0aW9uLm1heFF1ZXVlU2l6ZSxcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbnM6IFtdLFxuICAgICAgICAgICAgd2FpdEZvcjogW10sXG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgICB3YWl0Rm9yQ291bnQ6IHRvdGFsV2FpdEZvckNvdW50LFxuICAgICAgICBzdWJzY3JpcHRpb25Db3VudDogdG90YWxTdWJzY3JpcHRpb25Db3VudCxcbiAgICAgICAgY29sbGVjdGlvbnMsXG4gICAgfTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0Q29sbGVjdGlvbnMoX3BhcmVudDogYW55LCBhcmdzOiBhbnksIGNvbnRleHQ6IEdyYXBoUUxSZXF1ZXN0Q29udGV4dEV4KTogUHJvbWlzZTxDb2xsZWN0aW9uU3VtbWFyeVtdPiB7XG4gICAgbWFtQWNjZXNzUmVxdWlyZWQoY29udGV4dCwgYXJncyk7XG4gICAgY29uc3QgZGI6IEFyYW5nbyA9IGNvbnRleHQuZGI7XG4gICAgY29uc3QgY29sbGVjdGlvbnM6IENvbGxlY3Rpb25TdW1tYXJ5W10gPSBbXTtcbiAgICBmb3IgKGNvbnN0IGNvbGxlY3Rpb24gb2YgZGIuY29sbGVjdGlvbnMpIHtcbiAgICAgICAgY29uc3QgaW5kZXhlczogc3RyaW5nW10gPSBbXTtcbiAgICAgICAgY29uc3QgZGJDb2xsZWN0aW9uID0gY29sbGVjdGlvbi5kYkNvbGxlY3Rpb24oKTtcbiAgICAgICAgZm9yIChjb25zdCBpbmRleCBvZiBhd2FpdCBkYkNvbGxlY3Rpb24uaW5kZXhlcygpKSB7XG4gICAgICAgICAgICBpbmRleGVzLnB1c2goaW5kZXguZmllbGRzLmpvaW4oJywgJykpO1xuICAgICAgICB9XG4gICAgICAgIGNvbGxlY3Rpb25zLnB1c2goe1xuICAgICAgICAgICAgbmFtZTogY29sbGVjdGlvbi5uYW1lLFxuICAgICAgICAgICAgY291bnQ6IChhd2FpdCBkYkNvbGxlY3Rpb24uY291bnQoKSkuY291bnQsXG4gICAgICAgICAgICBpbmRleGVzLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbGxlY3Rpb25zO1xufVxuXG4vLyBNdXRhdGlvblxuXG5leHBvcnQgY29uc3QgcmVzb2x2ZXJzTWFtID0ge1xuICAgIFF1ZXJ5OiB7XG4gICAgICAgIGluZm8sXG4gICAgICAgIGdldENvbGxlY3Rpb25zLFxuICAgICAgICBzdGF0XG4gICAgfSxcbn07XG4iXX0=