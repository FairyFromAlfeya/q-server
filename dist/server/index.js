"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.main = main;

var _server = _interopRequireDefault(require("./server"));

var _logs = _interopRequireDefault(require("./logs"));

var _os = _interopRequireDefault(require("os"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
 * Copyright 2018-2020 TON DEV SOLUTIONS LTD.
 *
 * Licensed under the SOFTWARE EVALUATION License (the "License"); you may not use
 * this file except in compliance with the License.  You may obtain a copy of the
 * License at:
 *
 * http://www.ton.dev/licenses
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific TON DEV software governing permissions and
 * limitations under the License.
 */
const program = require('commander');

function getIp() {
  const ipv4 = Object.values(_os.default.networkInterfaces()).flatMap(x => x).find(x => x.family === 'IPv4' && !x.internal);
  return ipv4 && ipv4.address;
}

program.option('-h, --host <host>', 'listening address', process.env.Q_SERVER_HOST || getIp()).option('-p, --port <port>', 'listening port', process.env.Q_SERVER_PORT || '4000').option('--rpc-port <port>', 'listening rpc port', process.env.Q_SERVER_RPC_PORT || '').option('-m, --requests-mode <mode>', 'Requests mode (kafka | rest)', process.env.Q_REQUESTS_MODE || 'kafka').option('-r, --requests-server <url>', 'Requests server url', process.env.Q_REQUESTS_SERVER || 'kafka:9092').option('-t, --requests-topic <name>', 'Requests topic name', process.env.Q_REQUESTS_TOPIC || 'requests').option('-d, --db-server <address>', 'database server:port', process.env.Q_DATABASE_SERVER || 'arangodb:8529').option('-n, --db-name <name>', 'database name', process.env.Q_DATABASE_NAME || 'blockchain').option('-a, --db-auth <name>', 'database auth in form "user:password', process.env.Q_DATABASE_AUTH || '').option('--db-max-sockets <number>', 'database max sockets', process.env.Q_DATABASE_MAX_SOCKETS || '100').option('--slow-db-server <address>', 'slow queries database server:port', process.env.Q_SLOW_DATABASE_SERVER || '').option('--slow-db-name <name>', 'slow database name', process.env.Q_SLOW_DATABASE_NAME || '').option('--slow-db-auth <name>', 'slow database auth in form "user:password', process.env.Q_SLOW_DATABASE_AUTH || '').option('--slow-db-max-sockets <number>', 'slow database max sockets', process.env.Q_SLOW_DATABASE_MAX_SOCKETS || '3').option('--auth-endpoint <url>', 'auth endpoint', process.env.Q_AUTH_ENDPOINT || '').option('--mam-access-keys <keys>', 'Access keys used to authorize mam endpoint access', process.env.Q_MAM_ACCESS_KEYS || '').option('-j, --jaeger-endpoint <url>', 'jaeger endpoint', process.env.Q_JAEGER_ENDPOINT || '').option('--trace-service <name>', 'trace service name', process.env.Q_TRACE_SERVICE || 'Q Server').option('--trace-tags <tags>', 'additional trace tags (comma separated name=value pairs)', process.env.Q_TRACE_TAGS || '').option('-s, --statsd-server <url>', 'statsd server (host:port)', process.env.Q_STATSD_SERVER || '').option('--statsd-tags <tags>', 'additional statsd tags (comma separated name=value pairs)', process.env.Q_STATSD_TAGS || '').parse(process.argv);
const options = program;

function parseTags(s) {
  const tags = {};
  s.split(',').forEach(t => {
    const i = t.indexOf('=');

    if (i >= 0) {
      tags[t.substr(0, i)] = t.substr(i + 1);
    } else {
      tags[t] = '';
    }
  });
  return tags;
}

const config = {
  server: {
    host: options.host,
    port: Number.parseInt(options.port),
    rpcPort: options.rpcPort
  },
  requests: {
    mode: options.requestsMode,
    server: options.requestsServer,
    topic: options.requestsTopic
  },
  database: {
    server: options.dbServer,
    name: options.dbName,
    auth: options.dbAuth,
    maxSockets: Number(options.dbMaxSockets)
  },
  slowDatabase: {
    server: options.slowDbServer || options.dbServer,
    name: options.slowDbName || options.dbName,
    auth: options.slowDbAuth || options.dbAuth,
    maxSockets: Number(options.slowDbMaxSockets)
  },
  listener: {
    restartTimeout: 1000
  },
  authorization: {
    endpoint: options.authEndpoint
  },
  jaeger: {
    endpoint: options.jaegerEndpoint,
    service: options.traceService,
    tags: parseTags(options.traceTags)
  },
  statsd: {
    server: options.statsdServer,
    tags: (options.statsdTags || '').split(',').map(x => x.trim()).filter(x => x)
  },
  mamAccessKeys: new Set((options.mamAccessKeys || '').split(','))
};
const logs = new _logs.default();
const configLog = logs.create('config');
configLog.debug('USE', config);
const server = new _server.default({
  config,
  logs
});

function main() {
  (async () => {
    try {
      await server.start();
    } catch (error) {
      server.log.error('FAILED', 'START', error);
      process.exit(1);
    }
  })();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NlcnZlci9pbmRleC5qcyJdLCJuYW1lcyI6WyJwcm9ncmFtIiwicmVxdWlyZSIsImdldElwIiwiaXB2NCIsIk9iamVjdCIsInZhbHVlcyIsIm9zIiwibmV0d29ya0ludGVyZmFjZXMiLCJmbGF0TWFwIiwieCIsImZpbmQiLCJmYW1pbHkiLCJpbnRlcm5hbCIsImFkZHJlc3MiLCJvcHRpb24iLCJwcm9jZXNzIiwiZW52IiwiUV9TRVJWRVJfSE9TVCIsIlFfU0VSVkVSX1BPUlQiLCJRX1NFUlZFUl9SUENfUE9SVCIsIlFfUkVRVUVTVFNfTU9ERSIsIlFfUkVRVUVTVFNfU0VSVkVSIiwiUV9SRVFVRVNUU19UT1BJQyIsIlFfREFUQUJBU0VfU0VSVkVSIiwiUV9EQVRBQkFTRV9OQU1FIiwiUV9EQVRBQkFTRV9BVVRIIiwiUV9EQVRBQkFTRV9NQVhfU09DS0VUUyIsIlFfU0xPV19EQVRBQkFTRV9TRVJWRVIiLCJRX1NMT1dfREFUQUJBU0VfTkFNRSIsIlFfU0xPV19EQVRBQkFTRV9BVVRIIiwiUV9TTE9XX0RBVEFCQVNFX01BWF9TT0NLRVRTIiwiUV9BVVRIX0VORFBPSU5UIiwiUV9NQU1fQUNDRVNTX0tFWVMiLCJRX0pBRUdFUl9FTkRQT0lOVCIsIlFfVFJBQ0VfU0VSVklDRSIsIlFfVFJBQ0VfVEFHUyIsIlFfU1RBVFNEX1NFUlZFUiIsIlFfU1RBVFNEX1RBR1MiLCJwYXJzZSIsImFyZ3YiLCJvcHRpb25zIiwicGFyc2VUYWdzIiwicyIsInRhZ3MiLCJzcGxpdCIsImZvckVhY2giLCJ0IiwiaSIsImluZGV4T2YiLCJzdWJzdHIiLCJjb25maWciLCJzZXJ2ZXIiLCJob3N0IiwicG9ydCIsIk51bWJlciIsInBhcnNlSW50IiwicnBjUG9ydCIsInJlcXVlc3RzIiwibW9kZSIsInJlcXVlc3RzTW9kZSIsInJlcXVlc3RzU2VydmVyIiwidG9waWMiLCJyZXF1ZXN0c1RvcGljIiwiZGF0YWJhc2UiLCJkYlNlcnZlciIsIm5hbWUiLCJkYk5hbWUiLCJhdXRoIiwiZGJBdXRoIiwibWF4U29ja2V0cyIsImRiTWF4U29ja2V0cyIsInNsb3dEYXRhYmFzZSIsInNsb3dEYlNlcnZlciIsInNsb3dEYk5hbWUiLCJzbG93RGJBdXRoIiwic2xvd0RiTWF4U29ja2V0cyIsImxpc3RlbmVyIiwicmVzdGFydFRpbWVvdXQiLCJhdXRob3JpemF0aW9uIiwiZW5kcG9pbnQiLCJhdXRoRW5kcG9pbnQiLCJqYWVnZXIiLCJqYWVnZXJFbmRwb2ludCIsInNlcnZpY2UiLCJ0cmFjZVNlcnZpY2UiLCJ0cmFjZVRhZ3MiLCJzdGF0c2QiLCJzdGF0c2RTZXJ2ZXIiLCJzdGF0c2RUYWdzIiwibWFwIiwidHJpbSIsImZpbHRlciIsIm1hbUFjY2Vzc0tleXMiLCJTZXQiLCJsb2dzIiwiUUxvZ3MiLCJjb25maWdMb2ciLCJjcmVhdGUiLCJkZWJ1ZyIsIlRPTlFTZXJ2ZXIiLCJtYWluIiwic3RhcnQiLCJlcnJvciIsImxvZyIsImV4aXQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFtQkE7O0FBQ0E7O0FBRUE7Ozs7QUF0QkE7Ozs7Ozs7Ozs7Ozs7OztBQXdCQSxNQUFNQSxPQUFPLEdBQUdDLE9BQU8sQ0FBQyxXQUFELENBQXZCOztBQUVBLFNBQVNDLEtBQVQsR0FBeUI7QUFDckIsUUFBTUMsSUFBSSxHQUFJQyxNQUFNLENBQUNDLE1BQVAsQ0FBY0MsWUFBR0MsaUJBQUgsRUFBZCxDQUFELENBQ1JDLE9BRFEsQ0FDQUMsQ0FBQyxJQUFJQSxDQURMLEVBRVJDLElBRlEsQ0FFSEQsQ0FBQyxJQUFJQSxDQUFDLENBQUNFLE1BQUYsS0FBYSxNQUFiLElBQXVCLENBQUNGLENBQUMsQ0FBQ0csUUFGNUIsQ0FBYjtBQUdBLFNBQU9ULElBQUksSUFBSUEsSUFBSSxDQUFDVSxPQUFwQjtBQUNIOztBQTBCRGIsT0FBTyxDQUNGYyxNQURMLENBQ1ksbUJBRFosRUFDaUMsbUJBRGpDLEVBRVFDLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxhQUFaLElBQTZCZixLQUFLLEVBRjFDLEVBR0tZLE1BSEwsQ0FHWSxtQkFI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O0FBRkYsR0FsQ1k7QUFzQ3BCbUYsRUFBQUEsYUFBYSxFQUFFLElBQUlDLEdBQUosQ0FBUSxDQUFDckQsT0FBTyxDQUFDb0QsYUFBUixJQUF5QixFQUExQixFQUE4QmhELEtBQTlCLENBQW9DLEdBQXBDLENBQVI7QUF0Q0ssQ0FBeEI7QUF5Q0EsTUFBTWtELElBQUksR0FBRyxJQUFJQyxhQUFKLEVBQWI7QUFDQSxNQUFNQyxTQUFTLEdBQUdGLElBQUksQ0FBQ0csTUFBTCxDQUFZLFFBQVosQ0FBbEI7QUFDQUQsU0FBUyxDQUFDRSxLQUFWLENBQWdCLEtBQWhCLEVBQXVCaEQsTUFBdkI7QUFFQSxNQUFNQyxNQUFNLEdBQUcsSUFBSWdELGVBQUosQ0FBZTtBQUMxQmpELEVBQUFBLE1BRDBCO0FBRTFCNEMsRUFBQUE7QUFGMEIsQ0FBZixDQUFmOztBQUtPLFNBQVNNLElBQVQsR0FBZ0I7QUFDbkIsR0FBQyxZQUFZO0FBQ1QsUUFBSTtBQUNBLFlBQU1qRCxNQUFNLENBQUNrRCxLQUFQLEVBQU47QUFDSCxLQUZELENBRUUsT0FBT0MsS0FBUCxFQUFjO0FBQ1puRCxNQUFBQSxNQUFNLENBQUNvRCxHQUFQLENBQVdELEtBQVgsQ0FBaUIsUUFBakIsRUFBMkIsT0FBM0IsRUFBb0NBLEtBQXBDO0FBQ0F2RixNQUFBQSxPQUFPLENBQUN5RixJQUFSLENBQWEsQ0FBYjtBQUNIO0FBQ0osR0FQRDtBQVFIIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAyMDE4LTIwMjAgVE9OIERFViBTT0xVVElPTlMgTFRELlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBTT0ZUV0FSRSBFVkFMVUFUSU9OIExpY2Vuc2UgKHRoZSBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZVxuICogdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlXG4gKiBMaWNlbnNlIGF0OlxuICpcbiAqIGh0dHA6Ly93d3cudG9uLmRldi9saWNlbnNlc1xuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgVE9OIERFViBzb2Z0d2FyZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG4vLyBAZmxvd1xuXG5pbXBvcnQgdHlwZSB7IFFDb25maWcgfSBmcm9tIFwiLi9jb25maWdcIjtcbmltcG9ydCBUT05RU2VydmVyIGZyb20gJy4vc2VydmVyJztcbmltcG9ydCBRTG9ncyBmcm9tICcuL2xvZ3MnO1xuXG5pbXBvcnQgb3MgZnJvbSAnb3MnO1xuXG5jb25zdCBwcm9ncmFtID0gcmVxdWlyZSgnY29tbWFuZGVyJyk7XG5cbmZ1bmN0aW9uIGdldElwKCk6IHN0cmluZyB7XG4gICAgY29uc3QgaXB2NCA9IChPYmplY3QudmFsdWVzKG9zLm5ldHdvcmtJbnRlcmZhY2VzKCkpOiBhbnkpXG4gICAgICAgIC5mbGF0TWFwKHggPT4geClcbiAgICAgICAgLmZpbmQoeCA9PiB4LmZhbWlseSA9PT0gJ0lQdjQnICYmICF4LmludGVybmFsKTtcbiAgICByZXR1cm4gaXB2NCAmJiBpcHY0LmFkZHJlc3M7XG59XG5cbnR5cGUgUHJvZ3JhbU9wdGlvbnMgPSB7XG4gICAgcmVxdWVzdHNNb2RlOiAna2Fma2EnIHwgJ3Jlc3QnLFxuICAgIHJlcXVlc3RzU2VydmVyOiBzdHJpbmcsXG4gICAgcmVxdWVzdHNUb3BpYzogc3RyaW5nLFxuICAgIGRiU2VydmVyOiBzdHJpbmcsXG4gICAgZGJOYW1lOiBzdHJpbmcsXG4gICAgZGJBdXRoOiBzdHJpbmcsXG4gICAgZGJNYXhTb2NrZXRzOiBzdHJpbmcsXG4gICAgc2xvd0RiU2VydmVyOiBzdHJpbmcsXG4gICAgc2xvd0RiTmFtZTogc3RyaW5nLFxuICAgIHNsb3dEYkF1dGg6IHN0cmluZyxcbiAgICBzbG93RGJNYXhTb2NrZXRzOiBzdHJpbmcsXG4gICAgaG9zdDogc3RyaW5nLFxuICAgIHBvcnQ6IHN0cmluZyxcbiAgICBycGNQb3J0OiBzdHJpbmcsXG4gICAgamFlZ2VyRW5kcG9pbnQ6IHN0cmluZyxcbiAgICB0cmFjZVNlcnZpY2U6IHN0cmluZyxcbiAgICB0cmFjZVRhZ3M6IHN0cmluZyxcbiAgICBhdXRoRW5kcG9pbnQ6IHN0cmluZyxcbiAgICBzdGF0c2RTZXJ2ZXI6IHN0cmluZyxcbiAgICBzdGF0c2RUYWdzOiBzdHJpbmcsXG4gICAgbWFtQWNjZXNzS2V5czogc3RyaW5nLFxufVxuXG5wcm9ncmFtXG4gICAgLm9wdGlvbignLWgsIC0taG9zdCA8aG9zdD4nLCAnbGlzdGVuaW5nIGFkZHJlc3MnLFxuICAgICAgICBwcm9jZXNzLmVudi5RX1NFUlZFUl9IT1NUIHx8IGdldElwKCkpXG4gICAgLm9wdGlvbignLXAsIC0tcG9ydCA8cG9ydD4nLCAnbGlzdGVuaW5nIHBvcnQnLFxuICAgICAgICBwcm9jZXNzLmVudi5RX1NFUlZFUl9QT1JUIHx8ICc0MDAwJylcbiAgICAub3B0aW9uKCctLXJwYy1wb3J0IDxwb3J0PicsICdsaXN0ZW5pbmcgcnBjIHBvcnQnLFxuICAgICAgICBwcm9jZXNzLmVudi5RX1NFUlZFUl9SUENfUE9SVCB8fCAnJylcblxuICAgIC5vcHRpb24oJy1tLCAtLXJlcXVlc3RzLW1vZGUgPG1vZGU+JywgJ1JlcXVlc3RzIG1vZGUgKGthZmthIHwgcmVzdCknLFxuICAgICAgICBwcm9jZXNzLmVudi5RX1JFUVVFU1RTX01PREUgfHwgJ2thZmthJylcbiAgICAub3B0aW9uKCctciwgLS1yZXF1ZXN0cy1zZXJ2ZXIgPHVybD4nLCAnUmVxdWVzdHMgc2VydmVyIHVybCcsXG4gICAgICAgIHByb2Nlc3MuZW52LlFfUkVRVUVTVFNfU0VSVkVSIHx8ICdrYWZrYTo5MDkyJylcbiAgICAub3B0aW9uKCctdCwgLS1yZXF1ZXN0cy10b3BpYyA8bmFtZT4nLCAnUmVxdWVzdHMgdG9waWMgbmFtZScsXG4gICAgICAgIHByb2Nlc3MuZW52LlFfUkVRVUVTVFNfVE9QSUMgfHwgJ3JlcXVlc3RzJylcblxuICAgIC5vcHRpb24oJy1kLCAtLWRiLXNlcnZlciA8YWRkcmVzcz4nLCAnZGF0YWJhc2Ugc2VydmVyOnBvcnQnLFxuICAgICAgICBwcm9jZXNzLmVudi5RX0RBVEFCQVNFX1NFUlZFUiB8fCAnYXJhbmdvZGI6ODUyOScpXG4gICAgLm9wdGlvbignLW4sIC0tZGItbmFtZSA8bmFtZT4nLCAnZGF0YWJhc2UgbmFtZScsXG4gICAgICAgIHByb2Nlc3MuZW52LlFfREFUQUJBU0VfTkFNRSB8fCAnYmxvY2tjaGFpbicpXG4gICAgLm9wdGlvbignLWEsIC0tZGItYXV0aCA8bmFtZT4nLCAnZGF0YWJhc2UgYXV0aCBpbiBmb3JtIFwidXNlcjpwYXNzd29yZCcsXG4gICAgICAgIHByb2Nlc3MuZW52LlFfREFUQUJBU0VfQVVUSCB8fCAnJylcbiAgICAub3B0aW9uKCctLWRiLW1heC1zb2NrZXRzIDxudW1iZXI+JywgJ2RhdGFiYXNlIG1heCBzb2NrZXRzJyxcbiAgICAgICAgcHJvY2Vzcy5lbnYuUV9EQVRBQkFTRV9NQVhfU09DS0VUUyB8fCAnMTAwJylcblxuICAgIC5vcHRpb24oJy0tc2xvdy1kYi1zZXJ2ZXIgPGFkZHJlc3M+JywgJ3Nsb3cgcXVlcmllcyBkYXRhYmFzZSBzZXJ2ZXI6cG9ydCcsXG4gICAgICAgIHByb2Nlc3MuZW52LlFfU0xPV19EQVRBQkFTRV9TRVJWRVIgfHwgJycpXG4gICAgLm9wdGlvbignLS1zbG93LWRiLW5hbWUgPG5hbWU+JywgJ3Nsb3cgZGF0YWJhc2UgbmFtZScsXG4gICAgICAgIHByb2Nlc3MuZW52LlFfU0xPV19EQVRBQkFTRV9OQU1FIHx8ICcnKVxuICAgIC5vcHRpb24oJy0tc2xvdy1kYi1hdXRoIDxuYW1lPicsICdzbG93IGRhdGFiYXNlIGF1dGggaW4gZm9ybSBcInVzZXI6cGFzc3dvcmQnLFxuICAgICAgICBwcm9jZXNzLmVudi5RX1NMT1dfREFUQUJBU0VfQVVUSCB8fCAnJylcbiAgICAub3B0aW9uKCctLXNsb3ctZGItbWF4LXNvY2tldHMgPG51bWJlcj4nLCAnc2xvdyBkYXRhYmFzZSBtYXggc29ja2V0cycsXG4gICAgICAgIHByb2Nlc3MuZW52LlFfU0xPV19EQVRBQkFTRV9NQVhfU09DS0VUUyB8fCAnMycpXG5cbiAgICAub3B0aW9uKCctLWF1dGgtZW5kcG9pbnQgPHVybD4nLCAnYXV0aCBlbmRwb2ludCcsXG4gICAgICAgIHByb2Nlc3MuZW52LlFfQVVUSF9FTkRQT0lOVCB8fCAnJylcbiAgICAub3B0aW9uKCctLW1hbS1hY2Nlc3Mta2V5cyA8a2V5cz4nLCAnQWNjZXNzIGtleXMgdXNlZCB0byBhdXRob3JpemUgbWFtIGVuZHBvaW50IGFjY2VzcycsXG4gICAgICAgIHByb2Nlc3MuZW52LlFfTUFNX0FDQ0VTU19LRVlTIHx8ICcnKVxuXG4gICAgLm9wdGlvbignLWosIC0tamFlZ2VyLWVuZHBvaW50IDx1cmw+JywgJ2phZWdlciBlbmRwb2ludCcsXG4gICAgICAgIHByb2Nlc3MuZW52LlFfSkFFR0VSX0VORFBPSU5UIHx8ICcnKVxuICAgIC5vcHRpb24oJy0tdHJhY2Utc2VydmljZSA8bmFtZT4nLCAndHJhY2Ugc2VydmljZSBuYW1lJyxcbiAgICAgICAgcHJvY2Vzcy5lbnYuUV9UUkFDRV9TRVJWSUNFIHx8ICdRIFNlcnZlcicpXG4gICAgLm9wdGlvbignLS10cmFjZS10YWdzIDx0YWdzPicsICdhZGRpdGlvbmFsIHRyYWNlIHRhZ3MgKGNvbW1hIHNlcGFyYXRlZCBuYW1lPXZhbHVlIHBhaXJzKScsXG4gICAgICAgIHByb2Nlc3MuZW52LlFfVFJBQ0VfVEFHUyB8fCAnJylcblxuICAgIC5vcHRpb24oJy1zLCAtLXN0YXRzZC1zZXJ2ZXIgPHVybD4nLCAnc3RhdHNkIHNlcnZlciAoaG9zdDpwb3J0KScsXG4gICAgICAgIHByb2Nlc3MuZW52LlFfU1RBVFNEX1NFUlZFUiB8fCAnJylcbiAgICAub3B0aW9uKCctLXN0YXRzZC10YWdzIDx0YWdzPicsICdhZGRpdGlvbmFsIHN0YXRzZCB0YWdzIChjb21tYSBzZXBhcmF0ZWQgbmFtZT12YWx1ZSBwYWlycyknLFxuICAgICAgICBwcm9jZXNzLmVudi5RX1NUQVRTRF9UQUdTIHx8ICcnKVxuXG4gICAgLnBhcnNlKHByb2Nlc3MuYXJndik7XG5cbmNvbnN0IG9wdGlvbnM6IFByb2dyYW1PcHRpb25zID0gcHJvZ3JhbTtcblxuZnVuY3Rpb24gcGFyc2VUYWdzKHM6IHN0cmluZyk6IHsgW3N0cmluZ106IHN0cmluZyB9IHtcbiAgICBjb25zdCB0YWdzOiB7IFtzdHJpbmddOiBzdHJpbmcgfSA9IHt9O1xuICAgIHMuc3BsaXQoJywnKS5mb3JFYWNoKCh0KSA9PiB7XG4gICAgICAgIGNvbnN0IGkgPSB0LmluZGV4T2YoJz0nKTtcbiAgICAgICAgaWYgKGkgPj0gMCkge1xuICAgICAgICAgICAgdGFnc1t0LnN1YnN0cigwLCBpKV0gPSB0LnN1YnN0cihpICsgMSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0YWdzW3RdID0gJyc7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gdGFncztcblxufVxuY29uc3QgY29uZmlnOiBRQ29uZmlnID0ge1xuICAgIHNlcnZlcjoge1xuICAgICAgICBob3N0OiBvcHRpb25zLmhvc3QsXG4gICAgICAgIHBvcnQ6IE51bWJlci5wYXJzZUludChvcHRpb25zLnBvcnQpLFxuICAgICAgICBycGNQb3J0OiBvcHRpb25zLnJwY1BvcnQsXG4gICAgfSxcbiAgICByZXF1ZXN0czoge1xuICAgICAgICBtb2RlOiBvcHRpb25zLnJlcXVlc3RzTW9kZSxcbiAgICAgICAgc2VydmVyOiBvcHRpb25zLnJlcXVlc3RzU2VydmVyLFxuICAgICAgICB0b3BpYzogb3B0aW9ucy5yZXF1ZXN0c1RvcGljLFxuICAgIH0sXG4gICAgZGF0YWJhc2U6IHtcbiAgICAgICAgc2VydmVyOiBvcHRpb25zLmRiU2VydmVyLFxuICAgICAgICBuYW1lOiBvcHRpb25zLmRiTmFtZSxcbiAgICAgICAgYXV0aDogb3B0aW9ucy5kYkF1dGgsXG4gICAgICAgIG1heFNvY2tldHM6IE51bWJlcihvcHRpb25zLmRiTWF4U29ja2V0cyksXG4gICAgfSxcbiAgICBzbG93RGF0YWJhc2U6IHtcbiAgICAgICAgc2VydmVyOiBvcHRpb25zLnNsb3dEYlNlcnZlciB8fCBvcHRpb25zLmRiU2VydmVyLFxuICAgICAgICBuYW1lOiBvcHRpb25zLnNsb3dEYk5hbWUgfHwgb3B0aW9ucy5kYk5hbWUsXG4gICAgICAgIGF1dGg6IG9wdGlvbnMuc2xvd0RiQXV0aCB8fCBvcHRpb25zLmRiQXV0aCxcbiAgICAgICAgbWF4U29ja2V0czogTnVtYmVyKG9wdGlvbnMuc2xvd0RiTWF4U29ja2V0cyksXG4gICAgfSxcbiAgICBsaXN0ZW5lcjoge1xuICAgICAgICByZXN0YXJ0VGltZW91dDogMTAwMFxuICAgIH0sXG4gICAgYXV0aG9yaXphdGlvbjoge1xuICAgICAgICBlbmRwb2ludDogb3B0aW9ucy5hdXRoRW5kcG9pbnQsXG4gICAgfSxcbiAgICBqYWVnZXI6IHtcbiAgICAgICAgZW5kcG9pbnQ6IG9wdGlvbnMuamFlZ2VyRW5kcG9pbnQsXG4gICAgICAgIHNlcnZpY2U6IG9wdGlvbnMudHJhY2VTZXJ2aWNlLFxuICAgICAgICB0YWdzOiBwYXJzZVRhZ3Mob3B0aW9ucy50cmFjZVRhZ3MpLFxuICAgIH0sXG4gICAgc3RhdHNkOiB7XG4gICAgICAgIHNlcnZlcjogb3B0aW9ucy5zdGF0c2RTZXJ2ZXIsXG4gICAgICAgIHRhZ3M6IChvcHRpb25zLnN0YXRzZFRhZ3MgfHwgJycpLnNwbGl0KCcsJykubWFwKHggPT4geC50cmltKCkpLmZpbHRlcih4ID0+IHgpLFxuICAgIH0sXG4gICAgbWFtQWNjZXNzS2V5czogbmV3IFNldCgob3B0aW9ucy5tYW1BY2Nlc3NLZXlzIHx8ICcnKS5zcGxpdCgnLCcpKSxcbn07XG5cbmNvbnN0IGxvZ3MgPSBuZXcgUUxvZ3MoKTtcbmNvbnN0IGNvbmZpZ0xvZyA9IGxvZ3MuY3JlYXRlKCdjb25maWcnKTtcbmNvbmZpZ0xvZy5kZWJ1ZygnVVNFJywgY29uZmlnKTtcblxuY29uc3Qgc2VydmVyID0gbmV3IFRPTlFTZXJ2ZXIoe1xuICAgIGNvbmZpZyxcbiAgICBsb2dzLFxufSk7XG5cbmV4cG9ydCBmdW5jdGlvbiBtYWluKCkge1xuICAgIChhc3luYyAoKSA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBhd2FpdCBzZXJ2ZXIuc3RhcnQoKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHNlcnZlci5sb2cuZXJyb3IoJ0ZBSUxFRCcsICdTVEFSVCcsIGVycm9yKTtcbiAgICAgICAgICAgIHByb2Nlc3MuZXhpdCgxKTtcbiAgICAgICAgfVxuICAgIH0pKCk7XG59XG4iXX0=