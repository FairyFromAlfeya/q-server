"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.main = main;

var _server = _interopRequireDefault(require("./server"));

var _logs = _interopRequireDefault(require("./logs"));

var _os = _interopRequireDefault(require("os"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
 * Copyright 2018-2020 TON DEV SOLUTIONS LTD.
 *
 * Licensed under the SOFTWARE EVALUATION License (the "License"); you may not use
 * this file except in compliance with the License.  You may obtain a copy of the
 * License at:
 *
 * http://www.ton.dev/licenses
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific TON DEV software governing permissions and
 * limitations under the License.
 */
const program = require('commander');

function getIp() {
  const ipv4 = Object.values(_os.default.networkInterfaces()).flatMap(x => x).find(x => x.family === 'IPv4' && !x.internal);
  return ipv4 && ipv4.address;
}

program.option('-h, --host <host>', 'listening address', process.env.Q_SERVER_HOST || getIp()).option('-p, --port <port>', 'listening port', process.env.Q_SERVER_PORT || '4000').option('--rpc-port <port>', 'listening rpc port', process.env.Q_SERVER_RPC_PORT || '').option('-m, --requests-mode <mode>', 'Requests mode (kafka | rest)', process.env.Q_REQUESTS_MODE || 'kafka').option('-r, --requests-server <url>', 'Requests server url', process.env.Q_REQUESTS_SERVER || 'kafka:9092').option('-t, --requests-topic <name>', 'Requests topic name', process.env.Q_REQUESTS_TOPIC || 'requests').option('-d, --db-server <address>', 'database server:port', process.env.Q_DATABASE_SERVER || 'arangodb:8529').option('-n, --db-name <name>', 'database name', process.env.Q_DATABASE_NAME || 'blockchain').option('-a, --db-auth <name>', 'database auth in form "user:password', process.env.Q_DATABASE_AUTH || '').option('--db-max-sockets <number>', 'database max sockets', process.env.Q_DATABASE_MAX_SOCKETS || '100').option('--slow-db-server <address>', 'slow queries database server:port', process.env.Q_SLOW_DATABASE_SERVER || '').option('--slow-db-name <name>', 'slow database name', process.env.Q_SLOW_DATABASE_NAME || '').option('--slow-db-auth <name>', 'slow database auth in form "user:password', process.env.Q_SLOW_DATABASE_AUTH || '').option('--slow-db-max-sockets <number>', 'slow database max sockets', process.env.Q_SLOW_DATABASE_MAX_SOCKETS || '3').option('--auth-endpoint <url>', 'auth endpoint', process.env.Q_AUTH_ENDPOINT || '').option('--mam-access-keys <keys>', 'Access keys used to authorize mam endpoint access', process.env.Q_MAM_ACCESS_KEYS || '').option('-j, --jaeger-endpoint <url>', 'jaeger endpoint', process.env.Q_JAEGER_ENDPOINT || '').option('--trace-service <name>', 'trace service name', process.env.Q_TRACE_SERVICE || 'Q Server').option('--trace-tags <tags>', 'additional trace tags (comma separated name=value pairs)', process.env.Q_TRACE_TAGS || '').option('-s, --statsd-server <url>', 'statsd server (host:port)', process.env.Q_STATSD_SERVER || '').parse(process.argv);
const options = program;

function parseTags(s) {
  const tags = {};
  s.split(',').forEach(t => {
    const i = t.indexOf('=');

    if (i >= 0) {
      tags[t.substr(0, i)] = t.substr(i + 1);
    } else {
      tags[t] = '';
    }
  });
  return tags;
}

const config = {
  server: {
    host: options.host,
    port: Number.parseInt(options.port),
    rpcPort: options.rpcPort
  },
  requests: {
    mode: options.requestsMode,
    server: options.requestsServer,
    topic: options.requestsTopic
  },
  database: {
    server: options.dbServer,
    name: options.dbName,
    auth: options.dbAuth,
    maxSockets: Number(options.dbMaxSockets)
  },
  slowDatabase: {
    server: options.slowDbServer || options.dbServer,
    name: options.slowDbName || options.dbName,
    auth: options.slowDbAuth || options.dbAuth,
    maxSockets: Number(options.slowDbMaxSockets)
  },
  listener: {
    restartTimeout: 1000
  },
  authorization: {
    endpoint: options.authEndpoint
  },
  jaeger: {
    endpoint: options.jaegerEndpoint,
    service: options.traceService,
    tags: parseTags(options.traceTags)
  },
  statsd: {
    server: options.statsdServer
  },
  mamAccessKeys: new Set((options.mamAccessKeys || '').split(','))
};
const logs = new _logs.default();
const configLog = logs.create('config');
configLog.debug('USE', config);
const server = new _server.default({
  config,
  logs
});

function main() {
  (async () => {
    try {
      await server.start();
    } catch (error) {
      server.log.error('FAILED', 'START', error);
      process.exit(1);
    }
  })();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NlcnZlci9pbmRleC5qcyJdLCJuYW1lcyI6WyJwcm9ncmFtIiwicmVxdWlyZSIsImdldElwIiwiaXB2NCIsIk9iamVjdCIsInZhbHVlcyIsIm9zIiwibmV0d29ya0ludGVyZmFjZXMiLCJmbGF0TWFwIiwieCIsImZpbmQiLCJmYW1pbHkiLCJpbnRlcm5hbCIsImFkZHJlc3MiLCJvcHRpb24iLCJwcm9jZXNzIiwiZW52IiwiUV9TRVJWRVJfSE9TVCIsIlFfU0VSVkVSX1BPUlQiLCJRX1NFUlZFUl9SUENfUE9SVCIsIlFfUkVRVUVTVFNfTU9ERSIsIlFfUkVRVUVTVFNfU0VSVkVSIiwiUV9SRVFVRVNUU19UT1BJQyIsIlFfREFUQUJBU0VfU0VSVkVSIiwiUV9EQVRBQkFTRV9OQU1FIiwiUV9EQVRBQkFTRV9BVVRIIiwiUV9EQVRBQkFTRV9NQVhfU09DS0VUUyIsIlFfU0xPV19EQVRBQkFTRV9TRVJWRVIiLCJRX1NMT1dfREFUQUJBU0VfTkFNRSIsIlFfU0xPV19EQVRBQkFTRV9BVVRIIiwiUV9TTE9XX0RBVEFCQVNFX01BWF9TT0NLRVRTIiwiUV9BVVRIX0VORFBPSU5UIiwiUV9NQU1fQUNDRVNTX0tFWVMiLCJRX0pBRUdFUl9FTkRQT0lOVCIsIlFfVFJBQ0VfU0VSVklDRSIsIlFfVFJBQ0VfVEFHUyIsIlFfU1RBVFNEX1NFUlZFUiIsInBhcnNlIiwiYXJndiIsIm9wdGlvbnMiLCJwYXJzZVRhZ3MiLCJzIiwidGFncyIsInNwbGl0IiwiZm9yRWFjaCIsInQiLCJpIiwiaW5kZXhPZiIsInN1YnN0ciIsImNvbmZpZyIsInNlcnZlciIsImhvc3QiLCJwb3J0IiwiTnVtYmVyIiwicGFyc2VJbnQiLCJycGNQb3J0IiwicmVxdWVzdHMiLCJtb2RlIiwicmVxdWVzdHNNb2RlIiwicmVxdWVzdHNTZXJ2ZXIiLCJ0b3BpYyIsInJlcXVlc3RzVG9waWMiLCJkYXRhYmFzZSIsImRiU2VydmVyIiwibmFtZSIsImRiTmFtZSIsImF1dGgiLCJkYkF1dGgiLCJtYXhTb2NrZXRzIiwiZGJNYXhTb2NrZXRzIiwic2xvd0RhdGFiYXNlIiwic2xvd0RiU2VydmVyIiwic2xvd0RiTmFtZSIsInNsb3dEYkF1dGgiLCJzbG93RGJNYXhTb2NrZXRzIiwibGlzdGVuZXIiLCJyZXN0YXJ0VGltZW91dCIsImF1dGhvcml6YXRpb24iLCJlbmRwb2ludCIsImF1dGhFbmRwb2ludCIsImphZWdlciIsImphZWdlckVuZHBvaW50Iiwic2VydmljZSIsInRyYWNlU2VydmljZSIsInRyYWNlVGFncyIsInN0YXRzZCIsInN0YXRzZFNlcnZlciIsIm1hbUFjY2Vzc0tleXMiLCJTZXQiLCJsb2dzIiwiUUxvZ3MiLCJjb25maWdMb2ciLCJjcmVhdGUiLCJkZWJ1ZyIsIlRPTlFTZXJ2ZXIiLCJtYWluIiwic3RhcnQiLCJlcnJvciIsImxvZyIsImV4aXQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFtQkE7O0FBQ0E7O0FBRUE7Ozs7QUF0QkE7Ozs7Ozs7Ozs7Ozs7OztBQXdCQSxNQUFNQSxPQUFPLEdBQUdDLE9BQU8sQ0FBQyxXQUFELENBQXZCOztBQUVBLFNBQVNDLEtBQVQsR0FBeUI7QUFDckIsUUFBTUMsSUFBSSxHQUFJQyxNQUFNLENBQUNDLE1BQVAsQ0FBY0MsWUFBR0MsaUJBQUgsRUFBZCxDQUFELENBQ1JDLE9BRFEsQ0FDQUMsQ0FBQyxJQUFJQSxDQURMLEVBRVJDLElBRlEsQ0FFSEQsQ0FBQyxJQUFJQSxDQUFDLENBQUNFLE1BQUYsS0FBYSxNQUFiLElBQXVCLENBQUNGLENBQUMsQ0FBQ0csUUFGNUIsQ0FBYjtBQUdBLFNBQU9ULElBQUksSUFBSUEsSUFBSSxDQUFDVSxPQUFwQjtBQUNIOztBQXlCRGIsT0FBTyxDQUNGYyxNQURMLENBQ1ksbUJBRFosRUFDaUMsbUJBRGpDLEVBRVFDLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxhQUFaLElBQTZCZixLQUFLLEVBRjFDLEVBR0tZLE1BSEwsQ0FHWSxtQkFIWixFQUdpQyxnQkFIakMsRUFJUUMsT0FBTyxDQUFDQyxHQUFSLENBQVlFLGFBQVosSUFB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TUFEMEI7QUFFMUJ3QyxFQUFBQTtBQUYwQixDQUFmLENBQWY7O0FBS08sU0FBU00sSUFBVCxHQUFnQjtBQUNuQixHQUFDLFlBQVk7QUFDVCxRQUFJO0FBQ0EsWUFBTTdDLE1BQU0sQ0FBQzhDLEtBQVAsRUFBTjtBQUNILEtBRkQsQ0FFRSxPQUFPQyxLQUFQLEVBQWM7QUFDWi9DLE1BQUFBLE1BQU0sQ0FBQ2dELEdBQVAsQ0FBV0QsS0FBWCxDQUFpQixRQUFqQixFQUEyQixPQUEzQixFQUFvQ0EsS0FBcEM7QUFDQWxGLE1BQUFBLE9BQU8sQ0FBQ29GLElBQVIsQ0FBYSxDQUFiO0FBQ0g7QUFDSixHQVBEO0FBUUgiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IDIwMTgtMjAyMCBUT04gREVWIFNPTFVUSU9OUyBMVEQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIFNPRlRXQVJFIEVWQUxVQVRJT04gTGljZW5zZSAodGhlIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlXG4gKiB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGVcbiAqIExpY2Vuc2UgYXQ6XG4gKlxuICogaHR0cDovL3d3dy50b24uZGV2L2xpY2Vuc2VzXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBUT04gREVWIHNvZnR3YXJlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbi8vIEBmbG93XG5cbmltcG9ydCB0eXBlIHsgUUNvbmZpZyB9IGZyb20gXCIuL2NvbmZpZ1wiO1xuaW1wb3J0IFRPTlFTZXJ2ZXIgZnJvbSAnLi9zZXJ2ZXInO1xuaW1wb3J0IFFMb2dzIGZyb20gJy4vbG9ncyc7XG5cbmltcG9ydCBvcyBmcm9tICdvcyc7XG5cbmNvbnN0IHByb2dyYW0gPSByZXF1aXJlKCdjb21tYW5kZXInKTtcblxuZnVuY3Rpb24gZ2V0SXAoKTogc3RyaW5nIHtcbiAgICBjb25zdCBpcHY0ID0gKE9iamVjdC52YWx1ZXMob3MubmV0d29ya0ludGVyZmFjZXMoKSk6IGFueSlcbiAgICAgICAgLmZsYXRNYXAoeCA9PiB4KVxuICAgICAgICAuZmluZCh4ID0+IHguZmFtaWx5ID09PSAnSVB2NCcgJiYgIXguaW50ZXJuYWwpO1xuICAgIHJldHVybiBpcHY0ICYmIGlwdjQuYWRkcmVzcztcbn1cblxudHlwZSBQcm9ncmFtT3B0aW9ucyA9IHtcbiAgICByZXF1ZXN0c01vZGU6ICdrYWZrYScgfCAncmVzdCcsXG4gICAgcmVxdWVzdHNTZXJ2ZXI6IHN0cmluZyxcbiAgICByZXF1ZXN0c1RvcGljOiBzdHJpbmcsXG4gICAgZGJTZXJ2ZXI6IHN0cmluZyxcbiAgICBkYk5hbWU6IHN0cmluZyxcbiAgICBkYkF1dGg6IHN0cmluZyxcbiAgICBkYk1heFNvY2tldHM6IHN0cmluZyxcbiAgICBzbG93RGJTZXJ2ZXI6IHN0cmluZyxcbiAgICBzbG93RGJOYW1lOiBzdHJpbmcsXG4gICAgc2xvd0RiQXV0aDogc3RyaW5nLFxuICAgIHNsb3dEYk1heFNvY2tldHM6IHN0cmluZyxcbiAgICBob3N0OiBzdHJpbmcsXG4gICAgcG9ydDogc3RyaW5nLFxuICAgIHJwY1BvcnQ6IHN0cmluZyxcbiAgICBqYWVnZXJFbmRwb2ludDogc3RyaW5nLFxuICAgIHRyYWNlU2VydmljZTogc3RyaW5nLFxuICAgIHRyYWNlVGFnczogc3RyaW5nLFxuICAgIGF1dGhFbmRwb2ludDogc3RyaW5nLFxuICAgIHN0YXRzZFNlcnZlcjogc3RyaW5nLFxuICAgIG1hbUFjY2Vzc0tleXM6IHN0cmluZyxcbn1cblxucHJvZ3JhbVxuICAgIC5vcHRpb24oJy1oLCAtLWhvc3QgPGhvc3Q+JywgJ2xpc3RlbmluZyBhZGRyZXNzJyxcbiAgICAgICAgcHJvY2Vzcy5lbnYuUV9TRVJWRVJfSE9TVCB8fCBnZXRJcCgpKVxuICAgIC5vcHRpb24oJy1wLCAtLXBvcnQgPHBvcnQ+JywgJ2xpc3RlbmluZyBwb3J0JyxcbiAgICAgICAgcHJvY2Vzcy5lbnYuUV9TRVJWRVJfUE9SVCB8fCAnNDAwMCcpXG4gICAgLm9wdGlvbignLS1ycGMtcG9ydCA8cG9ydD4nLCAnbGlzdGVuaW5nIHJwYyBwb3J0JyxcbiAgICAgICAgcHJvY2Vzcy5lbnYuUV9TRVJWRVJfUlBDX1BPUlQgfHwgJycpXG5cbiAgICAub3B0aW9uKCctbSwgLS1yZXF1ZXN0cy1tb2RlIDxtb2RlPicsICdSZXF1ZXN0cyBtb2RlIChrYWZrYSB8IHJlc3QpJyxcbiAgICAgICAgcHJvY2Vzcy5lbnYuUV9SRVFVRVNUU19NT0RFIHx8ICdrYWZrYScpXG4gICAgLm9wdGlvbignLXIsIC0tcmVxdWVzdHMtc2VydmVyIDx1cmw+JywgJ1JlcXVlc3RzIHNlcnZlciB1cmwnLFxuICAgICAgICBwcm9jZXNzLmVudi5RX1JFUVVFU1RTX1NFUlZFUiB8fCAna2Fma2E6OTA5MicpXG4gICAgLm9wdGlvbignLXQsIC0tcmVxdWVzdHMtdG9waWMgPG5hbWU+JywgJ1JlcXVlc3RzIHRvcGljIG5hbWUnLFxuICAgICAgICBwcm9jZXNzLmVudi5RX1JFUVVFU1RTX1RPUElDIHx8ICdyZXF1ZXN0cycpXG5cbiAgICAub3B0aW9uKCctZCwgLS1kYi1zZXJ2ZXIgPGFkZHJlc3M+JywgJ2RhdGFiYXNlIHNlcnZlcjpwb3J0JyxcbiAgICAgICAgcHJvY2Vzcy5lbnYuUV9EQVRBQkFTRV9TRVJWRVIgfHwgJ2FyYW5nb2RiOjg1MjknKVxuICAgIC5vcHRpb24oJy1uLCAtLWRiLW5hbWUgPG5hbWU+JywgJ2RhdGFiYXNlIG5hbWUnLFxuICAgICAgICBwcm9jZXNzLmVudi5RX0RBVEFCQVNFX05BTUUgfHwgJ2Jsb2NrY2hhaW4nKVxuICAgIC5vcHRpb24oJy1hLCAtLWRiLWF1dGggPG5hbWU+JywgJ2RhdGFiYXNlIGF1dGggaW4gZm9ybSBcInVzZXI6cGFzc3dvcmQnLFxuICAgICAgICBwcm9jZXNzLmVudi5RX0RBVEFCQVNFX0FVVEggfHwgJycpXG4gICAgLm9wdGlvbignLS1kYi1tYXgtc29ja2V0cyA8bnVtYmVyPicsICdkYXRhYmFzZSBtYXggc29ja2V0cycsXG4gICAgICAgIHByb2Nlc3MuZW52LlFfREFUQUJBU0VfTUFYX1NPQ0tFVFMgfHwgJzEwMCcpXG5cbiAgICAub3B0aW9uKCctLXNsb3ctZGItc2VydmVyIDxhZGRyZXNzPicsICdzbG93IHF1ZXJpZXMgZGF0YWJhc2Ugc2VydmVyOnBvcnQnLFxuICAgICAgICBwcm9jZXNzLmVudi5RX1NMT1dfREFUQUJBU0VfU0VSVkVSIHx8ICcnKVxuICAgIC5vcHRpb24oJy0tc2xvdy1kYi1uYW1lIDxuYW1lPicsICdzbG93IGRhdGFiYXNlIG5hbWUnLFxuICAgICAgICBwcm9jZXNzLmVudi5RX1NMT1dfREFUQUJBU0VfTkFNRSB8fCAnJylcbiAgICAub3B0aW9uKCctLXNsb3ctZGItYXV0aCA8bmFtZT4nLCAnc2xvdyBkYXRhYmFzZSBhdXRoIGluIGZvcm0gXCJ1c2VyOnBhc3N3b3JkJyxcbiAgICAgICAgcHJvY2Vzcy5lbnYuUV9TTE9XX0RBVEFCQVNFX0FVVEggfHwgJycpXG4gICAgLm9wdGlvbignLS1zbG93LWRiLW1heC1zb2NrZXRzIDxudW1iZXI+JywgJ3Nsb3cgZGF0YWJhc2UgbWF4IHNvY2tldHMnLFxuICAgICAgICBwcm9jZXNzLmVudi5RX1NMT1dfREFUQUJBU0VfTUFYX1NPQ0tFVFMgfHwgJzMnKVxuXG4gICAgLm9wdGlvbignLS1hdXRoLWVuZHBvaW50IDx1cmw+JywgJ2F1dGggZW5kcG9pbnQnLFxuICAgICAgICBwcm9jZXNzLmVudi5RX0FVVEhfRU5EUE9JTlQgfHwgJycpXG4gICAgLm9wdGlvbignLS1tYW0tYWNjZXNzLWtleXMgPGtleXM+JywgJ0FjY2VzcyBrZXlzIHVzZWQgdG8gYXV0aG9yaXplIG1hbSBlbmRwb2ludCBhY2Nlc3MnLFxuICAgICAgICBwcm9jZXNzLmVudi5RX01BTV9BQ0NFU1NfS0VZUyB8fCAnJylcblxuICAgIC5vcHRpb24oJy1qLCAtLWphZWdlci1lbmRwb2ludCA8dXJsPicsICdqYWVnZXIgZW5kcG9pbnQnLFxuICAgICAgICBwcm9jZXNzLmVudi5RX0pBRUdFUl9FTkRQT0lOVCB8fCAnJylcbiAgICAub3B0aW9uKCctLXRyYWNlLXNlcnZpY2UgPG5hbWU+JywgJ3RyYWNlIHNlcnZpY2UgbmFtZScsXG4gICAgICAgIHByb2Nlc3MuZW52LlFfVFJBQ0VfU0VSVklDRSB8fCAnUSBTZXJ2ZXInKVxuICAgIC5vcHRpb24oJy0tdHJhY2UtdGFncyA8dGFncz4nLCAnYWRkaXRpb25hbCB0cmFjZSB0YWdzIChjb21tYSBzZXBhcmF0ZWQgbmFtZT12YWx1ZSBwYWlycyknLFxuICAgICAgICBwcm9jZXNzLmVudi5RX1RSQUNFX1RBR1MgfHwgJycpXG5cbiAgICAub3B0aW9uKCctcywgLS1zdGF0c2Qtc2VydmVyIDx1cmw+JywgJ3N0YXRzZCBzZXJ2ZXIgKGhvc3Q6cG9ydCknLFxuICAgICAgICBwcm9jZXNzLmVudi5RX1NUQVRTRF9TRVJWRVIgfHwgJycpXG5cbiAgICAucGFyc2UocHJvY2Vzcy5hcmd2KTtcblxuY29uc3Qgb3B0aW9uczogUHJvZ3JhbU9wdGlvbnMgPSBwcm9ncmFtO1xuXG5mdW5jdGlvbiBwYXJzZVRhZ3Moczogc3RyaW5nKTogeyBbc3RyaW5nXTogc3RyaW5nIH0ge1xuICAgIGNvbnN0IHRhZ3M6IHsgW3N0cmluZ106IHN0cmluZyB9ID0ge307XG4gICAgcy5zcGxpdCgnLCcpLmZvckVhY2goKHQpID0+IHtcbiAgICAgICAgY29uc3QgaSA9IHQuaW5kZXhPZignPScpO1xuICAgICAgICBpZiAoaSA+PSAwKSB7XG4gICAgICAgICAgICB0YWdzW3Quc3Vic3RyKDAsIGkpXSA9IHQuc3Vic3RyKGkgKyAxKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRhZ3NbdF0gPSAnJztcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiB0YWdzO1xuXG59XG5jb25zdCBjb25maWc6IFFDb25maWcgPSB7XG4gICAgc2VydmVyOiB7XG4gICAgICAgIGhvc3Q6IG9wdGlvbnMuaG9zdCxcbiAgICAgICAgcG9ydDogTnVtYmVyLnBhcnNlSW50KG9wdGlvbnMucG9ydCksXG4gICAgICAgIHJwY1BvcnQ6IG9wdGlvbnMucnBjUG9ydCxcbiAgICB9LFxuICAgIHJlcXVlc3RzOiB7XG4gICAgICAgIG1vZGU6IG9wdGlvbnMucmVxdWVzdHNNb2RlLFxuICAgICAgICBzZXJ2ZXI6IG9wdGlvbnMucmVxdWVzdHNTZXJ2ZXIsXG4gICAgICAgIHRvcGljOiBvcHRpb25zLnJlcXVlc3RzVG9waWMsXG4gICAgfSxcbiAgICBkYXRhYmFzZToge1xuICAgICAgICBzZXJ2ZXI6IG9wdGlvbnMuZGJTZXJ2ZXIsXG4gICAgICAgIG5hbWU6IG9wdGlvbnMuZGJOYW1lLFxuICAgICAgICBhdXRoOiBvcHRpb25zLmRiQXV0aCxcbiAgICAgICAgbWF4U29ja2V0czogTnVtYmVyKG9wdGlvbnMuZGJNYXhTb2NrZXRzKSxcbiAgICB9LFxuICAgIHNsb3dEYXRhYmFzZToge1xuICAgICAgICBzZXJ2ZXI6IG9wdGlvbnMuc2xvd0RiU2VydmVyIHx8IG9wdGlvbnMuZGJTZXJ2ZXIsXG4gICAgICAgIG5hbWU6IG9wdGlvbnMuc2xvd0RiTmFtZSB8fCBvcHRpb25zLmRiTmFtZSxcbiAgICAgICAgYXV0aDogb3B0aW9ucy5zbG93RGJBdXRoIHx8IG9wdGlvbnMuZGJBdXRoLFxuICAgICAgICBtYXhTb2NrZXRzOiBOdW1iZXIob3B0aW9ucy5zbG93RGJNYXhTb2NrZXRzKSxcbiAgICB9LFxuICAgIGxpc3RlbmVyOiB7XG4gICAgICAgIHJlc3RhcnRUaW1lb3V0OiAxMDAwXG4gICAgfSxcbiAgICBhdXRob3JpemF0aW9uOiB7XG4gICAgICAgIGVuZHBvaW50OiBvcHRpb25zLmF1dGhFbmRwb2ludCxcbiAgICB9LFxuICAgIGphZWdlcjoge1xuICAgICAgICBlbmRwb2ludDogb3B0aW9ucy5qYWVnZXJFbmRwb2ludCxcbiAgICAgICAgc2VydmljZTogb3B0aW9ucy50cmFjZVNlcnZpY2UsXG4gICAgICAgIHRhZ3M6IHBhcnNlVGFncyhvcHRpb25zLnRyYWNlVGFncyksXG4gICAgfSxcbiAgICBzdGF0c2Q6IHtcbiAgICAgICAgc2VydmVyOiBvcHRpb25zLnN0YXRzZFNlcnZlcixcbiAgICB9LFxuICAgIG1hbUFjY2Vzc0tleXM6IG5ldyBTZXQoKG9wdGlvbnMubWFtQWNjZXNzS2V5cyB8fCAnJykuc3BsaXQoJywnKSksXG59O1xuXG5jb25zdCBsb2dzID0gbmV3IFFMb2dzKCk7XG5jb25zdCBjb25maWdMb2cgPSBsb2dzLmNyZWF0ZSgnY29uZmlnJyk7XG5jb25maWdMb2cuZGVidWcoJ1VTRScsIGNvbmZpZyk7XG5cbmNvbnN0IHNlcnZlciA9IG5ldyBUT05RU2VydmVyKHtcbiAgICBjb25maWcsXG4gICAgbG9ncyxcbn0pO1xuXG5leHBvcnQgZnVuY3Rpb24gbWFpbigpIHtcbiAgICAoYXN5bmMgKCkgPT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgYXdhaXQgc2VydmVyLnN0YXJ0KCk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBzZXJ2ZXIubG9nLmVycm9yKCdGQUlMRUQnLCAnU1RBUlQnLCBlcnJvcik7XG4gICAgICAgICAgICBwcm9jZXNzLmV4aXQoMSk7XG4gICAgICAgIH1cbiAgICB9KSgpO1xufVxuIl19