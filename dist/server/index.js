"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.main = main;

var _config = require("./config");

var _server = _interopRequireDefault(require("./server"));

var _logs = _interopRequireDefault(require("./logs"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
 * Copyright 2018-2020 TON DEV SOLUTIONS LTD.
 *
 * Licensed under the SOFTWARE EVALUATION License (the "License"); you may not use
 * this file except in compliance with the License.  You may obtain a copy of the
 * License at:
 *
 * http://www.ton.dev/licenses
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific TON DEV software governing permissions and
 * limitations under the License.
 */
const program = require('commander');

Object.values(_config.programOptions).forEach(value => {
  const option = value;
  program.option(option.option, option.description);
});
program.parse(process.argv);
const config = (0, _config.createConfig)(program, process.env, _config.programOptions);
const logs = new _logs.default();
const configLog = logs.create('config');
configLog.debug('USE', config);
const server = new _server.default({
  config,
  logs
});

function main() {
  (async () => {
    try {
      await server.start();
    } catch (error) {
      server.log.error('FAILED', 'START', error);
      process.exit(1);
    }
  })();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zZXJ2ZXIvaW5kZXguanMiXSwibmFtZXMiOlsicHJvZ3JhbSIsInJlcXVpcmUiLCJPYmplY3QiLCJ2YWx1ZXMiLCJwcm9ncmFtT3B0aW9ucyIsImZvckVhY2giLCJ2YWx1ZSIsIm9wdGlvbiIsImRlc2NyaXB0aW9uIiwicGFyc2UiLCJwcm9jZXNzIiwiYXJndiIsImNvbmZpZyIsImVudiIsImxvZ3MiLCJRTG9ncyIsImNvbmZpZ0xvZyIsImNyZWF0ZSIsImRlYnVnIiwic2VydmVyIiwiVE9OUVNlcnZlciIsIm1haW4iLCJzdGFydCIsImVycm9yIiwibG9nIiwiZXhpdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQWtCQTs7QUFFQTs7QUFDQTs7OztBQXJCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFTQSxNQUFNQSxPQUFPLEdBQUdDLE9BQU8sQ0FBQyxXQUFELENBQXZCOztBQUVBQyxNQUFNLENBQUNDLE1BQVAsQ0FBY0Msc0JBQWQsRUFBOEJDLE9BQTlCLENBQXVDQyxLQUFELElBQVc7QUFDN0MsUUFBTUMsTUFBTSxHQUFLRCxLQUFqQjtBQUNBTixFQUFBQSxPQUFPLENBQUNPLE1BQVIsQ0FBZUEsTUFBTSxDQUFDQSxNQUF0QixFQUE4QkEsTUFBTSxDQUFDQyxXQUFyQztBQUNILENBSEQ7QUFNQVIsT0FBTyxDQUFDUyxLQUFSLENBQWNDLE9BQU8sQ0FBQ0MsSUFBdEI7QUFHQSxNQUFNQyxNQUFlLEdBQUcsMEJBQWFaLE9BQWIsRUFBc0JVLE9BQU8sQ0FBQ0csR0FBOUIsRUFBbUNULHNCQUFuQyxDQUF4QjtBQUVBLE1BQU1VLElBQUksR0FBRyxJQUFJQyxhQUFKLEVBQWI7QUFDQSxNQUFNQyxTQUFTLEdBQUdGLElBQUksQ0FBQ0csTUFBTCxDQUFZLFFBQVosQ0FBbEI7QUFDQUQsU0FBUyxDQUFDRSxLQUFWLENBQWdCLEtBQWhCLEVBQXVCTixNQUF2QjtBQUVBLE1BQU1PLE1BQU0sR0FBRyxJQUFJQyxlQUFKLENBQWU7QUFDMUJSLEVBQUFBLE1BRDBCO0FBRTFCRSxFQUFBQTtBQUYwQixDQUFmLENBQWY7O0FBS08sU0FBU08sSUFBVCxHQUFnQjtBQUNuQixHQUFDLFlBQVk7QUFDVCxRQUFJO0FBQ0EsWUFBTUYsTUFBTSxDQUFDRyxLQUFQLEVBQU47QUFDSCxLQUZELENBRUUsT0FBT0MsS0FBUCxFQUFjO0FBQ1pKLE1BQUFBLE1BQU0sQ0FBQ0ssR0FBUCxDQUFXRCxLQUFYLENBQWlCLFFBQWpCLEVBQTJCLE9BQTNCLEVBQW9DQSxLQUFwQztBQUNBYixNQUFBQSxPQUFPLENBQUNlLElBQVIsQ0FBYSxDQUFiO0FBQ0g7QUFDSixHQVBEO0FBUUgiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IDIwMTgtMjAyMCBUT04gREVWIFNPTFVUSU9OUyBMVEQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIFNPRlRXQVJFIEVWQUxVQVRJT04gTGljZW5zZSAodGhlIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlXG4gKiB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGVcbiAqIExpY2Vuc2UgYXQ6XG4gKlxuICogaHR0cDovL3d3dy50b24uZGV2L2xpY2Vuc2VzXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBUT04gREVWIHNvZnR3YXJlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbi8vIEBmbG93XG5cbmltcG9ydCB7IGNyZWF0ZUNvbmZpZywgcHJvZ3JhbU9wdGlvbnN9IGZyb20gJy4vY29uZmlnJztcbmltcG9ydCB0eXBlIHsgUHJvZ3JhbU9wdGlvbiwgUUNvbmZpZyB9IGZyb20gJy4vY29uZmlnJztcbmltcG9ydCBUT05RU2VydmVyIGZyb20gJy4vc2VydmVyJztcbmltcG9ydCBRTG9ncyBmcm9tICcuL2xvZ3MnO1xuXG5jb25zdCBwcm9ncmFtID0gcmVxdWlyZSgnY29tbWFuZGVyJyk7XG5cbk9iamVjdC52YWx1ZXMocHJvZ3JhbU9wdGlvbnMpLmZvckVhY2goKHZhbHVlKSA9PiB7XG4gICAgY29uc3Qgb3B0aW9uID0gKCh2YWx1ZTogYW55KTogUHJvZ3JhbU9wdGlvbik7XG4gICAgcHJvZ3JhbS5vcHRpb24ob3B0aW9uLm9wdGlvbiwgb3B0aW9uLmRlc2NyaXB0aW9uKTtcbn0pO1xuXG5cbnByb2dyYW0ucGFyc2UocHJvY2Vzcy5hcmd2KTtcblxuXG5jb25zdCBjb25maWc6IFFDb25maWcgPSBjcmVhdGVDb25maWcocHJvZ3JhbSwgcHJvY2Vzcy5lbnYsIHByb2dyYW1PcHRpb25zKTtcblxuY29uc3QgbG9ncyA9IG5ldyBRTG9ncygpO1xuY29uc3QgY29uZmlnTG9nID0gbG9ncy5jcmVhdGUoJ2NvbmZpZycpO1xuY29uZmlnTG9nLmRlYnVnKCdVU0UnLCBjb25maWcpO1xuXG5jb25zdCBzZXJ2ZXIgPSBuZXcgVE9OUVNlcnZlcih7XG4gICAgY29uZmlnLFxuICAgIGxvZ3MsXG59KTtcblxuZXhwb3J0IGZ1bmN0aW9uIG1haW4oKSB7XG4gICAgKGFzeW5jICgpID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGF3YWl0IHNlcnZlci5zdGFydCgpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgc2VydmVyLmxvZy5lcnJvcignRkFJTEVEJywgJ1NUQVJUJywgZXJyb3IpO1xuICAgICAgICAgICAgcHJvY2Vzcy5leGl0KDEpO1xuICAgICAgICB9XG4gICAgfSkoKTtcbn1cbiJdfQ==