"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.main = main;

var _config = require("./config");

var _server = _interopRequireDefault(require("./server"));

var _logs = _interopRequireDefault(require("./logs"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
 * Copyright 2018-2020 TON DEV SOLUTIONS LTD.
 *
 * Licensed under the SOFTWARE EVALUATION License (the "License"); you may not use
 * this file except in compliance with the License.  You may obtain a copy of the
 * License at:
 *
 * http://www.ton.dev/licenses
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific TON DEV software governing permissions and
 * limitations under the License.
 */
const program = require('commander');

Object.values(_config.programOptions).forEach(value => {
  const option = value;
  program.option(option.option, option.description, option.def);
});
program.parse(process.argv);
const config = (0, _config.createConfig)(program, process.env, _config.programOptions);
const logs = new _logs.default();
const configLog = logs.create('config');
configLog.debug('USE', config);
const server = new _server.default({
  config,
  logs
});

function main() {
  (async () => {
    try {
      await server.start();
    } catch (error) {
      server.log.error('FAILED', 'START', error);
      process.exit(1);
    }
  })();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zZXJ2ZXIvaW5kZXguanMiXSwibmFtZXMiOlsicHJvZ3JhbSIsInJlcXVpcmUiLCJPYmplY3QiLCJ2YWx1ZXMiLCJwcm9ncmFtT3B0aW9ucyIsImZvckVhY2giLCJ2YWx1ZSIsIm9wdGlvbiIsImRlc2NyaXB0aW9uIiwiZGVmIiwicGFyc2UiLCJwcm9jZXNzIiwiYXJndiIsImNvbmZpZyIsImVudiIsImxvZ3MiLCJRTG9ncyIsImNvbmZpZ0xvZyIsImNyZWF0ZSIsImRlYnVnIiwic2VydmVyIiwiVE9OUVNlcnZlciIsIm1haW4iLCJzdGFydCIsImVycm9yIiwibG9nIiwiZXhpdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQWtCQTs7QUFFQTs7QUFDQTs7OztBQXJCQTs7Ozs7Ozs7Ozs7Ozs7O0FBdUJBLE1BQU1BLE9BQU8sR0FBR0MsT0FBTyxDQUFDLFdBQUQsQ0FBdkI7O0FBRUFDLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjQyxzQkFBZCxFQUE4QkMsT0FBOUIsQ0FBdUNDLEtBQUQsSUFBVztBQUM3QyxRQUFNQyxNQUFNLEdBQUtELEtBQWpCO0FBQ0FOLEVBQUFBLE9BQU8sQ0FBQ08sTUFBUixDQUFlQSxNQUFNLENBQUNBLE1BQXRCLEVBQThCQSxNQUFNLENBQUNDLFdBQXJDLEVBQWtERCxNQUFNLENBQUNFLEdBQXpEO0FBQ0gsQ0FIRDtBQU1BVCxPQUFPLENBQUNVLEtBQVIsQ0FBY0MsT0FBTyxDQUFDQyxJQUF0QjtBQUdBLE1BQU1DLE1BQWUsR0FBRywwQkFBYWIsT0FBYixFQUFzQlcsT0FBTyxDQUFDRyxHQUE5QixFQUFtQ1Ysc0JBQW5DLENBQXhCO0FBRUEsTUFBTVcsSUFBSSxHQUFHLElBQUlDLGFBQUosRUFBYjtBQUNBLE1BQU1DLFNBQVMsR0FBR0YsSUFBSSxDQUFDRyxNQUFMLENBQVksUUFBWixDQUFsQjtBQUNBRCxTQUFTLENBQUNFLEtBQVYsQ0FBZ0IsS0FBaEIsRUFBdUJOLE1BQXZCO0FBRUEsTUFBTU8sTUFBTSxHQUFHLElBQUlDLGVBQUosQ0FBZTtBQUMxQlIsRUFBQUEsTUFEMEI7QUFFMUJFLEVBQUFBO0FBRjBCLENBQWYsQ0FBZjs7QUFLTyxTQUFTTyxJQUFULEdBQWdCO0FBQ25CLEdBQUMsWUFBWTtBQUNULFFBQUk7QUFDQSxZQUFNRixNQUFNLENBQUNHLEtBQVAsRUFBTjtBQUNILEtBRkQsQ0FFRSxPQUFPQyxLQUFQLEVBQWM7QUFDWkosTUFBQUEsTUFBTSxDQUFDSyxHQUFQLENBQVdELEtBQVgsQ0FBaUIsUUFBakIsRUFBMkIsT0FBM0IsRUFBb0NBLEtBQXBDO0FBQ0FiLE1BQUFBLE9BQU8sQ0FBQ2UsSUFBUixDQUFhLENBQWI7QUFDSDtBQUNKLEdBUEQ7QUFRSCIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgMjAxOC0yMDIwIFRPTiBERVYgU09MVVRJT05TIExURC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgU09GVFdBUkUgRVZBTFVBVElPTiBMaWNlbnNlICh0aGUgXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2VcbiAqIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZVxuICogTGljZW5zZSBhdDpcbiAqXG4gKiBodHRwOi8vd3d3LnRvbi5kZXYvbGljZW5zZXNcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIFRPTiBERVYgc29mdHdhcmUgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuLy8gQGZsb3dcblxuaW1wb3J0IHsgY3JlYXRlQ29uZmlnLCBwcm9ncmFtT3B0aW9uc30gZnJvbSAnLi9jb25maWcnO1xuaW1wb3J0IHR5cGUgeyBQcm9ncmFtT3B0aW9uLCBRQ29uZmlnIH0gZnJvbSAnLi9jb25maWcnO1xuaW1wb3J0IFRPTlFTZXJ2ZXIgZnJvbSAnLi9zZXJ2ZXInO1xuaW1wb3J0IFFMb2dzIGZyb20gJy4vbG9ncyc7XG5cbmNvbnN0IHByb2dyYW0gPSByZXF1aXJlKCdjb21tYW5kZXInKTtcblxuT2JqZWN0LnZhbHVlcyhwcm9ncmFtT3B0aW9ucykuZm9yRWFjaCgodmFsdWUpID0+IHtcbiAgICBjb25zdCBvcHRpb24gPSAoKHZhbHVlOiBhbnkpOiBQcm9ncmFtT3B0aW9uKTtcbiAgICBwcm9ncmFtLm9wdGlvbihvcHRpb24ub3B0aW9uLCBvcHRpb24uZGVzY3JpcHRpb24sIG9wdGlvbi5kZWYpO1xufSk7XG5cblxucHJvZ3JhbS5wYXJzZShwcm9jZXNzLmFyZ3YpO1xuXG5cbmNvbnN0IGNvbmZpZzogUUNvbmZpZyA9IGNyZWF0ZUNvbmZpZyhwcm9ncmFtLCBwcm9jZXNzLmVudiwgcHJvZ3JhbU9wdGlvbnMpO1xuXG5jb25zdCBsb2dzID0gbmV3IFFMb2dzKCk7XG5jb25zdCBjb25maWdMb2cgPSBsb2dzLmNyZWF0ZSgnY29uZmlnJyk7XG5jb25maWdMb2cuZGVidWcoJ1VTRScsIGNvbmZpZyk7XG5cbmNvbnN0IHNlcnZlciA9IG5ldyBUT05RU2VydmVyKHtcbiAgICBjb25maWcsXG4gICAgbG9ncyxcbn0pO1xuXG5leHBvcnQgZnVuY3Rpb24gbWFpbigpIHtcbiAgICAoYXN5bmMgKCkgPT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgYXdhaXQgc2VydmVyLnN0YXJ0KCk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBzZXJ2ZXIubG9nLmVycm9yKCdGQUlMRUQnLCAnU1RBUlQnLCBlcnJvcik7XG4gICAgICAgICAgICBwcm9jZXNzLmV4aXQoMSk7XG4gICAgICAgIH1cbiAgICB9KSgpO1xufVxuIl19