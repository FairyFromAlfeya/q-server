"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _schema = require("ton-labs-dev-ops/dist/src/schema");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var string = _schema.Def.string,
    bool = _schema.Def.bool,
    ref = _schema.Def.ref,
    arrayOf = _schema.Def.arrayOf; // Types scheme begin

function uint(size, doc) {
  return _objectSpread({
    _int: {
      unsigned: size
    }
  }, doc ? {
    _doc: doc
  } : {});
}

function i8(doc) {
  return _objectSpread({
    _int: {
      signed: 8
    }
  }, doc ? {
    _doc: doc
  } : {});
}

function i32(doc) {
  return _objectSpread({
    _int: {
      signed: 32
    }
  }, doc ? {
    _doc: doc
  } : {});
}

var u8 = function u8(doc) {
  return uint(8, doc);
};

var u16 = function u16(doc) {
  return uint(16, doc);
};

var u32 = function u32(doc) {
  return uint(32, doc);
};

var u64 = function u64(doc) {
  return uint(64, doc);
};

var u128 = function u128(doc) {
  return uint(128, doc);
};

var join = function join(refDef, on) {
  return _objectSpread({}, ref(refDef), {
    _: {
      join: {
        on: on
      }
    }
  });
};

var grams = u128;

function currencyCollection() {
  return {
    grams: grams(),
    other: arrayOf({
      currency: i32(),
      value: u128()
    })
  };
}

var Account = {
  _doc: 'TON Account',
  _: {
    collection: 'accounts'
  },
  acc_type: u8(),
  // uninit: 0, Active: 1, frozen: 2
  addr: string(),
  last_paid: u32(),
  due_payment: grams(),
  last_trans_lt: u64(),
  balance: currencyCollection(),
  split_depth: u8(),
  tick: bool(),
  tock: bool(),
  code: string(),
  data: string(),
  library: string()
};
var Message = {
  _doc: 'This is message',
  _: {
    collection: 'messages'
  },
  msg_type: u8(),
  // internal: 0, extIn: 1, extOut: 2
  transaction_id: string(),
  block_id: string(),
  body: string(),
  status: u8(),
  split_depth: u8(),
  tick: bool(),
  tock: bool(),
  code: string(),
  data: string(),
  library: string(),
  src: string(),
  dst: string(),
  created_lt: u64(),
  created_at: u32(),
  ihr_disabled: bool(),
  ihr_fee: grams(),
  fwd_fee: grams(),
  import_fee: grams(),
  bounce: bool(),
  bounced: bool(),
  value: currencyCollection()
};
var Transaction = {
  _doc: 'This is transaction',
  _: {
    collection: 'transactions'
  },
  tr_type: u8(),
  // ordinary: 0, storage: 1, tick: 2, tock: 3, splitPrepare: 4, splitInstall: 5, mergePrepare: 6, mergeInstall: 7
  status: u8(),
  block_id: string(),
  account_addr: string(),
  lt: u64(),
  prev_trans_hash: string(),
  prev_trans_lt: u64(),
  now: u32(),
  outmsg_cnt: i32(),
  orig_status: u8(),
  end_status: u8(),
  in_msg: string(),
  out_msgs: arrayOf(string()),
  total_fees: currencyCollection(),
  old_hash: string(),
  new_hash: string(),
  credit_first: bool(),
  storage: {
    storage_fees_collected: grams(),
    storage_fees_due: grams(),
    status_change: u8()
  },
  credit: {
    due_fees_collected: grams(),
    credit: currencyCollection()
  },
  compute: {
    compute_type: u8(),
    // 0: skipped, 1: VM
    skipped_reason: u8(),
    success: bool(),
    msg_state_used: bool(),
    account_activated: bool(),
    gas_fees: grams(),
    gas_used: u64(),
    gas_limit: u64(),
    gas_credit: i32(),
    mode: i8(),
    exit_code: i32(),
    exit_arg: i32(),
    vm_steps: u32(),
    vm_init_state_hash: string(),
    vm_final_state_hash: string()
  },
  action: {
    success: bool(),
    valid: bool(),
    no_funds: bool(),
    status_change: u8(),
    total_fwd_fees: grams(),
    total_action_fees: grams(),
    result_code: i32(),
    result_arg: i32(),
    tot_actions: i32(),
    spec_actions: i32(),
    skipped_actions: i32(),
    msgs_created: i32(),
    action_list_hash: string(),
    total_msg_size_cells: u32(),
    total_msg_size_bits: u32()
  },
  bounce: {
    bounce_type: u8(),
    // 0: Negfunds, 1: Nofunds, 2: Ok
    msg_size_cells: u32(),
    msg_size_bits: u32(),
    req_fwd_fees: grams(),
    msg_fees: grams(),
    fwd_fees: grams()
  },
  aborted: bool(),
  destroyed: bool(),
  tt: string(),
  split_info: {
    cur_shard_pfx_len: u8(),
    acc_split_depth: u8(),
    this_addr: string(),
    sibling_addr: string()
  },
  prepare_transaction: string(),
  installed: bool()
}; // BLOCK

var ExtBlkRef = {
  end_lt: u64(),
  seq_no: u32(),
  root_hash: string(),
  file_hash: string()
};

var extBlkRef = function extBlkRef() {
  return ref({
    ExtBlkRef: ExtBlkRef
  });
};

var MsgEnvelope = {
  msg: string(),
  next_addr: string(),
  cur_addr: string(),
  fwd_fee_remaining: grams()
};

var msgEnvelope = function msgEnvelope() {
  return ref({
    MsgEnvelope: MsgEnvelope
  });
};

var InMsg = {
  msg_type: u8(),
  // External: 0, IHR: 1, Immediatelly: 2, Final: 3, Transit: 4, DiscardedFinal: 5, DiscardedTransit: 6
  msg: string(),
  transaction: string(),
  ihr_fee: grams(),
  proof_created: string(),
  in_msg: msgEnvelope(),
  fwd_fee: grams(),
  out_msg: msgEnvelope(),
  transit_fee: grams(),
  transaction_id: u64(),
  proof_delivered: string()
};

var inMsg = function inMsg() {
  return ref({
    InMsg: InMsg
  });
};

var OutMsg = {
  msg_type: u8(),
  // None: 0, External: 1, Immediately: 2, OutMsgNew: 3, Transit: 4, Dequeue: 5, TransitRequired: 6
  msg: string(),
  transaction: string(),
  out_msg: msgEnvelope(),
  reimport: inMsg(),
  imported: inMsg(),
  import_block_lt: u64()
};

var outMsg = function outMsg() {
  return ref({
    OutMsg: OutMsg
  });
};

var Block = {
  _doc: 'This is Block',
  _: {
    collection: 'blocks'
  },
  status: string(),
  global_id: u32(),
  want_split: bool(),
  seq_no: u32(),
  after_merge: bool(),
  gen_utime: i32(),
  gen_catchain_seqno: u32(),
  flags: u16(),
  master_ref: extBlkRef(),
  prev_ref: extBlkRef(),
  prev_alt_ref: extBlkRef(),
  prev_vert_ref: extBlkRef(),
  prev_vert_alt_ref: extBlkRef(),
  version: u32(),
  gen_validator_list_hash_short: u32(),
  before_split: bool(),
  after_split: bool(),
  want_merge: bool(),
  vert_seq_no: u32(),
  start_lt: u64(),
  end_lt: u64(),
  shard: {
    shard_pfx_bits: u8(),
    workchain_id: i32(),
    shard_prefix: u64()
  },
  min_ref_mc_seqno: u32(),
  value_flow: {
    to_next_blk: currencyCollection(),
    exported: currencyCollection(),
    fees_collected: currencyCollection(),
    created: currencyCollection(),
    imported: currencyCollection(),
    from_prev_blk: currencyCollection(),
    minted: currencyCollection(),
    fees_imported: currencyCollection()
  },
  in_msg_descr: arrayOf(inMsg()),
  rand_seed: string(),
  out_msg_descr: arrayOf(outMsg()),
  account_blocks: arrayOf({
    account_addr: string(),
    transactions: arrayOf(string()),
    state_update: {
      old_hash: string(),
      new_hash: string()
    },
    tr_count: i32()
  }),
  state_update: {
    "new": string(),
    new_hash: string(),
    new_depth: u16(),
    old: string(),
    old_hash: string(),
    old_depth: u16()
  }
}; //Root scheme declaration

var schema = {
  _class: {
    types: {
      ExtBlkRef: ExtBlkRef,
      MsgEnvelope: MsgEnvelope,
      InMsg: InMsg,
      OutMsg: OutMsg,
      Message: Message,
      Block: Block,
      Account: Account,
      Transaction: Transaction
    }
  }
};
var _default = schema;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NlcnZlci9kYi5zY2hlbWEudjIuanMiXSwibmFtZXMiOlsic3RyaW5nIiwiRGVmIiwiYm9vbCIsInJlZiIsImFycmF5T2YiLCJ1aW50Iiwic2l6ZSIsImRvYyIsIl9pbnQiLCJ1bnNpZ25lZCIsIl9kb2MiLCJpOCIsInNpZ25lZCIsImkzMiIsInU4IiwidTE2IiwidTMyIiwidTY0IiwidTEyOCIsImpvaW4iLCJyZWZEZWYiLCJvbiIsIl8iLCJncmFtcyIsImN1cnJlbmN5Q29sbGVjdGlvbiIsIm90aGVyIiwiY3VycmVuY3kiLCJ2YWx1ZSIsIkFjY291bnQiLCJjb2xsZWN0aW9uIiwiYWNjX3R5cGUiLCJhZGRyIiwibGFzdF9wYWlkIiwiZHVlX3BheW1lbnQiLCJsYXN0X3RyYW5zX2x0IiwiYmFsYW5jZSIsInNwbGl0X2RlcHRoIiwidGljayIsInRvY2siLCJjb2RlIiwiZGF0YSIsImxpYnJhcnkiLCJNZXNzYWdlIiwibXNnX3R5cGUiLCJ0cmFuc2FjdGlvbl9pZCIsImJsb2NrX2lkIiwiYm9keSIsInN0YXR1cyIsInNyYyIsImRzdCIsImNyZWF0ZWRfbHQiLCJjcmVhdGVkX2F0IiwiaWhyX2Rpc2FibGVkIiwiaWhyX2ZlZSIsImZ3ZF9mZWUiLCJpbXBvcnRfZmVlIiwiYm91bmNlIiwiYm91bmNlZCIsIlRyYW5zYWN0aW9uIiwidHJfdHlwZSIsImFjY291bnRfYWRkciIsImx0IiwicHJldl90cmFuc19oYXNoIiwicHJldl90cmFuc19sdCIsIm5vdyIsIm91dG1zZ19jbnQiLCJvcmlnX3N0YXR1cyIsImVuZF9zdGF0dXMiLCJpbl9tc2ciLCJvdXRfbXNncyIsInRvdGFsX2ZlZXMiLCJvbGRfaGFzaCIsIm5ld19oYXNoIiwiY3JlZGl0X2ZpcnN0Iiwic3RvcmFnZSIsInN0b3JhZ2VfZmVlc19jb2xsZWN0ZWQiLCJzdG9yYWdlX2ZlZXNfZHVlIiwic3RhdHVzX2NoYW5nZSIsImNyZWRpdCIsImR1ZV9mZWVzX2NvbGxlY3RlZCIsImNvbXB1dGUiLCJjb21wdXRlX3R5cGUiLCJza2lwcGVkX3JlYXNvbiIsInN1Y2Nlc3MiLCJtc2dfc3RhdGVfdXNlZCIsImFjY291bnRfYWN0aXZhdGVkIiwiZ2FzX2ZlZXMiLCJnYXNfdXNlZCIsImdhc19saW1pdCIsImdhc19jcmVkaXQiLCJtb2RlIiwiZXhpdF9jb2RlIiwiZXhpdF9hcmciLCJ2bV9zdGVwcyIsInZtX2luaXRfc3RhdGVfaGFzaCIsInZtX2ZpbmFsX3N0YXRlX2hhc2giLCJhY3Rpb24iLCJ2YWxpZCIsIm5vX2Z1bmRzIiwidG90YWxfZndkX2ZlZXMiLCJ0b3RhbF9hY3Rpb25fZmVlcyIsInJlc3VsdF9jb2RlIiwicmVzdWx0X2FyZyIsInRvdF9hY3Rpb25zIiwic3BlY19hY3Rpb25zIiwic2tpcHBlZF9hY3Rpb25zIiwibXNnc19jcmVhdGVkIiwiYWN0aW9uX2xpc3RfaGFzaCIsInRvdGFsX21zZ19zaXplX2NlbGxzIiwidG90YWxfbXNnX3NpemVfYml0cyIsImJvdW5jZV90eXBlIiwibXNnX3NpemVfY2VsbHMiLCJtc2dfc2l6ZV9iaXRzIiwicmVxX2Z3ZF9mZWVzIiwibXNnX2ZlZXMiLCJmd2RfZmVlcyIsImFib3J0ZWQiLCJkZXN0cm95ZWQiLCJ0dCIsInNwbGl0X2luZm8iLCJjdXJfc2hhcmRfcGZ4X2xlbiIsImFjY19zcGxpdF9kZXB0aCIsInRoaXNfYWRkciIsInNpYmxpbmdfYWRkciIsInByZXBhcmVfdHJhbnNhY3Rpb24iLCJpbnN0YWxsZWQiLCJFeHRCbGtSZWYiLCJlbmRfbHQiLCJzZXFfbm8iLCJyb290X2hhc2giLCJmaWxlX2hhc2giLCJleHRCbGtSZWYiLCJNc2dFbnZlbG9wZSIsIm1zZyIsIm5leHRfYWRkciIsImN1cl9hZGRyIiwiZndkX2ZlZV9yZW1haW5pbmciLCJtc2dFbnZlbG9wZSIsIkluTXNnIiwidHJhbnNhY3Rpb24iLCJwcm9vZl9jcmVhdGVkIiwib3V0X21zZyIsInRyYW5zaXRfZmVlIiwicHJvb2ZfZGVsaXZlcmVkIiwiaW5Nc2ciLCJPdXRNc2ciLCJyZWltcG9ydCIsImltcG9ydGVkIiwiaW1wb3J0X2Jsb2NrX2x0Iiwib3V0TXNnIiwiQmxvY2siLCJnbG9iYWxfaWQiLCJ3YW50X3NwbGl0IiwiYWZ0ZXJfbWVyZ2UiLCJnZW5fdXRpbWUiLCJnZW5fY2F0Y2hhaW5fc2Vxbm8iLCJmbGFncyIsIm1hc3Rlcl9yZWYiLCJwcmV2X3JlZiIsInByZXZfYWx0X3JlZiIsInByZXZfdmVydF9yZWYiLCJwcmV2X3ZlcnRfYWx0X3JlZiIsInZlcnNpb24iLCJnZW5fdmFsaWRhdG9yX2xpc3RfaGFzaF9zaG9ydCIsImJlZm9yZV9zcGxpdCIsImFmdGVyX3NwbGl0Iiwid2FudF9tZXJnZSIsInZlcnRfc2VxX25vIiwic3RhcnRfbHQiLCJzaGFyZCIsInNoYXJkX3BmeF9iaXRzIiwid29ya2NoYWluX2lkIiwic2hhcmRfcHJlZml4IiwibWluX3JlZl9tY19zZXFubyIsInZhbHVlX2Zsb3ciLCJ0b19uZXh0X2JsayIsImV4cG9ydGVkIiwiZmVlc19jb2xsZWN0ZWQiLCJjcmVhdGVkIiwiZnJvbV9wcmV2X2JsayIsIm1pbnRlZCIsImZlZXNfaW1wb3J0ZWQiLCJpbl9tc2dfZGVzY3IiLCJyYW5kX3NlZWQiLCJvdXRfbXNnX2Rlc2NyIiwiYWNjb3VudF9ibG9ja3MiLCJ0cmFuc2FjdGlvbnMiLCJzdGF0ZV91cGRhdGUiLCJ0cl9jb3VudCIsIm5ld19kZXB0aCIsIm9sZCIsIm9sZF9kZXB0aCIsInNjaGVtYSIsIl9jbGFzcyIsInR5cGVzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQW1CQTs7Ozs7O0lBRVFBLE0sR0FBK0JDLFcsQ0FBL0JELE07SUFBUUUsSSxHQUF1QkQsVyxDQUF2QkMsSTtJQUFNQyxHLEdBQWlCRixXLENBQWpCRSxHO0lBQUtDLE8sR0FBWUgsVyxDQUFaRyxPLEVBRTNCOztBQUVBLFNBQVNDLElBQVQsQ0FBY0MsSUFBZCxFQUE0QkMsR0FBNUIsRUFBc0M7QUFDbEM7QUFBU0MsSUFBQUEsSUFBSSxFQUFFO0FBQUVDLE1BQUFBLFFBQVEsRUFBRUg7QUFBWjtBQUFmLEtB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TSxFQUxOO0FBTVYrTCxJQUFBQSxTQUFTLEVBQUVoTCxHQUFHO0FBTko7QUFwREssQ0FBdkIsQyxDQStEQTs7QUFFQSxJQUFNaUwsTUFBZSxHQUFHO0FBQ3BCQyxFQUFBQSxNQUFNLEVBQUU7QUFDSkMsSUFBQUEsS0FBSyxFQUFFO0FBQ0hwRSxNQUFBQSxTQUFTLEVBQVRBLFNBREc7QUFFSE0sTUFBQUEsV0FBVyxFQUFYQSxXQUZHO0FBR0hNLE1BQUFBLEtBQUssRUFBTEEsS0FIRztBQUlITyxNQUFBQSxNQUFNLEVBQU5BLE1BSkc7QUFLSHZHLE1BQUFBLE9BQU8sRUFBUEEsT0FMRztBQU1INEcsTUFBQUEsS0FBSyxFQUFMQSxLQU5HO0FBT0gxSCxNQUFBQSxPQUFPLEVBQVBBLE9BUEc7QUFRSDhCLE1BQUFBLFdBQVcsRUFBWEE7QUFSRztBQURIO0FBRFksQ0FBeEI7ZUFlZXNJLE0iLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IDIwMTgtMjAxOSBUT04gREVWIFNPTFVUSU9OUyBMVEQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIFNPRlRXQVJFIEVWQUxVQVRJT04gTGljZW5zZSAodGhlIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlXG4gKiB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGVcbiAqIExpY2Vuc2UgYXQ6XG4gKlxuICogaHR0cDovL3d3dy50b24uZGV2L2xpY2Vuc2VzXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBUT04gREVWIHNvZnR3YXJlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbi8vQGZsb3dcblxuaW1wb3J0IHR5cGUgeyBUeXBlRGVmIH0gZnJvbSAndG9uLWxhYnMtZGV2LW9wcy9zcmMvc2NoZW1hJztcbmltcG9ydCB7IERlZiB9IGZyb20gJ3Rvbi1sYWJzLWRldi1vcHMvZGlzdC9zcmMvc2NoZW1hJztcblxuY29uc3QgeyBzdHJpbmcsIGJvb2wsIHJlZiwgYXJyYXlPZiB9ID0gRGVmO1xuXG4vLyBUeXBlcyBzY2hlbWUgYmVnaW5cblxuZnVuY3Rpb24gdWludChzaXplOiBudW1iZXIsIGRvYz86ICcnKSB7XG4gICAgcmV0dXJuIHsgX2ludDogeyB1bnNpZ25lZDogc2l6ZSB9LCAuLi4oZG9jID8geyBfZG9jOiBkb2MgfSA6IHt9KSB9XG59XG5cbmZ1bmN0aW9uIGk4KGRvYz86ICcnKSB7XG4gICAgcmV0dXJuIHsgX2ludDogeyBzaWduZWQ6IDggfSwgLi4uKGRvYyA/IHsgX2RvYzogZG9jIH0gOiB7fSkgfVxufVxuXG5mdW5jdGlvbiBpMzIoZG9jPzogJycpIHtcbiAgICByZXR1cm4geyBfaW50OiB7IHNpZ25lZDogMzIgfSwgLi4uKGRvYyA/IHsgX2RvYzogZG9jIH0gOiB7fSkgfVxufVxuXG5jb25zdCB1OCA9IChkb2M/OiAnJykgPT4gdWludCg4LCBkb2MpO1xuY29uc3QgdTE2ID0gKGRvYz86ICcnKSA9PiB1aW50KDE2LCBkb2MpO1xuY29uc3QgdTMyID0gKGRvYz86ICcnKSA9PiB1aW50KDMyLCBkb2MpO1xuY29uc3QgdTY0ID0gKGRvYz86ICcnKSA9PiB1aW50KDY0LCBkb2MpO1xuY29uc3QgdTEyOCA9IChkb2M/OiAnJykgPT4gdWludCgxMjgsIGRvYyk7XG5jb25zdCBqb2luID0gKHJlZkRlZjogeyBbc3RyaW5nXTogVHlwZURlZiB9LCBvbjogc3RyaW5nKTogVHlwZURlZiA9PiB7XG4gICAgcmV0dXJuIHsgLi4ucmVmKHJlZkRlZiksIF86IHsgam9pbjogeyBvbiB9IH0gfVxufTtcbmNvbnN0IGdyYW1zID0gdTEyODtcblxuZnVuY3Rpb24gY3VycmVuY3lDb2xsZWN0aW9uKCk6IFR5cGVEZWYge1xuICAgIHJldHVybiB7XG4gICAgICAgIGdyYW1zOiBncmFtcygpLFxuICAgICAgICBvdGhlcjogYXJyYXlPZih7XG4gICAgICAgICAgICBjdXJyZW5jeTogaTMyKCksXG4gICAgICAgICAgICB2YWx1ZTogdTEyOCgpLFxuICAgICAgICB9KSxcbiAgICB9O1xufVxuXG5jb25zdCBBY2NvdW50OiBUeXBlRGVmID0ge1xuICAgIF9kb2M6ICdUT04gQWNjb3VudCcsXG4gICAgXzogeyBjb2xsZWN0aW9uOiAnYWNjb3VudHMnIH0sXG4gICAgYWNjX3R5cGU6IHU4KCksIC8vIHVuaW5pdDogMCwgQWN0aXZlOiAxLCBmcm96ZW46IDJcbiAgICBhZGRyOiBzdHJpbmcoKSxcbiAgICBsYXN0X3BhaWQ6IHUzMigpLFxuICAgIGR1ZV9wYXltZW50OiBncmFtcygpLFxuICAgIGxhc3RfdHJhbnNfbHQ6IHU2NCgpLFxuICAgIGJhbGFuY2U6IGN1cnJlbmN5Q29sbGVjdGlvbigpLFxuICAgIHNwbGl0X2RlcHRoOiB1OCgpLFxuICAgIHRpY2s6IGJvb2woKSxcbiAgICB0b2NrOiBib29sKCksXG4gICAgY29kZTogc3RyaW5nKCksXG4gICAgZGF0YTogc3RyaW5nKCksXG4gICAgbGlicmFyeTogc3RyaW5nKCksXG59O1xuXG5jb25zdCBNZXNzYWdlOiBUeXBlRGVmID0ge1xuICAgIF9kb2M6ICdUaGlzIGlzIG1lc3NhZ2UnLFxuICAgIF86IHsgY29sbGVjdGlvbjogJ21lc3NhZ2VzJyB9LFxuICAgIG1zZ190eXBlOiB1OCgpLCAvLyBpbnRlcm5hbDogMCwgZXh0SW46IDEsIGV4dE91dDogMlxuICAgIHRyYW5zYWN0aW9uX2lkOiBzdHJpbmcoKSxcbiAgICBibG9ja19pZDogc3RyaW5nKCksXG4gICAgYm9keTogc3RyaW5nKCksXG4gICAgc3RhdHVzOiB1OCgpLFxuICAgIHNwbGl0X2RlcHRoOiB1OCgpLFxuICAgIHRpY2s6IGJvb2woKSxcbiAgICB0b2NrOiBib29sKCksXG4gICAgY29kZTogc3RyaW5nKCksXG4gICAgZGF0YTogc3RyaW5nKCksXG4gICAgbGlicmFyeTogc3RyaW5nKCksXG4gICAgc3JjOiBzdHJpbmcoKSxcbiAgICBkc3Q6IHN0cmluZygpLFxuICAgIGNyZWF0ZWRfbHQ6IHU2NCgpLFxuICAgIGNyZWF0ZWRfYXQ6IHUzMigpLFxuICAgIGlocl9kaXNhYmxlZDogYm9vbCgpLFxuICAgIGlocl9mZWU6IGdyYW1zKCksXG4gICAgZndkX2ZlZTogZ3JhbXMoKSxcbiAgICBpbXBvcnRfZmVlOiBncmFtcygpLFxuICAgIGJvdW5jZTogYm9vbCgpLFxuICAgIGJvdW5jZWQ6IGJvb2woKSxcbiAgICB2YWx1ZTogY3VycmVuY3lDb2xsZWN0aW9uKCksXG59O1xuXG5cbmNvbnN0IFRyYW5zYWN0aW9uOiBUeXBlRGVmID0ge1xuICAgIF9kb2M6ICdUaGlzIGlzIHRyYW5zYWN0aW9uJyxcbiAgICBfOiB7IGNvbGxlY3Rpb246ICd0cmFuc2FjdGlvbnMnIH0sXG4gICAgdHJfdHlwZTogdTgoKSwgLy8gb3JkaW5hcnk6IDAsIHN0b3JhZ2U6IDEsIHRpY2s6IDIsIHRvY2s6IDMsIHNwbGl0UHJlcGFyZTogNCwgc3BsaXRJbnN0YWxsOiA1LCBtZXJnZVByZXBhcmU6IDYsIG1lcmdlSW5zdGFsbDogN1xuICAgIHN0YXR1czogdTgoKSxcbiAgICBibG9ja19pZDogc3RyaW5nKCksXG4gICAgYWNjb3VudF9hZGRyOiBzdHJpbmcoKSxcbiAgICBsdDogdTY0KCksXG4gICAgcHJldl90cmFuc19oYXNoOiBzdHJpbmcoKSxcbiAgICBwcmV2X3RyYW5zX2x0OiB1NjQoKSxcbiAgICBub3c6IHUzMigpLFxuICAgIG91dG1zZ19jbnQ6IGkzMigpLFxuICAgIG9yaWdfc3RhdHVzOiB1OCgpLFxuICAgIGVuZF9zdGF0dXM6IHU4KCksXG4gICAgaW5fbXNnOiBzdHJpbmcoKSxcbiAgICBvdXRfbXNnczogYXJyYXlPZihzdHJpbmcoKSksXG4gICAgdG90YWxfZmVlczogY3VycmVuY3lDb2xsZWN0aW9uKCksXG4gICAgb2xkX2hhc2g6IHN0cmluZygpLFxuICAgIG5ld19oYXNoOiBzdHJpbmcoKSxcbiAgICBjcmVkaXRfZmlyc3Q6IGJvb2woKSxcbiAgICBzdG9yYWdlOiB7XG4gICAgICAgIHN0b3JhZ2VfZmVlc19jb2xsZWN0ZWQ6IGdyYW1zKCksXG4gICAgICAgIHN0b3JhZ2VfZmVlc19kdWU6IGdyYW1zKCksXG4gICAgICAgIHN0YXR1c19jaGFuZ2U6IHU4KCksXG4gICAgfSxcbiAgICBjcmVkaXQ6IHtcbiAgICAgICAgZHVlX2ZlZXNfY29sbGVjdGVkOiBncmFtcygpLFxuICAgICAgICBjcmVkaXQ6IGN1cnJlbmN5Q29sbGVjdGlvbigpLFxuICAgIH0sXG4gICAgY29tcHV0ZToge1xuICAgICAgICBjb21wdXRlX3R5cGU6IHU4KCksIC8vIDA6IHNraXBwZWQsIDE6IFZNXG4gICAgICAgIHNraXBwZWRfcmVhc29uOiB1OCgpLFxuICAgICAgICBzdWNjZXNzOiBib29sKCksXG4gICAgICAgIG1zZ19zdGF0ZV91c2VkOiBib29sKCksXG4gICAgICAgIGFjY291bnRfYWN0aXZhdGVkOiBib29sKCksXG4gICAgICAgIGdhc19mZWVzOiBncmFtcygpLFxuICAgICAgICBnYXNfdXNlZDogdTY0KCksXG4gICAgICAgIGdhc19saW1pdDogdTY0KCksXG4gICAgICAgIGdhc19jcmVkaXQ6IGkzMigpLFxuICAgICAgICBtb2RlOiBpOCgpLFxuICAgICAgICBleGl0X2NvZGU6IGkzMigpLFxuICAgICAgICBleGl0X2FyZzogaTMyKCksXG4gICAgICAgIHZtX3N0ZXBzOiB1MzIoKSxcbiAgICAgICAgdm1faW5pdF9zdGF0ZV9oYXNoOiBzdHJpbmcoKSxcbiAgICAgICAgdm1fZmluYWxfc3RhdGVfaGFzaDogc3RyaW5nKCksXG4gICAgfSxcbiAgICBhY3Rpb246IHtcbiAgICAgICAgc3VjY2VzczogYm9vbCgpLFxuICAgICAgICB2YWxpZDogYm9vbCgpLFxuICAgICAgICBub19mdW5kczogYm9vbCgpLFxuICAgICAgICBzdGF0dXNfY2hhbmdlOiB1OCgpLFxuICAgICAgICB0b3RhbF9md2RfZmVlczogZ3JhbXMoKSxcbiAgICAgICAgdG90YWxfYWN0aW9uX2ZlZXM6IGdyYW1zKCksXG4gICAgICAgIHJlc3VsdF9jb2RlOiBpMzIoKSxcbiAgICAgICAgcmVzdWx0X2FyZzogaTMyKCksXG4gICAgICAgIHRvdF9hY3Rpb25zOiBpMzIoKSxcbiAgICAgICAgc3BlY19hY3Rpb25zOiBpMzIoKSxcbiAgICAgICAgc2tpcHBlZF9hY3Rpb25zOiBpMzIoKSxcbiAgICAgICAgbXNnc19jcmVhdGVkOiBpMzIoKSxcbiAgICAgICAgYWN0aW9uX2xpc3RfaGFzaDogc3RyaW5nKCksXG4gICAgICAgIHRvdGFsX21zZ19zaXplX2NlbGxzOiB1MzIoKSxcbiAgICAgICAgdG90YWxfbXNnX3NpemVfYml0czogdTMyKCksXG4gICAgfSxcbiAgICBib3VuY2U6IHtcbiAgICAgICAgYm91bmNlX3R5cGU6IHU4KCksIC8vIDA6IE5lZ2Z1bmRzLCAxOiBOb2Z1bmRzLCAyOiBPa1xuICAgICAgICBtc2dfc2l6ZV9jZWxsczogdTMyKCksXG4gICAgICAgIG1zZ19zaXplX2JpdHM6IHUzMigpLFxuICAgICAgICByZXFfZndkX2ZlZXM6IGdyYW1zKCksXG4gICAgICAgIG1zZ19mZWVzOiBncmFtcygpLFxuICAgICAgICBmd2RfZmVlczogZ3JhbXMoKSxcbiAgICB9LFxuICAgIGFib3J0ZWQ6IGJvb2woKSxcbiAgICBkZXN0cm95ZWQ6IGJvb2woKSxcbiAgICB0dDogc3RyaW5nKCksXG4gICAgc3BsaXRfaW5mbzoge1xuICAgICAgICBjdXJfc2hhcmRfcGZ4X2xlbjogdTgoKSxcbiAgICAgICAgYWNjX3NwbGl0X2RlcHRoOiB1OCgpLFxuICAgICAgICB0aGlzX2FkZHI6IHN0cmluZygpLFxuICAgICAgICBzaWJsaW5nX2FkZHI6IHN0cmluZygpLFxuICAgIH0sXG4gICAgcHJlcGFyZV90cmFuc2FjdGlvbjogc3RyaW5nKCksXG4gICAgaW5zdGFsbGVkOiBib29sKCksXG59O1xuXG4vLyBCTE9DS1xuXG5jb25zdCBFeHRCbGtSZWY6IFR5cGVEZWYgPSB7XG4gICAgZW5kX2x0OiB1NjQoKSxcbiAgICBzZXFfbm86IHUzMigpLFxuICAgIHJvb3RfaGFzaDogc3RyaW5nKCksXG4gICAgZmlsZV9oYXNoOiBzdHJpbmcoKVxufTtcblxuY29uc3QgZXh0QmxrUmVmID0gKCkgPT4gcmVmKHsgRXh0QmxrUmVmIH0pO1xuXG5jb25zdCBNc2dFbnZlbG9wZTogVHlwZURlZiA9IHtcbiAgICBtc2c6IHN0cmluZygpLFxuICAgIG5leHRfYWRkcjogc3RyaW5nKCksXG4gICAgY3VyX2FkZHI6IHN0cmluZygpLFxuICAgIGZ3ZF9mZWVfcmVtYWluaW5nOiBncmFtcygpLFxufTtcblxuY29uc3QgbXNnRW52ZWxvcGUgPSAoKSA9PiByZWYoeyBNc2dFbnZlbG9wZSB9KTtcblxuY29uc3QgSW5Nc2c6IFR5cGVEZWYgPSB7XG4gICAgbXNnX3R5cGU6IHU4KCksIC8vIEV4dGVybmFsOiAwLCBJSFI6IDEsIEltbWVkaWF0ZWxseTogMiwgRmluYWw6IDMsIFRyYW5zaXQ6IDQsIERpc2NhcmRlZEZpbmFsOiA1LCBEaXNjYXJkZWRUcmFuc2l0OiA2XG4gICAgbXNnOiBzdHJpbmcoKSxcbiAgICB0cmFuc2FjdGlvbjogc3RyaW5nKCksXG4gICAgaWhyX2ZlZTogZ3JhbXMoKSxcbiAgICBwcm9vZl9jcmVhdGVkOiBzdHJpbmcoKSxcbiAgICBpbl9tc2c6IG1zZ0VudmVsb3BlKCksXG4gICAgZndkX2ZlZTogZ3JhbXMoKSxcbiAgICBvdXRfbXNnOiBtc2dFbnZlbG9wZSgpLFxuICAgIHRyYW5zaXRfZmVlOiBncmFtcygpLFxuICAgIHRyYW5zYWN0aW9uX2lkOiB1NjQoKSxcbiAgICBwcm9vZl9kZWxpdmVyZWQ6IHN0cmluZygpXG59O1xuXG5jb25zdCBpbk1zZyA9ICgpID0+IHJlZih7IEluTXNnIH0pO1xuXG5jb25zdCBPdXRNc2c6IFR5cGVEZWYgPSB7XG4gICAgbXNnX3R5cGU6IHU4KCksIC8vIE5vbmU6IDAsIEV4dGVybmFsOiAxLCBJbW1lZGlhdGVseTogMiwgT3V0TXNnTmV3OiAzLCBUcmFuc2l0OiA0LCBEZXF1ZXVlOiA1LCBUcmFuc2l0UmVxdWlyZWQ6IDZcbiAgICBtc2c6IHN0cmluZygpLFxuICAgIHRyYW5zYWN0aW9uOiBzdHJpbmcoKSxcbiAgICBvdXRfbXNnOiBtc2dFbnZlbG9wZSgpLFxuICAgIHJlaW1wb3J0OiBpbk1zZygpLFxuICAgIGltcG9ydGVkOiBpbk1zZygpLFxuICAgIGltcG9ydF9ibG9ja19sdDogdTY0KCksXG59O1xuXG5jb25zdCBvdXRNc2cgPSAoKSA9PiByZWYoeyBPdXRNc2cgfSk7XG5cbmNvbnN0IEJsb2NrOiBUeXBlRGVmID0ge1xuICAgIF9kb2M6ICdUaGlzIGlzIEJsb2NrJyxcbiAgICBfOiB7IGNvbGxlY3Rpb246ICdibG9ja3MnIH0sXG4gICAgc3RhdHVzOiBzdHJpbmcoKSxcbiAgICBnbG9iYWxfaWQ6IHUzMigpLFxuICAgIHdhbnRfc3BsaXQ6IGJvb2woKSxcbiAgICBzZXFfbm86IHUzMigpLFxuICAgIGFmdGVyX21lcmdlOiBib29sKCksXG4gICAgZ2VuX3V0aW1lOiBpMzIoKSxcbiAgICBnZW5fY2F0Y2hhaW5fc2Vxbm86IHUzMigpLFxuICAgIGZsYWdzOiB1MTYoKSxcbiAgICBtYXN0ZXJfcmVmOiBleHRCbGtSZWYoKSxcbiAgICBwcmV2X3JlZjogZXh0QmxrUmVmKCksXG4gICAgcHJldl9hbHRfcmVmOiBleHRCbGtSZWYoKSxcbiAgICBwcmV2X3ZlcnRfcmVmOiBleHRCbGtSZWYoKSxcbiAgICBwcmV2X3ZlcnRfYWx0X3JlZjogZXh0QmxrUmVmKCksXG4gICAgdmVyc2lvbjogdTMyKCksXG4gICAgZ2VuX3ZhbGlkYXRvcl9saXN0X2hhc2hfc2hvcnQ6IHUzMigpLFxuICAgIGJlZm9yZV9zcGxpdDogYm9vbCgpLFxuICAgIGFmdGVyX3NwbGl0OiBib29sKCksXG4gICAgd2FudF9tZXJnZTogYm9vbCgpLFxuICAgIHZlcnRfc2VxX25vOiB1MzIoKSxcbiAgICBzdGFydF9sdDogdTY0KCksXG4gICAgZW5kX2x0OiB1NjQoKSxcbiAgICBzaGFyZDoge1xuICAgICAgICBzaGFyZF9wZnhfYml0czogdTgoKSxcbiAgICAgICAgd29ya2NoYWluX2lkOiBpMzIoKSxcbiAgICAgICAgc2hhcmRfcHJlZml4OiB1NjQoKSxcbiAgICB9LFxuICAgIG1pbl9yZWZfbWNfc2Vxbm86IHUzMigpLFxuICAgIHZhbHVlX2Zsb3c6IHtcbiAgICAgICAgdG9fbmV4dF9ibGs6IGN1cnJlbmN5Q29sbGVjdGlvbigpLFxuICAgICAgICBleHBvcnRlZDogY3VycmVuY3lDb2xsZWN0aW9uKCksXG4gICAgICAgIGZlZXNfY29sbGVjdGVkOiBjdXJyZW5jeUNvbGxlY3Rpb24oKSxcbiAgICAgICAgY3JlYXRlZDogY3VycmVuY3lDb2xsZWN0aW9uKCksXG4gICAgICAgIGltcG9ydGVkOiBjdXJyZW5jeUNvbGxlY3Rpb24oKSxcbiAgICAgICAgZnJvbV9wcmV2X2JsazogY3VycmVuY3lDb2xsZWN0aW9uKCksXG4gICAgICAgIG1pbnRlZDogY3VycmVuY3lDb2xsZWN0aW9uKCksXG4gICAgICAgIGZlZXNfaW1wb3J0ZWQ6IGN1cnJlbmN5Q29sbGVjdGlvbigpLFxuICAgIH0sXG4gICAgaW5fbXNnX2Rlc2NyOiBhcnJheU9mKGluTXNnKCkpLFxuICAgIHJhbmRfc2VlZDogc3RyaW5nKCksXG4gICAgb3V0X21zZ19kZXNjcjogYXJyYXlPZihvdXRNc2coKSksXG4gICAgYWNjb3VudF9ibG9ja3M6IGFycmF5T2Yoe1xuICAgICAgICBhY2NvdW50X2FkZHI6IHN0cmluZygpLFxuICAgICAgICB0cmFuc2FjdGlvbnM6IGFycmF5T2Yoc3RyaW5nKCkpLFxuICAgICAgICBzdGF0ZV91cGRhdGU6IHtcbiAgICAgICAgICAgIG9sZF9oYXNoOiBzdHJpbmcoKSxcbiAgICAgICAgICAgIG5ld19oYXNoOiBzdHJpbmcoKVxuICAgICAgICB9LFxuICAgICAgICB0cl9jb3VudDogaTMyKClcbiAgICB9KSxcbiAgICBzdGF0ZV91cGRhdGU6IHtcbiAgICAgICAgbmV3OiBzdHJpbmcoKSxcbiAgICAgICAgbmV3X2hhc2g6IHN0cmluZygpLFxuICAgICAgICBuZXdfZGVwdGg6IHUxNigpLFxuICAgICAgICBvbGQ6IHN0cmluZygpLFxuICAgICAgICBvbGRfaGFzaDogc3RyaW5nKCksXG4gICAgICAgIG9sZF9kZXB0aDogdTE2KClcbiAgICB9XG59O1xuXG5cbi8vUm9vdCBzY2hlbWUgZGVjbGFyYXRpb25cblxuY29uc3Qgc2NoZW1hOiBUeXBlRGVmID0ge1xuICAgIF9jbGFzczoge1xuICAgICAgICB0eXBlczoge1xuICAgICAgICAgICAgRXh0QmxrUmVmLFxuICAgICAgICAgICAgTXNnRW52ZWxvcGUsXG4gICAgICAgICAgICBJbk1zZyxcbiAgICAgICAgICAgIE91dE1zZyxcbiAgICAgICAgICAgIE1lc3NhZ2UsXG4gICAgICAgICAgICBCbG9jayxcbiAgICAgICAgICAgIEFjY291bnQsXG4gICAgICAgICAgICBUcmFuc2FjdGlvbixcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHNjaGVtYTtcbiJdfQ==