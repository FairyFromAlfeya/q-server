"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _schema = require("ton-labs-dev-ops/dist/src/schema");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var string = _schema.Def.string,
    bool = _schema.Def.bool,
    ref = _schema.Def.ref,
    arrayOf = _schema.Def.arrayOf;

var withDoc = function withDoc(def, doc) {
  return _objectSpread({}, def, {}, doc ? {
    _doc: doc
  } : {});
};

var required = function required(def) {
  return def;
};

var uint = function uint(size, doc) {
  return withDoc({
    _int: {
      unsigned: true,
      size: size
    }
  }, doc);
};

var _int = function _int(size, doc) {
  return withDoc({
    _int: {
      unsigned: false,
      size: size
    }
  }, doc);
};

var i8 = function i8(doc) {
  return _int(8, doc);
};

var u8 = function u8(doc) {
  return uint(8, doc);
};

var u16 = function u16(doc) {
  return uint(16, doc);
};

var u32 = function u32(doc) {
  return uint(32, doc);
};

var i32 = function i32(doc) {
  return _int(32, doc);
};

var u64 = function u64(doc) {
  return uint(64, doc);
};

var u128 = function u128(doc) {
  return uint(128, doc);
};

var join = function join(refDef, on) {
  return _objectSpread({}, ref(refDef), {
    _: {
      join: {
        on: on
      }
    }
  });
};

var grams = u128;

function u8enum(values, doc) {
  var valuesDoc = Object.entries(values).map(function (_ref) {
    var _ref2 = (0, _slicedToArray2["default"])(_ref, 2),
        name = _ref2[0],
        value = _ref2[1];

    return "".concat(value, " \u2013 ").concat(name);
  }).join('\n');
  return uint(8, "".concat(doc ? "".concat(doc, "\n") : '').concat(valuesDoc));
}

var otherCurrencyCollection = function otherCurrencyCollection(doc) {
  return arrayOf({
    currency: i32(),
    value: grams()
  }, doc);
};

var accountStatus = function accountStatus(doc) {
  return u8enum({
    uninit: 0,
    active: 1,
    frozen: 2,
    nonExist: 3
  }, doc);
};

var accountStatusChange = function accountStatusChange(doc) {
  return u8enum({
    unchanged: 0,
    frozen: 1,
    deleted: 2
  }, doc);
};

var skipReason = function skipReason(doc) {
  return u8enum({
    noState: 0,
    badState: 1,
    noGas: 2
  }, doc);
};

var accountType = function accountType(doc) {
  return u8enum({
    uninit: 0,
    active: 1,
    frozen: 2
  }, doc);
};

var messageType = function messageType(doc) {
  return u8enum({
    internal: 0,
    extIn: 2,
    extOut: 3
  }, doc);
};

var messageProcessingStatus = function messageProcessingStatus(doc) {
  return u8enum({
    unknown: 0,
    queued: 1,
    processing: 2,
    preliminary: 3,
    proposed: 4,
    finalized: 5,
    refused: 6,
    transiting: 7
  }, doc);
};

var transactionType = function transactionType(doc) {
  return u8enum({
    ordinary: 0,
    storage: 1,
    tick: 2,
    tock: 3,
    splitPrepare: 4,
    splitInstall: 5,
    mergePrepare: 6,
    mergeInstall: 7
  }, doc);
};

var transactionProcessingStatus = function transactionProcessingStatus(doc) {
  return u8enum({
    unknown: 0,
    preliminary: 1,
    proposed: 2,
    finalized: 3,
    refused: 4
  }, doc);
};

var computeType = function computeType(doc) {
  return u8enum({
    skipped: 0,
    vm: 1
  }, doc);
};

var bounceType = function bounceType(doc) {
  return u8enum({
    negFunds: 0,
    noFunds: 1,
    ok: 2
  }, doc);
};

var blockProcessingStatus = function blockProcessingStatus(doc) {
  return u8enum({
    unknown: 0,
    proposed: 1,
    finalized: 2,
    refused: 3
  }, doc);
};

var inMsgType = function inMsgType(doc) {
  return u8enum({
    external: 0,
    ihr: 1,
    immediately: 2,
    "final": 3,
    transit: 4,
    discardedFinal: 5,
    discardedTransit: 6
  }, doc);
};

var outMsgType = function outMsgType(doc) {
  return u8enum({
    external: 0,
    immediately: 1,
    outMsgNew: 2,
    transit: 3,
    dequeueImmediately: 4,
    dequeue: 5,
    transitRequired: 6,
    none: -1
  }, doc);
};

var Account = {
  _doc: 'TON Account',
  _: {
    collection: 'accounts'
  },
  acc_type: accountType(),
  last_paid: u32(),
  due_payment: grams(),
  last_trans_lt: u64(),
  balance: grams(),
  balance_other: otherCurrencyCollection(),
  split_depth: u8(),
  tick: bool(),
  tock: bool(),
  code: string(),
  data: string(),
  library: string()
};
var Message = {
  _doc: 'TON Message',
  _: {
    collection: 'messages'
  },
  msg_type: required(messageType()),
  status: required(messageProcessingStatus()),
  transaction_id: required(string()),
  block_id: required(string()),
  body: string(),
  split_depth: u8(),
  tick: bool(),
  tock: bool(),
  code: string(),
  data: string(),
  library: string(),
  src: string(),
  dst: string(),
  created_lt: u64(),
  created_at: u32(),
  ihr_disabled: bool(),
  ihr_fee: grams(),
  fwd_fee: grams(),
  import_fee: grams(),
  bounce: bool(),
  bounced: bool(),
  value: grams(),
  value_other: otherCurrencyCollection()
};
var Transaction = {
  _doc: 'TON Transaction',
  _: {
    collection: 'transactions'
  },
  tr_type: required(transactionType()),
  status: required(transactionProcessingStatus()),
  block_id: string(),
  account_addr: string(),
  lt: u64(),
  prev_trans_hash: string(),
  prev_trans_lt: u64(),
  now: u32(),
  outmsg_cnt: i32(),
  orig_status: accountStatus(),
  end_status: accountStatus(),
  in_msg: string(),
  out_msgs: arrayOf(string()),
  total_fees: grams(),
  total_fees_other: otherCurrencyCollection(),
  old_hash: string(),
  new_hash: string(),
  credit_first: bool(),
  storage: {
    storage_fees_collected: grams(),
    storage_fees_due: grams(),
    status_change: accountStatusChange()
  },
  credit: {
    due_fees_collected: grams(),
    credit: grams(),
    credit_other: otherCurrencyCollection()
  },
  compute: {
    compute_type: required(computeType()),
    skipped_reason: skipReason(),
    success: bool(),
    msg_state_used: bool(),
    account_activated: bool(),
    gas_fees: grams(),
    gas_used: u64(),
    gas_limit: u64(),
    gas_credit: i32(),
    mode: i8(),
    exit_code: i32(),
    exit_arg: i32(),
    vm_steps: u32(),
    vm_init_state_hash: string(),
    vm_final_state_hash: string()
  },
  action: {
    success: bool(),
    valid: bool(),
    no_funds: bool(),
    status_change: accountStatusChange(),
    total_fwd_fees: grams(),
    total_action_fees: grams(),
    result_code: i32(),
    result_arg: i32(),
    tot_actions: i32(),
    spec_actions: i32(),
    skipped_actions: i32(),
    msgs_created: i32(),
    action_list_hash: string(),
    total_msg_size_cells: u32(),
    total_msg_size_bits: u32()
  },
  bounce: {
    bounce_type: required(bounceType()),
    msg_size_cells: u32(),
    msg_size_bits: u32(),
    req_fwd_fees: grams(),
    msg_fees: grams(),
    fwd_fees: grams()
  },
  aborted: bool(),
  destroyed: bool(),
  tt: string(),
  split_info: {
    cur_shard_pfx_len: u8(),
    acc_split_depth: u8(),
    this_addr: string(),
    sibling_addr: string()
  },
  prepare_transaction: string(),
  installed: bool()
}; // BLOCK

var ExtBlkRef = {
  end_lt: u64(),
  seq_no: u32(),
  root_hash: string(),
  file_hash: string()
};

var extBlkRef = function extBlkRef() {
  return ref({
    ExtBlkRef: ExtBlkRef
  });
};

var MsgEnvelope = {
  msg: string(),
  next_addr: string(),
  cur_addr: string(),
  fwd_fee_remaining: grams()
};

var msgEnvelope = function msgEnvelope() {
  return ref({
    MsgEnvelope: MsgEnvelope
  });
};

var InMsg = {
  msg_type: required(inMsgType()),
  msg: string(),
  transaction: string(),
  ihr_fee: grams(),
  proof_created: string(),
  in_msg: msgEnvelope(),
  fwd_fee: grams(),
  out_msg: msgEnvelope(),
  transit_fee: grams(),
  transaction_id: u64(),
  proof_delivered: string()
};

var inMsg = function inMsg() {
  return ref({
    InMsg: InMsg
  });
};

var OutMsg = {
  msg_type: required(outMsgType()),
  msg: string(),
  transaction: string(),
  out_msg: msgEnvelope(),
  reimport: inMsg(),
  imported: inMsg(),
  import_block_lt: u64()
};

var outMsg = function outMsg() {
  return ref({
    OutMsg: OutMsg
  });
};

var Block = {
  _doc: 'This is Block',
  _: {
    collection: 'blocks'
  },
  status: blockProcessingStatus(),
  global_id: u32(),
  want_split: bool(),
  seq_no: u32(),
  after_merge: bool(),
  gen_utime: i32(),
  gen_catchain_seqno: u32(),
  flags: u16(),
  master_ref: extBlkRef(),
  prev_ref: extBlkRef(),
  prev_alt_ref: extBlkRef(),
  prev_vert_ref: extBlkRef(),
  prev_vert_alt_ref: extBlkRef(),
  version: u32(),
  gen_validator_list_hash_short: u32(),
  before_split: bool(),
  after_split: bool(),
  want_merge: bool(),
  vert_seq_no: u32(),
  start_lt: u64(),
  end_lt: u64(),
  shard: {
    shard_pfx_bits: u8(),
    workchain_id: i32(),
    shard_prefix: u64()
  },
  min_ref_mc_seqno: u32(),
  value_flow: {
    to_next_blk: grams(),
    to_next_blk_other: otherCurrencyCollection(),
    exported: grams(),
    exported_other: otherCurrencyCollection(),
    fees_collected: grams(),
    fees_collected_other: otherCurrencyCollection(),
    created: grams(),
    created_other: otherCurrencyCollection(),
    imported: grams(),
    imported_other: otherCurrencyCollection(),
    from_prev_blk: grams(),
    from_prev_blk_other: otherCurrencyCollection(),
    minted: grams(),
    minted_other: otherCurrencyCollection(),
    fees_imported: grams(),
    fees_imported_other: otherCurrencyCollection()
  },
  in_msg_descr: arrayOf(inMsg()),
  rand_seed: string(),
  out_msg_descr: arrayOf(outMsg()),
  account_blocks: arrayOf({
    account_addr: string(),
    transactions: arrayOf(string()),
    state_update: {
      old_hash: string(),
      new_hash: string()
    },
    tr_count: i32()
  }),
  state_update: {
    "new": string(),
    new_hash: string(),
    new_depth: u16(),
    old: string(),
    old_hash: string(),
    old_depth: u16()
  }
}; //Root scheme declaration

var schema = {
  _class: {
    types: {
      ExtBlkRef: ExtBlkRef,
      MsgEnvelope: MsgEnvelope,
      InMsg: InMsg,
      OutMsg: OutMsg,
      Message: Message,
      Block: Block,
      Account: Account,
      Transaction: Transaction
    }
  }
};
var _default = schema;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,