"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _schema = require("ton-labs-dev-ops/dist/src/schema");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var string = _schema.Def.string,
    bool = _schema.Def.bool,
    ref = _schema.Def.ref,
    arrayOf = _schema.Def.arrayOf;

var join = function join(refDef, on) {
  return _objectSpread({}, ref(refDef), {
    _: {
      join: {
        on: on
      }
    }
  });
};

var withDoc = function withDoc(def, doc) {
  return _objectSpread({}, def, {}, doc ? {
    _doc: doc
  } : {});
};

var required = function required(def) {
  return def;
};

var uint = function uint(size, doc) {
  return withDoc({
    _int: {
      unsigned: true,
      size: size
    }
  }, doc);
};

var _int = function _int(size, doc) {
  return withDoc({
    _int: {
      unsigned: false,
      size: size
    }
  }, doc);
};

var i8 = function i8(doc) {
  return _int(8, doc);
};

var i32 = function i32(doc) {
  return _int(32, doc);
};

var u8 = function u8(doc) {
  return uint(8, doc);
};

var u16 = function u16(doc) {
  return uint(16, doc);
};

var u32 = function u32(doc) {
  return uint(32, doc);
};

var u64 = function u64(doc) {
  return uint(64, doc);
};

var u128 = function u128(doc) {
  return uint(128, doc);
};

var u256 = function u256(doc) {
  return uint(256, doc);
};

var grams = u128;

function u8enum(name, values) {
  return function (doc) {
    var valuesDoc = Object.entries(values).map(function (_ref) {
      var _ref2 = (0, _slicedToArray2["default"])(_ref, 2),
          name = _ref2[0],
          value = _ref2[1];

      return "".concat(value, " \u2013 ").concat(name);
    }).join('\n');
    var effectiveDoc = "".concat(doc ? "".concat(doc, "\n") : '').concat(valuesDoc);
    return withDoc({
      _int: {
        unsigned: true,
        size: 8
      },
      _: {
        "enum": {
          name: name,
          values: values
        }
      }
    }, effectiveDoc);
  };
}

var otherCurrencyCollection = function otherCurrencyCollection(doc) {
  return arrayOf({
    currency: u32(),
    value: u256()
  }, doc);
};

var accountStatus = u8enum('AccountStatus', {
  uninit: 0,
  active: 1,
  frozen: 2,
  nonExist: 3
});
var accountStatusChange = u8enum('AccountStatusChange', {
  unchanged: 0,
  frozen: 1,
  deleted: 2
});
var skipReason = u8enum('SkipReason', {
  noState: 0,
  badState: 1,
  noGas: 2
});
var accountType = u8enum('AccountType', {
  uninit: 0,
  active: 1,
  frozen: 2
});
var messageType = u8enum('MessageType', {
  internal: 0,
  extIn: 1,
  extOut: 2
});
var messageProcessingStatus = u8enum('MessageProcessingStatus', {
  unknown: 0,
  queued: 1,
  processing: 2,
  preliminary: 3,
  proposed: 4,
  finalized: 5,
  refused: 6,
  transiting: 7
});
var transactionType = u8enum('TransactionType', {
  ordinary: 0,
  storage: 1,
  tick: 2,
  tock: 3,
  splitPrepare: 4,
  splitInstall: 5,
  mergePrepare: 6,
  mergeInstall: 7
});
var transactionProcessingStatus = u8enum('TransactionProcessingStatus', {
  unknown: 0,
  preliminary: 1,
  proposed: 2,
  finalized: 3,
  refused: 4
});
var computeType = u8enum('ComputeType', {
  skipped: 0,
  vm: 1
});
var bounceType = u8enum('BounceType', {
  negFunds: 0,
  noFunds: 1,
  ok: 2
});
var blockProcessingStatus = u8enum('BlockProcessingStatus', {
  unknown: 0,
  proposed: 1,
  finalized: 2,
  refused: 3
});
var inMsgType = u8enum('InMsgType', {
  external: 0,
  ihr: 1,
  immediately: 2,
  "final": 3,
  transit: 4,
  discardedFinal: 5,
  discardedTransit: 6
});
var outMsgType = u8enum('OutMsgType', {
  external: 0,
  immediately: 1,
  outMsgNew: 2,
  transit: 3,
  dequeueImmediately: 4,
  dequeue: 5,
  transitRequired: 6,
  none: -1
});
var splitType = u8enum('SplitType', {
  none: 0,
  split: 2,
  merge: 3
});
var Account = {
  _doc: 'TON Account',
  _: {
    collection: 'accounts'
  },
  acc_type: required(accountType('Current status of the account')),
  last_paid: required(u32('Contains either the unixtime of the most recent storage payment collected (usually this is the unixtime of the most recent transaction), or the unixtime when the account was created (again, by a transaction)')),
  due_payment: grams('If present, accumulates the storage payments that could not be exacted from the balance of the account, represented by a strictly positive amount of nanograms; it can be present only for uninitial- ized or frozen accounts that have a balance of zero Grams (but may have non-zero balances in other cryptocurrencies). When due_payment becomes larger than the value of a configurable parameter of the blockchain, the ac- count is destroyed altogether, and its balance, if any, is transferred to the zero account.'),
  last_trans_lt: required(u64()),
  balance: required(grams()),
  balance_other: otherCurrencyCollection(),
  split_depth: u8('Is present and non-zero only in instances of large smart contracts.'),
  tick: bool('May be present only in the masterchain—and within the masterchain, only in some fundamental smart contracts required for the whole system to function.'),
  tock: bool('May be present only in the masterchain—and within the masterchain, only in some fundamental smart contracts required for the whole system to function.'),
  code: string('If present, contains smart-contract code encoded with in base64'),
  data: string('If present, contains smart-contract data encoded with in base64'),
  library: string('If present, contains library code used in smart-contract'),
  proof: string(),
  boc: string()
};
var Message = {
  _doc: 'TON Message',
  _: {
    collection: 'messages'
  },
  msg_type: required(messageType()),
  status: required(messageProcessingStatus()),
  transaction_id: required(string()),
  block_id: required(string()),
  body: string(),
  split_depth: u8(),
  tick: bool(),
  tock: bool(),
  code: string(),
  data: string(),
  library: string(),
  src: string(),
  dst: string(),
  created_lt: u64(),
  created_at: u32(),
  ihr_disabled: bool(),
  ihr_fee: grams(),
  fwd_fee: grams(),
  import_fee: grams(),
  bounce: bool(),
  bounced: bool(),
  value: grams(),
  value_other: otherCurrencyCollection(),
  proof: string(),
  boc: string()
};
var Transaction = {
  _doc: 'TON Transaction',
  _: {
    collection: 'transactions'
  },
  tr_type: required(transactionType()),
  status: required(transactionProcessingStatus()),
  block_id: string(),
  account_addr: string(),
  lt: u64(),
  prev_trans_hash: string(),
  prev_trans_lt: u64(),
  now: u32(),
  outmsg_cnt: i32(),
  orig_status: accountStatus(),
  end_status: accountStatus(),
  in_msg: string(),
  in_message: join({
    Message: Message
  }, 'in_msg'),
  out_msgs: arrayOf(string()),
  out_messages: arrayOf(join({
    Message: Message
  }, 'out_msgs')),
  total_fees: grams(),
  total_fees_other: otherCurrencyCollection(),
  old_hash: string(),
  new_hash: string(),
  credit_first: bool(),
  storage: {
    storage_fees_collected: grams(),
    storage_fees_due: grams(),
    status_change: accountStatusChange()
  },
  credit: {
    due_fees_collected: grams(),
    credit: grams(),
    credit_other: otherCurrencyCollection()
  },
  compute: {
    compute_type: required(computeType()),
    skipped_reason: skipReason(),
    success: bool(),
    msg_state_used: bool(),
    account_activated: bool(),
    gas_fees: grams(),
    gas_used: u64(),
    gas_limit: u64(),
    gas_credit: i32(),
    mode: i8(),
    exit_code: i32(),
    exit_arg: i32(),
    vm_steps: u32(),
    vm_init_state_hash: string(),
    vm_final_state_hash: string()
  },
  action: {
    success: bool(),
    valid: bool(),
    no_funds: bool(),
    status_change: accountStatusChange(),
    total_fwd_fees: grams(),
    total_action_fees: grams(),
    result_code: i32(),
    result_arg: i32(),
    tot_actions: i32(),
    spec_actions: i32(),
    skipped_actions: i32(),
    msgs_created: i32(),
    action_list_hash: string(),
    total_msg_size_cells: u32(),
    total_msg_size_bits: u32()
  },
  bounce: {
    bounce_type: required(bounceType()),
    msg_size_cells: u32(),
    msg_size_bits: u32(),
    req_fwd_fees: grams(),
    msg_fees: grams(),
    fwd_fees: grams()
  },
  aborted: bool(),
  destroyed: bool(),
  tt: string(),
  split_info: {
    cur_shard_pfx_len: u8(),
    acc_split_depth: u8(),
    this_addr: string(),
    sibling_addr: string()
  },
  prepare_transaction: string(),
  installed: bool(),
  proof: string(),
  boc: string()
}; // BLOCK

var ExtBlkRef = {
  end_lt: u64(),
  seq_no: u32(),
  root_hash: string(),
  file_hash: string()
};

var extBlkRef = function extBlkRef() {
  return ref({
    ExtBlkRef: ExtBlkRef
  });
};

var MsgEnvelope = {
  msg: string(),
  next_addr: string(),
  cur_addr: string(),
  fwd_fee_remaining: grams()
};

var msgEnvelope = function msgEnvelope() {
  return ref({
    MsgEnvelope: MsgEnvelope
  });
};

var InMsg = {
  msg_type: required(inMsgType()),
  msg: string(),
  transaction: string(),
  ihr_fee: grams(),
  proof_created: string(),
  in_msg: msgEnvelope(),
  fwd_fee: grams(),
  out_msg: msgEnvelope(),
  transit_fee: grams(),
  transaction_id: u64(),
  proof_delivered: string()
};

var inMsg = function inMsg() {
  return ref({
    InMsg: InMsg
  });
};

var OutMsg = {
  msg_type: required(outMsgType()),
  msg: string(),
  transaction: string(),
  out_msg: msgEnvelope(),
  reimport: inMsg(),
  imported: inMsg(),
  import_block_lt: u64()
};

var outMsg = function outMsg() {
  return ref({
    OutMsg: OutMsg
  });
};

var shardDescr = function shardDescr(doc) {
  return withDoc({
    seq_no: u32(),
    reg_mc_seqno: u32(),
    start_lt: u64(),
    end_lt: u64(),
    root_hash: string(),
    file_hash: string(),
    before_split: bool(),
    before_merge: bool(),
    want_split: bool(),
    want_merge: bool(),
    nx_cc_updated: bool(),
    flags: u8(),
    next_catchain_seqno: u32(),
    next_validator_shard: string(),
    min_ref_mc_seqno: u32(),
    gen_utime: u32(),
    split_type: splitType(),
    split: u32(),
    fees_collected: grams(),
    fees_collected_other: otherCurrencyCollection(),
    funds_created: grams(),
    funds_created_other: otherCurrencyCollection()
  }, doc);
};

var Block = {
  _doc: 'This is Block',
  _: {
    collection: 'blocks'
  },
  status: blockProcessingStatus(),
  global_id: u32(),
  want_split: bool(),
  seq_no: u32(),
  after_merge: bool(),
  gen_utime: i32(),
  gen_catchain_seqno: u32(),
  flags: u16(),
  master_ref: extBlkRef(),
  prev_ref: extBlkRef(),
  prev_alt_ref: extBlkRef(),
  prev_vert_ref: extBlkRef(),
  prev_vert_alt_ref: extBlkRef(),
  version: u32(),
  gen_validator_list_hash_short: u32(),
  before_split: bool(),
  after_split: bool(),
  want_merge: bool(),
  vert_seq_no: u32(),
  start_lt: u64(),
  end_lt: u64(),
  workchain_id: i32(),
  shard: string(),
  min_ref_mc_seqno: u32(),
  value_flow: {
    to_next_blk: grams(),
    to_next_blk_other: otherCurrencyCollection(),
    exported: grams(),
    exported_other: otherCurrencyCollection(),
    fees_collected: grams(),
    fees_collected_other: otherCurrencyCollection(),
    created: grams(),
    created_other: otherCurrencyCollection(),
    imported: grams(),
    imported_other: otherCurrencyCollection(),
    from_prev_blk: grams(),
    from_prev_blk_other: otherCurrencyCollection(),
    minted: grams(),
    minted_other: otherCurrencyCollection(),
    fees_imported: grams(),
    fees_imported_other: otherCurrencyCollection()
  },
  in_msg_descr: arrayOf(inMsg()),
  rand_seed: string(),
  out_msg_descr: arrayOf(outMsg()),
  account_blocks: arrayOf({
    account_addr: string(),
    transactions: arrayOf(string()),
    state_update: {
      old_hash: string(),
      new_hash: string()
    },
    tr_count: i32()
  }),
  state_update: {
    "new": string(),
    new_hash: string(),
    new_depth: u16(),
    old: string(),
    old_hash: string(),
    old_depth: u16()
  },
  shard_hashes: arrayOf({
    workchain_id: i32(),
    shard: string(),
    descr: shardDescr()
  })
}; //Root scheme declaration

var schema = {
  _class: {
    types: {
      ExtBlkRef: ExtBlkRef,
      MsgEnvelope: MsgEnvelope,
      InMsg: InMsg,
      OutMsg: OutMsg,
      Message: Message,
      Block: Block,
      Account: Account,
      Transaction: Transaction
    }
  }
};
var _default = schema;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NlcnZlci9kYi5zY2hlbWEudjIuanMiXSwibmFtZXMiOlsic3RyaW5nIiwiRGVmIiwiYm9vbCIsInJlZiIsImFycmF5T2YiLCJqb2luIiwicmVmRGVmIiwib24iLCJfIiwid2l0aERvYyIsImRlZiIsImRvYyIsIl9kb2MiLCJyZXF1aXJlZCIsInVpbnQiLCJzaXplIiwiX2ludCIsInVuc2lnbmVkIiwiaW50IiwiaTgiLCJpMzIiLCJ1OCIsInUxNiIsInUzMiIsInU2NCIsInUxMjgiLCJ1MjU2IiwiZ3JhbXMiLCJ1OGVudW0iLCJuYW1lIiwidmFsdWVzIiwidmFsdWVzRG9jIiwiT2JqZWN0IiwiZW50cmllcyIsIm1hcCIsInZhbHVlIiwiZWZmZWN0aXZlRG9jIiwib3RoZXJDdXJyZW5jeUNvbGxlY3Rpb24iLCJjdXJyZW5jeSIsImFjY291bnRTdGF0dXMiLCJ1bmluaXQiLCJhY3RpdmUiLCJmcm96ZW4iLCJub25FeGlzdCIsImFjY291bnRTdGF0dXNDaGFuZ2UiLCJ1bmNoYW5nZWQiLCJkZWxldGVkIiwic2tpcFJlYXNvbiIsIm5vU3RhdGUiLCJiYWRTdGF0ZSIsIm5vR2FzIiwiYWNjb3VudFR5cGUiLCJtZXNzYWdlVHlwZSIsImludGVybmFsIiwiZXh0SW4iLCJleHRPdXQiLCJtZXNzYWdlUHJvY2Vzc2luZ1N0YXR1cyIsInVua25vd24iLCJxdWV1ZWQiLCJwcm9jZXNzaW5nIiwicHJlbGltaW5hcnkiLCJwcm9wb3NlZCIsImZpbmFsaXplZCIsInJlZnVzZWQiLCJ0cmFuc2l0aW5nIiwidHJhbnNhY3Rpb25UeXBlIiwib3JkaW5hcnkiLCJzdG9yYWdlIiwidGljayIsInRvY2siLCJzcGxpdFByZXBhcmUiLCJzcGxpdEluc3RhbGwiLCJtZXJnZVByZXBhcmUiLCJtZXJnZUluc3RhbGwiLCJ0cmFuc2FjdGlvblByb2Nlc3NpbmdTdGF0dXMiLCJjb21wdXRlVHlwZSIsInNraXBwZWQiLCJ2bSIsImJvdW5jZVR5cGUiLCJuZWdGdW5kcyIsIm5vRnVuZHMiLCJvayIsImJsb2NrUHJvY2Vzc2luZ1N0YXR1cyIsImluTXNnVHlwZSIsImV4dGVybmFsIiwiaWhyIiwiaW1tZWRpYXRlbHkiLCJ0cmFuc2l0IiwiZGlzY2FyZGVkRmluYWwiLCJkaXNjYXJkZWRUcmFuc2l0Iiwib3V0TXNnVHlwZSIsIm91dE1zZ05ldyIsImRlcXVldWVJbW1lZGlhdGVseSIsImRlcXVldWUiLCJ0cmFuc2l0UmVxdWlyZWQiLCJub25lIiwic3BsaXRUeXBlIiwic3BsaXQiLCJtZXJnZSIsIkFjY291bnQiLCJjb2xsZWN0aW9uIiwiYWNjX3R5cGUiLCJsYXN0X3BhaWQiLCJkdWVfcGF5bWVudCIsImxhc3RfdHJhbnNfbHQiLCJiYWxhbmNlIiwiYmFsYW5jZV9vdGhlciIsInNwbGl0X2RlcHRoIiwiY29kZSIsImRhdGEiLCJsaWJyYXJ5IiwicHJvb2YiLCJib2MiLCJNZXNzYWdlIiwibXNnX3R5cGUiLCJzdGF0dXMiLCJ0cmFuc2FjdGlvbl9pZCIsImJsb2NrX2lkIiwiYm9keSIsInNyYyIsImRzdCIsImNyZWF0ZWRfbHQiLCJjcmVhdGVkX2F0IiwiaWhyX2Rpc2FibGVkIiwiaWhyX2ZlZSIsImZ3ZF9mZWUiLCJpbXBvcnRfZmVlIiwiYm91bmNlIiwiYm91bmNlZCIsInZhbHVlX290aGVyIiwiVHJhbnNhY3Rpb24iLCJ0cl90eXBlIiwiYWNjb3VudF9hZGRyIiwibHQiLCJwcmV2X3RyYW5zX2hhc2giLCJwcmV2X3RyYW5zX2x0Iiwibm93Iiwib3V0bXNnX2NudCIsIm9yaWdfc3RhdHVzIiwiZW5kX3N0YXR1cyIsImluX21zZyIsImluX21lc3NhZ2UiLCJvdXRfbXNncyIsIm91dF9tZXNzYWdlcyIsInRvdGFsX2ZlZXMiLCJ0b3RhbF9mZWVzX290aGVyIiwib2xkX2hhc2giLCJuZXdfaGFzaCIsImNyZWRpdF9maXJzdCIsInN0b3JhZ2VfZmVlc19jb2xsZWN0ZWQiLCJzdG9yYWdlX2ZlZXNfZHVlIiwic3RhdHVzX2NoYW5nZSIsImNyZWRpdCIsImR1ZV9mZWVzX2NvbGxlY3RlZCIsImNyZWRpdF9vdGhlciIsImNvbXB1dGUiLCJjb21wdXRlX3R5cGUiLCJza2lwcGVkX3JlYXNvbiIsInN1Y2Nlc3MiLCJtc2dfc3RhdGVfdXNlZCIsImFjY291bnRfYWN0aXZhdGVkIiwiZ2FzX2ZlZXMiLCJnYXNfdXNlZCIsImdhc19saW1pdCIsImdhc19jcmVkaXQiLCJtb2RlIiwiZXhpdF9jb2RlIiwiZXhpdF9hcmciLCJ2bV9zdGVwcyIsInZtX2luaXRfc3RhdGVfaGFzaCIsInZtX2ZpbmFsX3N0YXRlX2hhc2giLCJhY3Rpb24iLCJ2YWxpZCIsIm5vX2Z1bmRzIiwidG90YWxfZndkX2ZlZXMiLCJ0b3RhbF9hY3Rpb25fZmVlcyIsInJlc3VsdF9jb2RlIiwicmVzdWx0X2FyZyIsInRvdF9hY3Rpb25zIiwic3BlY19hY3Rpb25zIiwic2tpcHBlZF9hY3Rpb25zIiwibXNnc19jcmVhdGVkIiwiYWN0aW9uX2xpc3RfaGFzaCIsInRvdGFsX21zZ19zaXplX2NlbGxzIiwidG90YWxfbXNnX3NpemVfYml0cyIsImJvdW5jZV90eXBlIiwibXNnX3NpemVfY2VsbHMiLCJtc2dfc2l6ZV9iaXRzIiwicmVxX2Z3ZF9mZWVzIiwibXNnX2ZlZXMiLCJmd2RfZmVlcyIsImFib3J0ZWQiLCJkZXN0cm95ZWQiLCJ0dCIsInNwbGl0X2luZm8iLCJjdXJfc2hhcmRfcGZ4X2xlbiIsImFjY19zcGxpdF9kZXB0aCIsInRoaXNfYWRkciIsInNpYmxpbmdfYWRkciIsInByZXBhcmVfdHJhbnNhY3Rpb24iLCJpbnN0YWxsZWQiLCJFeHRCbGtSZWYiLCJlbmRfbHQiLCJzZXFfbm8iLCJyb290X2hhc2giLCJmaWxlX2hhc2giLCJleHRCbGtSZWYiLCJNc2dFbnZlbG9wZSIsIm1zZyIsIm5leHRfYWRkciIsImN1cl9hZGRyIiwiZndkX2ZlZV9yZW1haW5pbmciLCJtc2dFbnZlbG9wZSIsIkluTXNnIiwidHJhbnNhY3Rpb24iLCJwcm9vZl9jcmVhdGVkIiwib3V0X21zZyIsInRyYW5zaXRfZmVlIiwicHJvb2ZfZGVsaXZlcmVkIiwiaW5Nc2ciLCJPdXRNc2ciLCJyZWltcG9ydCIsImltcG9ydGVkIiwiaW1wb3J0X2Jsb2NrX2x0Iiwib3V0TXNnIiwic2hhcmREZXNjciIsInJlZ19tY19zZXFubyIsInN0YXJ0X2x0IiwiYmVmb3JlX3NwbGl0IiwiYmVmb3JlX21lcmdlIiwid2FudF9zcGxpdCIsIndhbnRfbWVyZ2UiLCJueF9jY191cGRhdGVkIiwiZmxhZ3MiLCJuZXh0X2NhdGNoYWluX3NlcW5vIiwibmV4dF92YWxpZGF0b3Jfc2hhcmQiLCJtaW5fcmVmX21jX3NlcW5vIiwiZ2VuX3V0aW1lIiwic3BsaXRfdHlwZSIsImZlZXNfY29sbGVjdGVkIiwiZmVlc19jb2xsZWN0ZWRfb3RoZXIiLCJmdW5kc19jcmVhdGVkIiwiZnVuZHNfY3JlYXRlZF9vdGhlciIsIkJsb2NrIiwiZ2xvYmFsX2lkIiwiYWZ0ZXJfbWVyZ2UiLCJnZW5fY2F0Y2hhaW5fc2Vxbm8iLCJtYXN0ZXJfcmVmIiwicHJldl9yZWYiLCJwcmV2X2FsdF9yZWYiLCJwcmV2X3ZlcnRfcmVmIiwicHJldl92ZXJ0X2FsdF9yZWYiLCJ2ZXJzaW9uIiwiZ2VuX3ZhbGlkYXRvcl9saXN0X2hhc2hfc2hvcnQiLCJhZnRlcl9zcGxpdCIsInZlcnRfc2VxX25vIiwid29ya2NoYWluX2lkIiwic2hhcmQiLCJ2YWx1ZV9mbG93IiwidG9fbmV4dF9ibGsiLCJ0b19uZXh0X2Jsa19vdGhlciIsImV4cG9ydGVkIiwiZXhwb3J0ZWRfb3RoZXIiLCJjcmVhdGVkIiwiY3JlYXRlZF9vdGhlciIsImltcG9ydGVkX290aGVyIiwiZnJvbV9wcmV2X2JsayIsImZyb21fcHJldl9ibGtfb3RoZXIiLCJtaW50ZWQiLCJtaW50ZWRfb3RoZXIiLCJmZWVzX2ltcG9ydGVkIiwiZmVlc19pbXBvcnRlZF9vdGhlciIsImluX21zZ19kZXNjciIsInJhbmRfc2VlZCIsIm91dF9tc2dfZGVzY3IiLCJhY2NvdW50X2Jsb2NrcyIsInRyYW5zYWN0aW9ucyIsInN0YXRlX3VwZGF0ZSIsInRyX2NvdW50IiwibmV3X2RlcHRoIiwib2xkIiwib2xkX2RlcHRoIiwic2hhcmRfaGFzaGVzIiwiZGVzY3IiLCJzY2hlbWEiLCJfY2xhc3MiLCJ0eXBlcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQW1CQTs7Ozs7O0lBRVFBLE0sR0FBK0JDLFcsQ0FBL0JELE07SUFBUUUsSSxHQUF1QkQsVyxDQUF2QkMsSTtJQUFNQyxHLEdBQWlCRixXLENBQWpCRSxHO0lBQUtDLE8sR0FBWUgsVyxDQUFaRyxPOztBQUMzQixJQUFNQyxJQUFJLEdBQUcsU0FBUEEsSUFBTyxDQUFDQyxNQUFELEVBQWdDQyxFQUFoQyxFQUF3RDtBQUNqRSwyQkFBWUosR0FBRyxDQUFDRyxNQUFELENBQWY7QUFBeUJFLElBQUFBLENBQUMsRUFBRTtBQUFFSCxNQUFBQSxJQUFJLEVBQUU7QUFBRUUsUUFBQUEsRUFBRSxFQUFGQTtBQUFGO0FBQVI7QUFBNUI7QUFDSCxDQUZEOztBQUdBLElBQU1FLE9BQU8sR0FBRyxTQUFWQSxPQUFVLENBQUNDLEdBQUQsRUFBZUMsR0FBZjtBQUFBLDJCQUNURCxHQURTLE1BRVJDLEdBQUcsR0FBRztBQUFFQyxJQUFBQSxJQUFJLEVBQUVEO0FBQVIsR0FBSCxHQUFtQixFQUZkO0FBQUEsQ0FBaEI7O0FBSUEsSUFBTUUsUUFBUSxHQUFHLFNBQVhBLFFBQVcsQ0FBQ0gsR0FBRDtBQUFBLFNBQWtCQSxHQUFsQjtBQUFBLENBQWpCOztBQUVBLElBQU1JLElBQUksR0FBRyxTQUFQQSxJQUFPLENBQUNDLElBQUQsRUFBb0JKLEdBQXBCO0FBQUEsU0FBcUNGLE9BQU8sQ0FBQztBQUN0RE8sSUFBQUEsSUFBSSxFQUFFO0FBQUVDLE1BQUFBLFFBQVEsRUFBRSxJQUFaO0FBQWtCRixNQUFBQSxJQUFJLEVBQUpBO0FBQWxCO0FBRGdELEdBQUQsRUFFdERKLEdBRnNELENBQTVDO0FBQUEsQ0FBYjs7QUFJQSxJQUFNTyxJQUFHLEdBQUcsU0FBTkEsSUFBTSxDQUFDSCxJQUFELEVBQW9CSixHQUFwQjtBQUFBLFNBQXFDRixPQUFPLENBQUM7QUFD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RztBQUVITSxNQUFBQSxXQUFXLEVBQVhBLFdBRkc7QUFHSE0sTUFBQUEsS0FBSyxFQUFMQSxLQUhHO0FBSUhPLE1BQUFBLE1BQU0sRUFBTkEsTUFKRztBQUtIM0csTUFBQUEsT0FBTyxFQUFQQSxPQUxHO0FBTUhrSSxNQUFBQSxLQUFLLEVBQUxBLEtBTkc7QUFPSGhKLE1BQUFBLE9BQU8sRUFBUEEsT0FQRztBQVFIK0IsTUFBQUEsV0FBVyxFQUFYQTtBQVJHO0FBREg7QUFEWSxDQUF4QjtlQWVlMEosTSIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgMjAxOC0yMDE5IFRPTiBERVYgU09MVVRJT05TIExURC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgU09GVFdBUkUgRVZBTFVBVElPTiBMaWNlbnNlICh0aGUgXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2VcbiAqIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZVxuICogTGljZW5zZSBhdDpcbiAqXG4gKiBodHRwOi8vd3d3LnRvbi5kZXYvbGljZW5zZXNcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIFRPTiBERVYgc29mdHdhcmUgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuLy9AZmxvd1xuXG5pbXBvcnQgdHlwZSB7IEludFNpemVUeXBlLCBUeXBlRGVmIH0gZnJvbSAndG9uLWxhYnMtZGV2LW9wcy9zcmMvc2NoZW1hJztcbmltcG9ydCB7IERlZiB9IGZyb20gJ3Rvbi1sYWJzLWRldi1vcHMvZGlzdC9zcmMvc2NoZW1hJztcblxuY29uc3QgeyBzdHJpbmcsIGJvb2wsIHJlZiwgYXJyYXlPZiB9ID0gRGVmO1xuY29uc3Qgam9pbiA9IChyZWZEZWY6IHsgW3N0cmluZ106IFR5cGVEZWYgfSwgb246IHN0cmluZyk6IFR5cGVEZWYgPT4ge1xuICAgIHJldHVybiB7IC4uLnJlZihyZWZEZWYpLCBfOiB7IGpvaW46IHsgb24gfSB9IH1cbn07XG5jb25zdCB3aXRoRG9jID0gKGRlZjogVHlwZURlZiwgZG9jPzogc3RyaW5nKSA9PiAoe1xuICAgIC4uLmRlZixcbiAgICAuLi4oZG9jID8geyBfZG9jOiBkb2MgfSA6IHt9KVxufSk7XG5jb25zdCByZXF1aXJlZCA9IChkZWY6IFR5cGVEZWYpID0+IGRlZjtcblxuY29uc3QgdWludCA9IChzaXplOiBJbnRTaXplVHlwZSwgZG9jPzogc3RyaW5nKSA9PiB3aXRoRG9jKHtcbiAgICBfaW50OiB7IHVuc2lnbmVkOiB0cnVlLCBzaXplIH1cbn0sIGRvYyk7XG5cbmNvbnN0IGludCA9IChzaXplOiBJbnRTaXplVHlwZSwgZG9jPzogc3RyaW5nKSA9PiB3aXRoRG9jKHtcbiAgICBfaW50OiB7IHVuc2lnbmVkOiBmYWxzZSwgc2l6ZSB9XG59LCBkb2MpO1xuXG5jb25zdCBpOCA9IChkb2M/OiBzdHJpbmcpID0+IGludCg4LCBkb2MpO1xuY29uc3QgaTMyID0gKGRvYz86IHN0cmluZykgPT4gaW50KDMyLCBkb2MpO1xuXG5jb25zdCB1OCA9IChkb2M/OiBzdHJpbmcpID0+IHVpbnQoOCwgZG9jKTtcbmNvbnN0IHUxNiA9IChkb2M/OiBzdHJpbmcpID0+IHVpbnQoMTYsIGRvYyk7XG5jb25zdCB1MzIgPSAoZG9jPzogc3RyaW5nKSA9PiB1aW50KDMyLCBkb2MpO1xuY29uc3QgdTY0ID0gKGRvYz86IHN0cmluZykgPT4gdWludCg2NCwgZG9jKTtcbmNvbnN0IHUxMjggPSAoZG9jPzogc3RyaW5nKSA9PiB1aW50KDEyOCwgZG9jKTtcbmNvbnN0IHUyNTYgPSAoZG9jPzogc3RyaW5nKSA9PiB1aW50KDI1NiwgZG9jKTtcblxuY29uc3QgZ3JhbXMgPSB1MTI4O1xuXG50eXBlIEludEVudW1WYWx1ZXMgPSB7XG4gICAgW3N0cmluZ106IG51bWJlclxufTtcblxuZnVuY3Rpb24gdThlbnVtKG5hbWU6IHN0cmluZywgdmFsdWVzOiBJbnRFbnVtVmFsdWVzKSB7XG4gICAgcmV0dXJuIChkb2M/OiBzdHJpbmcpOiBUeXBlRGVmID0+IHtcbiAgICAgICAgY29uc3QgdmFsdWVzRG9jID0gT2JqZWN0LmVudHJpZXModmFsdWVzKS5tYXAoKFtuYW1lLCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIHJldHVybiBgJHsodmFsdWU6IGFueSl9IOKAkyAke25hbWV9YDtcbiAgICAgICAgfSkuam9pbignXFxuJyk7XG4gICAgICAgIGNvbnN0IGVmZmVjdGl2ZURvYyA9IGAke2RvYyA/IGAke2RvY31cXG5gIDogJyd9JHt2YWx1ZXNEb2N9YDtcbiAgICAgICAgcmV0dXJuIHdpdGhEb2Moe1xuICAgICAgICAgICAgX2ludDoge1xuICAgICAgICAgICAgICAgIHVuc2lnbmVkOiB0cnVlLFxuICAgICAgICAgICAgICAgIHNpemU6IDgsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXzoge1xuICAgICAgICAgICAgICAgIGVudW06IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVzXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LCBlZmZlY3RpdmVEb2MpO1xuICAgIH1cbn1cblxuY29uc3Qgb3RoZXJDdXJyZW5jeUNvbGxlY3Rpb24gPSAoZG9jPzogc3RyaW5nKTogVHlwZURlZiA9PiBhcnJheU9mKHtcbiAgICBjdXJyZW5jeTogdTMyKCksXG4gICAgdmFsdWU6IHUyNTYoKSxcbn0sIGRvYyk7XG5cbmNvbnN0IGFjY291bnRTdGF0dXMgPSB1OGVudW0oJ0FjY291bnRTdGF0dXMnLCB7XG4gICAgdW5pbml0OiAwLFxuICAgIGFjdGl2ZTogMSxcbiAgICBmcm96ZW46IDIsXG4gICAgbm9uRXhpc3Q6IDMsXG59KTtcblxuY29uc3QgYWNjb3VudFN0YXR1c0NoYW5nZSA9IHU4ZW51bSgnQWNjb3VudFN0YXR1c0NoYW5nZScsIHtcbiAgICB1bmNoYW5nZWQ6IDAsXG4gICAgZnJvemVuOiAxLFxuICAgIGRlbGV0ZWQ6IDIsXG59KTtcblxuY29uc3Qgc2tpcFJlYXNvbiA9IHU4ZW51bSgnU2tpcFJlYXNvbicsIHtcbiAgICBub1N0YXRlOiAwLFxuICAgIGJhZFN0YXRlOiAxLFxuICAgIG5vR2FzOiAyLFxufSk7XG5cblxuY29uc3QgYWNjb3VudFR5cGUgPSB1OGVudW0oJ0FjY291bnRUeXBlJywge1xuICAgIHVuaW5pdDogMCxcbiAgICBhY3RpdmU6IDEsXG4gICAgZnJvemVuOiAyLFxufSk7XG5cbmNvbnN0IG1lc3NhZ2VUeXBlID0gdThlbnVtKCdNZXNzYWdlVHlwZScsIHtcbiAgICBpbnRlcm5hbDogMCxcbiAgICBleHRJbjogMSxcbiAgICBleHRPdXQ6IDIsXG59KTtcblxuXG5jb25zdCBtZXNzYWdlUHJvY2Vzc2luZ1N0YXR1cyA9IHU4ZW51bSgnTWVzc2FnZVByb2Nlc3NpbmdTdGF0dXMnLCB7XG4gICAgdW5rbm93bjogMCxcbiAgICBxdWV1ZWQ6IDEsXG4gICAgcHJvY2Vzc2luZzogMixcbiAgICBwcmVsaW1pbmFyeTogMyxcbiAgICBwcm9wb3NlZDogNCxcbiAgICBmaW5hbGl6ZWQ6IDUsXG4gICAgcmVmdXNlZDogNixcbiAgICB0cmFuc2l0aW5nOiA3LFxufSk7XG5cbmNvbnN0IHRyYW5zYWN0aW9uVHlwZSA9IHU4ZW51bSgnVHJhbnNhY3Rpb25UeXBlJywge1xuICAgIG9yZGluYXJ5OiAwLFxuICAgIHN0b3JhZ2U6IDEsXG4gICAgdGljazogMixcbiAgICB0b2NrOiAzLFxuICAgIHNwbGl0UHJlcGFyZTogNCxcbiAgICBzcGxpdEluc3RhbGw6IDUsXG4gICAgbWVyZ2VQcmVwYXJlOiA2LFxuICAgIG1lcmdlSW5zdGFsbDogNyxcbn0pO1xuXG5jb25zdCB0cmFuc2FjdGlvblByb2Nlc3NpbmdTdGF0dXMgPSB1OGVudW0oJ1RyYW5zYWN0aW9uUHJvY2Vzc2luZ1N0YXR1cycsIHtcbiAgICB1bmtub3duOiAwLFxuICAgIHByZWxpbWluYXJ5OiAxLFxuICAgIHByb3Bvc2VkOiAyLFxuICAgIGZpbmFsaXplZDogMyxcbiAgICByZWZ1c2VkOiA0LFxufSk7XG5cbmNvbnN0IGNvbXB1dGVUeXBlID0gdThlbnVtKCdDb21wdXRlVHlwZScsIHtcbiAgICBza2lwcGVkOiAwLFxuICAgIHZtOiAxLFxufSk7XG5cbmNvbnN0IGJvdW5jZVR5cGUgPSB1OGVudW0oJ0JvdW5jZVR5cGUnLCB7XG4gICAgbmVnRnVuZHM6IDAsXG4gICAgbm9GdW5kczogMSxcbiAgICBvazogMixcbn0pO1xuXG5jb25zdCBibG9ja1Byb2Nlc3NpbmdTdGF0dXMgPSB1OGVudW0oJ0Jsb2NrUHJvY2Vzc2luZ1N0YXR1cycsIHtcbiAgICB1bmtub3duOiAwLFxuICAgIHByb3Bvc2VkOiAxLFxuICAgIGZpbmFsaXplZDogMixcbiAgICByZWZ1c2VkOiAzLFxufSk7XG5cblxuY29uc3QgaW5Nc2dUeXBlID0gdThlbnVtKCdJbk1zZ1R5cGUnLCB7XG4gICAgZXh0ZXJuYWw6IDAsXG4gICAgaWhyOiAxLFxuICAgIGltbWVkaWF0ZWx5OiAyLFxuICAgIGZpbmFsOiAzLFxuICAgIHRyYW5zaXQ6IDQsXG4gICAgZGlzY2FyZGVkRmluYWw6IDUsXG4gICAgZGlzY2FyZGVkVHJhbnNpdDogNixcbn0pO1xuXG5jb25zdCBvdXRNc2dUeXBlID0gdThlbnVtKCdPdXRNc2dUeXBlJywge1xuICAgIGV4dGVybmFsOiAwLFxuICAgIGltbWVkaWF0ZWx5OiAxLFxuICAgIG91dE1zZ05ldzogMixcbiAgICB0cmFuc2l0OiAzLFxuICAgIGRlcXVldWVJbW1lZGlhdGVseTogNCxcbiAgICBkZXF1ZXVlOiA1LFxuICAgIHRyYW5zaXRSZXF1aXJlZDogNixcbiAgICBub25lOiAtMSxcbn0pO1xuXG5jb25zdCBzcGxpdFR5cGUgPSB1OGVudW0oJ1NwbGl0VHlwZScsIHtcbiAgICBub25lOiAwLFxuICAgIHNwbGl0OiAyLFxuICAgIG1lcmdlOiAzLFxufSk7XG5cbmNvbnN0IEFjY291bnQ6IFR5cGVEZWYgPSB7XG4gICAgX2RvYzogJ1RPTiBBY2NvdW50JyxcbiAgICBfOiB7IGNvbGxlY3Rpb246ICdhY2NvdW50cycgfSxcbiAgICBhY2NfdHlwZTogcmVxdWlyZWQoYWNjb3VudFR5cGUoJ0N1cnJlbnQgc3RhdHVzIG9mIHRoZSBhY2NvdW50JykpLFxuICAgIGxhc3RfcGFpZDogcmVxdWlyZWQodTMyKCdDb250YWlucyBlaXRoZXIgdGhlIHVuaXh0aW1lIG9mIHRoZSBtb3N0IHJlY2VudCBzdG9yYWdlIHBheW1lbnQgY29sbGVjdGVkICh1c3VhbGx5IHRoaXMgaXMgdGhlIHVuaXh0aW1lIG9mIHRoZSBtb3N0IHJlY2VudCB0cmFuc2FjdGlvbiksIG9yIHRoZSB1bml4dGltZSB3aGVuIHRoZSBhY2NvdW50IHdhcyBjcmVhdGVkIChhZ2FpbiwgYnkgYSB0cmFuc2FjdGlvbiknKSksXG4gICAgZHVlX3BheW1lbnQ6IGdyYW1zKCdJZiBwcmVzZW50LCBhY2N1bXVsYXRlcyB0aGUgc3RvcmFnZSBwYXltZW50cyB0aGF0IGNvdWxkIG5vdCBiZSBleGFjdGVkIGZyb20gdGhlIGJhbGFuY2Ugb2YgdGhlIGFjY291bnQsIHJlcHJlc2VudGVkIGJ5IGEgc3RyaWN0bHkgcG9zaXRpdmUgYW1vdW50IG9mIG5hbm9ncmFtczsgaXQgY2FuIGJlIHByZXNlbnQgb25seSBmb3IgdW5pbml0aWFsLSBpemVkIG9yIGZyb3plbiBhY2NvdW50cyB0aGF0IGhhdmUgYSBiYWxhbmNlIG9mIHplcm8gR3JhbXMgKGJ1dCBtYXkgaGF2ZSBub24temVybyBiYWxhbmNlcyBpbiBvdGhlciBjcnlwdG9jdXJyZW5jaWVzKS4gV2hlbiBkdWVfcGF5bWVudCBiZWNvbWVzIGxhcmdlciB0aGFuIHRoZSB2YWx1ZSBvZiBhIGNvbmZpZ3VyYWJsZSBwYXJhbWV0ZXIgb2YgdGhlIGJsb2NrY2hhaW4sIHRoZSBhYy0gY291bnQgaXMgZGVzdHJveWVkIGFsdG9nZXRoZXIsIGFuZCBpdHMgYmFsYW5jZSwgaWYgYW55LCBpcyB0cmFuc2ZlcnJlZCB0byB0aGUgemVybyBhY2NvdW50LicpLFxuICAgIGxhc3RfdHJhbnNfbHQ6IHJlcXVpcmVkKHU2NCgpKSxcbiAgICBiYWxhbmNlOiByZXF1aXJlZChncmFtcygpKSxcbiAgICBiYWxhbmNlX290aGVyOiBvdGhlckN1cnJlbmN5Q29sbGVjdGlvbigpLFxuICAgIHNwbGl0X2RlcHRoOiB1OCgnSXMgcHJlc2VudCBhbmQgbm9uLXplcm8gb25seSBpbiBpbnN0YW5jZXMgb2YgbGFyZ2Ugc21hcnQgY29udHJhY3RzLicpLFxuICAgIHRpY2s6IGJvb2woJ01heSBiZSBwcmVzZW50IG9ubHkgaW4gdGhlIG1hc3RlcmNoYWlu4oCUYW5kIHdpdGhpbiB0aGUgbWFzdGVyY2hhaW4sIG9ubHkgaW4gc29tZSBmdW5kYW1lbnRhbCBzbWFydCBjb250cmFjdHMgcmVxdWlyZWQgZm9yIHRoZSB3aG9sZSBzeXN0ZW0gdG8gZnVuY3Rpb24uJyksXG4gICAgdG9jazogYm9vbCgnTWF5IGJlIHByZXNlbnQgb25seSBpbiB0aGUgbWFzdGVyY2hhaW7igJRhbmQgd2l0aGluIHRoZSBtYXN0ZXJjaGFpbiwgb25seSBpbiBzb21lIGZ1bmRhbWVudGFsIHNtYXJ0IGNvbnRyYWN0cyByZXF1aXJlZCBmb3IgdGhlIHdob2xlIHN5c3RlbSB0byBmdW5jdGlvbi4nKSxcbiAgICBjb2RlOiBzdHJpbmcoJ0lmIHByZXNlbnQsIGNvbnRhaW5zIHNtYXJ0LWNvbnRyYWN0IGNvZGUgZW5jb2RlZCB3aXRoIGluIGJhc2U2NCcpLFxuICAgIGRhdGE6IHN0cmluZygnSWYgcHJlc2VudCwgY29udGFpbnMgc21hcnQtY29udHJhY3QgZGF0YSBlbmNvZGVkIHdpdGggaW4gYmFzZTY0JyksXG4gICAgbGlicmFyeTogc3RyaW5nKCdJZiBwcmVzZW50LCBjb250YWlucyBsaWJyYXJ5IGNvZGUgdXNlZCBpbiBzbWFydC1jb250cmFjdCcpLFxuICAgIHByb29mOiBzdHJpbmcoKSxcbiAgICBib2M6IHN0cmluZygpLFxufTtcblxuY29uc3QgTWVzc2FnZTogVHlwZURlZiA9IHtcbiAgICBfZG9jOiAnVE9OIE1lc3NhZ2UnLFxuICAgIF86IHsgY29sbGVjdGlvbjogJ21lc3NhZ2VzJyB9LFxuICAgIG1zZ190eXBlOiByZXF1aXJlZChtZXNzYWdlVHlwZSgpKSxcbiAgICBzdGF0dXM6IHJlcXVpcmVkKG1lc3NhZ2VQcm9jZXNzaW5nU3RhdHVzKCkpLFxuICAgIHRyYW5zYWN0aW9uX2lkOiByZXF1aXJlZChzdHJpbmcoKSksXG4gICAgYmxvY2tfaWQ6IHJlcXVpcmVkKHN0cmluZygpKSxcbiAgICBib2R5OiBzdHJpbmcoKSxcbiAgICBzcGxpdF9kZXB0aDogdTgoKSxcbiAgICB0aWNrOiBib29sKCksXG4gICAgdG9jazogYm9vbCgpLFxuICAgIGNvZGU6IHN0cmluZygpLFxuICAgIGRhdGE6IHN0cmluZygpLFxuICAgIGxpYnJhcnk6IHN0cmluZygpLFxuICAgIHNyYzogc3RyaW5nKCksXG4gICAgZHN0OiBzdHJpbmcoKSxcbiAgICBjcmVhdGVkX2x0OiB1NjQoKSxcbiAgICBjcmVhdGVkX2F0OiB1MzIoKSxcbiAgICBpaHJfZGlzYWJsZWQ6IGJvb2woKSxcbiAgICBpaHJfZmVlOiBncmFtcygpLFxuICAgIGZ3ZF9mZWU6IGdyYW1zKCksXG4gICAgaW1wb3J0X2ZlZTogZ3JhbXMoKSxcbiAgICBib3VuY2U6IGJvb2woKSxcbiAgICBib3VuY2VkOiBib29sKCksXG4gICAgdmFsdWU6IGdyYW1zKCksXG4gICAgdmFsdWVfb3RoZXI6IG90aGVyQ3VycmVuY3lDb2xsZWN0aW9uKCksXG4gICAgcHJvb2Y6IHN0cmluZygpLFxuICAgIGJvYzogc3RyaW5nKCksXG59O1xuXG5cbmNvbnN0IFRyYW5zYWN0aW9uOiBUeXBlRGVmID0ge1xuICAgIF9kb2M6ICdUT04gVHJhbnNhY3Rpb24nLFxuICAgIF86IHsgY29sbGVjdGlvbjogJ3RyYW5zYWN0aW9ucycgfSxcbiAgICB0cl90eXBlOiByZXF1aXJlZCh0cmFuc2FjdGlvblR5cGUoKSksXG4gICAgc3RhdHVzOiByZXF1aXJlZCh0cmFuc2FjdGlvblByb2Nlc3NpbmdTdGF0dXMoKSksXG4gICAgYmxvY2tfaWQ6IHN0cmluZygpLFxuICAgIGFjY291bnRfYWRkcjogc3RyaW5nKCksXG4gICAgbHQ6IHU2NCgpLFxuICAgIHByZXZfdHJhbnNfaGFzaDogc3RyaW5nKCksXG4gICAgcHJldl90cmFuc19sdDogdTY0KCksXG4gICAgbm93OiB1MzIoKSxcbiAgICBvdXRtc2dfY250OiBpMzIoKSxcbiAgICBvcmlnX3N0YXR1czogYWNjb3VudFN0YXR1cygpLFxuICAgIGVuZF9zdGF0dXM6IGFjY291bnRTdGF0dXMoKSxcbiAgICBpbl9tc2c6IHN0cmluZygpLFxuICAgIGluX21lc3NhZ2U6IGpvaW4oeyBNZXNzYWdlIH0sICdpbl9tc2cnKSxcbiAgICBvdXRfbXNnczogYXJyYXlPZihzdHJpbmcoKSksXG4gICAgb3V0X21lc3NhZ2VzOiBhcnJheU9mKGpvaW4oeyBNZXNzYWdlIH0sICdvdXRfbXNncycpKSxcbiAgICB0b3RhbF9mZWVzOiBncmFtcygpLFxuICAgIHRvdGFsX2ZlZXNfb3RoZXI6IG90aGVyQ3VycmVuY3lDb2xsZWN0aW9uKCksXG4gICAgb2xkX2hhc2g6IHN0cmluZygpLFxuICAgIG5ld19oYXNoOiBzdHJpbmcoKSxcbiAgICBjcmVkaXRfZmlyc3Q6IGJvb2woKSxcbiAgICBzdG9yYWdlOiB7XG4gICAgICAgIHN0b3JhZ2VfZmVlc19jb2xsZWN0ZWQ6IGdyYW1zKCksXG4gICAgICAgIHN0b3JhZ2VfZmVlc19kdWU6IGdyYW1zKCksXG4gICAgICAgIHN0YXR1c19jaGFuZ2U6IGFjY291bnRTdGF0dXNDaGFuZ2UoKSxcbiAgICB9LFxuICAgIGNyZWRpdDoge1xuICAgICAgICBkdWVfZmVlc19jb2xsZWN0ZWQ6IGdyYW1zKCksXG4gICAgICAgIGNyZWRpdDogZ3JhbXMoKSxcbiAgICAgICAgY3JlZGl0X290aGVyOiBvdGhlckN1cnJlbmN5Q29sbGVjdGlvbigpLFxuICAgIH0sXG4gICAgY29tcHV0ZToge1xuICAgICAgICBjb21wdXRlX3R5cGU6IHJlcXVpcmVkKGNvbXB1dGVUeXBlKCkpLFxuICAgICAgICBza2lwcGVkX3JlYXNvbjogc2tpcFJlYXNvbigpLFxuICAgICAgICBzdWNjZXNzOiBib29sKCksXG4gICAgICAgIG1zZ19zdGF0ZV91c2VkOiBib29sKCksXG4gICAgICAgIGFjY291bnRfYWN0aXZhdGVkOiBib29sKCksXG4gICAgICAgIGdhc19mZWVzOiBncmFtcygpLFxuICAgICAgICBnYXNfdXNlZDogdTY0KCksXG4gICAgICAgIGdhc19saW1pdDogdTY0KCksXG4gICAgICAgIGdhc19jcmVkaXQ6IGkzMigpLFxuICAgICAgICBtb2RlOiBpOCgpLFxuICAgICAgICBleGl0X2NvZGU6IGkzMigpLFxuICAgICAgICBleGl0X2FyZzogaTMyKCksXG4gICAgICAgIHZtX3N0ZXBzOiB1MzIoKSxcbiAgICAgICAgdm1faW5pdF9zdGF0ZV9oYXNoOiBzdHJpbmcoKSxcbiAgICAgICAgdm1fZmluYWxfc3RhdGVfaGFzaDogc3RyaW5nKCksXG4gICAgfSxcbiAgICBhY3Rpb246IHtcbiAgICAgICAgc3VjY2VzczogYm9vbCgpLFxuICAgICAgICB2YWxpZDogYm9vbCgpLFxuICAgICAgICBub19mdW5kczogYm9vbCgpLFxuICAgICAgICBzdGF0dXNfY2hhbmdlOiBhY2NvdW50U3RhdHVzQ2hhbmdlKCksXG4gICAgICAgIHRvdGFsX2Z3ZF9mZWVzOiBncmFtcygpLFxuICAgICAgICB0b3RhbF9hY3Rpb25fZmVlczogZ3JhbXMoKSxcbiAgICAgICAgcmVzdWx0X2NvZGU6IGkzMigpLFxuICAgICAgICByZXN1bHRfYXJnOiBpMzIoKSxcbiAgICAgICAgdG90X2FjdGlvbnM6IGkzMigpLFxuICAgICAgICBzcGVjX2FjdGlvbnM6IGkzMigpLFxuICAgICAgICBza2lwcGVkX2FjdGlvbnM6IGkzMigpLFxuICAgICAgICBtc2dzX2NyZWF0ZWQ6IGkzMigpLFxuICAgICAgICBhY3Rpb25fbGlzdF9oYXNoOiBzdHJpbmcoKSxcbiAgICAgICAgdG90YWxfbXNnX3NpemVfY2VsbHM6IHUzMigpLFxuICAgICAgICB0b3RhbF9tc2dfc2l6ZV9iaXRzOiB1MzIoKSxcbiAgICB9LFxuICAgIGJvdW5jZToge1xuICAgICAgICBib3VuY2VfdHlwZTogcmVxdWlyZWQoYm91bmNlVHlwZSgpKSxcbiAgICAgICAgbXNnX3NpemVfY2VsbHM6IHUzMigpLFxuICAgICAgICBtc2dfc2l6ZV9iaXRzOiB1MzIoKSxcbiAgICAgICAgcmVxX2Z3ZF9mZWVzOiBncmFtcygpLFxuICAgICAgICBtc2dfZmVlczogZ3JhbXMoKSxcbiAgICAgICAgZndkX2ZlZXM6IGdyYW1zKCksXG4gICAgfSxcbiAgICBhYm9ydGVkOiBib29sKCksXG4gICAgZGVzdHJveWVkOiBib29sKCksXG4gICAgdHQ6IHN0cmluZygpLFxuICAgIHNwbGl0X2luZm86IHtcbiAgICAgICAgY3VyX3NoYXJkX3BmeF9sZW46IHU4KCksXG4gICAgICAgIGFjY19zcGxpdF9kZXB0aDogdTgoKSxcbiAgICAgICAgdGhpc19hZGRyOiBzdHJpbmcoKSxcbiAgICAgICAgc2libGluZ19hZGRyOiBzdHJpbmcoKSxcbiAgICB9LFxuICAgIHByZXBhcmVfdHJhbnNhY3Rpb246IHN0cmluZygpLFxuICAgIGluc3RhbGxlZDogYm9vbCgpLFxuICAgIHByb29mOiBzdHJpbmcoKSxcbiAgICBib2M6IHN0cmluZygpLFxufTtcblxuLy8gQkxPQ0tcblxuY29uc3QgRXh0QmxrUmVmOiBUeXBlRGVmID0ge1xuICAgIGVuZF9sdDogdTY0KCksXG4gICAgc2VxX25vOiB1MzIoKSxcbiAgICByb290X2hhc2g6IHN0cmluZygpLFxuICAgIGZpbGVfaGFzaDogc3RyaW5nKClcbn07XG5cbmNvbnN0IGV4dEJsa1JlZiA9ICgpID0+IHJlZih7IEV4dEJsa1JlZiB9KTtcblxuY29uc3QgTXNnRW52ZWxvcGU6IFR5cGVEZWYgPSB7XG4gICAgbXNnOiBzdHJpbmcoKSxcbiAgICBuZXh0X2FkZHI6IHN0cmluZygpLFxuICAgIGN1cl9hZGRyOiBzdHJpbmcoKSxcbiAgICBmd2RfZmVlX3JlbWFpbmluZzogZ3JhbXMoKSxcbn07XG5cbmNvbnN0IG1zZ0VudmVsb3BlID0gKCkgPT4gcmVmKHsgTXNnRW52ZWxvcGUgfSk7XG5cbmNvbnN0IEluTXNnOiBUeXBlRGVmID0ge1xuICAgIG1zZ190eXBlOiByZXF1aXJlZChpbk1zZ1R5cGUoKSksXG4gICAgbXNnOiBzdHJpbmcoKSxcbiAgICB0cmFuc2FjdGlvbjogc3RyaW5nKCksXG4gICAgaWhyX2ZlZTogZ3JhbXMoKSxcbiAgICBwcm9vZl9jcmVhdGVkOiBzdHJpbmcoKSxcbiAgICBpbl9tc2c6IG1zZ0VudmVsb3BlKCksXG4gICAgZndkX2ZlZTogZ3JhbXMoKSxcbiAgICBvdXRfbXNnOiBtc2dFbnZlbG9wZSgpLFxuICAgIHRyYW5zaXRfZmVlOiBncmFtcygpLFxuICAgIHRyYW5zYWN0aW9uX2lkOiB1NjQoKSxcbiAgICBwcm9vZl9kZWxpdmVyZWQ6IHN0cmluZygpXG59O1xuXG5jb25zdCBpbk1zZyA9ICgpID0+IHJlZih7IEluTXNnIH0pO1xuXG5jb25zdCBPdXRNc2c6IFR5cGVEZWYgPSB7XG4gICAgbXNnX3R5cGU6IHJlcXVpcmVkKG91dE1zZ1R5cGUoKSksXG4gICAgbXNnOiBzdHJpbmcoKSxcbiAgICB0cmFuc2FjdGlvbjogc3RyaW5nKCksXG4gICAgb3V0X21zZzogbXNnRW52ZWxvcGUoKSxcbiAgICByZWltcG9ydDogaW5Nc2coKSxcbiAgICBpbXBvcnRlZDogaW5Nc2coKSxcbiAgICBpbXBvcnRfYmxvY2tfbHQ6IHU2NCgpLFxufTtcblxuY29uc3Qgb3V0TXNnID0gKCkgPT4gcmVmKHsgT3V0TXNnIH0pO1xuXG5jb25zdCBzaGFyZERlc2NyID0gKGRvYz86IHN0cmluZyk6IFR5cGVEZWYgPT4gd2l0aERvYyh7XG4gICAgc2VxX25vOiB1MzIoKSxcbiAgICByZWdfbWNfc2Vxbm86IHUzMigpLFxuICAgIHN0YXJ0X2x0OiB1NjQoKSxcbiAgICBlbmRfbHQ6IHU2NCgpLFxuICAgIHJvb3RfaGFzaDogc3RyaW5nKCksXG4gICAgZmlsZV9oYXNoOiBzdHJpbmcoKSxcbiAgICBiZWZvcmVfc3BsaXQ6IGJvb2woKSxcbiAgICBiZWZvcmVfbWVyZ2U6IGJvb2woKSxcbiAgICB3YW50X3NwbGl0OiBib29sKCksXG4gICAgd2FudF9tZXJnZTogYm9vbCgpLFxuICAgIG54X2NjX3VwZGF0ZWQ6IGJvb2woKSxcbiAgICBmbGFnczogdTgoKSxcbiAgICBuZXh0X2NhdGNoYWluX3NlcW5vOiB1MzIoKSxcbiAgICBuZXh0X3ZhbGlkYXRvcl9zaGFyZDogc3RyaW5nKCksXG4gICAgbWluX3JlZl9tY19zZXFubzogdTMyKCksXG4gICAgZ2VuX3V0aW1lOiB1MzIoKSxcbiAgICBzcGxpdF90eXBlOiBzcGxpdFR5cGUoKSxcbiAgICBzcGxpdDogdTMyKCksXG4gICAgZmVlc19jb2xsZWN0ZWQ6IGdyYW1zKCksXG4gICAgZmVlc19jb2xsZWN0ZWRfb3RoZXI6IG90aGVyQ3VycmVuY3lDb2xsZWN0aW9uKCksXG4gICAgZnVuZHNfY3JlYXRlZDogZ3JhbXMoKSxcbiAgICBmdW5kc19jcmVhdGVkX290aGVyOiBvdGhlckN1cnJlbmN5Q29sbGVjdGlvbigpLFxufSwgZG9jKTtcblxuY29uc3QgQmxvY2s6IFR5cGVEZWYgPSB7XG4gICAgX2RvYzogJ1RoaXMgaXMgQmxvY2snLFxuICAgIF86IHsgY29sbGVjdGlvbjogJ2Jsb2NrcycgfSxcbiAgICBzdGF0dXM6IGJsb2NrUHJvY2Vzc2luZ1N0YXR1cygpLFxuICAgIGdsb2JhbF9pZDogdTMyKCksXG4gICAgd2FudF9zcGxpdDogYm9vbCgpLFxuICAgIHNlcV9ubzogdTMyKCksXG4gICAgYWZ0ZXJfbWVyZ2U6IGJvb2woKSxcbiAgICBnZW5fdXRpbWU6IGkzMigpLFxuICAgIGdlbl9jYXRjaGFpbl9zZXFubzogdTMyKCksXG4gICAgZmxhZ3M6IHUxNigpLFxuICAgIG1hc3Rlcl9yZWY6IGV4dEJsa1JlZigpLFxuICAgIHByZXZfcmVmOiBleHRCbGtSZWYoKSxcbiAgICBwcmV2X2FsdF9yZWY6IGV4dEJsa1JlZigpLFxuICAgIHByZXZfdmVydF9yZWY6IGV4dEJsa1JlZigpLFxuICAgIHByZXZfdmVydF9hbHRfcmVmOiBleHRCbGtSZWYoKSxcbiAgICB2ZXJzaW9uOiB1MzIoKSxcbiAgICBnZW5fdmFsaWRhdG9yX2xpc3RfaGFzaF9zaG9ydDogdTMyKCksXG4gICAgYmVmb3JlX3NwbGl0OiBib29sKCksXG4gICAgYWZ0ZXJfc3BsaXQ6IGJvb2woKSxcbiAgICB3YW50X21lcmdlOiBib29sKCksXG4gICAgdmVydF9zZXFfbm86IHUzMigpLFxuICAgIHN0YXJ0X2x0OiB1NjQoKSxcbiAgICBlbmRfbHQ6IHU2NCgpLFxuICAgIHdvcmtjaGFpbl9pZDogaTMyKCksXG4gICAgc2hhcmQ6IHN0cmluZygpLFxuICAgIG1pbl9yZWZfbWNfc2Vxbm86IHUzMigpLFxuICAgIHZhbHVlX2Zsb3c6IHtcbiAgICAgICAgdG9fbmV4dF9ibGs6IGdyYW1zKCksXG4gICAgICAgIHRvX25leHRfYmxrX290aGVyOiBvdGhlckN1cnJlbmN5Q29sbGVjdGlvbigpLFxuICAgICAgICBleHBvcnRlZDogZ3JhbXMoKSxcbiAgICAgICAgZXhwb3J0ZWRfb3RoZXI6IG90aGVyQ3VycmVuY3lDb2xsZWN0aW9uKCksXG4gICAgICAgIGZlZXNfY29sbGVjdGVkOiBncmFtcygpLFxuICAgICAgICBmZWVzX2NvbGxlY3RlZF9vdGhlcjogb3RoZXJDdXJyZW5jeUNvbGxlY3Rpb24oKSxcbiAgICAgICAgY3JlYXRlZDogZ3JhbXMoKSxcbiAgICAgICAgY3JlYXRlZF9vdGhlcjogb3RoZXJDdXJyZW5jeUNvbGxlY3Rpb24oKSxcbiAgICAgICAgaW1wb3J0ZWQ6IGdyYW1zKCksXG4gICAgICAgIGltcG9ydGVkX290aGVyOiBvdGhlckN1cnJlbmN5Q29sbGVjdGlvbigpLFxuICAgICAgICBmcm9tX3ByZXZfYmxrOiBncmFtcygpLFxuICAgICAgICBmcm9tX3ByZXZfYmxrX290aGVyOiBvdGhlckN1cnJlbmN5Q29sbGVjdGlvbigpLFxuICAgICAgICBtaW50ZWQ6IGdyYW1zKCksXG4gICAgICAgIG1pbnRlZF9vdGhlcjogb3RoZXJDdXJyZW5jeUNvbGxlY3Rpb24oKSxcbiAgICAgICAgZmVlc19pbXBvcnRlZDogZ3JhbXMoKSxcbiAgICAgICAgZmVlc19pbXBvcnRlZF9vdGhlcjogb3RoZXJDdXJyZW5jeUNvbGxlY3Rpb24oKSxcbiAgICB9LFxuICAgIGluX21zZ19kZXNjcjogYXJyYXlPZihpbk1zZygpKSxcbiAgICByYW5kX3NlZWQ6IHN0cmluZygpLFxuICAgIG91dF9tc2dfZGVzY3I6IGFycmF5T2Yob3V0TXNnKCkpLFxuICAgIGFjY291bnRfYmxvY2tzOiBhcnJheU9mKHtcbiAgICAgICAgYWNjb3VudF9hZGRyOiBzdHJpbmcoKSxcbiAgICAgICAgdHJhbnNhY3Rpb25zOiBhcnJheU9mKHN0cmluZygpKSxcbiAgICAgICAgc3RhdGVfdXBkYXRlOiB7XG4gICAgICAgICAgICBvbGRfaGFzaDogc3RyaW5nKCksXG4gICAgICAgICAgICBuZXdfaGFzaDogc3RyaW5nKClcbiAgICAgICAgfSxcbiAgICAgICAgdHJfY291bnQ6IGkzMigpXG4gICAgfSksXG4gICAgc3RhdGVfdXBkYXRlOiB7XG4gICAgICAgIG5ldzogc3RyaW5nKCksXG4gICAgICAgIG5ld19oYXNoOiBzdHJpbmcoKSxcbiAgICAgICAgbmV3X2RlcHRoOiB1MTYoKSxcbiAgICAgICAgb2xkOiBzdHJpbmcoKSxcbiAgICAgICAgb2xkX2hhc2g6IHN0cmluZygpLFxuICAgICAgICBvbGRfZGVwdGg6IHUxNigpXG4gICAgfSxcbiAgICBzaGFyZF9oYXNoZXM6IGFycmF5T2Yoe1xuICAgICAgICB3b3JrY2hhaW5faWQ6IGkzMigpLFxuICAgICAgICBzaGFyZDogc3RyaW5nKCksXG4gICAgICAgIGRlc2NyOiBzaGFyZERlc2NyKCksXG4gICAgfSksXG59O1xuXG5cbi8vUm9vdCBzY2hlbWUgZGVjbGFyYXRpb25cblxuY29uc3Qgc2NoZW1hOiBUeXBlRGVmID0ge1xuICAgIF9jbGFzczoge1xuICAgICAgICB0eXBlczoge1xuICAgICAgICAgICAgRXh0QmxrUmVmLFxuICAgICAgICAgICAgTXNnRW52ZWxvcGUsXG4gICAgICAgICAgICBJbk1zZyxcbiAgICAgICAgICAgIE91dE1zZyxcbiAgICAgICAgICAgIE1lc3NhZ2UsXG4gICAgICAgICAgICBCbG9jayxcbiAgICAgICAgICAgIEFjY291bnQsXG4gICAgICAgICAgICBUcmFuc2FjdGlvbixcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHNjaGVtYTtcbiJdfQ==