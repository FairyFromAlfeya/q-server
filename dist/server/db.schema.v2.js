"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _schema = require("ton-labs-dev-ops/dist/src/schema");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var string = _schema.Def.string,
    bool = _schema.Def.bool,
    ref = _schema.Def.ref,
    arrayOf = _schema.Def.arrayOf;

var withDoc = function withDoc(def, doc) {
  return _objectSpread({}, def, {}, doc ? {
    _doc: doc
  } : {});
};

var required = function required(def) {
  return def;
};

var uint = function uint(size, doc) {
  return withDoc({
    _int: {
      unsigned: true,
      size: size
    }
  }, doc);
};

var _int = function _int(size, doc) {
  return withDoc({
    _int: {
      unsigned: false,
      size: size
    }
  }, doc);
};

var i8 = function i8(doc) {
  return _int(8, doc);
};

var i32 = function i32(doc) {
  return _int(32, doc);
};

var u8 = function u8(doc) {
  return uint(8, doc);
};

var u16 = function u16(doc) {
  return uint(16, doc);
};

var u32 = function u32(doc) {
  return uint(32, doc);
};

var u64 = function u64(doc) {
  return uint(64, doc);
};

var u128 = function u128(doc) {
  return uint(128, doc);
};

var u256 = function u256(doc) {
  return uint(256, doc);
};

var grams = u128;

function u8enum(name, values) {
  return function (doc) {
    var valuesDoc = Object.entries(values).map(function (_ref) {
      var _ref2 = (0, _slicedToArray2["default"])(_ref, 2),
          name = _ref2[0],
          value = _ref2[1];

      return "".concat(value, " \u2013 ").concat(name);
    }).join('\n');
    var effectiveDoc = "".concat(doc ? "".concat(doc, "\n") : '').concat(valuesDoc);
    return withDoc({
      _int: {
        unsigned: true,
        size: 8
      },
      _: {
        "enum": {
          name: name,
          values: values
        }
      }
    }, effectiveDoc);
  };
}

var otherCurrencyCollection = function otherCurrencyCollection(doc) {
  return arrayOf({
    currency: u32(),
    value: u256()
  }, doc);
};

var accountStatus = u8enum('AccountStatus', {
  uninit: 0,
  active: 1,
  frozen: 2,
  nonExist: 3
});
var accountStatusChange = u8enum('AccountStatusChange', {
  unchanged: 0,
  frozen: 1,
  deleted: 2
});
var skipReason = u8enum('SkipReason', {
  noState: 0,
  badState: 1,
  noGas: 2
});
var accountType = u8enum('AccountType', {
  uninit: 0,
  active: 1,
  frozen: 2
});
var messageType = u8enum('MessageType', {
  internal: 0,
  extIn: 1,
  extOut: 2
});
var messageProcessingStatus = u8enum('MessageProcessingStatus', {
  unknown: 0,
  queued: 1,
  processing: 2,
  preliminary: 3,
  proposed: 4,
  finalized: 5,
  refused: 6,
  transiting: 7
});
var transactionType = u8enum('TransactionType', {
  ordinary: 0,
  storage: 1,
  tick: 2,
  tock: 3,
  splitPrepare: 4,
  splitInstall: 5,
  mergePrepare: 6,
  mergeInstall: 7
});
var transactionProcessingStatus = u8enum('TransactionProcessingStatus', {
  unknown: 0,
  preliminary: 1,
  proposed: 2,
  finalized: 3,
  refused: 4
});
var computeType = u8enum('ComputeType', {
  skipped: 0,
  vm: 1
});
var bounceType = u8enum('BounceType', {
  negFunds: 0,
  noFunds: 1,
  ok: 2
});
var blockProcessingStatus = u8enum('BlockProcessingStatus', {
  unknown: 0,
  proposed: 1,
  finalized: 2,
  refused: 3
});
var inMsgType = u8enum('InMsgType', {
  external: 0,
  ihr: 1,
  immediately: 2,
  "final": 3,
  transit: 4,
  discardedFinal: 5,
  discardedTransit: 6
});
var outMsgType = u8enum('OutMsgType', {
  external: 0,
  immediately: 1,
  outMsgNew: 2,
  transit: 3,
  dequeueImmediately: 4,
  dequeue: 5,
  transitRequired: 6,
  none: -1
});
var splitType = u8enum('SplitType', {
  none: 0,
  split: 2,
  merge: 3
});
var Account = {
  _doc: 'TON Account',
  _: {
    collection: 'accounts'
  },
  acc_type: accountType(),
  last_paid: u32(),
  due_payment: grams(),
  last_trans_lt: u64(),
  balance: grams(),
  balance_other: otherCurrencyCollection(),
  split_depth: u8(),
  tick: bool(),
  tock: bool(),
  code: string(),
  data: string(),
  library: string(),
  proof: string(),
  boc: string()
};
var Message = {
  _doc: 'TON Message',
  _: {
    collection: 'messages'
  },
  msg_type: required(messageType()),
  status: required(messageProcessingStatus()),
  transaction_id: required(string()),
  block_id: required(string()),
  body: string(),
  split_depth: u8(),
  tick: bool(),
  tock: bool(),
  code: string(),
  data: string(),
  library: string(),
  src: string(),
  dst: string(),
  created_lt: u64(),
  created_at: u32(),
  ihr_disabled: bool(),
  ihr_fee: grams(),
  fwd_fee: grams(),
  import_fee: grams(),
  bounce: bool(),
  bounced: bool(),
  value: grams(),
  value_other: otherCurrencyCollection(),
  proof: string(),
  boc: string()
};
var Transaction = {
  _doc: 'TON Transaction',
  _: {
    collection: 'transactions'
  },
  tr_type: required(transactionType()),
  status: required(transactionProcessingStatus()),
  block_id: string(),
  account_addr: string(),
  lt: u64(),
  prev_trans_hash: string(),
  prev_trans_lt: u64(),
  now: u32(),
  outmsg_cnt: i32(),
  orig_status: accountStatus(),
  end_status: accountStatus(),
  in_msg: string(),
  out_msgs: arrayOf(string()),
  total_fees: grams(),
  total_fees_other: otherCurrencyCollection(),
  old_hash: string(),
  new_hash: string(),
  credit_first: bool(),
  storage: {
    storage_fees_collected: grams(),
    storage_fees_due: grams(),
    status_change: accountStatusChange()
  },
  credit: {
    due_fees_collected: grams(),
    credit: grams(),
    credit_other: otherCurrencyCollection()
  },
  compute: {
    compute_type: required(computeType()),
    skipped_reason: skipReason(),
    success: bool(),
    msg_state_used: bool(),
    account_activated: bool(),
    gas_fees: grams(),
    gas_used: u64(),
    gas_limit: u64(),
    gas_credit: i32(),
    mode: i8(),
    exit_code: i32(),
    exit_arg: i32(),
    vm_steps: u32(),
    vm_init_state_hash: string(),
    vm_final_state_hash: string()
  },
  action: {
    success: bool(),
    valid: bool(),
    no_funds: bool(),
    status_change: accountStatusChange(),
    total_fwd_fees: grams(),
    total_action_fees: grams(),
    result_code: i32(),
    result_arg: i32(),
    tot_actions: i32(),
    spec_actions: i32(),
    skipped_actions: i32(),
    msgs_created: i32(),
    action_list_hash: string(),
    total_msg_size_cells: u32(),
    total_msg_size_bits: u32()
  },
  bounce: {
    bounce_type: required(bounceType()),
    msg_size_cells: u32(),
    msg_size_bits: u32(),
    req_fwd_fees: grams(),
    msg_fees: grams(),
    fwd_fees: grams()
  },
  aborted: bool(),
  destroyed: bool(),
  tt: string(),
  split_info: {
    cur_shard_pfx_len: u8(),
    acc_split_depth: u8(),
    this_addr: string(),
    sibling_addr: string()
  },
  prepare_transaction: string(),
  installed: bool(),
  proof: string(),
  boc: string()
}; // BLOCK

var ExtBlkRef = {
  end_lt: u64(),
  seq_no: u32(),
  root_hash: string(),
  file_hash: string()
};

var extBlkRef = function extBlkRef() {
  return ref({
    ExtBlkRef: ExtBlkRef
  });
};

var MsgEnvelope = {
  msg: string(),
  next_addr: string(),
  cur_addr: string(),
  fwd_fee_remaining: grams()
};

var msgEnvelope = function msgEnvelope() {
  return ref({
    MsgEnvelope: MsgEnvelope
  });
};

var InMsg = {
  msg_type: required(inMsgType()),
  msg: string(),
  transaction: string(),
  ihr_fee: grams(),
  proof_created: string(),
  in_msg: msgEnvelope(),
  fwd_fee: grams(),
  out_msg: msgEnvelope(),
  transit_fee: grams(),
  transaction_id: u64(),
  proof_delivered: string()
};

var inMsg = function inMsg() {
  return ref({
    InMsg: InMsg
  });
};

var OutMsg = {
  msg_type: required(outMsgType()),
  msg: string(),
  transaction: string(),
  out_msg: msgEnvelope(),
  reimport: inMsg(),
  imported: inMsg(),
  import_block_lt: u64()
};

var outMsg = function outMsg() {
  return ref({
    OutMsg: OutMsg
  });
};

var shardDescr = function shardDescr(doc) {
  return withDoc({
    seq_no: u32(),
    reg_mc_seqno: u32(),
    start_lt: u64(),
    end_lt: u64(),
    root_hash: string(),
    file_hash: string(),
    before_split: bool(),
    before_merge: bool(),
    want_split: bool(),
    want_merge: bool(),
    nx_cc_updated: bool(),
    flags: u8(),
    next_catchain_seqno: u32(),
    next_validator_shard: u64(),
    min_ref_mc_seqno: u32(),
    gen_utime: u32(),
    split_type: splitType(),
    split: u32(),
    fees_collected: grams(),
    fees_collected_other: otherCurrencyCollection(),
    funds_created: grams(),
    funds_created_other: otherCurrencyCollection()
  }, doc);
};

var Block = {
  _doc: 'This is Block',
  _: {
    collection: 'blocks'
  },
  status: blockProcessingStatus(),
  global_id: u32(),
  want_split: bool(),
  seq_no: u32(),
  after_merge: bool(),
  gen_utime: i32(),
  gen_catchain_seqno: u32(),
  flags: u16(),
  master_ref: extBlkRef(),
  prev_ref: extBlkRef(),
  prev_alt_ref: extBlkRef(),
  prev_vert_ref: extBlkRef(),
  prev_vert_alt_ref: extBlkRef(),
  version: u32(),
  gen_validator_list_hash_short: u32(),
  before_split: bool(),
  after_split: bool(),
  want_merge: bool(),
  vert_seq_no: u32(),
  start_lt: u64(),
  end_lt: u64(),
  shard: {
    shard_pfx_bits: u8(),
    workchain_id: i32(),
    shard_prefix: u64()
  },
  min_ref_mc_seqno: u32(),
  value_flow: {
    to_next_blk: grams(),
    to_next_blk_other: otherCurrencyCollection(),
    exported: grams(),
    exported_other: otherCurrencyCollection(),
    fees_collected: grams(),
    fees_collected_other: otherCurrencyCollection(),
    created: grams(),
    created_other: otherCurrencyCollection(),
    imported: grams(),
    imported_other: otherCurrencyCollection(),
    from_prev_blk: grams(),
    from_prev_blk_other: otherCurrencyCollection(),
    minted: grams(),
    minted_other: otherCurrencyCollection(),
    fees_imported: grams(),
    fees_imported_other: otherCurrencyCollection()
  },
  in_msg_descr: arrayOf(inMsg()),
  rand_seed: string(),
  out_msg_descr: arrayOf(outMsg()),
  account_blocks: arrayOf({
    account_addr: string(),
    transactions: arrayOf(string()),
    state_update: {
      old_hash: string(),
      new_hash: string()
    },
    tr_count: i32()
  }),
  state_update: {
    "new": string(),
    new_hash: string(),
    new_depth: u16(),
    old: string(),
    old_hash: string(),
    old_depth: u16()
  },
  shard_hashes: arrayOf({
    hash: u32(),
    descr: shardDescr()
  })
}; //Root scheme declaration

var schema = {
  _class: {
    types: {
      ExtBlkRef: ExtBlkRef,
      MsgEnvelope: MsgEnvelope,
      InMsg: InMsg,
      OutMsg: OutMsg,
      Message: Message,
      Block: Block,
      Account: Account,
      Transaction: Transaction
    }
  }
};
var _default = schema;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NlcnZlci9kYi5zY2hlbWEudjIuanMiXSwibmFtZXMiOlsic3RyaW5nIiwiRGVmIiwiYm9vbCIsInJlZiIsImFycmF5T2YiLCJ3aXRoRG9jIiwiZGVmIiwiZG9jIiwiX2RvYyIsInJlcXVpcmVkIiwidWludCIsInNpemUiLCJfaW50IiwidW5zaWduZWQiLCJpbnQiLCJpOCIsImkzMiIsInU4IiwidTE2IiwidTMyIiwidTY0IiwidTEyOCIsInUyNTYiLCJncmFtcyIsInU4ZW51bSIsIm5hbWUiLCJ2YWx1ZXMiLCJ2YWx1ZXNEb2MiLCJPYmplY3QiLCJlbnRyaWVzIiwibWFwIiwidmFsdWUiLCJqb2luIiwiZWZmZWN0aXZlRG9jIiwiXyIsIm90aGVyQ3VycmVuY3lDb2xsZWN0aW9uIiwiY3VycmVuY3kiLCJhY2NvdW50U3RhdHVzIiwidW5pbml0IiwiYWN0aXZlIiwiZnJvemVuIiwibm9uRXhpc3QiLCJhY2NvdW50U3RhdHVzQ2hhbmdlIiwidW5jaGFuZ2VkIiwiZGVsZXRlZCIsInNraXBSZWFzb24iLCJub1N0YXRlIiwiYmFkU3RhdGUiLCJub0dhcyIsImFjY291bnRUeXBlIiwibWVzc2FnZVR5cGUiLCJpbnRlcm5hbCIsImV4dEluIiwiZXh0T3V0IiwibWVzc2FnZVByb2Nlc3NpbmdTdGF0dXMiLCJ1bmtub3duIiwicXVldWVkIiwicHJvY2Vzc2luZyIsInByZWxpbWluYXJ5IiwicHJvcG9zZWQiLCJmaW5hbGl6ZWQiLCJyZWZ1c2VkIiwidHJhbnNpdGluZyIsInRyYW5zYWN0aW9uVHlwZSIsIm9yZGluYXJ5Iiwic3RvcmFnZSIsInRpY2siLCJ0b2NrIiwic3BsaXRQcmVwYXJlIiwic3BsaXRJbnN0YWxsIiwibWVyZ2VQcmVwYXJlIiwibWVyZ2VJbnN0YWxsIiwidHJhbnNhY3Rpb25Qcm9jZXNzaW5nU3RhdHVzIiwiY29tcHV0ZVR5cGUiLCJza2lwcGVkIiwidm0iLCJib3VuY2VUeXBlIiwibmVnRnVuZHMiLCJub0Z1bmRzIiwib2siLCJibG9ja1Byb2Nlc3NpbmdTdGF0dXMiLCJpbk1zZ1R5cGUiLCJleHRlcm5hbCIsImlociIsImltbWVkaWF0ZWx5IiwidHJhbnNpdCIsImRpc2NhcmRlZEZpbmFsIiwiZGlzY2FyZGVkVHJhbnNpdCIsIm91dE1zZ1R5cGUiLCJvdXRNc2dOZXciLCJkZXF1ZXVlSW1tZWRpYXRlbHkiLCJkZXF1ZXVlIiwidHJhbnNpdFJlcXVpcmVkIiwibm9uZSIsInNwbGl0VHlwZSIsInNwbGl0IiwibWVyZ2UiLCJBY2NvdW50IiwiY29sbGVjdGlvbiIsImFjY190eXBlIiwibGFzdF9wYWlkIiwiZHVlX3BheW1lbnQiLCJsYXN0X3RyYW5zX2x0IiwiYmFsYW5jZSIsImJhbGFuY2Vfb3RoZXIiLCJzcGxpdF9kZXB0aCIsImNvZGUiLCJkYXRhIiwibGlicmFyeSIsInByb29mIiwiYm9jIiwiTWVzc2FnZSIsIm1zZ190eXBlIiwic3RhdHVzIiwidHJhbnNhY3Rpb25faWQiLCJibG9ja19pZCIsImJvZHkiLCJzcmMiLCJkc3QiLCJjcmVhdGVkX2x0IiwiY3JlYXRlZF9hdCIsImlocl9kaXNhYmxlZCIsImlocl9mZWUiLCJmd2RfZmVlIiwiaW1wb3J0X2ZlZSIsImJvdW5jZSIsImJvdW5jZWQiLCJ2YWx1ZV9vdGhlciIsIlRyYW5zYWN0aW9uIiwidHJfdHlwZSIsImFjY291bnRfYWRkciIsImx0IiwicHJldl90cmFuc19oYXNoIiwicHJldl90cmFuc19sdCIsIm5vdyIsIm91dG1zZ19jbnQiLCJvcmlnX3N0YXR1cyIsImVuZF9zdGF0dXMiLCJpbl9tc2ciLCJvdXRfbXNncyIsInRvdGFsX2ZlZXMiLCJ0b3RhbF9mZWVzX290aGVyIiwib2xkX2hhc2giLCJuZXdfaGFzaCIsImNyZWRpdF9maXJzdCIsInN0b3JhZ2VfZmVlc19jb2xsZWN0ZWQiLCJzdG9yYWdlX2ZlZXNfZHVlIiwic3RhdHVzX2NoYW5nZSIsImNyZWRpdCIsImR1ZV9mZWVzX2NvbGxlY3RlZCIsImNyZWRpdF9vdGhlciIsImNvbXB1dGUiLCJjb21wdXRlX3R5cGUiLCJza2lwcGVkX3JlYXNvbiIsInN1Y2Nlc3MiLCJtc2dfc3RhdGVfdXNlZCIsImFjY291bnRfYWN0aXZhdGVkIiwiZ2FzX2ZlZXMiLCJnYXNfdXNlZCIsImdhc19saW1pdCIsImdhc19jcmVkaXQiLCJtb2RlIiwiZXhpdF9jb2RlIiwiZXhpdF9hcmciLCJ2bV9zdGVwcyIsInZtX2luaXRfc3RhdGVfaGFzaCIsInZtX2ZpbmFsX3N0YXRlX2hhc2giLCJhY3Rpb24iLCJ2YWxpZCIsIm5vX2Z1bmRzIiwidG90YWxfZndkX2ZlZXMiLCJ0b3RhbF9hY3Rpb25fZmVlcyIsInJlc3VsdF9jb2RlIiwicmVzdWx0X2FyZyIsInRvdF9hY3Rpb25zIiwic3BlY19hY3Rpb25zIiwic2tpcHBlZF9hY3Rpb25zIiwibXNnc19jcmVhdGVkIiwiYWN0aW9uX2xpc3RfaGFzaCIsInRvdGFsX21zZ19zaXplX2NlbGxzIiwidG90YWxfbXNnX3NpemVfYml0cyIsImJvdW5jZV90eXBlIiwibXNnX3NpemVfY2VsbHMiLCJtc2dfc2l6ZV9iaXRzIiwicmVxX2Z3ZF9mZWVzIiwibXNnX2ZlZXMiLCJmd2RfZmVlcyIsImFib3J0ZWQiLCJkZXN0cm95ZWQiLCJ0dCIsInNwbGl0X2luZm8iLCJjdXJfc2hhcmRfcGZ4X2xlbiIsImFjY19zcGxpdF9kZXB0aCIsInRoaXNfYWRkciIsInNpYmxpbmdfYWRkciIsInByZXBhcmVfdHJhbnNhY3Rpb24iLCJpbnN0YWxsZWQiLCJFeHRCbGtSZWYiLCJlbmRfbHQiLCJzZXFfbm8iLCJyb290X2hhc2giLCJmaWxlX2hhc2giLCJleHRCbGtSZWYiLCJNc2dFbnZlbG9wZSIsIm1zZyIsIm5leHRfYWRkciIsImN1cl9hZGRyIiwiZndkX2ZlZV9yZW1haW5pbmciLCJtc2dFbnZlbG9wZSIsIkluTXNnIiwidHJhbnNhY3Rpb24iLCJwcm9vZl9jcmVhdGVkIiwib3V0X21zZyIsInRyYW5zaXRfZmVlIiwicHJvb2ZfZGVsaXZlcmVkIiwiaW5Nc2ciLCJPdXRNc2ciLCJyZWltcG9ydCIsImltcG9ydGVkIiwiaW1wb3J0X2Jsb2NrX2x0Iiwib3V0TXNnIiwic2hhcmREZXNjciIsInJlZ19tY19zZXFubyIsInN0YXJ0X2x0IiwiYmVmb3JlX3NwbGl0IiwiYmVmb3JlX21lcmdlIiwid2FudF9zcGxpdCIsIndhbnRfbWVyZ2UiLCJueF9jY191cGRhdGVkIiwiZmxhZ3MiLCJuZXh0X2NhdGNoYWluX3NlcW5vIiwibmV4dF92YWxpZGF0b3Jfc2hhcmQiLCJtaW5fcmVmX21jX3NlcW5vIiwiZ2VuX3V0aW1lIiwic3BsaXRfdHlwZSIsImZlZXNfY29sbGVjdGVkIiwiZmVlc19jb2xsZWN0ZWRfb3RoZXIiLCJmdW5kc19jcmVhdGVkIiwiZnVuZHNfY3JlYXRlZF9vdGhlciIsIkJsb2NrIiwiZ2xvYmFsX2lkIiwiYWZ0ZXJfbWVyZ2UiLCJnZW5fY2F0Y2hhaW5fc2Vxbm8iLCJtYXN0ZXJfcmVmIiwicHJldl9yZWYiLCJwcmV2X2FsdF9yZWYiLCJwcmV2X3ZlcnRfcmVmIiwicHJldl92ZXJ0X2FsdF9yZWYiLCJ2ZXJzaW9uIiwiZ2VuX3ZhbGlkYXRvcl9saXN0X2hhc2hfc2hvcnQiLCJhZnRlcl9zcGxpdCIsInZlcnRfc2VxX25vIiwic2hhcmQiLCJzaGFyZF9wZnhfYml0cyIsIndvcmtjaGFpbl9pZCIsInNoYXJkX3ByZWZpeCIsInZhbHVlX2Zsb3ciLCJ0b19uZXh0X2JsayIsInRvX25leHRfYmxrX290aGVyIiwiZXhwb3J0ZWQiLCJleHBvcnRlZF9vdGhlciIsImNyZWF0ZWQiLCJjcmVhdGVkX290aGVyIiwiaW1wb3J0ZWRfb3RoZXIiLCJmcm9tX3ByZXZfYmxrIiwiZnJvbV9wcmV2X2Jsa19vdGhlciIsIm1pbnRlZCIsIm1pbnRlZF9vdGhlciIsImZlZXNfaW1wb3J0ZWQiLCJmZWVzX2ltcG9ydGVkX290aGVyIiwiaW5fbXNnX2Rlc2NyIiwicmFuZF9zZWVkIiwib3V0X21zZ19kZXNjciIsImFjY291bnRfYmxvY2tzIiwidHJhbnNhY3Rpb25zIiwic3RhdGVfdXBkYXRlIiwidHJfY291bnQiLCJuZXdfZGVwdGgiLCJvbGQiLCJvbGRfZGVwdGgiLCJzaGFyZF9oYXNoZXMiLCJoYXNoIiwiZGVzY3IiLCJzY2hlbWEiLCJfY2xhc3MiLCJ0eXBlcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQW1CQTs7Ozs7O0lBRVFBLE0sR0FBK0JDLFcsQ0FBL0JELE07SUFBUUUsSSxHQUF1QkQsVyxDQUF2QkMsSTtJQUFNQyxHLEdBQWlCRixXLENBQWpCRSxHO0lBQUtDLE8sR0FBWUgsVyxDQUFaRyxPOztBQUMzQixJQUFNQyxPQUFPLEdBQUcsU0FBVkEsT0FBVSxDQUFDQyxHQUFELEVBQWVDLEdBQWY7QUFBQSwyQkFDVEQsR0FEUyxNQUVSQyxHQUFHLEdBQUc7QUFBRUMsSUFBQUEsSUFBSSxFQUFFRDtBQUFSLEdBQUgsR0FBbUIsRUFGZDtBQUFBLENBQWhCOztBQUlBLElBQU1FLFFBQVEsR0FBRyxTQUFYQSxRQUFXLENBQUNILEdBQUQ7QUFBQSxTQUFrQkEsR0FBbEI7QUFBQSxDQUFqQjs7QUFFQSxJQUFNSSxJQUFJLEdBQUcsU0FBUEEsSUFBTyxDQUFDQyxJQUFELEVBQW9CSixHQUFwQjtBQUFBLFNBQXFDRixPQUFPLENBQUM7QUFDdERPLElBQUFBLElBQUksRUFBRTtBQUFFQyxNQUFBQSxRQUFRLEVBQUUsSUFBWjtBQUFrQkYsTUFBQUEsSUFBSSxFQUFKQTtBQUFsQjtBQURnRCxHQUFELEVBRXRESixHQUZzRCxDQUE1QztBQUFBLENBQWI7O0FBSUEsSUFBTU8sSUFBRyxHQUFHLFNBQU5BLElBQU0sQ0FBQ0gsSUFBRCxFQUFvQkosR0FBcEI7QUFBQSxTQUFxQ0YsT0FBTyxDQUFDO0FBQ3JETyxJQUFBQSxJQUFJLEVBQUU7QUFBRUMsTUFBQUEsUUFBUSxFQUFFLEtBQVo7QUFBbUJGLE1BQUFBLElBQUksRUFBSkE7QUFBbkI7QUFEK0MsR0FBRCxFQUVyREosR0FGcUQsQ0FBNUM7QUFBQSxDQUFaOztBQUlBLElBQU1RLEVBQUUsR0FBRyxTQUFMQSxFQUFLLENBQUNSLEdBQUQ7QUFBQSxTQUFrQk8sSUFBRyxDQUFDLENBQUQsRUFBSVAs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Rk47QUFHVnFSLElBQUFBLFNBQVMsRUFBRW5RLEdBQUcsRUFISjtBQUlWb1EsSUFBQUEsR0FBRyxFQUFFdFIsTUFBTSxFQUpEO0FBS1Y4SSxJQUFBQSxRQUFRLEVBQUU5SSxNQUFNLEVBTE47QUFNVnVSLElBQUFBLFNBQVMsRUFBRXJRLEdBQUc7QUFOSixHQTVESztBQW9FbkJzUSxFQUFBQSxZQUFZLEVBQUVwUixPQUFPLENBQUM7QUFDbEJxUixJQUFBQSxJQUFJLEVBQUV0USxHQUFHLEVBRFM7QUFFbEJ1USxJQUFBQSxLQUFLLEVBQUU3RCxVQUFVO0FBRkMsR0FBRDtBQXBFRixDQUF2QixDLENBMkVBOztBQUVBLElBQU04RCxNQUFlLEdBQUc7QUFDcEJDLEVBQUFBLE1BQU0sRUFBRTtBQUNKQyxJQUFBQSxLQUFLLEVBQUU7QUFDSHhGLE1BQUFBLFNBQVMsRUFBVEEsU0FERztBQUVITSxNQUFBQSxXQUFXLEVBQVhBLFdBRkc7QUFHSE0sTUFBQUEsS0FBSyxFQUFMQSxLQUhHO0FBSUhPLE1BQUFBLE1BQU0sRUFBTkEsTUFKRztBQUtIekcsTUFBQUEsT0FBTyxFQUFQQSxPQUxHO0FBTUhnSSxNQUFBQSxLQUFLLEVBQUxBLEtBTkc7QUFPSDlJLE1BQUFBLE9BQU8sRUFBUEEsT0FQRztBQVFIK0IsTUFBQUEsV0FBVyxFQUFYQTtBQVJHO0FBREg7QUFEWSxDQUF4QjtlQWVlMkosTSIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgMjAxOC0yMDE5IFRPTiBERVYgU09MVVRJT05TIExURC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgU09GVFdBUkUgRVZBTFVBVElPTiBMaWNlbnNlICh0aGUgXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2VcbiAqIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZVxuICogTGljZW5zZSBhdDpcbiAqXG4gKiBodHRwOi8vd3d3LnRvbi5kZXYvbGljZW5zZXNcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIFRPTiBERVYgc29mdHdhcmUgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuLy9AZmxvd1xuXG5pbXBvcnQgdHlwZSB7IEludFNpemVUeXBlLCBUeXBlRGVmIH0gZnJvbSAndG9uLWxhYnMtZGV2LW9wcy9zcmMvc2NoZW1hJztcbmltcG9ydCB7IERlZiB9IGZyb20gJ3Rvbi1sYWJzLWRldi1vcHMvZGlzdC9zcmMvc2NoZW1hJztcblxuY29uc3QgeyBzdHJpbmcsIGJvb2wsIHJlZiwgYXJyYXlPZiB9ID0gRGVmO1xuY29uc3Qgd2l0aERvYyA9IChkZWY6IFR5cGVEZWYsIGRvYz86IHN0cmluZykgPT4gKHtcbiAgICAuLi5kZWYsXG4gICAgLi4uKGRvYyA/IHsgX2RvYzogZG9jIH0gOiB7fSlcbn0pO1xuY29uc3QgcmVxdWlyZWQgPSAoZGVmOiBUeXBlRGVmKSA9PiBkZWY7XG5cbmNvbnN0IHVpbnQgPSAoc2l6ZTogSW50U2l6ZVR5cGUsIGRvYz86IHN0cmluZykgPT4gd2l0aERvYyh7XG4gICAgX2ludDogeyB1bnNpZ25lZDogdHJ1ZSwgc2l6ZSB9XG59LCBkb2MpO1xuXG5jb25zdCBpbnQgPSAoc2l6ZTogSW50U2l6ZVR5cGUsIGRvYz86IHN0cmluZykgPT4gd2l0aERvYyh7XG4gICAgX2ludDogeyB1bnNpZ25lZDogZmFsc2UsIHNpemUgfVxufSwgZG9jKTtcblxuY29uc3QgaTggPSAoZG9jPzogc3RyaW5nKSA9PiBpbnQoOCwgZG9jKTtcbmNvbnN0IGkzMiA9IChkb2M/OiBzdHJpbmcpID0+IGludCgzMiwgZG9jKTtcblxuY29uc3QgdTggPSAoZG9jPzogc3RyaW5nKSA9PiB1aW50KDgsIGRvYyk7XG5jb25zdCB1MTYgPSAoZG9jPzogc3RyaW5nKSA9PiB1aW50KDE2LCBkb2MpO1xuY29uc3QgdTMyID0gKGRvYz86IHN0cmluZykgPT4gdWludCgzMiwgZG9jKTtcbmNvbnN0IHU2NCA9IChkb2M/OiBzdHJpbmcpID0+IHVpbnQoNjQsIGRvYyk7XG5jb25zdCB1MTI4ID0gKGRvYz86IHN0cmluZykgPT4gdWludCgxMjgsIGRvYyk7XG5jb25zdCB1MjU2ID0gKGRvYz86IHN0cmluZykgPT4gdWludCgyNTYsIGRvYyk7XG5cbmNvbnN0IGdyYW1zID0gdTEyODtcblxudHlwZSBJbnRFbnVtVmFsdWVzID0ge1xuICAgIFtzdHJpbmddOiBudW1iZXJcbn07XG5cbmZ1bmN0aW9uIHU4ZW51bShuYW1lOiBzdHJpbmcsIHZhbHVlczogSW50RW51bVZhbHVlcykge1xuICAgIHJldHVybiAoZG9jPzogc3RyaW5nKTogVHlwZURlZiA9PiB7XG4gICAgICAgIGNvbnN0IHZhbHVlc0RvYyA9IE9iamVjdC5lbnRyaWVzKHZhbHVlcykubWFwKChbbmFtZSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gYCR7KHZhbHVlOiBhbnkpfSDigJMgJHtuYW1lfWA7XG4gICAgICAgIH0pLmpvaW4oJ1xcbicpO1xuICAgICAgICBjb25zdCBlZmZlY3RpdmVEb2MgPSBgJHtkb2MgPyBgJHtkb2N9XFxuYCA6ICcnfSR7dmFsdWVzRG9jfWA7XG4gICAgICAgIHJldHVybiB3aXRoRG9jKHtcbiAgICAgICAgICAgIF9pbnQ6IHtcbiAgICAgICAgICAgICAgICB1bnNpZ25lZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBzaXplOiA4LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF86IHtcbiAgICAgICAgICAgICAgICBlbnVtOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlc1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgZWZmZWN0aXZlRG9jKTtcbiAgICB9XG59XG5cbmNvbnN0IG90aGVyQ3VycmVuY3lDb2xsZWN0aW9uID0gKGRvYz86IHN0cmluZyk6IFR5cGVEZWYgPT4gYXJyYXlPZih7XG4gICAgY3VycmVuY3k6IHUzMigpLFxuICAgIHZhbHVlOiB1MjU2KCksXG59LCBkb2MpO1xuXG5jb25zdCBhY2NvdW50U3RhdHVzID0gdThlbnVtKCdBY2NvdW50U3RhdHVzJywge1xuICAgIHVuaW5pdDogMCxcbiAgICBhY3RpdmU6IDEsXG4gICAgZnJvemVuOiAyLFxuICAgIG5vbkV4aXN0OiAzLFxufSk7XG5cbmNvbnN0IGFjY291bnRTdGF0dXNDaGFuZ2UgPSB1OGVudW0oJ0FjY291bnRTdGF0dXNDaGFuZ2UnLCB7XG4gICAgdW5jaGFuZ2VkOiAwLFxuICAgIGZyb3plbjogMSxcbiAgICBkZWxldGVkOiAyLFxufSk7XG5cbmNvbnN0IHNraXBSZWFzb24gPSB1OGVudW0oJ1NraXBSZWFzb24nLCB7XG4gICAgbm9TdGF0ZTogMCxcbiAgICBiYWRTdGF0ZTogMSxcbiAgICBub0dhczogMixcbn0pO1xuXG5cbmNvbnN0IGFjY291bnRUeXBlID0gdThlbnVtKCdBY2NvdW50VHlwZScsIHtcbiAgICB1bmluaXQ6IDAsXG4gICAgYWN0aXZlOiAxLFxuICAgIGZyb3plbjogMixcbn0pO1xuXG5jb25zdCBtZXNzYWdlVHlwZSA9IHU4ZW51bSgnTWVzc2FnZVR5cGUnLCB7XG4gICAgaW50ZXJuYWw6IDAsXG4gICAgZXh0SW46IDEsXG4gICAgZXh0T3V0OiAyLFxufSk7XG5cblxuY29uc3QgbWVzc2FnZVByb2Nlc3NpbmdTdGF0dXMgPSB1OGVudW0oJ01lc3NhZ2VQcm9jZXNzaW5nU3RhdHVzJywge1xuICAgIHVua25vd246IDAsXG4gICAgcXVldWVkOiAxLFxuICAgIHByb2Nlc3Npbmc6IDIsXG4gICAgcHJlbGltaW5hcnk6IDMsXG4gICAgcHJvcG9zZWQ6IDQsXG4gICAgZmluYWxpemVkOiA1LFxuICAgIHJlZnVzZWQ6IDYsXG4gICAgdHJhbnNpdGluZzogNyxcbn0pO1xuXG5jb25zdCB0cmFuc2FjdGlvblR5cGUgPSB1OGVudW0oJ1RyYW5zYWN0aW9uVHlwZScsIHtcbiAgICBvcmRpbmFyeTogMCxcbiAgICBzdG9yYWdlOiAxLFxuICAgIHRpY2s6IDIsXG4gICAgdG9jazogMyxcbiAgICBzcGxpdFByZXBhcmU6IDQsXG4gICAgc3BsaXRJbnN0YWxsOiA1LFxuICAgIG1lcmdlUHJlcGFyZTogNixcbiAgICBtZXJnZUluc3RhbGw6IDcsXG59KTtcblxuY29uc3QgdHJhbnNhY3Rpb25Qcm9jZXNzaW5nU3RhdHVzID0gdThlbnVtKCdUcmFuc2FjdGlvblByb2Nlc3NpbmdTdGF0dXMnLCB7XG4gICAgdW5rbm93bjogMCxcbiAgICBwcmVsaW1pbmFyeTogMSxcbiAgICBwcm9wb3NlZDogMixcbiAgICBmaW5hbGl6ZWQ6IDMsXG4gICAgcmVmdXNlZDogNCxcbn0pO1xuXG5jb25zdCBjb21wdXRlVHlwZSA9IHU4ZW51bSgnQ29tcHV0ZVR5cGUnLCB7XG4gICAgc2tpcHBlZDogMCxcbiAgICB2bTogMSxcbn0pO1xuXG5jb25zdCBib3VuY2VUeXBlID0gdThlbnVtKCdCb3VuY2VUeXBlJywge1xuICAgIG5lZ0Z1bmRzOiAwLFxuICAgIG5vRnVuZHM6IDEsXG4gICAgb2s6IDIsXG59KTtcblxuY29uc3QgYmxvY2tQcm9jZXNzaW5nU3RhdHVzID0gdThlbnVtKCdCbG9ja1Byb2Nlc3NpbmdTdGF0dXMnLCB7XG4gICAgdW5rbm93bjogMCxcbiAgICBwcm9wb3NlZDogMSxcbiAgICBmaW5hbGl6ZWQ6IDIsXG4gICAgcmVmdXNlZDogMyxcbn0pO1xuXG5cbmNvbnN0IGluTXNnVHlwZSA9IHU4ZW51bSgnSW5Nc2dUeXBlJywge1xuICAgIGV4dGVybmFsOiAwLFxuICAgIGlocjogMSxcbiAgICBpbW1lZGlhdGVseTogMixcbiAgICBmaW5hbDogMyxcbiAgICB0cmFuc2l0OiA0LFxuICAgIGRpc2NhcmRlZEZpbmFsOiA1LFxuICAgIGRpc2NhcmRlZFRyYW5zaXQ6IDYsXG59KTtcblxuY29uc3Qgb3V0TXNnVHlwZSA9IHU4ZW51bSgnT3V0TXNnVHlwZScsIHtcbiAgICBleHRlcm5hbDogMCxcbiAgICBpbW1lZGlhdGVseTogMSxcbiAgICBvdXRNc2dOZXc6IDIsXG4gICAgdHJhbnNpdDogMyxcbiAgICBkZXF1ZXVlSW1tZWRpYXRlbHk6IDQsXG4gICAgZGVxdWV1ZTogNSxcbiAgICB0cmFuc2l0UmVxdWlyZWQ6IDYsXG4gICAgbm9uZTogLTEsXG59KTtcblxuY29uc3Qgc3BsaXRUeXBlID0gdThlbnVtKCdTcGxpdFR5cGUnLCB7XG4gICAgbm9uZTogMCxcbiAgICBzcGxpdDogMixcbiAgICBtZXJnZTogMyxcbn0pO1xuXG5jb25zdCBBY2NvdW50OiBUeXBlRGVmID0ge1xuICAgIF9kb2M6ICdUT04gQWNjb3VudCcsXG4gICAgXzogeyBjb2xsZWN0aW9uOiAnYWNjb3VudHMnIH0sXG4gICAgYWNjX3R5cGU6IGFjY291bnRUeXBlKCksXG4gICAgbGFzdF9wYWlkOiB1MzIoKSxcbiAgICBkdWVfcGF5bWVudDogZ3JhbXMoKSxcbiAgICBsYXN0X3RyYW5zX2x0OiB1NjQoKSxcbiAgICBiYWxhbmNlOiBncmFtcygpLFxuICAgIGJhbGFuY2Vfb3RoZXI6IG90aGVyQ3VycmVuY3lDb2xsZWN0aW9uKCksXG4gICAgc3BsaXRfZGVwdGg6IHU4KCksXG4gICAgdGljazogYm9vbCgpLFxuICAgIHRvY2s6IGJvb2woKSxcbiAgICBjb2RlOiBzdHJpbmcoKSxcbiAgICBkYXRhOiBzdHJpbmcoKSxcbiAgICBsaWJyYXJ5OiBzdHJpbmcoKSxcbiAgICBwcm9vZjogc3RyaW5nKCksXG4gICAgYm9jOiBzdHJpbmcoKSxcbn07XG5cbmNvbnN0IE1lc3NhZ2U6IFR5cGVEZWYgPSB7XG4gICAgX2RvYzogJ1RPTiBNZXNzYWdlJyxcbiAgICBfOiB7IGNvbGxlY3Rpb246ICdtZXNzYWdlcycgfSxcbiAgICBtc2dfdHlwZTogcmVxdWlyZWQobWVzc2FnZVR5cGUoKSksXG4gICAgc3RhdHVzOiByZXF1aXJlZChtZXNzYWdlUHJvY2Vzc2luZ1N0YXR1cygpKSxcbiAgICB0cmFuc2FjdGlvbl9pZDogcmVxdWlyZWQoc3RyaW5nKCkpLFxuICAgIGJsb2NrX2lkOiByZXF1aXJlZChzdHJpbmcoKSksXG4gICAgYm9keTogc3RyaW5nKCksXG4gICAgc3BsaXRfZGVwdGg6IHU4KCksXG4gICAgdGljazogYm9vbCgpLFxuICAgIHRvY2s6IGJvb2woKSxcbiAgICBjb2RlOiBzdHJpbmcoKSxcbiAgICBkYXRhOiBzdHJpbmcoKSxcbiAgICBsaWJyYXJ5OiBzdHJpbmcoKSxcbiAgICBzcmM6IHN0cmluZygpLFxuICAgIGRzdDogc3RyaW5nKCksXG4gICAgY3JlYXRlZF9sdDogdTY0KCksXG4gICAgY3JlYXRlZF9hdDogdTMyKCksXG4gICAgaWhyX2Rpc2FibGVkOiBib29sKCksXG4gICAgaWhyX2ZlZTogZ3JhbXMoKSxcbiAgICBmd2RfZmVlOiBncmFtcygpLFxuICAgIGltcG9ydF9mZWU6IGdyYW1zKCksXG4gICAgYm91bmNlOiBib29sKCksXG4gICAgYm91bmNlZDogYm9vbCgpLFxuICAgIHZhbHVlOiBncmFtcygpLFxuICAgIHZhbHVlX290aGVyOiBvdGhlckN1cnJlbmN5Q29sbGVjdGlvbigpLFxuICAgIHByb29mOiBzdHJpbmcoKSxcbiAgICBib2M6IHN0cmluZygpLFxufTtcblxuXG5jb25zdCBUcmFuc2FjdGlvbjogVHlwZURlZiA9IHtcbiAgICBfZG9jOiAnVE9OIFRyYW5zYWN0aW9uJyxcbiAgICBfOiB7IGNvbGxlY3Rpb246ICd0cmFuc2FjdGlvbnMnIH0sXG4gICAgdHJfdHlwZTogcmVxdWlyZWQodHJhbnNhY3Rpb25UeXBlKCkpLFxuICAgIHN0YXR1czogcmVxdWlyZWQodHJhbnNhY3Rpb25Qcm9jZXNzaW5nU3RhdHVzKCkpLFxuICAgIGJsb2NrX2lkOiBzdHJpbmcoKSxcbiAgICBhY2NvdW50X2FkZHI6IHN0cmluZygpLFxuICAgIGx0OiB1NjQoKSxcbiAgICBwcmV2X3RyYW5zX2hhc2g6IHN0cmluZygpLFxuICAgIHByZXZfdHJhbnNfbHQ6IHU2NCgpLFxuICAgIG5vdzogdTMyKCksXG4gICAgb3V0bXNnX2NudDogaTMyKCksXG4gICAgb3JpZ19zdGF0dXM6IGFjY291bnRTdGF0dXMoKSxcbiAgICBlbmRfc3RhdHVzOiBhY2NvdW50U3RhdHVzKCksXG4gICAgaW5fbXNnOiBzdHJpbmcoKSxcbiAgICBvdXRfbXNnczogYXJyYXlPZihzdHJpbmcoKSksXG4gICAgdG90YWxfZmVlczogZ3JhbXMoKSxcbiAgICB0b3RhbF9mZWVzX290aGVyOiBvdGhlckN1cnJlbmN5Q29sbGVjdGlvbigpLFxuICAgIG9sZF9oYXNoOiBzdHJpbmcoKSxcbiAgICBuZXdfaGFzaDogc3RyaW5nKCksXG4gICAgY3JlZGl0X2ZpcnN0OiBib29sKCksXG4gICAgc3RvcmFnZToge1xuICAgICAgICBzdG9yYWdlX2ZlZXNfY29sbGVjdGVkOiBncmFtcygpLFxuICAgICAgICBzdG9yYWdlX2ZlZXNfZHVlOiBncmFtcygpLFxuICAgICAgICBzdGF0dXNfY2hhbmdlOiBhY2NvdW50U3RhdHVzQ2hhbmdlKCksXG4gICAgfSxcbiAgICBjcmVkaXQ6IHtcbiAgICAgICAgZHVlX2ZlZXNfY29sbGVjdGVkOiBncmFtcygpLFxuICAgICAgICBjcmVkaXQ6IGdyYW1zKCksXG4gICAgICAgIGNyZWRpdF9vdGhlcjogb3RoZXJDdXJyZW5jeUNvbGxlY3Rpb24oKSxcbiAgICB9LFxuICAgIGNvbXB1dGU6IHtcbiAgICAgICAgY29tcHV0ZV90eXBlOiByZXF1aXJlZChjb21wdXRlVHlwZSgpKSxcbiAgICAgICAgc2tpcHBlZF9yZWFzb246IHNraXBSZWFzb24oKSxcbiAgICAgICAgc3VjY2VzczogYm9vbCgpLFxuICAgICAgICBtc2dfc3RhdGVfdXNlZDogYm9vbCgpLFxuICAgICAgICBhY2NvdW50X2FjdGl2YXRlZDogYm9vbCgpLFxuICAgICAgICBnYXNfZmVlczogZ3JhbXMoKSxcbiAgICAgICAgZ2FzX3VzZWQ6IHU2NCgpLFxuICAgICAgICBnYXNfbGltaXQ6IHU2NCgpLFxuICAgICAgICBnYXNfY3JlZGl0OiBpMzIoKSxcbiAgICAgICAgbW9kZTogaTgoKSxcbiAgICAgICAgZXhpdF9jb2RlOiBpMzIoKSxcbiAgICAgICAgZXhpdF9hcmc6IGkzMigpLFxuICAgICAgICB2bV9zdGVwczogdTMyKCksXG4gICAgICAgIHZtX2luaXRfc3RhdGVfaGFzaDogc3RyaW5nKCksXG4gICAgICAgIHZtX2ZpbmFsX3N0YXRlX2hhc2g6IHN0cmluZygpLFxuICAgIH0sXG4gICAgYWN0aW9uOiB7XG4gICAgICAgIHN1Y2Nlc3M6IGJvb2woKSxcbiAgICAgICAgdmFsaWQ6IGJvb2woKSxcbiAgICAgICAgbm9fZnVuZHM6IGJvb2woKSxcbiAgICAgICAgc3RhdHVzX2NoYW5nZTogYWNjb3VudFN0YXR1c0NoYW5nZSgpLFxuICAgICAgICB0b3RhbF9md2RfZmVlczogZ3JhbXMoKSxcbiAgICAgICAgdG90YWxfYWN0aW9uX2ZlZXM6IGdyYW1zKCksXG4gICAgICAgIHJlc3VsdF9jb2RlOiBpMzIoKSxcbiAgICAgICAgcmVzdWx0X2FyZzogaTMyKCksXG4gICAgICAgIHRvdF9hY3Rpb25zOiBpMzIoKSxcbiAgICAgICAgc3BlY19hY3Rpb25zOiBpMzIoKSxcbiAgICAgICAgc2tpcHBlZF9hY3Rpb25zOiBpMzIoKSxcbiAgICAgICAgbXNnc19jcmVhdGVkOiBpMzIoKSxcbiAgICAgICAgYWN0aW9uX2xpc3RfaGFzaDogc3RyaW5nKCksXG4gICAgICAgIHRvdGFsX21zZ19zaXplX2NlbGxzOiB1MzIoKSxcbiAgICAgICAgdG90YWxfbXNnX3NpemVfYml0czogdTMyKCksXG4gICAgfSxcbiAgICBib3VuY2U6IHtcbiAgICAgICAgYm91bmNlX3R5cGU6IHJlcXVpcmVkKGJvdW5jZVR5cGUoKSksXG4gICAgICAgIG1zZ19zaXplX2NlbGxzOiB1MzIoKSxcbiAgICAgICAgbXNnX3NpemVfYml0czogdTMyKCksXG4gICAgICAgIHJlcV9md2RfZmVlczogZ3JhbXMoKSxcbiAgICAgICAgbXNnX2ZlZXM6IGdyYW1zKCksXG4gICAgICAgIGZ3ZF9mZWVzOiBncmFtcygpLFxuICAgIH0sXG4gICAgYWJvcnRlZDogYm9vbCgpLFxuICAgIGRlc3Ryb3llZDogYm9vbCgpLFxuICAgIHR0OiBzdHJpbmcoKSxcbiAgICBzcGxpdF9pbmZvOiB7XG4gICAgICAgIGN1cl9zaGFyZF9wZnhfbGVuOiB1OCgpLFxuICAgICAgICBhY2Nfc3BsaXRfZGVwdGg6IHU4KCksXG4gICAgICAgIHRoaXNfYWRkcjogc3RyaW5nKCksXG4gICAgICAgIHNpYmxpbmdfYWRkcjogc3RyaW5nKCksXG4gICAgfSxcbiAgICBwcmVwYXJlX3RyYW5zYWN0aW9uOiBzdHJpbmcoKSxcbiAgICBpbnN0YWxsZWQ6IGJvb2woKSxcbiAgICBwcm9vZjogc3RyaW5nKCksXG4gICAgYm9jOiBzdHJpbmcoKSxcbn07XG5cbi8vIEJMT0NLXG5cbmNvbnN0IEV4dEJsa1JlZjogVHlwZURlZiA9IHtcbiAgICBlbmRfbHQ6IHU2NCgpLFxuICAgIHNlcV9ubzogdTMyKCksXG4gICAgcm9vdF9oYXNoOiBzdHJpbmcoKSxcbiAgICBmaWxlX2hhc2g6IHN0cmluZygpXG59O1xuXG5jb25zdCBleHRCbGtSZWYgPSAoKSA9PiByZWYoeyBFeHRCbGtSZWYgfSk7XG5cbmNvbnN0IE1zZ0VudmVsb3BlOiBUeXBlRGVmID0ge1xuICAgIG1zZzogc3RyaW5nKCksXG4gICAgbmV4dF9hZGRyOiBzdHJpbmcoKSxcbiAgICBjdXJfYWRkcjogc3RyaW5nKCksXG4gICAgZndkX2ZlZV9yZW1haW5pbmc6IGdyYW1zKCksXG59O1xuXG5jb25zdCBtc2dFbnZlbG9wZSA9ICgpID0+IHJlZih7IE1zZ0VudmVsb3BlIH0pO1xuXG5jb25zdCBJbk1zZzogVHlwZURlZiA9IHtcbiAgICBtc2dfdHlwZTogcmVxdWlyZWQoaW5Nc2dUeXBlKCkpLFxuICAgIG1zZzogc3RyaW5nKCksXG4gICAgdHJhbnNhY3Rpb246IHN0cmluZygpLFxuICAgIGlocl9mZWU6IGdyYW1zKCksXG4gICAgcHJvb2ZfY3JlYXRlZDogc3RyaW5nKCksXG4gICAgaW5fbXNnOiBtc2dFbnZlbG9wZSgpLFxuICAgIGZ3ZF9mZWU6IGdyYW1zKCksXG4gICAgb3V0X21zZzogbXNnRW52ZWxvcGUoKSxcbiAgICB0cmFuc2l0X2ZlZTogZ3JhbXMoKSxcbiAgICB0cmFuc2FjdGlvbl9pZDogdTY0KCksXG4gICAgcHJvb2ZfZGVsaXZlcmVkOiBzdHJpbmcoKVxufTtcblxuY29uc3QgaW5Nc2cgPSAoKSA9PiByZWYoeyBJbk1zZyB9KTtcblxuY29uc3QgT3V0TXNnOiBUeXBlRGVmID0ge1xuICAgIG1zZ190eXBlOiByZXF1aXJlZChvdXRNc2dUeXBlKCkpLFxuICAgIG1zZzogc3RyaW5nKCksXG4gICAgdHJhbnNhY3Rpb246IHN0cmluZygpLFxuICAgIG91dF9tc2c6IG1zZ0VudmVsb3BlKCksXG4gICAgcmVpbXBvcnQ6IGluTXNnKCksXG4gICAgaW1wb3J0ZWQ6IGluTXNnKCksXG4gICAgaW1wb3J0X2Jsb2NrX2x0OiB1NjQoKSxcbn07XG5cbmNvbnN0IG91dE1zZyA9ICgpID0+IHJlZih7IE91dE1zZyB9KTtcblxuY29uc3Qgc2hhcmREZXNjciA9IChkb2M/OiBzdHJpbmcpOiBUeXBlRGVmID0+IHdpdGhEb2Moe1xuICAgIHNlcV9ubzogdTMyKCksXG4gICAgcmVnX21jX3NlcW5vOiB1MzIoKSxcbiAgICBzdGFydF9sdDogdTY0KCksXG4gICAgZW5kX2x0OiB1NjQoKSxcbiAgICByb290X2hhc2g6IHN0cmluZygpLFxuICAgIGZpbGVfaGFzaDogc3RyaW5nKCksXG4gICAgYmVmb3JlX3NwbGl0OiBib29sKCksXG4gICAgYmVmb3JlX21lcmdlOiBib29sKCksXG4gICAgd2FudF9zcGxpdDogYm9vbCgpLFxuICAgIHdhbnRfbWVyZ2U6IGJvb2woKSxcbiAgICBueF9jY191cGRhdGVkOiBib29sKCksXG4gICAgZmxhZ3M6IHU4KCksXG4gICAgbmV4dF9jYXRjaGFpbl9zZXFubzogdTMyKCksXG4gICAgbmV4dF92YWxpZGF0b3Jfc2hhcmQ6IHU2NCgpLFxuICAgIG1pbl9yZWZfbWNfc2Vxbm86IHUzMigpLFxuICAgIGdlbl91dGltZTogdTMyKCksXG4gICAgc3BsaXRfdHlwZTogc3BsaXRUeXBlKCksXG4gICAgc3BsaXQ6IHUzMigpLFxuICAgIGZlZXNfY29sbGVjdGVkOiBncmFtcygpLFxuICAgIGZlZXNfY29sbGVjdGVkX290aGVyOiBvdGhlckN1cnJlbmN5Q29sbGVjdGlvbigpLFxuICAgIGZ1bmRzX2NyZWF0ZWQ6IGdyYW1zKCksXG4gICAgZnVuZHNfY3JlYXRlZF9vdGhlcjogb3RoZXJDdXJyZW5jeUNvbGxlY3Rpb24oKSxcbn0sIGRvYyk7XG5cbmNvbnN0IEJsb2NrOiBUeXBlRGVmID0ge1xuICAgIF9kb2M6ICdUaGlzIGlzIEJsb2NrJyxcbiAgICBfOiB7IGNvbGxlY3Rpb246ICdibG9ja3MnIH0sXG4gICAgc3RhdHVzOiBibG9ja1Byb2Nlc3NpbmdTdGF0dXMoKSxcbiAgICBnbG9iYWxfaWQ6IHUzMigpLFxuICAgIHdhbnRfc3BsaXQ6IGJvb2woKSxcbiAgICBzZXFfbm86IHUzMigpLFxuICAgIGFmdGVyX21lcmdlOiBib29sKCksXG4gICAgZ2VuX3V0aW1lOiBpMzIoKSxcbiAgICBnZW5fY2F0Y2hhaW5fc2Vxbm86IHUzMigpLFxuICAgIGZsYWdzOiB1MTYoKSxcbiAgICBtYXN0ZXJfcmVmOiBleHRCbGtSZWYoKSxcbiAgICBwcmV2X3JlZjogZXh0QmxrUmVmKCksXG4gICAgcHJldl9hbHRfcmVmOiBleHRCbGtSZWYoKSxcbiAgICBwcmV2X3ZlcnRfcmVmOiBleHRCbGtSZWYoKSxcbiAgICBwcmV2X3ZlcnRfYWx0X3JlZjogZXh0QmxrUmVmKCksXG4gICAgdmVyc2lvbjogdTMyKCksXG4gICAgZ2VuX3ZhbGlkYXRvcl9saXN0X2hhc2hfc2hvcnQ6IHUzMigpLFxuICAgIGJlZm9yZV9zcGxpdDogYm9vbCgpLFxuICAgIGFmdGVyX3NwbGl0OiBib29sKCksXG4gICAgd2FudF9tZXJnZTogYm9vbCgpLFxuICAgIHZlcnRfc2VxX25vOiB1MzIoKSxcbiAgICBzdGFydF9sdDogdTY0KCksXG4gICAgZW5kX2x0OiB1NjQoKSxcbiAgICBzaGFyZDoge1xuICAgICAgICBzaGFyZF9wZnhfYml0czogdTgoKSxcbiAgICAgICAgd29ya2NoYWluX2lkOiBpMzIoKSxcbiAgICAgICAgc2hhcmRfcHJlZml4OiB1NjQoKSxcbiAgICB9LFxuICAgIG1pbl9yZWZfbWNfc2Vxbm86IHUzMigpLFxuICAgIHZhbHVlX2Zsb3c6IHtcbiAgICAgICAgdG9fbmV4dF9ibGs6IGdyYW1zKCksXG4gICAgICAgIHRvX25leHRfYmxrX290aGVyOiBvdGhlckN1cnJlbmN5Q29sbGVjdGlvbigpLFxuICAgICAgICBleHBvcnRlZDogZ3JhbXMoKSxcbiAgICAgICAgZXhwb3J0ZWRfb3RoZXI6IG90aGVyQ3VycmVuY3lDb2xsZWN0aW9uKCksXG4gICAgICAgIGZlZXNfY29sbGVjdGVkOiBncmFtcygpLFxuICAgICAgICBmZWVzX2NvbGxlY3RlZF9vdGhlcjogb3RoZXJDdXJyZW5jeUNvbGxlY3Rpb24oKSxcbiAgICAgICAgY3JlYXRlZDogZ3JhbXMoKSxcbiAgICAgICAgY3JlYXRlZF9vdGhlcjogb3RoZXJDdXJyZW5jeUNvbGxlY3Rpb24oKSxcbiAgICAgICAgaW1wb3J0ZWQ6IGdyYW1zKCksXG4gICAgICAgIGltcG9ydGVkX290aGVyOiBvdGhlckN1cnJlbmN5Q29sbGVjdGlvbigpLFxuICAgICAgICBmcm9tX3ByZXZfYmxrOiBncmFtcygpLFxuICAgICAgICBmcm9tX3ByZXZfYmxrX290aGVyOiBvdGhlckN1cnJlbmN5Q29sbGVjdGlvbigpLFxuICAgICAgICBtaW50ZWQ6IGdyYW1zKCksXG4gICAgICAgIG1pbnRlZF9vdGhlcjogb3RoZXJDdXJyZW5jeUNvbGxlY3Rpb24oKSxcbiAgICAgICAgZmVlc19pbXBvcnRlZDogZ3JhbXMoKSxcbiAgICAgICAgZmVlc19pbXBvcnRlZF9vdGhlcjogb3RoZXJDdXJyZW5jeUNvbGxlY3Rpb24oKSxcbiAgICB9LFxuICAgIGluX21zZ19kZXNjcjogYXJyYXlPZihpbk1zZygpKSxcbiAgICByYW5kX3NlZWQ6IHN0cmluZygpLFxuICAgIG91dF9tc2dfZGVzY3I6IGFycmF5T2Yob3V0TXNnKCkpLFxuICAgIGFjY291bnRfYmxvY2tzOiBhcnJheU9mKHtcbiAgICAgICAgYWNjb3VudF9hZGRyOiBzdHJpbmcoKSxcbiAgICAgICAgdHJhbnNhY3Rpb25zOiBhcnJheU9mKHN0cmluZygpKSxcbiAgICAgICAgc3RhdGVfdXBkYXRlOiB7XG4gICAgICAgICAgICBvbGRfaGFzaDogc3RyaW5nKCksXG4gICAgICAgICAgICBuZXdfaGFzaDogc3RyaW5nKClcbiAgICAgICAgfSxcbiAgICAgICAgdHJfY291bnQ6IGkzMigpXG4gICAgfSksXG4gICAgc3RhdGVfdXBkYXRlOiB7XG4gICAgICAgIG5ldzogc3RyaW5nKCksXG4gICAgICAgIG5ld19oYXNoOiBzdHJpbmcoKSxcbiAgICAgICAgbmV3X2RlcHRoOiB1MTYoKSxcbiAgICAgICAgb2xkOiBzdHJpbmcoKSxcbiAgICAgICAgb2xkX2hhc2g6IHN0cmluZygpLFxuICAgICAgICBvbGRfZGVwdGg6IHUxNigpXG4gICAgfSxcbiAgICBzaGFyZF9oYXNoZXM6IGFycmF5T2Yoe1xuICAgICAgICBoYXNoOiB1MzIoKSxcbiAgICAgICAgZGVzY3I6IHNoYXJkRGVzY3IoKSxcbiAgICB9KSxcbn07XG5cblxuLy9Sb290IHNjaGVtZSBkZWNsYXJhdGlvblxuXG5jb25zdCBzY2hlbWE6IFR5cGVEZWYgPSB7XG4gICAgX2NsYXNzOiB7XG4gICAgICAgIHR5cGVzOiB7XG4gICAgICAgICAgICBFeHRCbGtSZWYsXG4gICAgICAgICAgICBNc2dFbnZlbG9wZSxcbiAgICAgICAgICAgIEluTXNnLFxuICAgICAgICAgICAgT3V0TXNnLFxuICAgICAgICAgICAgTWVzc2FnZSxcbiAgICAgICAgICAgIEJsb2NrLFxuICAgICAgICAgICAgQWNjb3VudCxcbiAgICAgICAgICAgIFRyYW5zYWN0aW9uLFxuICAgICAgICB9XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgc2NoZW1hO1xuIl19