"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _schema = require("ton-labs-dev-ops/dist/src/schema");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var string = _schema.Def.string,
    bool = _schema.Def.bool,
    ref = _schema.Def.ref,
    arrayOf = _schema.Def.arrayOf; // Types scheme begin

function uint(size, doc) {
  return _objectSpread({
    _int: {
      unsigned: size
    }
  }, doc ? {
    _doc: doc
  } : {});
}

function i8(doc) {
  return _objectSpread({
    _int: {
      signed: 8
    }
  }, doc ? {
    _doc: doc
  } : {});
}

function i32(doc) {
  return _objectSpread({
    _int: {
      signed: 32
    }
  }, doc ? {
    _doc: doc
  } : {});
}

var u8 = function u8(doc) {
  return uint(8, doc);
};

var u16 = function u16(doc) {
  return uint(16, doc);
};

var u32 = function u32(doc) {
  return uint(32, doc);
};

var u64 = function u64(doc) {
  return uint(64, doc);
};

var u128 = function u128(doc) {
  return uint(128, doc);
};

var join = function join(refDef, on) {
  return _objectSpread({}, ref(refDef), {
    _: {
      join: {
        on: on
      }
    }
  });
};

var grams = u128;

function currencyCollection() {
  return {
    grams: grams(),
    other: arrayOf({
      currency: i32(),
      value: u128()
    })
  };
}

var Account = {
  _doc: 'TON Account',
  _: {
    collection: 'accounts'
  },
  acc_type: u8(),
  addr: string(),
  last_paid: u32(),
  due_payment: grams(),
  last_trans_lt: u64(),
  balance: currencyCollection(),
  split_depth: u8(),
  tick: bool(),
  tock: bool(),
  code: string(),
  data: string(),
  library: string()
};
var Message = {
  _doc: 'This is message',
  _: {
    collection: 'messages'
  },
  msg_type: u8(),
  transaction_id: string(),
  block_id: string(),
  body: string(),
  status: u8(),
  split_depth: u8(),
  tick: bool(),
  tock: bool(),
  code: string(),
  data: string(),
  library: string(),
  src: string(),
  dst: string(),
  created_lt: u64(),
  created_at: u32(),
  ihr_disabled: bool(),
  ihr_fee: grams(),
  fwd_fee: grams(),
  import_fee: grams(),
  bounce: bool(),
  bounced: bool(),
  value: currencyCollection()
};
var Transaction = {
  _doc: 'This is transaction',
  _: {
    collection: 'transactions'
  },
  tr_type: u8(),
  status: u8(),
  account_addr: string(),
  lt: u64(),
  prev_trans_hash: string(),
  prev_trans_lt: u64(),
  now: u32(),
  outmsg_cnt: i32(),
  orig_status: u8(),
  end_status: u8(),
  in_msg: string(),
  out_msgs: arrayOf(string()),
  total_fees: currencyCollection(),
  old_hash: string(),
  new_hash: string(),
  credit_first: bool(),
  storage: {
    storage_fees_collected: grams(),
    storage_fees_due: grams(),
    status_change: u8()
  },
  credit: {
    due_fees_collected: grams(),
    credit: currencyCollection()
  },
  compute: {
    type: u8(),
    // 0: skipped, 1: VM
    skipped_reason: u8(),
    success: bool(),
    msg_state_used: bool(),
    account_activated: bool(),
    gas_fees: grams(),
    gas_used: u64(),
    gas_limit: u64(),
    gas_credit: i32(),
    mode: i8(),
    exit_code: i32(),
    exit_arg: i32(),
    vm_steps: u32(),
    vm_init_state_hash: string(),
    vm_final_state_hash: string()
  },
  action: {
    success: bool(),
    valid: bool(),
    no_funds: bool(),
    status_change: u8(),
    total_fwd_fees: grams(),
    total_action_fees: grams(),
    result_code: i32(),
    result_arg: i32(),
    tot_actions: i32(),
    spec_actions: i32(),
    skipped_actions: i32(),
    msgs_created: i32(),
    action_list_hash: string(),
    total_msg_size_cells: u32(),
    total_msg_size_bits: u32()
  },
  bounce: {
    type: u8(),
    // 0: Negfunds, 1: Nofunds, 2: Ok
    msg_size_cells: u32(),
    msg_size_bits: u32(),
    req_fwd_fees: grams(),
    msg_fees: grams(),
    fwd_fees: grams()
  },
  aborted: bool(),
  destroyed: bool(),
  tt: string(),
  split_info: {
    cur_shard_pfx_len: u8(),
    acc_split_depth: u8(),
    this_addr: string(),
    sibling_addr: string()
  },
  prepare_transaction: string(),
  installed: bool()
}; // BLOCK

var ExtBlkRef = {
  end_lt: u64(),
  seq_no: u32(),
  root_hash: string(),
  file_hash: string()
};
var MsgEnvelope = {
  msg: string(),
  next_addr: string(),
  cur_addr: string(),
  fwd_fee_remaining: grams()
};
var InMsg = {
  msg_type: u8(),
  // External: 0, IHR: 1, Immediatelly: 2, Final: 3, Transit: 4, DiscardedFinal: 5, DiscardedTransit: 6
  msg: string(),
  transaction: string(),
  ihr_fee: grams(),
  proof_created: string(),
  in_msg: ref({
    MsgEnvelope: MsgEnvelope
  }),
  fwd_fee: grams(),
  out_msg: ref({
    MsgEnvelope: MsgEnvelope
  }),
  transit_fee: grams(),
  transaction_id: u64(),
  proof_delivered: string()
};
var OutMsg = {
  msg_type: u8(),
  // None: 0, External: 1, Immediately: 2, OutMsgNew: 3, Transit: 4, Dequeue: 5, TransitRequired: 6
  msg: string(),
  transaction: string(),
  out_msg: ref({
    MsgEnvelope: MsgEnvelope
  }),
  reimport: ref({
    InMsg: InMsg
  }),
  imported: ref({
    InMsg: InMsg
  }),
  import_block_lt: u64()
};
var Block = {
  _doc: 'This is Block',
  _: {
    collection: 'blocks'
  },
  status: string(),
  global_id: u32(),
  info: {
    want_split: bool(),
    seq_no: u32(),
    after_merge: bool(),
    gen_utime: i32(),
    gen_catchain_seqno: u32(),
    flags: u16(),
    prev_ref: {
      prev: {
        seq_no: u32(),
        file_hash: string(),
        root_hash: string(),
        end_lt: u64()
      }
    },
    version: u32(),
    gen_validator_list_hash_short: u32(),
    before_split: bool(),
    after_split: bool(),
    want_merge: bool(),
    vert_seq_no: u32(),
    start_lt: u64(),
    end_lt: u64(),
    shard: {
      shard_pfx_bits: u8(),
      workchain_id: i32(),
      shard_prefix: u64()
    },
    min_ref_mc_seqno: u32(),
    master_ref: {
      master: ref({
        ExtBlkRef: ExtBlkRef
      })
    },
    prev_vert_ref: {
      prev: ref({
        ExtBlkRef: ExtBlkRef
      }),
      prev_alt: ref({
        ExtBlkRef: ExtBlkRef
      })
    }
  },
  value_flow: {
    to_next_blk: currencyCollection(),
    exported: currencyCollection(),
    fees_collected: currencyCollection(),
    created: currencyCollection(),
    imported: currencyCollection(),
    from_prev_blk: currencyCollection(),
    minted: currencyCollection(),
    fees_imported: currencyCollection()
  },
  extra: {
    in_msg_descr: arrayOf(ref({
      InMsg: InMsg
    })),
    rand_seed: string(),
    out_msg_descr: arrayOf(ref({
      OutMsg: OutMsg
    })),
    account_blocks: arrayOf({
      account_addr: string(),
      transactions: arrayOf(string()),
      state_update: {
        old_hash: string(),
        new_hash: string()
      },
      tr_count: i32()
    })
  },
  state_update: {
    "new": string(),
    new_hash: string(),
    new_depth: u16(),
    old: string(),
    old_hash: string(),
    old_depth: u16()
  }
}; //Root scheme declaration

var schema = {
  _class: {
    types: {
      ExtBlkRef: ExtBlkRef,
      MsgEnvelope: MsgEnvelope,
      InMsg: InMsg,
      OutMsg: OutMsg,
      Message: Message,
      Block: Block,
      Account: Account,
      Transaction: Transaction
    }
  }
};
var _default = schema;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NlcnZlci9kYi5zY2hlbWEudjIuanMiXSwibmFtZXMiOlsic3RyaW5nIiwiRGVmIiwiYm9vbCIsInJlZiIsImFycmF5T2YiLCJ1aW50Iiwic2l6ZSIsImRvYyIsIl9pbnQiLCJ1bnNpZ25lZCIsIl9kb2MiLCJpOCIsInNpZ25lZCIsImkzMiIsInU4IiwidTE2IiwidTMyIiwidTY0IiwidTEyOCIsImpvaW4iLCJyZWZEZWYiLCJvbiIsIl8iLCJncmFtcyIsImN1cnJlbmN5Q29sbGVjdGlvbiIsIm90aGVyIiwiY3VycmVuY3kiLCJ2YWx1ZSIsIkFjY291bnQiLCJjb2xsZWN0aW9uIiwiYWNjX3R5cGUiLCJhZGRyIiwibGFzdF9wYWlkIiwiZHVlX3BheW1lbnQiLCJsYXN0X3RyYW5zX2x0IiwiYmFsYW5jZSIsInNwbGl0X2RlcHRoIiwidGljayIsInRvY2siLCJjb2RlIiwiZGF0YSIsImxpYnJhcnkiLCJNZXNzYWdlIiwibXNnX3R5cGUiLCJ0cmFuc2FjdGlvbl9pZCIsImJsb2NrX2lkIiwiYm9keSIsInN0YXR1cyIsInNyYyIsImRzdCIsImNyZWF0ZWRfbHQiLCJjcmVhdGVkX2F0IiwiaWhyX2Rpc2FibGVkIiwiaWhyX2ZlZSIsImZ3ZF9mZWUiLCJpbXBvcnRfZmVlIiwiYm91bmNlIiwiYm91bmNlZCIsIlRyYW5zYWN0aW9uIiwidHJfdHlwZSIsImFjY291bnRfYWRkciIsImx0IiwicHJldl90cmFuc19oYXNoIiwicHJldl90cmFuc19sdCIsIm5vdyIsIm91dG1zZ19jbnQiLCJvcmlnX3N0YXR1cyIsImVuZF9zdGF0dXMiLCJpbl9tc2ciLCJvdXRfbXNncyIsInRvdGFsX2ZlZXMiLCJvbGRfaGFzaCIsIm5ld19oYXNoIiwiY3JlZGl0X2ZpcnN0Iiwic3RvcmFnZSIsInN0b3JhZ2VfZmVlc19jb2xsZWN0ZWQiLCJzdG9yYWdlX2ZlZXNfZHVlIiwic3RhdHVzX2NoYW5nZSIsImNyZWRpdCIsImR1ZV9mZWVzX2NvbGxlY3RlZCIsImNvbXB1dGUiLCJ0eXBlIiwic2tpcHBlZF9yZWFzb24iLCJzdWNjZXNzIiwibXNnX3N0YXRlX3VzZWQiLCJhY2NvdW50X2FjdGl2YXRlZCIsImdhc19mZWVzIiwiZ2FzX3VzZWQiLCJnYXNfbGltaXQiLCJnYXNfY3JlZGl0IiwibW9kZSIsImV4aXRfY29kZSIsImV4aXRfYXJnIiwidm1fc3RlcHMiLCJ2bV9pbml0X3N0YXRlX2hhc2giLCJ2bV9maW5hbF9zdGF0ZV9oYXNoIiwiYWN0aW9uIiwidmFsaWQiLCJub19mdW5kcyIsInRvdGFsX2Z3ZF9mZWVzIiwidG90YWxfYWN0aW9uX2ZlZXMiLCJyZXN1bHRfY29kZSIsInJlc3VsdF9hcmciLCJ0b3RfYWN0aW9ucyIsInNwZWNfYWN0aW9ucyIsInNraXBwZWRfYWN0aW9ucyIsIm1zZ3NfY3JlYXRlZCIsImFjdGlvbl9saXN0X2hhc2giLCJ0b3RhbF9tc2dfc2l6ZV9jZWxscyIsInRvdGFsX21zZ19zaXplX2JpdHMiLCJtc2dfc2l6ZV9jZWxscyIsIm1zZ19zaXplX2JpdHMiLCJyZXFfZndkX2ZlZXMiLCJtc2dfZmVlcyIsImZ3ZF9mZWVzIiwiYWJvcnRlZCIsImRlc3Ryb3llZCIsInR0Iiwic3BsaXRfaW5mbyIsImN1cl9zaGFyZF9wZnhfbGVuIiwiYWNjX3NwbGl0X2RlcHRoIiwidGhpc19hZGRyIiwic2libGluZ19hZGRyIiwicHJlcGFyZV90cmFuc2FjdGlvbiIsImluc3RhbGxlZCIsIkV4dEJsa1JlZiIsImVuZF9sdCIsInNlcV9ubyIsInJvb3RfaGFzaCIsImZpbGVfaGFzaCIsIk1zZ0VudmVsb3BlIiwibXNnIiwibmV4dF9hZGRyIiwiY3VyX2FkZHIiLCJmd2RfZmVlX3JlbWFpbmluZyIsIkluTXNnIiwidHJhbnNhY3Rpb24iLCJwcm9vZl9jcmVhdGVkIiwib3V0X21zZyIsInRyYW5zaXRfZmVlIiwicHJvb2ZfZGVsaXZlcmVkIiwiT3V0TXNnIiwicmVpbXBvcnQiLCJpbXBvcnRlZCIsImltcG9ydF9ibG9ja19sdCIsIkJsb2NrIiwiZ2xvYmFsX2lkIiwiaW5mbyIsIndhbnRfc3BsaXQiLCJhZnRlcl9tZXJnZSIsImdlbl91dGltZSIsImdlbl9jYXRjaGFpbl9zZXFubyIsImZsYWdzIiwicHJldl9yZWYiLCJwcmV2IiwidmVyc2lvbiIsImdlbl92YWxpZGF0b3JfbGlzdF9oYXNoX3Nob3J0IiwiYmVmb3JlX3NwbGl0IiwiYWZ0ZXJfc3BsaXQiLCJ3YW50X21lcmdlIiwidmVydF9zZXFfbm8iLCJzdGFydF9sdCIsInNoYXJkIiwic2hhcmRfcGZ4X2JpdHMiLCJ3b3JrY2hhaW5faWQiLCJzaGFyZF9wcmVmaXgiLCJtaW5fcmVmX21jX3NlcW5vIiwibWFzdGVyX3JlZiIsIm1hc3RlciIsInByZXZfdmVydF9yZWYiLCJwcmV2X2FsdCIsInZhbHVlX2Zsb3ciLCJ0b19uZXh0X2JsayIsImV4cG9ydGVkIiwiZmVlc19jb2xsZWN0ZWQiLCJjcmVhdGVkIiwiZnJvbV9wcmV2X2JsayIsIm1pbnRlZCIsImZlZXNfaW1wb3J0ZWQiLCJleHRyYSIsImluX21zZ19kZXNjciIsInJhbmRfc2VlZCIsIm91dF9tc2dfZGVzY3IiLCJhY2NvdW50X2Jsb2NrcyIsInRyYW5zYWN0aW9ucyIsInN0YXRlX3VwZGF0ZSIsInRyX2NvdW50IiwibmV3X2RlcHRoIiwib2xkIiwib2xkX2RlcHRoIiwic2NoZW1hIiwiX2NsYXNzIiwidHlwZXMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBbUJBOzs7Ozs7SUFFUUEsTSxHQUErQkMsVyxDQUEvQkQsTTtJQUFRRSxJLEdBQXVCRCxXLENBQXZCQyxJO0lBQU1DLEcsR0FBaUJGLFcsQ0FBakJFLEc7SUFBS0MsTyxHQUFZSCxXLENBQVpHLE8sRUFFM0I7O0FBRUEsU0FBU0MsSUFBVCxDQUFjQyxJQUFkLEVBQTRCQyxHQUE1QixFQUFzQztBQUNsQztBQUFTQyxJQUFBQSxJQUFJLEVBQUU7QUFBRUMsTUFBQUEsUUFBUSxFQUFFSDtBQUFaO0FBQWYsS0FBdUNDLEdBQUcsR0FBRztBQUFFRyxJQUFBQSxJQUFJLEVBQUVIO0FBQVIsR0FBSCxHQUFtQixFQUE3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LEVBSEo7QUFJVjZLLElBQUFBLEdBQUcsRUFBRTVMLE1BQU0sRUFKRDtBQUtWdUUsSUFBQUEsUUFBUSxFQUFFdkUsTUFBTSxFQUxOO0FBTVY2TCxJQUFBQSxTQUFTLEVBQUU5SyxHQUFHO0FBTko7QUFsRUssQ0FBdkIsQyxDQTZFQTs7QUFFQSxJQUFNK0ssTUFBZSxHQUFHO0FBQ3BCQyxFQUFBQSxNQUFNLEVBQUU7QUFDSkMsSUFBQUEsS0FBSyxFQUFFO0FBQ0huRSxNQUFBQSxTQUFTLEVBQVRBLFNBREc7QUFFSEssTUFBQUEsV0FBVyxFQUFYQSxXQUZHO0FBR0hLLE1BQUFBLEtBQUssRUFBTEEsS0FIRztBQUlITSxNQUFBQSxNQUFNLEVBQU5BLE1BSkc7QUFLSG5HLE1BQUFBLE9BQU8sRUFBUEEsT0FMRztBQU1IdUcsTUFBQUEsS0FBSyxFQUFMQSxLQU5HO0FBT0hySCxNQUFBQSxPQUFPLEVBQVBBLE9BUEc7QUFRSDhCLE1BQUFBLFdBQVcsRUFBWEE7QUFSRztBQURIO0FBRFksQ0FBeEI7ZUFlZW9JLE0iLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IDIwMTgtMjAxOSBUT04gREVWIFNPTFVUSU9OUyBMVEQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIFNPRlRXQVJFIEVWQUxVQVRJT04gTGljZW5zZSAodGhlIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlXG4gKiB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGVcbiAqIExpY2Vuc2UgYXQ6XG4gKlxuICogaHR0cDovL3d3dy50b24uZGV2L2xpY2Vuc2VzXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBUT04gREVWIHNvZnR3YXJlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbi8vQGZsb3dcblxuaW1wb3J0IHR5cGUgeyBUeXBlRGVmIH0gZnJvbSAndG9uLWxhYnMtZGV2LW9wcy9zcmMvc2NoZW1hJztcbmltcG9ydCB7IERlZiB9IGZyb20gJ3Rvbi1sYWJzLWRldi1vcHMvZGlzdC9zcmMvc2NoZW1hJztcblxuY29uc3QgeyBzdHJpbmcsIGJvb2wsIHJlZiwgYXJyYXlPZiB9ID0gRGVmO1xuXG4vLyBUeXBlcyBzY2hlbWUgYmVnaW5cblxuZnVuY3Rpb24gdWludChzaXplOiBudW1iZXIsIGRvYz86ICcnKSB7XG4gICAgcmV0dXJuIHsgX2ludDogeyB1bnNpZ25lZDogc2l6ZSB9LCAuLi4oZG9jID8geyBfZG9jOiBkb2MgfSA6IHt9KSB9XG59XG5cbmZ1bmN0aW9uIGk4KGRvYz86ICcnKSB7XG4gICAgcmV0dXJuIHsgX2ludDogeyBzaWduZWQ6IDggfSwgLi4uKGRvYyA/IHsgX2RvYzogZG9jIH0gOiB7fSkgfVxufVxuXG5mdW5jdGlvbiBpMzIoZG9jPzogJycpIHtcbiAgICByZXR1cm4geyBfaW50OiB7IHNpZ25lZDogMzIgfSwgLi4uKGRvYyA/IHsgX2RvYzogZG9jIH0gOiB7fSkgfVxufVxuXG5jb25zdCB1OCA9IChkb2M/OiAnJykgPT4gdWludCg4LCBkb2MpO1xuY29uc3QgdTE2ID0gKGRvYz86ICcnKSA9PiB1aW50KDE2LCBkb2MpO1xuY29uc3QgdTMyID0gKGRvYz86ICcnKSA9PiB1aW50KDMyLCBkb2MpO1xuY29uc3QgdTY0ID0gKGRvYz86ICcnKSA9PiB1aW50KDY0LCBkb2MpO1xuY29uc3QgdTEyOCA9IChkb2M/OiAnJykgPT4gdWludCgxMjgsIGRvYyk7XG5jb25zdCBqb2luID0gKHJlZkRlZjogeyBbc3RyaW5nXTogVHlwZURlZiB9LCBvbjogc3RyaW5nKTogVHlwZURlZiA9PiB7XG4gICAgcmV0dXJuIHsgLi4ucmVmKHJlZkRlZiksIF86IHsgam9pbjogeyBvbiB9IH0gfVxufTtcbmNvbnN0IGdyYW1zID0gdTEyODtcblxuZnVuY3Rpb24gY3VycmVuY3lDb2xsZWN0aW9uKCk6IFR5cGVEZWYge1xuICAgIHJldHVybiB7XG4gICAgICAgIGdyYW1zOiBncmFtcygpLFxuICAgICAgICBvdGhlcjogYXJyYXlPZih7XG4gICAgICAgICAgICBjdXJyZW5jeTogaTMyKCksXG4gICAgICAgICAgICB2YWx1ZTogdTEyOCgpLFxuICAgICAgICB9KSxcbiAgICB9O1xufVxuXG5jb25zdCBBY2NvdW50OiBUeXBlRGVmID0ge1xuICAgIF9kb2M6ICdUT04gQWNjb3VudCcsXG4gICAgXzogeyBjb2xsZWN0aW9uOiAnYWNjb3VudHMnIH0sXG4gICAgYWNjX3R5cGU6IHU4KCksXG4gICAgYWRkcjogc3RyaW5nKCksXG4gICAgbGFzdF9wYWlkOiB1MzIoKSxcbiAgICBkdWVfcGF5bWVudDogZ3JhbXMoKSxcbiAgICBsYXN0X3RyYW5zX2x0OiB1NjQoKSxcbiAgICBiYWxhbmNlOiBjdXJyZW5jeUNvbGxlY3Rpb24oKSxcbiAgICBzcGxpdF9kZXB0aDogdTgoKSxcbiAgICB0aWNrOiBib29sKCksXG4gICAgdG9jazogYm9vbCgpLFxuICAgIGNvZGU6IHN0cmluZygpLFxuICAgIGRhdGE6IHN0cmluZygpLFxuICAgIGxpYnJhcnk6IHN0cmluZygpLFxufTtcblxuY29uc3QgTWVzc2FnZTogVHlwZURlZiA9IHtcbiAgICBfZG9jOiAnVGhpcyBpcyBtZXNzYWdlJyxcbiAgICBfOiB7IGNvbGxlY3Rpb246ICdtZXNzYWdlcycgfSxcbiAgICBtc2dfdHlwZTogdTgoKSxcbiAgICB0cmFuc2FjdGlvbl9pZDogc3RyaW5nKCksXG4gICAgYmxvY2tfaWQ6IHN0cmluZygpLFxuICAgIGJvZHk6IHN0cmluZygpLFxuICAgIHN0YXR1czogdTgoKSxcbiAgICBzcGxpdF9kZXB0aDogdTgoKSxcbiAgICB0aWNrOiBib29sKCksXG4gICAgdG9jazogYm9vbCgpLFxuICAgIGNvZGU6IHN0cmluZygpLFxuICAgIGRhdGE6IHN0cmluZygpLFxuICAgIGxpYnJhcnk6IHN0cmluZygpLFxuICAgIHNyYzogc3RyaW5nKCksXG4gICAgZHN0OiBzdHJpbmcoKSxcbiAgICBjcmVhdGVkX2x0OiB1NjQoKSxcbiAgICBjcmVhdGVkX2F0OiB1MzIoKSxcbiAgICBpaHJfZGlzYWJsZWQ6IGJvb2woKSxcbiAgICBpaHJfZmVlOiBncmFtcygpLFxuICAgIGZ3ZF9mZWU6IGdyYW1zKCksXG4gICAgaW1wb3J0X2ZlZTogZ3JhbXMoKSxcbiAgICBib3VuY2U6IGJvb2woKSxcbiAgICBib3VuY2VkOiBib29sKCksXG4gICAgdmFsdWU6IGN1cnJlbmN5Q29sbGVjdGlvbigpLFxufTtcblxuXG5jb25zdCBUcmFuc2FjdGlvbjogVHlwZURlZiA9IHtcbiAgICBfZG9jOiAnVGhpcyBpcyB0cmFuc2FjdGlvbicsXG4gICAgXzogeyBjb2xsZWN0aW9uOiAndHJhbnNhY3Rpb25zJyB9LFxuICAgIHRyX3R5cGU6IHU4KCksXG4gICAgc3RhdHVzOiB1OCgpLFxuICAgIGFjY291bnRfYWRkcjogc3RyaW5nKCksXG4gICAgbHQ6IHU2NCgpLFxuICAgIHByZXZfdHJhbnNfaGFzaDogc3RyaW5nKCksXG4gICAgcHJldl90cmFuc19sdDogdTY0KCksXG4gICAgbm93OiB1MzIoKSxcbiAgICBvdXRtc2dfY250OiBpMzIoKSxcbiAgICBvcmlnX3N0YXR1czogdTgoKSxcbiAgICBlbmRfc3RhdHVzOiB1OCgpLFxuICAgIGluX21zZzogc3RyaW5nKCksXG4gICAgb3V0X21zZ3M6IGFycmF5T2Yoc3RyaW5nKCkpLFxuICAgIHRvdGFsX2ZlZXM6IGN1cnJlbmN5Q29sbGVjdGlvbigpLFxuICAgIG9sZF9oYXNoOiBzdHJpbmcoKSxcbiAgICBuZXdfaGFzaDogc3RyaW5nKCksXG4gICAgY3JlZGl0X2ZpcnN0OiBib29sKCksXG4gICAgc3RvcmFnZToge1xuICAgICAgICBzdG9yYWdlX2ZlZXNfY29sbGVjdGVkOiBncmFtcygpLFxuICAgICAgICBzdG9yYWdlX2ZlZXNfZHVlOiBncmFtcygpLFxuICAgICAgICBzdGF0dXNfY2hhbmdlOiB1OCgpLFxuICAgIH0sXG4gICAgY3JlZGl0OiB7XG4gICAgICAgIGR1ZV9mZWVzX2NvbGxlY3RlZDogZ3JhbXMoKSxcbiAgICAgICAgY3JlZGl0OiBjdXJyZW5jeUNvbGxlY3Rpb24oKSxcbiAgICB9LFxuICAgIGNvbXB1dGU6IHtcbiAgICAgICAgdHlwZTogdTgoKSwgLy8gMDogc2tpcHBlZCwgMTogVk1cbiAgICAgICAgc2tpcHBlZF9yZWFzb246IHU4KCksXG4gICAgICAgIHN1Y2Nlc3M6IGJvb2woKSxcbiAgICAgICAgbXNnX3N0YXRlX3VzZWQ6IGJvb2woKSxcbiAgICAgICAgYWNjb3VudF9hY3RpdmF0ZWQ6IGJvb2woKSxcbiAgICAgICAgZ2FzX2ZlZXM6IGdyYW1zKCksXG4gICAgICAgIGdhc191c2VkOiB1NjQoKSxcbiAgICAgICAgZ2FzX2xpbWl0OiB1NjQoKSxcbiAgICAgICAgZ2FzX2NyZWRpdDogaTMyKCksXG4gICAgICAgIG1vZGU6IGk4KCksXG4gICAgICAgIGV4aXRfY29kZTogaTMyKCksXG4gICAgICAgIGV4aXRfYXJnOiBpMzIoKSxcbiAgICAgICAgdm1fc3RlcHM6IHUzMigpLFxuICAgICAgICB2bV9pbml0X3N0YXRlX2hhc2g6IHN0cmluZygpLFxuICAgICAgICB2bV9maW5hbF9zdGF0ZV9oYXNoOiBzdHJpbmcoKSxcbiAgICB9LFxuICAgIGFjdGlvbjoge1xuICAgICAgICBzdWNjZXNzOiBib29sKCksXG4gICAgICAgIHZhbGlkOiBib29sKCksXG4gICAgICAgIG5vX2Z1bmRzOiBib29sKCksXG4gICAgICAgIHN0YXR1c19jaGFuZ2U6IHU4KCksXG4gICAgICAgIHRvdGFsX2Z3ZF9mZWVzOiBncmFtcygpLFxuICAgICAgICB0b3RhbF9hY3Rpb25fZmVlczogZ3JhbXMoKSxcbiAgICAgICAgcmVzdWx0X2NvZGU6IGkzMigpLFxuICAgICAgICByZXN1bHRfYXJnOiBpMzIoKSxcbiAgICAgICAgdG90X2FjdGlvbnM6IGkzMigpLFxuICAgICAgICBzcGVjX2FjdGlvbnM6IGkzMigpLFxuICAgICAgICBza2lwcGVkX2FjdGlvbnM6IGkzMigpLFxuICAgICAgICBtc2dzX2NyZWF0ZWQ6IGkzMigpLFxuICAgICAgICBhY3Rpb25fbGlzdF9oYXNoOiBzdHJpbmcoKSxcbiAgICAgICAgdG90YWxfbXNnX3NpemVfY2VsbHM6IHUzMigpLFxuICAgICAgICB0b3RhbF9tc2dfc2l6ZV9iaXRzOiB1MzIoKSxcbiAgICB9LFxuICAgIGJvdW5jZToge1xuICAgICAgICB0eXBlOiB1OCgpLCAvLyAwOiBOZWdmdW5kcywgMTogTm9mdW5kcywgMjogT2tcbiAgICAgICAgbXNnX3NpemVfY2VsbHM6IHUzMigpLFxuICAgICAgICBtc2dfc2l6ZV9iaXRzOiB1MzIoKSxcbiAgICAgICAgcmVxX2Z3ZF9mZWVzOiBncmFtcygpLFxuICAgICAgICBtc2dfZmVlczogZ3JhbXMoKSxcbiAgICAgICAgZndkX2ZlZXM6IGdyYW1zKCksXG4gICAgfSxcbiAgICBhYm9ydGVkOiBib29sKCksXG4gICAgZGVzdHJveWVkOiBib29sKCksXG4gICAgdHQ6IHN0cmluZygpLFxuICAgIHNwbGl0X2luZm86IHtcbiAgICAgICAgY3VyX3NoYXJkX3BmeF9sZW46IHU4KCksXG4gICAgICAgIGFjY19zcGxpdF9kZXB0aDogdTgoKSxcbiAgICAgICAgdGhpc19hZGRyOiBzdHJpbmcoKSxcbiAgICAgICAgc2libGluZ19hZGRyOiBzdHJpbmcoKSxcbiAgICB9LFxuICAgIHByZXBhcmVfdHJhbnNhY3Rpb246IHN0cmluZygpLFxuICAgIGluc3RhbGxlZDogYm9vbCgpLFxufTtcblxuLy8gQkxPQ0tcblxuY29uc3QgRXh0QmxrUmVmOiBUeXBlRGVmID0ge1xuICAgIGVuZF9sdDogdTY0KCksXG4gICAgc2VxX25vOiB1MzIoKSxcbiAgICByb290X2hhc2g6IHN0cmluZygpLFxuICAgIGZpbGVfaGFzaDogc3RyaW5nKClcbn07XG5cbmNvbnN0IE1zZ0VudmVsb3BlOiBUeXBlRGVmID0ge1xuICAgIG1zZzogc3RyaW5nKCksXG4gICAgbmV4dF9hZGRyOiBzdHJpbmcoKSxcbiAgICBjdXJfYWRkcjogc3RyaW5nKCksXG4gICAgZndkX2ZlZV9yZW1haW5pbmc6IGdyYW1zKCksXG59O1xuXG5jb25zdCBJbk1zZzogVHlwZURlZiA9IHtcbiAgICBtc2dfdHlwZTogdTgoKSwgLy8gRXh0ZXJuYWw6IDAsIElIUjogMSwgSW1tZWRpYXRlbGx5OiAyLCBGaW5hbDogMywgVHJhbnNpdDogNCwgRGlzY2FyZGVkRmluYWw6IDUsIERpc2NhcmRlZFRyYW5zaXQ6IDZcbiAgICBtc2c6IHN0cmluZygpLFxuICAgIHRyYW5zYWN0aW9uOiBzdHJpbmcoKSxcbiAgICBpaHJfZmVlOiBncmFtcygpLFxuICAgIHByb29mX2NyZWF0ZWQ6IHN0cmluZygpLFxuICAgIGluX21zZzogcmVmKHsgTXNnRW52ZWxvcGUgfSksXG4gICAgZndkX2ZlZTogZ3JhbXMoKSxcbiAgICBvdXRfbXNnOiByZWYoeyBNc2dFbnZlbG9wZSB9KSxcbiAgICB0cmFuc2l0X2ZlZTogZ3JhbXMoKSxcbiAgICB0cmFuc2FjdGlvbl9pZDogdTY0KCksXG4gICAgcHJvb2ZfZGVsaXZlcmVkOiBzdHJpbmcoKVxufTtcblxuY29uc3QgT3V0TXNnOiBUeXBlRGVmID0ge1xuICAgIG1zZ190eXBlOiB1OCgpLCAvLyBOb25lOiAwLCBFeHRlcm5hbDogMSwgSW1tZWRpYXRlbHk6IDIsIE91dE1zZ05ldzogMywgVHJhbnNpdDogNCwgRGVxdWV1ZTogNSwgVHJhbnNpdFJlcXVpcmVkOiA2XG4gICAgbXNnOiBzdHJpbmcoKSxcbiAgICB0cmFuc2FjdGlvbjogc3RyaW5nKCksXG4gICAgb3V0X21zZzogcmVmKHsgTXNnRW52ZWxvcGUgfSksXG4gICAgcmVpbXBvcnQ6IHJlZih7IEluTXNnIH0pLFxuICAgIGltcG9ydGVkOiByZWYoeyBJbk1zZyB9KSxcbiAgICBpbXBvcnRfYmxvY2tfbHQ6IHU2NCgpLFxufTtcblxuY29uc3QgQmxvY2s6IFR5cGVEZWYgPSB7XG4gICAgX2RvYzogJ1RoaXMgaXMgQmxvY2snLFxuICAgIF86IHsgY29sbGVjdGlvbjogJ2Jsb2NrcycgfSxcbiAgICBzdGF0dXM6IHN0cmluZygpLFxuICAgIGdsb2JhbF9pZDogdTMyKCksXG4gICAgaW5mbzoge1xuICAgICAgICB3YW50X3NwbGl0OiBib29sKCksXG4gICAgICAgIHNlcV9ubzogdTMyKCksXG4gICAgICAgIGFmdGVyX21lcmdlOiBib29sKCksXG4gICAgICAgIGdlbl91dGltZTogaTMyKCksXG4gICAgICAgIGdlbl9jYXRjaGFpbl9zZXFubzogdTMyKCksXG4gICAgICAgIGZsYWdzOiB1MTYoKSxcbiAgICAgICAgcHJldl9yZWY6IHtcbiAgICAgICAgICAgIHByZXY6IHtcbiAgICAgICAgICAgICAgICBzZXFfbm86IHUzMigpLFxuICAgICAgICAgICAgICAgIGZpbGVfaGFzaDogc3RyaW5nKCksXG4gICAgICAgICAgICAgICAgcm9vdF9oYXNoOiBzdHJpbmcoKSxcbiAgICAgICAgICAgICAgICBlbmRfbHQ6IHU2NCgpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHZlcnNpb246IHUzMigpLFxuICAgICAgICBnZW5fdmFsaWRhdG9yX2xpc3RfaGFzaF9zaG9ydDogdTMyKCksXG4gICAgICAgIGJlZm9yZV9zcGxpdDogYm9vbCgpLFxuICAgICAgICBhZnRlcl9zcGxpdDogYm9vbCgpLFxuICAgICAgICB3YW50X21lcmdlOiBib29sKCksXG4gICAgICAgIHZlcnRfc2VxX25vOiB1MzIoKSxcbiAgICAgICAgc3RhcnRfbHQ6IHU2NCgpLFxuICAgICAgICBlbmRfbHQ6IHU2NCgpLFxuICAgICAgICBzaGFyZDoge1xuICAgICAgICAgICAgc2hhcmRfcGZ4X2JpdHM6IHU4KCksXG4gICAgICAgICAgICB3b3JrY2hhaW5faWQ6IGkzMigpLFxuICAgICAgICAgICAgc2hhcmRfcHJlZml4OiB1NjQoKSxcbiAgICAgICAgfSxcbiAgICAgICAgbWluX3JlZl9tY19zZXFubzogdTMyKCksXG4gICAgICAgIG1hc3Rlcl9yZWY6IHtcbiAgICAgICAgICAgIG1hc3RlcjogcmVmKHsgRXh0QmxrUmVmIH0pXG4gICAgICAgIH0sXG4gICAgICAgIHByZXZfdmVydF9yZWY6IHtcbiAgICAgICAgICAgIHByZXY6IHJlZih7IEV4dEJsa1JlZiB9KSxcbiAgICAgICAgICAgIHByZXZfYWx0OiByZWYoeyBFeHRCbGtSZWYgfSlcbiAgICAgICAgfVxuICAgIH0sXG4gICAgdmFsdWVfZmxvdzoge1xuICAgICAgICB0b19uZXh0X2JsazogY3VycmVuY3lDb2xsZWN0aW9uKCksXG4gICAgICAgIGV4cG9ydGVkOiBjdXJyZW5jeUNvbGxlY3Rpb24oKSxcbiAgICAgICAgZmVlc19jb2xsZWN0ZWQ6IGN1cnJlbmN5Q29sbGVjdGlvbigpLFxuICAgICAgICBjcmVhdGVkOiBjdXJyZW5jeUNvbGxlY3Rpb24oKSxcbiAgICAgICAgaW1wb3J0ZWQ6IGN1cnJlbmN5Q29sbGVjdGlvbigpLFxuICAgICAgICBmcm9tX3ByZXZfYmxrOiBjdXJyZW5jeUNvbGxlY3Rpb24oKSxcbiAgICAgICAgbWludGVkOiBjdXJyZW5jeUNvbGxlY3Rpb24oKSxcbiAgICAgICAgZmVlc19pbXBvcnRlZDogY3VycmVuY3lDb2xsZWN0aW9uKCksXG4gICAgfSxcbiAgICBleHRyYToge1xuICAgICAgICBpbl9tc2dfZGVzY3I6IGFycmF5T2YocmVmKHsgSW5Nc2cgfSkpLFxuICAgICAgICByYW5kX3NlZWQ6IHN0cmluZygpLFxuICAgICAgICBvdXRfbXNnX2Rlc2NyOiBhcnJheU9mKHJlZih7IE91dE1zZyB9KSksXG4gICAgICAgIGFjY291bnRfYmxvY2tzOiBhcnJheU9mKHtcbiAgICAgICAgICAgIGFjY291bnRfYWRkcjogc3RyaW5nKCksXG4gICAgICAgICAgICB0cmFuc2FjdGlvbnM6IGFycmF5T2Yoc3RyaW5nKCkpLFxuICAgICAgICAgICAgc3RhdGVfdXBkYXRlOiB7XG4gICAgICAgICAgICAgICAgb2xkX2hhc2g6IHN0cmluZygpLFxuICAgICAgICAgICAgICAgIG5ld19oYXNoOiBzdHJpbmcoKVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRyX2NvdW50OiBpMzIoKVxuICAgICAgICB9KVxuICAgIH0sXG4gICAgc3RhdGVfdXBkYXRlOiB7XG4gICAgICAgIG5ldzogc3RyaW5nKCksXG4gICAgICAgIG5ld19oYXNoOiBzdHJpbmcoKSxcbiAgICAgICAgbmV3X2RlcHRoOiB1MTYoKSxcbiAgICAgICAgb2xkOiBzdHJpbmcoKSxcbiAgICAgICAgb2xkX2hhc2g6IHN0cmluZygpLFxuICAgICAgICBvbGRfZGVwdGg6IHUxNigpXG4gICAgfVxufTtcblxuXG4vL1Jvb3Qgc2NoZW1lIGRlY2xhcmF0aW9uXG5cbmNvbnN0IHNjaGVtYTogVHlwZURlZiA9IHtcbiAgICBfY2xhc3M6IHtcbiAgICAgICAgdHlwZXM6IHtcbiAgICAgICAgICAgIEV4dEJsa1JlZixcbiAgICAgICAgICAgIE1zZ0VudmVsb3BlLFxuICAgICAgICAgICAgSW5Nc2csXG4gICAgICAgICAgICBPdXRNc2csXG4gICAgICAgICAgICBNZXNzYWdlLFxuICAgICAgICAgICAgQmxvY2ssXG4gICAgICAgICAgICBBY2NvdW50LFxuICAgICAgICAgICAgVHJhbnNhY3Rpb24sXG4gICAgICAgIH1cbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBzY2hlbWE7XG4iXX0=