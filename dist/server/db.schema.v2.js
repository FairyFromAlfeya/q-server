"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _schema = require("ton-labs-dev-ops/dist/src/schema");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var string = _schema.Def.string,
    _int = _schema.Def["int"],
    bool = _schema.Def.bool,
    ref = _schema.Def.ref,
    arrayOf = _schema.Def.arrayOf,
    unionOf = _schema.Def.unionOf; // Types scheme begin

function uint(size, doc) {
  return _objectSpread({
    _int: {
      unsigned: size
    }
  }, doc ? {
    _doc: doc
  } : {});
}

function i8(doc) {
  return _objectSpread({
    _int: {
      signed: 8
    }
  }, doc ? {
    _doc: doc
  } : {});
}

function i32(doc) {
  return _objectSpread({
    _int: {
      signed: 32
    }
  }, doc ? {
    _doc: doc
  } : {});
}

var u8 = function u8(doc) {
  return uint(8, doc);
};

var u16 = function u16(doc) {
  return uint(16, doc);
};

var u32 = function u32(doc) {
  return uint(32, doc);
};

var u64 = function u64(doc) {
  return uint(64, doc);
};

var u128 = function u128(doc) {
  return uint(128, doc);
};

var join = function join(refDef, on) {
  return _objectSpread({}, ref(refDef), {
    _: {
      join: {
        on: on
      }
    }
  });
};

var Account = {
  _doc: 'TON Account',
  _: {
    collection: 'accounts'
  },
  acc_type: u8(),
  addr: string(),
  last_paid: u32(),
  due_payment: u32(),
  last_trans_lt: u32(),
  balance_grams: string(),
  split_depth: u32(),
  tick: bool(),
  tock: bool(),
  code: string(),
  data: string(),
  library: string()
};
var Message = {
  _doc: 'This is message',
  _: {
    collection: 'messages'
  },
  msg_type: u8(),
  transaction_id: string(),
  block_id: string(),
  body: string(),
  status: u8(),
  split_depth: u8(),
  tick: bool(),
  tock: bool(),
  code: string(),
  data: string(),
  library: string(),
  src: string(),
  dst: string(),
  created_lt: u32(),
  created_at: u32(),
  ihr_disabled: bool(),
  ihr_fee: u32(),
  fwd_fee: u32(),
  import_fee: u32(),
  bounce: bool(),
  bounced: bool(),
  value_grams: string()
};
var Transaction = {
  _doc: 'This is transaction',
  _: {
    collection: 'transactions'
  },
  tr_type: u8(),
  status: u8(),
  account_addr: string(),
  lt: u64(),
  last_trans_lt: u64(),
  prev_trans_hash: string(),
  prev_trans_lt: u64(),
  now: u32(),
  outmsg_cnt: u32(),
  orig_status: u8(),
  end_status: u8(),
  in_msg: string(),
  out_msgs: arrayOf(string()),
  total_fees: u64(),
  old_hash: string(),
  new_hash: string(),
  credit_first: bool(),
  storage: {
    storage_fees_collected: u32(),
    storage_fees_due: u32(),
    status_change: u8()
  },
  credit: {
    due_fees_collected: u32(),
    credit_grams: u64()
  },
  compute: {
    type: u8(),
    // 0: skipped, 1: VM
    skipped_reason: u8(),
    success: bool(),
    msg_state_used: bool(),
    account_activated: bool(),
    gas_fees: u64(),
    gas_used: u64(),
    gas_limit: u64(),
    gas_credit: u64(),
    mode: u8(),
    exit_code: u32(),
    exit_arg: u32(),
    vm_steps: u32(),
    vm_init_state_hash: string(),
    vm_final_state_hash: string()
  },
  action: {
    success: bool(),
    valid: bool(),
    no_funds: bool(),
    status_change: u8(),
    total_fwd_fees: u64(),
    total_action_fees: u64(),
    result_code: u32(),
    result_arg: u32(),
    tot_actions: u32(),
    spec_actions: u32(),
    skipped_actions: u32(),
    msgs_created: u32(),
    action_list_hash: string(),
    total_msg_size_cells: u32(),
    total_msg_size_bits: u32()
  },
  bounce: {
    type: u8(),
    // 0: Negfunds, 1: Nofunds, 2: Ok
    msg_size_cells: u32(),
    msg_size_bits: u32(),
    req_fwd_fees: u64(),
    msg_fees: u64(),
    fwd_fees: u64()
  },
  aborted: bool(),
  destroyed: bool(),
  tt: string(),
  split_info: {
    cur_shard_pfx_len: u8(),
    acc_split_depth: u8(),
    this_addr: string(),
    sibling_addr: string()
  },
  prepare_transaction: string(),
  installed: bool()
}; // BLOCK

var ExtBlkRef = {
  end_lt: u64(),
  seq_no: u32(),
  root_hash: string(),
  file_hash: string()
};
var MsgEnvelope = {
  msg: string(),
  next_addr: string(),
  cur_addr: string(),
  fwd_fee_remaining_grams: u128()
};
var InMsg = {
  msg_type: u8(),
  // External: 0, IHR: 1, Immediatelly: 2, Final: 3, Transit: 4, DiscardedFinal: 5, DiscardedTransit: 6
  msg: string(),
  transaction: string(),
  ihr_fee: i32(),
  proof_created: string(),
  in_msg: ref({
    MsgEnvelope: MsgEnvelope
  }),
  fwd_fee: i32(),
  out_msg: ref({
    MsgEnvelope: MsgEnvelope
  }),
  transit_fee: i32(),
  transaction_id: string(),
  proof_delivered: string()
};
var OutMsg = {
  msg_type: u8(),
  // None: 0, External: 1, Immediately: 2, OutMsgNew: 3, Transit: 4, Dequeue: 5, TransitRequired: 6
  msg: string(),
  transaction: string(),
  out_msg: ref({
    MsgEnvelope: MsgEnvelope
  }),
  reimport: ref({
    InMsg: InMsg
  }),
  imported: ref({
    InMsg: InMsg
  }),
  import_block_lt: u64()
};
var Block = {
  _doc: 'This is Block',
  _: {
    collection: 'blocks'
  },
  status: string(),
  global_id: u32(),
  info: {
    want_split: bool(),
    seq_no: u32(),
    after_merge: bool(),
    gen_utime: i32(),
    gen_catchain_seqno: u32(),
    flags: u16(),
    prev_ref: {
      prev: {
        seq_no: i32(),
        file_hash: string(),
        root_hash: string(),
        end_lt: i32()
      }
    },
    version: u32(),
    gen_validator_list_hash_short: u32(),
    before_split: bool(),
    after_split: bool(),
    want_merge: bool(),
    vert_seq_no: i32(),
    start_lt: u64(),
    end_lt: u64(),
    shard: {
      shard_pfx_bits: u8(),
      workchain_id: i32(),
      shard_prefix: string()
    },
    min_ref_mc_seqno: u32(),
    master_ref: {
      master: ref({
        ExtBlkRef: ExtBlkRef
      })
    },
    prev_vert_ref: {
      prev: ref({
        ExtBlkRef: ExtBlkRef
      }),
      prev_alt: ref({
        ExtBlkRef: ExtBlkRef
      })
    }
  },
  value_flow: {
    to_next_blk_grams: u128(),
    exported_grams: u128(),
    fees_collected_grams: u128(),
    created_grams: u128(),
    imported_grams: u128(),
    from_prev_blk_grams: u128(),
    minted_grams: u128(),
    fees_imported_grams: u128()
  },
  extra: {
    in_msg_descr: arrayOf(ref({
      InMsg: InMsg
    })),
    rand_seed: string(),
    out_msg_descr: arrayOf(ref({
      OutMsg: OutMsg
    })),
    account_blocks: arrayOf({
      account_addr: string(),
      transactions: arrayOf(string()),
      state_update: {
        old_hash: string(),
        new_hash: string()
      },
      tr_count: i32()
    })
  },
  state_update: {
    "new": string(),
    new_hash: string(),
    new_depth: i32(),
    old: string(),
    old_hash: string(),
    old_depth: i32()
  }
}; //Root scheme declaration

var schema = {
  _class: {
    types: {
      ExtBlkRef: ExtBlkRef,
      MsgEnvelope: MsgEnvelope,
      InMsg: InMsg,
      OutMsg: OutMsg,
      Message: Message,
      Block: Block,
      Account: Account,
      Transaction: Transaction
    }
  }
};
var _default = schema;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,