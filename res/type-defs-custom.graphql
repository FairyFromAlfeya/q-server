"Request with external inbound message"
input Request {
    "256-bit Hash of message in base64"
    id: String
    "Serialized message in base64"
    body: String
    "Message expiration time (unix time in ms)"
    expireAt: Float
}

" GraphQL Server info"
type Info {
    " Server version "
    version: String
    " Server unix time in ms"
    time: Float
    " Server unix time in sec"
    lastBlockTime: Float,
    " Alternative endpoints of q-server"
    endpoints: [String]
}

"Aggregation function used to collect aggregated value"
enum AggregationFn {
    "Returns count of filtered record"
    COUNT
    "Returns the minimal value for a field in filtered records"
    MIN
    "Returns the maximal value for a field in filtered records"
    MAX
    "Returns a sum of values for a field in filtered records"
    SUM
    "Returns an average value for a field in filtered records"
    AVERAGE
}


"Specify field and aggregation function used to collect aggregated value"
input FieldAggregation {
    "Dot separated path to field. Can be omitted for COUNT fn."
    field: String
    "Aggregation function. Default value is COUNT."
    fn: AggregationFn
}

type SlowReason {
    summary: String
    fields: [String]
    selectedIndexes: [String],
    availableIndexes: [String],
}

type QueryExplanation {
    isFast: Boolean
    slowReason: SlowReason
}

extend type Query {
    info: Info
    "Obsolete. Use aggregation queries instead."
    getAccountsCount(accessKey: String): Float
    "Obsolete. Use aggregation queries instead."
    getTransactionsCount(accessKey: String): Float
    "Obsolete. Use aggregation queries instead."
    getAccountsTotalBalance(accessKey: String): String

    "Returns one time access key for management functions"
    getManagementAccessKey: String

    "Compute aggregated values for specified fields"
    aggregateBlockSignatures(
        "Specify filter for records to aggregate"
        filter: BlockSignaturesFilter,
        "Specify list of fields to collect aggregated values"
        fields: [FieldAggregation],
        "Specify access key if required"
        accessKey: String
    ): [String]

    "Compute aggregated values for specified fields"
    aggregateBlocks(
        "Specify filter for records to aggregate"
        filter: BlockFilter,
        "Specify list of fields to collect aggregated values"
        fields: [FieldAggregation],
        "Specify access key if required"
        accessKey: String
    ): [String]

    "Compute aggregated values for specified fields"
    aggregateTransactions(
        "Specify filter for records to aggregate"
        filter: TransactionFilter,
        "Specify list of fields to collect aggregated values"
        fields: [FieldAggregation],
        "Specify access key if required"
        accessKey: String
    ): [String]

    "Compute aggregated values for specified fields"
    aggregateMessages(
        "Specify filter for records to aggregate"
        filter: MessageFilter,
        "Specify list of fields to collect aggregated values"
        fields: [FieldAggregation],
        "Specify access key if required"
        accessKey: String
    ): [String]

    "Compute aggregated values for specified fields"
    aggregateAccounts(
        "Specify filter for records to aggregate"
        filter: AccountFilter,
        "Specify list of fields to collect aggregated values"
        fields: [FieldAggregation],
        "Specify access key if required"
        accessKey: String
    ): [String]

    "Determine if specified block signatures query is fast or slow"
	explainQueryBlockSignatures(filter: BlockSignaturesFilter, orderBy: [QueryOrderBy]): QueryExplanation
    "Determine if specified blocks query is fast or slow"
	explainQueryBlocks(filter: BlockFilter, orderBy: [QueryOrderBy]): QueryExplanation
    "Determine if specified transactions query is fast or slow"
	explainQueryTransactions(filter: TransactionFilter, orderBy: [QueryOrderBy]): QueryExplanation
    "Determine if specified messages query is fast or slow"
	explainQueryMessages(filter: MessageFilter, orderBy: [QueryOrderBy]): QueryExplanation
    "Determine if specified accounts query is fast or slow"
	explainQueryAccounts(filter: AccountFilter, orderBy: [QueryOrderBy]): QueryExplanation
    "Determine if specified zerostates query is fast or slow"
	explainQueryZerostates(filter: ZerostateFilter, orderBy: [QueryOrderBy]): QueryExplanation
}

input AccessKey {
    "User defined access key"
    key: String
    """
    Additional restrictions to specified accounts.
    User will see only subset of a blockchain related to specified accounts.
    If omitted or is an empty array then user has no restrictions.
    """
    restrictToAccounts: [String]
}

type Mutation {
    "Post external inbound message to blockchain node."
    postRequests(
        "List of message requests"
        requests: [Request],
        "Access key if required"
        accessKey: String
    ): [String]

    "Register GraphQL services access keys. Returns number of actually registered keys"
    registerAccessKeys(
        "Account contract address"
        account: String,
        "Access keys associated with account"
        keys: [AccessKey],
        "Management access key obtained with getManagementAccessKey and signed using key pair of account contract"
        signedManagementAccessKey: String,
    ): Int

    "Revoke GraphQL services access keys. Returns number of actually revoked keys"
    revokeAccessKeys(
        "Account contract address"
        account: String,
        "Access keys associated with account"
        keys: [String],
        "Management access key obtained with getManagementAccessKey and signed using key pair of account contract"
        signedManagementAccessKey: String,
    ): Int

    "Stop listeners for specified operations"
    finishOperations(
        "Operation identifiers"
        operationIds: [String],
    ): Int
}
