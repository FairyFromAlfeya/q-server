type TrComputePhase {
    Vm: TrComputePhaseVm
    Skipped: TrComputePhaseSkipped
}

enum ComputeSkipReason {
    NoState
    BadState
    NoGas
}

type TrComputePhaseSkipped {
    reason: ComputeSkipReason
}

type TrComputePhaseSkippedWrapper {
    Skipped: TrComputePhaseSkipped
}

type TrComputePhaseVm {
    success: Boolean
    exit_code: Int
}

type TrComputePhaseVmWrapper {
    Vm: TrComputePhaseVm
}

type TransactionDescr {
    Ordinary: TransactionDescrOrdinary
}

type TransactionDescrOrdinary {
    aborted: Boolean
    compute_ph: TrComputePhase
}

type Transaction {
    id: String
    status: String
    now: Int
    in_msg: String
    out_msgs: [String]
    aborted: Boolean
    block_id: String
    account_addr: String
    description: TransactionDescr
}

type Message {
    id: String
    status: String
    body: String
    block_id: String
}

type Block {
    id: String
    status: String
}

type AccountBalance {
    Grams: String
}

type Account {
    id: String
    balance: AccountBalance
    last_trans_lt: Int
}

type Query {
    transactions(filter: String): [Transaction]
    messages(filter: String): [Message]
    accounts(filter: String): [Account]
    blocks(filter: String): [Block]
    select(query: String!, bindVarsJson: String!): String!
}

type Subscription {
    transactions(match: String): Transaction
    messages(match: String): Message
    accounts(match: String): Account
    blocks(match: String): Block
}
