input StringFilter {
	eq: String
	ne: String
	gt: String
	lt: String
	ge: String
	le: String
	in: [String]
	notIn: [String]
}

input BooleanFilter {
	eq: Boolean
	ne: Boolean
	gt: Boolean
	lt: Boolean
	ge: Boolean
	le: Boolean
	in: [Boolean]
	notIn: [Boolean]
}

input IntFilter {
	eq: Int
	ne: Int
	gt: Int
	lt: Int
	ge: Int
	le: Int
	in: [Int]
	notIn: [Int]
}

input FloatFilter {
	eq: Float
	ne: Float
	gt: Float
	lt: Float
	ge: Float
	le: Float
	in: [Float]
	notIn: [Float]
}

type ExtBlkRef {
	end_lt: Int
	seq_no: Int
	root_hash: String
	file_hash: String
}

type MsgEnvelope {
	msg: String
	next_addr: String
	cur_addr: String
	fwd_fee_remaining: Int
}

type InMsg {
	msg_type: Int
	msg: String
	transaction: String
	ihr_fee: Int
	proof_created: String
	in_msg: MsgEnvelope
	fwd_fee: Int
	out_msg: MsgEnvelope
	transit_fee: Int
	transaction_id: Int
	proof_delivered: String
}

type OutMsg {
	msg_type: Int
	msg: String
	transaction: String
	out_msg: MsgEnvelope
	reimport: InMsg
	imported: InMsg
	import_block_lt: Int
}

type MessageValueOther {
	currency: Int
	value: Int
}

type MessageValue {
	grams: Int
	other: [MessageValueOther]
}

type Message {
	id: String
	msg_type: Int
	status: Int
	transaction_id: String
	block_id: String
	body: String
	split_depth: Int
	tick: Boolean
	tock: Boolean
	code: String
	data: String
	library: String
	src: String
	dst: String
	created_lt: Int
	created_at: Int
	ihr_disabled: Boolean
	ihr_fee: Int
	fwd_fee: Int
	import_fee: Int
	bounce: Boolean
	bounced: Boolean
	value: MessageValue
}

type BlockShard {
	shard_pfx_bits: Int
	workchain_id: Int
	shard_prefix: Int
}

type BlockValueFlowToNextBlkOther {
	currency: Int
	value: Int
}

type BlockValueFlowToNextBlk {
	grams: Int
	other: [BlockValueFlowToNextBlkOther]
}

type BlockValueFlowExportedOther {
	currency: Int
	value: Int
}

type BlockValueFlowExported {
	grams: Int
	other: [BlockValueFlowExportedOther]
}

type BlockValueFlowFeesCollectedOther {
	currency: Int
	value: Int
}

type BlockValueFlowFeesCollected {
	grams: Int
	other: [BlockValueFlowFeesCollectedOther]
}

type BlockValueFlowCreatedOther {
	currency: Int
	value: Int
}

type BlockValueFlowCreated {
	grams: Int
	other: [BlockValueFlowCreatedOther]
}

type BlockValueFlowImportedOther {
	currency: Int
	value: Int
}

type BlockValueFlowImported {
	grams: Int
	other: [BlockValueFlowImportedOther]
}

type BlockValueFlowFromPrevBlkOther {
	currency: Int
	value: Int
}

type BlockValueFlowFromPrevBlk {
	grams: Int
	other: [BlockValueFlowFromPrevBlkOther]
}

type BlockValueFlowMintedOther {
	currency: Int
	value: Int
}

type BlockValueFlowMinted {
	grams: Int
	other: [BlockValueFlowMintedOther]
}

type BlockValueFlowFeesImportedOther {
	currency: Int
	value: Int
}

type BlockValueFlowFeesImported {
	grams: Int
	other: [BlockValueFlowFeesImportedOther]
}

type BlockValueFlow {
	to_next_blk: BlockValueFlowToNextBlk
	exported: BlockValueFlowExported
	fees_collected: BlockValueFlowFeesCollected
	created: BlockValueFlowCreated
	imported: BlockValueFlowImported
	from_prev_blk: BlockValueFlowFromPrevBlk
	minted: BlockValueFlowMinted
	fees_imported: BlockValueFlowFeesImported
}

type BlockAccountBlocksStateUpdate {
	old_hash: String
	new_hash: String
}

type BlockAccountBlocks {
	account_addr: String
	transactions: [String]
	state_update: BlockAccountBlocksStateUpdate
	tr_count: Int
}

type BlockStateUpdate {
	new: String
	new_hash: String
	new_depth: Int
	old: String
	old_hash: String
	old_depth: Int
}

type Block {
	id: String
	status: String
	global_id: Int
	want_split: Boolean
	seq_no: Int
	after_merge: Boolean
	gen_utime: Int
	gen_catchain_seqno: Int
	flags: Int
	master_ref: ExtBlkRef
	prev_ref: ExtBlkRef
	prev_alt_ref: ExtBlkRef
	prev_vert_ref: ExtBlkRef
	prev_vert_alt_ref: ExtBlkRef
	version: Int
	gen_validator_list_hash_short: Int
	before_split: Boolean
	after_split: Boolean
	want_merge: Boolean
	vert_seq_no: Int
	start_lt: Int
	end_lt: Int
	shard: BlockShard
	min_ref_mc_seqno: Int
	value_flow: BlockValueFlow
	in_msg_descr: [InMsg]
	rand_seed: String
	out_msg_descr: [OutMsg]
	account_blocks: [BlockAccountBlocks]
	state_update: BlockStateUpdate
}

type AccountBalanceOther {
	currency: Int
	value: Int
}

type AccountBalance {
	grams: Int
	other: [AccountBalanceOther]
}

type Account {
	id: String
	acc_type: Int
	last_paid: Int
	due_payment: Int
	last_trans_lt: Int
	balance: AccountBalance
	split_depth: Int
	tick: Boolean
	tock: Boolean
	code: String
	data: String
	library: String
}

type TransactionTotalFeesOther {
	currency: Int
	value: Int
}

type TransactionTotalFees {
	grams: Int
	other: [TransactionTotalFeesOther]
}

type TransactionStorage {
	storage_fees_collected: Int
	storage_fees_due: Int
	status_change: Int
}

type TransactionCreditCreditOther {
	currency: Int
	value: Int
}

type TransactionCreditCredit {
	grams: Int
	other: [TransactionCreditCreditOther]
}

type TransactionCredit {
	due_fees_collected: Int
	credit: TransactionCreditCredit
}

type TransactionCompute {
	compute_type: Int
	skipped_reason: Int
	success: Boolean
	msg_state_used: Boolean
	account_activated: Boolean
	gas_fees: Int
	gas_used: Int
	gas_limit: Int
	gas_credit: Int
	mode: Int
	exit_code: Int
	exit_arg: Int
	vm_steps: Int
	vm_init_state_hash: String
	vm_final_state_hash: String
}

type TransactionAction {
	success: Boolean
	valid: Boolean
	no_funds: Boolean
	status_change: Int
	total_fwd_fees: Int
	total_action_fees: Int
	result_code: Int
	result_arg: Int
	tot_actions: Int
	spec_actions: Int
	skipped_actions: Int
	msgs_created: Int
	action_list_hash: String
	total_msg_size_cells: Int
	total_msg_size_bits: Int
}

type TransactionBounce {
	bounce_type: Int
	msg_size_cells: Int
	msg_size_bits: Int
	req_fwd_fees: Int
	msg_fees: Int
	fwd_fees: Int
}

type TransactionSplitInfo {
	cur_shard_pfx_len: Int
	acc_split_depth: Int
	this_addr: String
	sibling_addr: String
}

type Transaction {
	id: String
	tr_type: Int
	status: Int
	block_id: String
	account_addr: String
	lt: Int
	prev_trans_hash: String
	prev_trans_lt: Int
	now: Int
	outmsg_cnt: Int
	orig_status: Int
	end_status: Int
	in_msg: String
	out_msgs: [String]
	total_fees: TransactionTotalFees
	old_hash: String
	new_hash: String
	credit_first: Boolean
	storage: TransactionStorage
	credit: TransactionCredit
	compute: TransactionCompute
	action: TransactionAction
	bounce: TransactionBounce
	aborted: Boolean
	destroyed: Boolean
	tt: String
	split_info: TransactionSplitInfo
	prepare_transaction: String
	installed: Boolean
}

input ExtBlkRefFilter {
	end_lt: IntFilter
	seq_no: IntFilter
	root_hash: StringFilter
	file_hash: StringFilter
}

input MsgEnvelopeFilter {
	msg: StringFilter
	next_addr: StringFilter
	cur_addr: StringFilter
	fwd_fee_remaining: IntFilter
}

input InMsgFilter {
	msg_type: IntFilter
	msg: StringFilter
	transaction: StringFilter
	ihr_fee: IntFilter
	proof_created: StringFilter
	in_msg: MsgEnvelopeFilter
	fwd_fee: IntFilter
	out_msg: MsgEnvelopeFilter
	transit_fee: IntFilter
	transaction_id: IntFilter
	proof_delivered: StringFilter
}

input OutMsgFilter {
	msg_type: IntFilter
	msg: StringFilter
	transaction: StringFilter
	out_msg: MsgEnvelopeFilter
	reimport: InMsgFilter
	imported: InMsgFilter
	import_block_lt: IntFilter
}

input MessageValueOtherFilter {
	currency: IntFilter
	value: IntFilter
}

input MessageValueOtherArrayFilter {
	any: MessageValueOtherFilter
	all: MessageValueOtherFilter
}

input MessageValueFilter {
	grams: IntFilter
	other: MessageValueOtherArrayFilter
}

input MessageFilter {
	id: StringFilter
	msg_type: IntFilter
	status: IntFilter
	transaction_id: StringFilter
	block_id: StringFilter
	body: StringFilter
	split_depth: IntFilter
	tick: BooleanFilter
	tock: BooleanFilter
	code: StringFilter
	data: StringFilter
	library: StringFilter
	src: StringFilter
	dst: StringFilter
	created_lt: IntFilter
	created_at: IntFilter
	ihr_disabled: BooleanFilter
	ihr_fee: IntFilter
	fwd_fee: IntFilter
	import_fee: IntFilter
	bounce: BooleanFilter
	bounced: BooleanFilter
	value: MessageValueFilter
}

input BlockShardFilter {
	shard_pfx_bits: IntFilter
	workchain_id: IntFilter
	shard_prefix: IntFilter
}

input BlockValueFlowToNextBlkOtherFilter {
	currency: IntFilter
	value: IntFilter
}

input BlockValueFlowToNextBlkOtherArrayFilter {
	any: BlockValueFlowToNextBlkOtherFilter
	all: BlockValueFlowToNextBlkOtherFilter
}

input BlockValueFlowToNextBlkFilter {
	grams: IntFilter
	other: BlockValueFlowToNextBlkOtherArrayFilter
}

input BlockValueFlowExportedOtherFilter {
	currency: IntFilter
	value: IntFilter
}

input BlockValueFlowExportedOtherArrayFilter {
	any: BlockValueFlowExportedOtherFilter
	all: BlockValueFlowExportedOtherFilter
}

input BlockValueFlowExportedFilter {
	grams: IntFilter
	other: BlockValueFlowExportedOtherArrayFilter
}

input BlockValueFlowFeesCollectedOtherFilter {
	currency: IntFilter
	value: IntFilter
}

input BlockValueFlowFeesCollectedOtherArrayFilter {
	any: BlockValueFlowFeesCollectedOtherFilter
	all: BlockValueFlowFeesCollectedOtherFilter
}

input BlockValueFlowFeesCollectedFilter {
	grams: IntFilter
	other: BlockValueFlowFeesCollectedOtherArrayFilter
}

input BlockValueFlowCreatedOtherFilter {
	currency: IntFilter
	value: IntFilter
}

input BlockValueFlowCreatedOtherArrayFilter {
	any: BlockValueFlowCreatedOtherFilter
	all: BlockValueFlowCreatedOtherFilter
}

input BlockValueFlowCreatedFilter {
	grams: IntFilter
	other: BlockValueFlowCreatedOtherArrayFilter
}

input BlockValueFlowImportedOtherFilter {
	currency: IntFilter
	value: IntFilter
}

input BlockValueFlowImportedOtherArrayFilter {
	any: BlockValueFlowImportedOtherFilter
	all: BlockValueFlowImportedOtherFilter
}

input BlockValueFlowImportedFilter {
	grams: IntFilter
	other: BlockValueFlowImportedOtherArrayFilter
}

input BlockValueFlowFromPrevBlkOtherFilter {
	currency: IntFilter
	value: IntFilter
}

input BlockValueFlowFromPrevBlkOtherArrayFilter {
	any: BlockValueFlowFromPrevBlkOtherFilter
	all: BlockValueFlowFromPrevBlkOtherFilter
}

input BlockValueFlowFromPrevBlkFilter {
	grams: IntFilter
	other: BlockValueFlowFromPrevBlkOtherArrayFilter
}

input BlockValueFlowMintedOtherFilter {
	currency: IntFilter
	value: IntFilter
}

input BlockValueFlowMintedOtherArrayFilter {
	any: BlockValueFlowMintedOtherFilter
	all: BlockValueFlowMintedOtherFilter
}

input BlockValueFlowMintedFilter {
	grams: IntFilter
	other: BlockValueFlowMintedOtherArrayFilter
}

input BlockValueFlowFeesImportedOtherFilter {
	currency: IntFilter
	value: IntFilter
}

input BlockValueFlowFeesImportedOtherArrayFilter {
	any: BlockValueFlowFeesImportedOtherFilter
	all: BlockValueFlowFeesImportedOtherFilter
}

input BlockValueFlowFeesImportedFilter {
	grams: IntFilter
	other: BlockValueFlowFeesImportedOtherArrayFilter
}

input BlockValueFlowFilter {
	to_next_blk: BlockValueFlowToNextBlkFilter
	exported: BlockValueFlowExportedFilter
	fees_collected: BlockValueFlowFeesCollectedFilter
	created: BlockValueFlowCreatedFilter
	imported: BlockValueFlowImportedFilter
	from_prev_blk: BlockValueFlowFromPrevBlkFilter
	minted: BlockValueFlowMintedFilter
	fees_imported: BlockValueFlowFeesImportedFilter
}

input BlockAccountBlocksStateUpdateFilter {
	old_hash: StringFilter
	new_hash: StringFilter
}

input StringArrayFilter {
	any: StringFilter
	all: StringFilter
}

input BlockAccountBlocksFilter {
	account_addr: StringFilter
	transactions: StringArrayFilter
	state_update: BlockAccountBlocksStateUpdateFilter
	tr_count: IntFilter
}

input BlockStateUpdateFilter {
	new: StringFilter
	new_hash: StringFilter
	new_depth: IntFilter
	old: StringFilter
	old_hash: StringFilter
	old_depth: IntFilter
}

input InMsgArrayFilter {
	any: InMsgFilter
	all: InMsgFilter
}

input OutMsgArrayFilter {
	any: OutMsgFilter
	all: OutMsgFilter
}

input BlockAccountBlocksArrayFilter {
	any: BlockAccountBlocksFilter
	all: BlockAccountBlocksFilter
}

input BlockFilter {
	id: StringFilter
	status: StringFilter
	global_id: IntFilter
	want_split: BooleanFilter
	seq_no: IntFilter
	after_merge: BooleanFilter
	gen_utime: IntFilter
	gen_catchain_seqno: IntFilter
	flags: IntFilter
	master_ref: ExtBlkRefFilter
	prev_ref: ExtBlkRefFilter
	prev_alt_ref: ExtBlkRefFilter
	prev_vert_ref: ExtBlkRefFilter
	prev_vert_alt_ref: ExtBlkRefFilter
	version: IntFilter
	gen_validator_list_hash_short: IntFilter
	before_split: BooleanFilter
	after_split: BooleanFilter
	want_merge: BooleanFilter
	vert_seq_no: IntFilter
	start_lt: IntFilter
	end_lt: IntFilter
	shard: BlockShardFilter
	min_ref_mc_seqno: IntFilter
	value_flow: BlockValueFlowFilter
	in_msg_descr: InMsgArrayFilter
	rand_seed: StringFilter
	out_msg_descr: OutMsgArrayFilter
	account_blocks: BlockAccountBlocksArrayFilter
	state_update: BlockStateUpdateFilter
}

input AccountBalanceOtherFilter {
	currency: IntFilter
	value: IntFilter
}

input AccountBalanceOtherArrayFilter {
	any: AccountBalanceOtherFilter
	all: AccountBalanceOtherFilter
}

input AccountBalanceFilter {
	grams: IntFilter
	other: AccountBalanceOtherArrayFilter
}

input AccountFilter {
	id: StringFilter
	acc_type: IntFilter
	last_paid: IntFilter
	due_payment: IntFilter
	last_trans_lt: IntFilter
	balance: AccountBalanceFilter
	split_depth: IntFilter
	tick: BooleanFilter
	tock: BooleanFilter
	code: StringFilter
	data: StringFilter
	library: StringFilter
}

input TransactionTotalFeesOtherFilter {
	currency: IntFilter
	value: IntFilter
}

input TransactionTotalFeesOtherArrayFilter {
	any: TransactionTotalFeesOtherFilter
	all: TransactionTotalFeesOtherFilter
}

input TransactionTotalFeesFilter {
	grams: IntFilter
	other: TransactionTotalFeesOtherArrayFilter
}

input TransactionStorageFilter {
	storage_fees_collected: IntFilter
	storage_fees_due: IntFilter
	status_change: IntFilter
}

input TransactionCreditCreditOtherFilter {
	currency: IntFilter
	value: IntFilter
}

input TransactionCreditCreditOtherArrayFilter {
	any: TransactionCreditCreditOtherFilter
	all: TransactionCreditCreditOtherFilter
}

input TransactionCreditCreditFilter {
	grams: IntFilter
	other: TransactionCreditCreditOtherArrayFilter
}

input TransactionCreditFilter {
	due_fees_collected: IntFilter
	credit: TransactionCreditCreditFilter
}

input TransactionComputeFilter {
	compute_type: IntFilter
	skipped_reason: IntFilter
	success: BooleanFilter
	msg_state_used: BooleanFilter
	account_activated: BooleanFilter
	gas_fees: IntFilter
	gas_used: IntFilter
	gas_limit: IntFilter
	gas_credit: IntFilter
	mode: IntFilter
	exit_code: IntFilter
	exit_arg: IntFilter
	vm_steps: IntFilter
	vm_init_state_hash: StringFilter
	vm_final_state_hash: StringFilter
}

input TransactionActionFilter {
	success: BooleanFilter
	valid: BooleanFilter
	no_funds: BooleanFilter
	status_change: IntFilter
	total_fwd_fees: IntFilter
	total_action_fees: IntFilter
	result_code: IntFilter
	result_arg: IntFilter
	tot_actions: IntFilter
	spec_actions: IntFilter
	skipped_actions: IntFilter
	msgs_created: IntFilter
	action_list_hash: StringFilter
	total_msg_size_cells: IntFilter
	total_msg_size_bits: IntFilter
}

input TransactionBounceFilter {
	bounce_type: IntFilter
	msg_size_cells: IntFilter
	msg_size_bits: IntFilter
	req_fwd_fees: IntFilter
	msg_fees: IntFilter
	fwd_fees: IntFilter
}

input TransactionSplitInfoFilter {
	cur_shard_pfx_len: IntFilter
	acc_split_depth: IntFilter
	this_addr: StringFilter
	sibling_addr: StringFilter
}

input TransactionFilter {
	id: StringFilter
	tr_type: IntFilter
	status: IntFilter
	block_id: StringFilter
	account_addr: StringFilter
	lt: IntFilter
	prev_trans_hash: StringFilter
	prev_trans_lt: IntFilter
	now: IntFilter
	outmsg_cnt: IntFilter
	orig_status: IntFilter
	end_status: IntFilter
	in_msg: StringFilter
	out_msgs: StringArrayFilter
	total_fees: TransactionTotalFeesFilter
	old_hash: StringFilter
	new_hash: StringFilter
	credit_first: BooleanFilter
	storage: TransactionStorageFilter
	credit: TransactionCreditFilter
	compute: TransactionComputeFilter
	action: TransactionActionFilter
	bounce: TransactionBounceFilter
	aborted: BooleanFilter
	destroyed: BooleanFilter
	tt: StringFilter
	split_info: TransactionSplitInfoFilter
	prepare_transaction: StringFilter
	installed: BooleanFilter
}

enum QueryOrderByDirection {
    ASC
    DESC
}

input QueryOrderBy {
    path: String
    direction: QueryOrderByDirection
}

type Query {
	messages(filter: MessageFilter, orderBy: [QueryOrderBy], limit: Int): [Message]
	blocks(filter: BlockFilter, orderBy: [QueryOrderBy], limit: Int): [Block]
	accounts(filter: AccountFilter, orderBy: [QueryOrderBy], limit: Int): [Account]
	transactions(filter: TransactionFilter, orderBy: [QueryOrderBy], limit: Int): [Transaction]
    select(query: String!, bindVarsJson: String!): String!
}

type Subscription {
	messages(filter: MessageFilter): Message
	blocks(filter: BlockFilter): Block
	accounts(filter: AccountFilter): Account
	transactions(filter: TransactionFilter): Transaction
}
