input StringFilter {
	eq: String
	ne: String
	gt: String
	lt: String
	ge: String
	le: String
	in: [String]
	notIn: [String]
}

input BooleanFilter {
	eq: Boolean
	ne: Boolean
	gt: Boolean
	lt: Boolean
	ge: Boolean
	le: Boolean
	in: [Boolean]
	notIn: [Boolean]
}

input IntFilter {
	eq: Int
	ne: Int
	gt: Int
	lt: Int
	ge: Int
	le: Int
	in: [Int]
	notIn: [Int]
}

input FloatFilter {
	eq: Float
	ne: Float
	gt: Float
	lt: Float
	ge: Float
	le: Float
	in: [Float]
	notIn: [Float]
}

enum InMsgTypeEnum {
    External
    Ihr
    Immediately
    Final
    Transit
    DiscardedFinal
    DiscardedTransit
}

enum OutMsgTypeEnum {
    External
    Immediately
    OutMsgNew
    Transit
    DequeueImmediately
    Dequeue
    TransitRequired
    None
}

enum MessageTypeEnum {
    Internal
    ExtIn
    ExtOut
}

enum MessageProcessingStatusEnum {
    Unknown
    Queued
    Processing
    Preliminary
    Proposed
    Finalized
    Refused
    Transiting
}

enum BlockProcessingStatusEnum {
    Unknown
    Proposed
    Finalized
    Refused
}

enum SplitTypeEnum {
    None
    Split
    Merge
}

enum AccountTypeEnum {
    Uninit
    Active
    Frozen
}

enum TransactionTypeEnum {
    Ordinary
    Storage
    Tick
    Tock
    SplitPrepare
    SplitInstall
    MergePrepare
    MergeInstall
}

enum TransactionProcessingStatusEnum {
    Unknown
    Preliminary
    Proposed
    Finalized
    Refused
}

enum AccountStatusEnum {
    Uninit
    Active
    Frozen
    NonExist
}

enum AccountStatusChangeEnum {
    Unchanged
    Frozen
    Deleted
}

enum ComputeTypeEnum {
    Skipped
    Vm
}

enum SkipReasonEnum {
    NoState
    BadState
    NoGas
}

enum BounceTypeEnum {
    NegFunds
    NoFunds
    Ok
}

type OtherCurrency {
	currency: Float
	value: String
}

type ExtBlkRef {
	end_lt: String
	seq_no: Float
	root_hash: String
	file_hash: String
}

type MsgEnvelope {
	msg_id: String
	next_addr: String
	cur_addr: String
	fwd_fee_remaining: String
}

type InMsg {
	"""
	- 0 – external
	- 1 – ihr
	- 2 – immediately
	- 3 – final
	- 4 – transit
	- 5 – discardedFinal
	- 6 – discardedTransit
	"""
	msg_type: Int
	msg_type_name: InMsgTypeEnum
	msg: String
	transaction: String
	ihr_fee: String
	proof_created: String
	in_msg: MsgEnvelope
	fwd_fee: String
	out_msg: MsgEnvelope
	transit_fee: String
	transaction_id: String
	proof_delivered: String
}

type OutMsg {
	"""
	- 0 – external
	- 1 – immediately
	- 2 – outMsgNew
	- 3 – transit
	- 4 – dequeueImmediately
	- 5 – dequeue
	- 6 – transitRequired
	- -1 – none
	"""
	msg_type: Int
	msg_type_name: OutMsgTypeEnum
	msg: String
	transaction: String
	out_msg: MsgEnvelope
	reimport: InMsg
	imported: InMsg
	import_block_lt: String
}

"TON Message"
type Message {
	id: String
	"""
	Message type
	- 0 – internal
	- 1 – extIn
	- 2 – extOut
	"""
	msg_type: Int
	msg_type_name: MessageTypeEnum
	"""
	Internal processing status
	- 0 – unknown
	- 1 – queued
	- 2 – processing
	- 3 – preliminary
	- 4 – proposed
	- 5 – finalized
	- 6 – refused
	- 7 – transiting
	"""
	status: Int
	status_name: MessageProcessingStatusEnum
	"Block to which this message belongs"
	block_id: String
	body: String
	"Used in deploy message for special contracts in masterchain"
	split_depth: Int
	"Used in deploy message for special contracts in masterchain"
	tick: Boolean
	"Used in deploy message for special contracts in masterchain"
	tock: Boolean
	"Represents contract code in deploy messages"
	code: String
	"Represents initial data for a contract in deploy messages"
	data: String
	"Represents contract library in deploy messages"
	library: String
	"Source address"
	src: String
	"Destination address"
	dst: String
	"Logical creation time automatically set by the generating transaction"
	created_lt: String
	"Creation unixtime automatically set by the generating transaction. The creation unixtime equals the creation unixtime of the block containing the generating transaction."
	created_at: Float
	"Not described in spec"
	ihr_disabled: Boolean
	"This value is subtracted from the value attached to the message and awarded to the validators of the destination shardchain if they include the message by the IHR mechanism."
	ihr_fee: String
	"Original total forwarding fee paid for using the HR mechanism; it is automatically computed from some configuration parameters and the size of the message at the time the message is generated."
	fwd_fee: String
	"Not described in spec"
	import_fee: String
	"Bounce flag. If the transaction has been aborted, and the inbound message has its bounce flag set, then it is “bounced” by automatically generating an outbound message (with the bounce flag clear) to its original sender."
	bounce: Boolean
	"Bounced flag. If the transaction has been aborted, and the inbound message has its bounce flag set, then it is “bounced” by automatically generating an outbound message (with the bounce flag clear) to its original sender."
	bounced: Boolean
	"Internal message may bear some value in Grams"
	value: String
	"Internal message may bear some value in other currencies"
	value_other: [OtherCurrency]
	proof: String
	boc: String
}

type BlockValueFlow {
	to_next_blk: String
	to_next_blk_other: [OtherCurrency]
	exported: String
	exported_other: [OtherCurrency]
	fees_collected: String
	fees_collected_other: [OtherCurrency]
	created: String
	created_other: [OtherCurrency]
	imported: String
	imported_other: [OtherCurrency]
	from_prev_blk: String
	from_prev_blk_other: [OtherCurrency]
	minted: String
	minted_other: [OtherCurrency]
	fees_imported: String
	fees_imported_other: [OtherCurrency]
}

type BlockAccountBlocksStateUpdate {
	old_hash: String
	new_hash: String
}

type BlockAccountBlocks {
	account_addr: String
	transactions: [String]
	state_update: BlockAccountBlocksStateUpdate
	tr_count: Int
}

type BlockStateUpdate {
	new: String
	new_hash: String
	new_depth: Int
	old: String
	old_hash: String
	old_depth: Int
}

type BlockMasterShardHashesDescr {
	seq_no: Float
	reg_mc_seqno: Float
	start_lt: String
	end_lt: String
	root_hash: String
	file_hash: String
	before_split: Boolean
	before_merge: Boolean
	want_split: Boolean
	want_merge: Boolean
	nx_cc_updated: Boolean
	flags: Int
	next_catchain_seqno: Float
	next_validator_shard: String
	min_ref_mc_seqno: Float
	gen_utime: Float
	"""
	- 0 – none
	- 2 – split
	- 3 – merge
	"""
	split_type: Int
	split_type_name: SplitTypeEnum
	split: Float
	fees_collected: String
	fees_collected_other: [OtherCurrency]
	funds_created: String
	funds_created_other: [OtherCurrency]
}

type BlockMasterShardHashes {
	workchain_id: Int
	shard: String
	descr: BlockMasterShardHashesDescr
}

type BlockMasterShardFees {
	workchain_id: Int
	shard: String
	fees: String
	fees_other: [OtherCurrency]
	create: String
	create_other: [OtherCurrency]
}

type BlockMasterPrevBlkSignatures {
	node_id: String
	r: String
	s: String
}

type BlockMaster {
	shard_hashes: [BlockMasterShardHashes]
	shard_fees: [BlockMasterShardFees]
	recover_create_msg: InMsg
	prev_blk_signatures: [BlockMasterPrevBlkSignatures]
}

type BlockSignaturesSignatures {
	"Validator ID"
	node_id: String
	"'R' part of signature"
	r: String
	"'s' part of signature"
	s: String
}

"Set of validator's signstures for the Block with cerrespond id"
type BlockSignatures {
	id: String
	"Array of signatures from block's validators"
	signatures: [BlockSignaturesSignatures]
}

"This is Block"
type Block {
	id: String
	"""
	- 0 – unknown
	- 1 – proposed
	- 2 – finalized
	- 3 – refused
	"""
	status: Int
	status_name: BlockProcessingStatusEnum
	global_id: Float
	want_split: Boolean
	seq_no: Float
	after_merge: Boolean
	gen_utime: Int
	gen_catchain_seqno: Float
	flags: Int
	master_ref: ExtBlkRef
	prev_ref: ExtBlkRef
	prev_alt_ref: ExtBlkRef
	prev_vert_ref: ExtBlkRef
	prev_vert_alt_ref: ExtBlkRef
	version: Float
	gen_validator_list_hash_short: Float
	before_split: Boolean
	after_split: Boolean
	want_merge: Boolean
	vert_seq_no: Float
	start_lt: String
	end_lt: String
	workchain_id: Int
	shard: String
	min_ref_mc_seqno: Float
	value_flow: BlockValueFlow
	in_msg_descr: [InMsg]
	rand_seed: String
	out_msg_descr: [OutMsg]
	account_blocks: [BlockAccountBlocks]
	state_update: BlockStateUpdate
	master: BlockMaster
	signatures: BlockSignatures
}

"TON Account"
type Account {
	id: String
	"""
	Current status of the account
	- 0 – uninit
	- 1 – active
	- 2 – frozen
	"""
	acc_type: Int
	acc_type_name: AccountTypeEnum
	"Contains either the unixtime of the most recent storage payment collected (usually this is the unixtime of the most recent transaction), or the unixtime when the account was created (again, by a transaction)"
	last_paid: Float
	"If present, accumulates the storage payments that could not be exacted from the balance of the account, represented by a strictly positive amount of nanograms; it can be present only for uninitialized or frozen accounts that have a balance of zero Grams (but may have non-zero balances in other cryptocurrencies). When due_payment becomes larger than the value of a configurable parameter of the blockchain, the account is destroyed altogether, and its balance, if any, is transferred to the zero account."
	due_payment: String
	last_trans_lt: String
	balance: String
	balance_other: [OtherCurrency]
	"Is present and non-zero only in instances of large smart contracts."
	split_depth: Int
	"May be present only in the masterchain—and within the masterchain, only in some fundamental smart contracts required for the whole system to function."
	tick: Boolean
	"May be present only in the masterchain—and within the masterchain, only in some fundamental smart contracts required for the whole system to function."
	tock: Boolean
	"If present, contains smart-contract code encoded with in base64"
	code: String
	"If present, contains smart-contract data encoded with in base64"
	data: String
	"If present, contains library code used in smart-contract"
	library: String
	proof: String
	boc: String
}

type TransactionStorage {
	storage_fees_collected: String
	storage_fees_due: String
	"""
	- 0 – unchanged
	- 1 – frozen
	- 2 – deleted
	"""
	status_change: Int
	status_change_name: AccountStatusChangeEnum
}

type TransactionCredit {
	due_fees_collected: String
	credit: String
	credit_other: [OtherCurrency]
}

type TransactionCompute {
	"""
	- 0 – skipped
	- 1 – vm
	"""
	compute_type: Int
	compute_type_name: ComputeTypeEnum
	"""
	- 0 – noState
	- 1 – badState
	- 2 – noGas
	"""
	skipped_reason: Int
	skipped_reason_name: SkipReasonEnum
	success: Boolean
	msg_state_used: Boolean
	account_activated: Boolean
	gas_fees: String
	gas_used: String
	gas_limit: String
	gas_credit: Int
	mode: Int
	exit_code: Int
	exit_arg: Int
	vm_steps: Float
	vm_init_state_hash: String
	vm_final_state_hash: String
}

type TransactionAction {
	success: Boolean
	valid: Boolean
	no_funds: Boolean
	"""
	- 0 – unchanged
	- 1 – frozen
	- 2 – deleted
	"""
	status_change: Int
	status_change_name: AccountStatusChangeEnum
	total_fwd_fees: String
	total_action_fees: String
	result_code: Int
	result_arg: Int
	tot_actions: Int
	spec_actions: Int
	skipped_actions: Int
	msgs_created: Int
	action_list_hash: String
	total_msg_size_cells: Float
	total_msg_size_bits: Float
}

type TransactionBounce {
	"""
	- 0 – negFunds
	- 1 – noFunds
	- 2 – ok
	"""
	bounce_type: Int
	bounce_type_name: BounceTypeEnum
	msg_size_cells: Float
	msg_size_bits: Float
	req_fwd_fees: String
	msg_fees: String
	fwd_fees: String
}

type TransactionSplitInfo {
	cur_shard_pfx_len: Int
	acc_split_depth: Int
	this_addr: String
	sibling_addr: String
}

"TON Transaction"
type Transaction {
	id: String
	"""
	- 0 – ordinary
	- 1 – storage
	- 2 – tick
	- 3 – tock
	- 4 – splitPrepare
	- 5 – splitInstall
	- 6 – mergePrepare
	- 7 – mergeInstall
	"""
	tr_type: Int
	tr_type_name: TransactionTypeEnum
	"""
	- 0 – unknown
	- 1 – preliminary
	- 2 – proposed
	- 3 – finalized
	- 4 – refused
	"""
	status: Int
	status_name: TransactionProcessingStatusEnum
	block_id: String
	account_addr: String
	lt: String
	prev_trans_hash: String
	prev_trans_lt: String
	now: Float
	outmsg_cnt: Int
	"""
	- 0 – uninit
	- 1 – active
	- 2 – frozen
	- 3 – nonExist
	"""
	orig_status: Int
	orig_status_name: AccountStatusEnum
	"""
	- 0 – uninit
	- 1 – active
	- 2 – frozen
	- 3 – nonExist
	"""
	end_status: Int
	end_status_name: AccountStatusEnum
	in_msg: String
	in_message: Message
	out_msgs: [String]
	out_messages: [Message]
	total_fees: String
	total_fees_other: [OtherCurrency]
	old_hash: String
	new_hash: String
	credit_first: Boolean
	storage: TransactionStorage
	credit: TransactionCredit
	compute: TransactionCompute
	action: TransactionAction
	bounce: TransactionBounce
	aborted: Boolean
	destroyed: Boolean
	tt: String
	split_info: TransactionSplitInfo
	prepare_transaction: String
	installed: Boolean
	proof: String
	boc: String
}

input OtherCurrencyFilter {
	currency: FloatFilter
	value: StringFilter
}

input ExtBlkRefFilter {
	end_lt: StringFilter
	seq_no: FloatFilter
	root_hash: StringFilter
	file_hash: StringFilter
}

input MsgEnvelopeFilter {
	msg_id: StringFilter
	next_addr: StringFilter
	cur_addr: StringFilter
	fwd_fee_remaining: StringFilter
}

input InMsgTypeEnumFilter {
	eq: InMsgTypeEnum
	ne: InMsgTypeEnum
	gt: InMsgTypeEnum
	lt: InMsgTypeEnum
	ge: InMsgTypeEnum
	le: InMsgTypeEnum
	in: [InMsgTypeEnum]
	notIn: [InMsgTypeEnum]
}

input InMsgFilter {
	"""
	- 0 – external
	- 1 – ihr
	- 2 – immediately
	- 3 – final
	- 4 – transit
	- 5 – discardedFinal
	- 6 – discardedTransit
	"""
	msg_type: IntFilter
	msg_type_name: InMsgTypeEnumFilter
	msg: StringFilter
	transaction: StringFilter
	ihr_fee: StringFilter
	proof_created: StringFilter
	in_msg: MsgEnvelopeFilter
	fwd_fee: StringFilter
	out_msg: MsgEnvelopeFilter
	transit_fee: StringFilter
	transaction_id: StringFilter
	proof_delivered: StringFilter
}

input OutMsgTypeEnumFilter {
	eq: OutMsgTypeEnum
	ne: OutMsgTypeEnum
	gt: OutMsgTypeEnum
	lt: OutMsgTypeEnum
	ge: OutMsgTypeEnum
	le: OutMsgTypeEnum
	in: [OutMsgTypeEnum]
	notIn: [OutMsgTypeEnum]
}

input OutMsgFilter {
	"""
	- 0 – external
	- 1 – immediately
	- 2 – outMsgNew
	- 3 – transit
	- 4 – dequeueImmediately
	- 5 – dequeue
	- 6 – transitRequired
	- -1 – none
	"""
	msg_type: IntFilter
	msg_type_name: OutMsgTypeEnumFilter
	msg: StringFilter
	transaction: StringFilter
	out_msg: MsgEnvelopeFilter
	reimport: InMsgFilter
	imported: InMsgFilter
	import_block_lt: StringFilter
}

input OtherCurrencyArrayFilter {
	any: OtherCurrencyFilter
	all: OtherCurrencyFilter
}

input MessageTypeEnumFilter {
	eq: MessageTypeEnum
	ne: MessageTypeEnum
	gt: MessageTypeEnum
	lt: MessageTypeEnum
	ge: MessageTypeEnum
	le: MessageTypeEnum
	in: [MessageTypeEnum]
	notIn: [MessageTypeEnum]
}

input MessageProcessingStatusEnumFilter {
	eq: MessageProcessingStatusEnum
	ne: MessageProcessingStatusEnum
	gt: MessageProcessingStatusEnum
	lt: MessageProcessingStatusEnum
	ge: MessageProcessingStatusEnum
	le: MessageProcessingStatusEnum
	in: [MessageProcessingStatusEnum]
	notIn: [MessageProcessingStatusEnum]
}

"TON Message"
input MessageFilter {
	id: StringFilter
	"""
	Message type
	- 0 – internal
	- 1 – extIn
	- 2 – extOut
	"""
	msg_type: IntFilter
	msg_type_name: MessageTypeEnumFilter
	"""
	Internal processing status
	- 0 – unknown
	- 1 – queued
	- 2 – processing
	- 3 – preliminary
	- 4 – proposed
	- 5 – finalized
	- 6 – refused
	- 7 – transiting
	"""
	status: IntFilter
	status_name: MessageProcessingStatusEnumFilter
	"Block to which this message belongs"
	block_id: StringFilter
	body: StringFilter
	"Used in deploy message for special contracts in masterchain"
	split_depth: IntFilter
	"Used in deploy message for special contracts in masterchain"
	tick: BooleanFilter
	"Used in deploy message for special contracts in masterchain"
	tock: BooleanFilter
	"Represents contract code in deploy messages"
	code: StringFilter
	"Represents initial data for a contract in deploy messages"
	data: StringFilter
	"Represents contract library in deploy messages"
	library: StringFilter
	"Source address"
	src: StringFilter
	"Destination address"
	dst: StringFilter
	"Logical creation time automatically set by the generating transaction"
	created_lt: StringFilter
	"Creation unixtime automatically set by the generating transaction. The creation unixtime equals the creation unixtime of the block containing the generating transaction."
	created_at: FloatFilter
	"Not described in spec"
	ihr_disabled: BooleanFilter
	"This value is subtracted from the value attached to the message and awarded to the validators of the destination shardchain if they include the message by the IHR mechanism."
	ihr_fee: StringFilter
	"Original total forwarding fee paid for using the HR mechanism; it is automatically computed from some configuration parameters and the size of the message at the time the message is generated."
	fwd_fee: StringFilter
	"Not described in spec"
	import_fee: StringFilter
	"Bounce flag. If the transaction has been aborted, and the inbound message has its bounce flag set, then it is “bounced” by automatically generating an outbound message (with the bounce flag clear) to its original sender."
	bounce: BooleanFilter
	"Bounced flag. If the transaction has been aborted, and the inbound message has its bounce flag set, then it is “bounced” by automatically generating an outbound message (with the bounce flag clear) to its original sender."
	bounced: BooleanFilter
	"Internal message may bear some value in Grams"
	value: StringFilter
	"Internal message may bear some value in other currencies"
	value_other: OtherCurrencyArrayFilter
	proof: StringFilter
	boc: StringFilter
}

input BlockValueFlowFilter {
	to_next_blk: StringFilter
	to_next_blk_other: OtherCurrencyArrayFilter
	exported: StringFilter
	exported_other: OtherCurrencyArrayFilter
	fees_collected: StringFilter
	fees_collected_other: OtherCurrencyArrayFilter
	created: StringFilter
	created_other: OtherCurrencyArrayFilter
	imported: StringFilter
	imported_other: OtherCurrencyArrayFilter
	from_prev_blk: StringFilter
	from_prev_blk_other: OtherCurrencyArrayFilter
	minted: StringFilter
	minted_other: OtherCurrencyArrayFilter
	fees_imported: StringFilter
	fees_imported_other: OtherCurrencyArrayFilter
}

input BlockAccountBlocksStateUpdateFilter {
	old_hash: StringFilter
	new_hash: StringFilter
}

input StringArrayFilter {
	any: StringFilter
	all: StringFilter
}

input BlockAccountBlocksFilter {
	account_addr: StringFilter
	transactions: StringArrayFilter
	state_update: BlockAccountBlocksStateUpdateFilter
	tr_count: IntFilter
}

input BlockStateUpdateFilter {
	new: StringFilter
	new_hash: StringFilter
	new_depth: IntFilter
	old: StringFilter
	old_hash: StringFilter
	old_depth: IntFilter
}

input SplitTypeEnumFilter {
	eq: SplitTypeEnum
	ne: SplitTypeEnum
	gt: SplitTypeEnum
	lt: SplitTypeEnum
	ge: SplitTypeEnum
	le: SplitTypeEnum
	in: [SplitTypeEnum]
	notIn: [SplitTypeEnum]
}

input BlockMasterShardHashesDescrFilter {
	seq_no: FloatFilter
	reg_mc_seqno: FloatFilter
	start_lt: StringFilter
	end_lt: StringFilter
	root_hash: StringFilter
	file_hash: StringFilter
	before_split: BooleanFilter
	before_merge: BooleanFilter
	want_split: BooleanFilter
	want_merge: BooleanFilter
	nx_cc_updated: BooleanFilter
	flags: IntFilter
	next_catchain_seqno: FloatFilter
	next_validator_shard: StringFilter
	min_ref_mc_seqno: FloatFilter
	gen_utime: FloatFilter
	"""
	- 0 – none
	- 2 – split
	- 3 – merge
	"""
	split_type: IntFilter
	split_type_name: SplitTypeEnumFilter
	split: FloatFilter
	fees_collected: StringFilter
	fees_collected_other: OtherCurrencyArrayFilter
	funds_created: StringFilter
	funds_created_other: OtherCurrencyArrayFilter
}

input BlockMasterShardHashesFilter {
	workchain_id: IntFilter
	shard: StringFilter
	descr: BlockMasterShardHashesDescrFilter
}

input BlockMasterShardFeesFilter {
	workchain_id: IntFilter
	shard: StringFilter
	fees: StringFilter
	fees_other: OtherCurrencyArrayFilter
	create: StringFilter
	create_other: OtherCurrencyArrayFilter
}

input BlockMasterPrevBlkSignaturesFilter {
	node_id: StringFilter
	r: StringFilter
	s: StringFilter
}

input BlockMasterShardHashesArrayFilter {
	any: BlockMasterShardHashesFilter
	all: BlockMasterShardHashesFilter
}

input BlockMasterShardFeesArrayFilter {
	any: BlockMasterShardFeesFilter
	all: BlockMasterShardFeesFilter
}

input BlockMasterPrevBlkSignaturesArrayFilter {
	any: BlockMasterPrevBlkSignaturesFilter
	all: BlockMasterPrevBlkSignaturesFilter
}

input BlockMasterFilter {
	shard_hashes: BlockMasterShardHashesArrayFilter
	shard_fees: BlockMasterShardFeesArrayFilter
	recover_create_msg: InMsgFilter
	prev_blk_signatures: BlockMasterPrevBlkSignaturesArrayFilter
}

input BlockSignaturesSignaturesFilter {
	"Validator ID"
	node_id: StringFilter
	"'R' part of signature"
	r: StringFilter
	"'s' part of signature"
	s: StringFilter
}

input BlockSignaturesSignaturesArrayFilter {
	any: BlockSignaturesSignaturesFilter
	all: BlockSignaturesSignaturesFilter
}

"Set of validator's signstures for the Block with cerrespond id"
input BlockSignaturesFilter {
	id: StringFilter
	"Array of signatures from block's validators"
	signatures: BlockSignaturesSignaturesArrayFilter
}

input InMsgArrayFilter {
	any: InMsgFilter
	all: InMsgFilter
}

input OutMsgArrayFilter {
	any: OutMsgFilter
	all: OutMsgFilter
}

input BlockAccountBlocksArrayFilter {
	any: BlockAccountBlocksFilter
	all: BlockAccountBlocksFilter
}

input BlockProcessingStatusEnumFilter {
	eq: BlockProcessingStatusEnum
	ne: BlockProcessingStatusEnum
	gt: BlockProcessingStatusEnum
	lt: BlockProcessingStatusEnum
	ge: BlockProcessingStatusEnum
	le: BlockProcessingStatusEnum
	in: [BlockProcessingStatusEnum]
	notIn: [BlockProcessingStatusEnum]
}

"This is Block"
input BlockFilter {
	id: StringFilter
	"""
	- 0 – unknown
	- 1 – proposed
	- 2 – finalized
	- 3 – refused
	"""
	status: IntFilter
	status_name: BlockProcessingStatusEnumFilter
	global_id: FloatFilter
	want_split: BooleanFilter
	seq_no: FloatFilter
	after_merge: BooleanFilter
	gen_utime: IntFilter
	gen_catchain_seqno: FloatFilter
	flags: IntFilter
	master_ref: ExtBlkRefFilter
	prev_ref: ExtBlkRefFilter
	prev_alt_ref: ExtBlkRefFilter
	prev_vert_ref: ExtBlkRefFilter
	prev_vert_alt_ref: ExtBlkRefFilter
	version: FloatFilter
	gen_validator_list_hash_short: FloatFilter
	before_split: BooleanFilter
	after_split: BooleanFilter
	want_merge: BooleanFilter
	vert_seq_no: FloatFilter
	start_lt: StringFilter
	end_lt: StringFilter
	workchain_id: IntFilter
	shard: StringFilter
	min_ref_mc_seqno: FloatFilter
	value_flow: BlockValueFlowFilter
	in_msg_descr: InMsgArrayFilter
	rand_seed: StringFilter
	out_msg_descr: OutMsgArrayFilter
	account_blocks: BlockAccountBlocksArrayFilter
	state_update: BlockStateUpdateFilter
	master: BlockMasterFilter
	signatures: BlockSignaturesFilter
}

input AccountTypeEnumFilter {
	eq: AccountTypeEnum
	ne: AccountTypeEnum
	gt: AccountTypeEnum
	lt: AccountTypeEnum
	ge: AccountTypeEnum
	le: AccountTypeEnum
	in: [AccountTypeEnum]
	notIn: [AccountTypeEnum]
}

"TON Account"
input AccountFilter {
	id: StringFilter
	"""
	Current status of the account
	- 0 – uninit
	- 1 – active
	- 2 – frozen
	"""
	acc_type: IntFilter
	acc_type_name: AccountTypeEnumFilter
	"Contains either the unixtime of the most recent storage payment collected (usually this is the unixtime of the most recent transaction), or the unixtime when the account was created (again, by a transaction)"
	last_paid: FloatFilter
	"If present, accumulates the storage payments that could not be exacted from the balance of the account, represented by a strictly positive amount of nanograms; it can be present only for uninitialized or frozen accounts that have a balance of zero Grams (but may have non-zero balances in other cryptocurrencies). When due_payment becomes larger than the value of a configurable parameter of the blockchain, the account is destroyed altogether, and its balance, if any, is transferred to the zero account."
	due_payment: StringFilter
	last_trans_lt: StringFilter
	balance: StringFilter
	balance_other: OtherCurrencyArrayFilter
	"Is present and non-zero only in instances of large smart contracts."
	split_depth: IntFilter
	"May be present only in the masterchain—and within the masterchain, only in some fundamental smart contracts required for the whole system to function."
	tick: BooleanFilter
	"May be present only in the masterchain—and within the masterchain, only in some fundamental smart contracts required for the whole system to function."
	tock: BooleanFilter
	"If present, contains smart-contract code encoded with in base64"
	code: StringFilter
	"If present, contains smart-contract data encoded with in base64"
	data: StringFilter
	"If present, contains library code used in smart-contract"
	library: StringFilter
	proof: StringFilter
	boc: StringFilter
}

input AccountStatusChangeEnumFilter {
	eq: AccountStatusChangeEnum
	ne: AccountStatusChangeEnum
	gt: AccountStatusChangeEnum
	lt: AccountStatusChangeEnum
	ge: AccountStatusChangeEnum
	le: AccountStatusChangeEnum
	in: [AccountStatusChangeEnum]
	notIn: [AccountStatusChangeEnum]
}

input TransactionStorageFilter {
	storage_fees_collected: StringFilter
	storage_fees_due: StringFilter
	"""
	- 0 – unchanged
	- 1 – frozen
	- 2 – deleted
	"""
	status_change: IntFilter
	status_change_name: AccountStatusChangeEnumFilter
}

input TransactionCreditFilter {
	due_fees_collected: StringFilter
	credit: StringFilter
	credit_other: OtherCurrencyArrayFilter
}

input ComputeTypeEnumFilter {
	eq: ComputeTypeEnum
	ne: ComputeTypeEnum
	gt: ComputeTypeEnum
	lt: ComputeTypeEnum
	ge: ComputeTypeEnum
	le: ComputeTypeEnum
	in: [ComputeTypeEnum]
	notIn: [ComputeTypeEnum]
}

input SkipReasonEnumFilter {
	eq: SkipReasonEnum
	ne: SkipReasonEnum
	gt: SkipReasonEnum
	lt: SkipReasonEnum
	ge: SkipReasonEnum
	le: SkipReasonEnum
	in: [SkipReasonEnum]
	notIn: [SkipReasonEnum]
}

input TransactionComputeFilter {
	"""
	- 0 – skipped
	- 1 – vm
	"""
	compute_type: IntFilter
	compute_type_name: ComputeTypeEnumFilter
	"""
	- 0 – noState
	- 1 – badState
	- 2 – noGas
	"""
	skipped_reason: IntFilter
	skipped_reason_name: SkipReasonEnumFilter
	success: BooleanFilter
	msg_state_used: BooleanFilter
	account_activated: BooleanFilter
	gas_fees: StringFilter
	gas_used: StringFilter
	gas_limit: StringFilter
	gas_credit: IntFilter
	mode: IntFilter
	exit_code: IntFilter
	exit_arg: IntFilter
	vm_steps: FloatFilter
	vm_init_state_hash: StringFilter
	vm_final_state_hash: StringFilter
}

input TransactionActionFilter {
	success: BooleanFilter
	valid: BooleanFilter
	no_funds: BooleanFilter
	"""
	- 0 – unchanged
	- 1 – frozen
	- 2 – deleted
	"""
	status_change: IntFilter
	status_change_name: AccountStatusChangeEnumFilter
	total_fwd_fees: StringFilter
	total_action_fees: StringFilter
	result_code: IntFilter
	result_arg: IntFilter
	tot_actions: IntFilter
	spec_actions: IntFilter
	skipped_actions: IntFilter
	msgs_created: IntFilter
	action_list_hash: StringFilter
	total_msg_size_cells: FloatFilter
	total_msg_size_bits: FloatFilter
}

input BounceTypeEnumFilter {
	eq: BounceTypeEnum
	ne: BounceTypeEnum
	gt: BounceTypeEnum
	lt: BounceTypeEnum
	ge: BounceTypeEnum
	le: BounceTypeEnum
	in: [BounceTypeEnum]
	notIn: [BounceTypeEnum]
}

input TransactionBounceFilter {
	"""
	- 0 – negFunds
	- 1 – noFunds
	- 2 – ok
	"""
	bounce_type: IntFilter
	bounce_type_name: BounceTypeEnumFilter
	msg_size_cells: FloatFilter
	msg_size_bits: FloatFilter
	req_fwd_fees: StringFilter
	msg_fees: StringFilter
	fwd_fees: StringFilter
}

input TransactionSplitInfoFilter {
	cur_shard_pfx_len: IntFilter
	acc_split_depth: IntFilter
	this_addr: StringFilter
	sibling_addr: StringFilter
}

input MessageArrayFilter {
	any: MessageFilter
	all: MessageFilter
}

input TransactionTypeEnumFilter {
	eq: TransactionTypeEnum
	ne: TransactionTypeEnum
	gt: TransactionTypeEnum
	lt: TransactionTypeEnum
	ge: TransactionTypeEnum
	le: TransactionTypeEnum
	in: [TransactionTypeEnum]
	notIn: [TransactionTypeEnum]
}

input TransactionProcessingStatusEnumFilter {
	eq: TransactionProcessingStatusEnum
	ne: TransactionProcessingStatusEnum
	gt: TransactionProcessingStatusEnum
	lt: TransactionProcessingStatusEnum
	ge: TransactionProcessingStatusEnum
	le: TransactionProcessingStatusEnum
	in: [TransactionProcessingStatusEnum]
	notIn: [TransactionProcessingStatusEnum]
}

input AccountStatusEnumFilter {
	eq: AccountStatusEnum
	ne: AccountStatusEnum
	gt: AccountStatusEnum
	lt: AccountStatusEnum
	ge: AccountStatusEnum
	le: AccountStatusEnum
	in: [AccountStatusEnum]
	notIn: [AccountStatusEnum]
}

"TON Transaction"
input TransactionFilter {
	id: StringFilter
	"""
	- 0 – ordinary
	- 1 – storage
	- 2 – tick
	- 3 – tock
	- 4 – splitPrepare
	- 5 – splitInstall
	- 6 – mergePrepare
	- 7 – mergeInstall
	"""
	tr_type: IntFilter
	tr_type_name: TransactionTypeEnumFilter
	"""
	- 0 – unknown
	- 1 – preliminary
	- 2 – proposed
	- 3 – finalized
	- 4 – refused
	"""
	status: IntFilter
	status_name: TransactionProcessingStatusEnumFilter
	block_id: StringFilter
	account_addr: StringFilter
	lt: StringFilter
	prev_trans_hash: StringFilter
	prev_trans_lt: StringFilter
	now: FloatFilter
	outmsg_cnt: IntFilter
	"""
	- 0 – uninit
	- 1 – active
	- 2 – frozen
	- 3 – nonExist
	"""
	orig_status: IntFilter
	orig_status_name: AccountStatusEnumFilter
	"""
	- 0 – uninit
	- 1 – active
	- 2 – frozen
	- 3 – nonExist
	"""
	end_status: IntFilter
	end_status_name: AccountStatusEnumFilter
	in_msg: StringFilter
	in_message: MessageFilter
	out_msgs: StringArrayFilter
	out_messages: MessageArrayFilter
	total_fees: StringFilter
	total_fees_other: OtherCurrencyArrayFilter
	old_hash: StringFilter
	new_hash: StringFilter
	credit_first: BooleanFilter
	storage: TransactionStorageFilter
	credit: TransactionCreditFilter
	compute: TransactionComputeFilter
	action: TransactionActionFilter
	bounce: TransactionBounceFilter
	aborted: BooleanFilter
	destroyed: BooleanFilter
	tt: StringFilter
	split_info: TransactionSplitInfoFilter
	prepare_transaction: StringFilter
	installed: BooleanFilter
	proof: StringFilter
	boc: StringFilter
}

"Specify sort order direction"
enum QueryOrderByDirection {
    "Documents will be sorted in ascended order (e.g. from A to Z)"
    ASC
    "Documents will be sorted in descendant order (e.g. from Z to A)"
    DESC
}


"""
Specify how to sort results.
You can sort documents in result set using more than one field.
"""
input QueryOrderBy {
    """
    Path to field which must be used as a sort criteria.
    If field resides deep in structure path items must be separated with dot (e.g. 'foo.bar.baz').
    """
    path: String
    "Sort order direction"
    direction: QueryOrderByDirection
}

type Query {
	messages(filter: MessageFilter, orderBy: [QueryOrderBy], limit: Int): [Message]
	blocks_signatures(filter: BlockSignaturesFilter, orderBy: [QueryOrderBy], limit: Int): [BlockSignatures]
	blocks(filter: BlockFilter, orderBy: [QueryOrderBy], limit: Int): [Block]
	accounts(filter: AccountFilter, orderBy: [QueryOrderBy], limit: Int): [Account]
	transactions(filter: TransactionFilter, orderBy: [QueryOrderBy], limit: Int): [Transaction]
}

type Subscription {
	messages(filter: MessageFilter): Message
	blocks_signatures(filter: BlockSignaturesFilter): BlockSignatures
	blocks(filter: BlockFilter): Block
	accounts(filter: AccountFilter): Account
	transactions(filter: TransactionFilter): Transaction
}
